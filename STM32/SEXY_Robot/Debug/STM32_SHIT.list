
STM32_SHIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800800c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d64  200000fc  08008108  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e60  08008108  00021e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f3a  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003610  00000000  00000000  000350a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  000386c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eab  00000000  00000000  000399f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191a2  00000000  00000000  0003a89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001660b  00000000  00000000  00053a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000917ed  00000000  00000000  0006a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005070  00000000  00000000  000fb838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001008a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f74 	.word	0x08007f74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007f74 	.word	0x08007f74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b090      	sub	sp, #64	; 0x40
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb59 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f823 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f93b 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 f911 	bl	800070c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f007 f82d 	bl	8007548 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80004ee:	f000 f8b9 	bl	8000664 <MX_TIM2_Init>
  MX_SPI1_Init();
 80004f2:	f000 f885 	bl	8000600 <MX_SPI1_Init>
//
//	  HAL_SPI_Receive(&hspi1, data, 15, 100);
//
//	  xprintf("RX: %.15s\n", data);

	  data[0] = 0xAB;
 80004f6:	23ab      	movs	r3, #171	; 0xab
 80004f8:	703b      	strb	r3, [r7, #0]
	  data[1] = 0xCD;
 80004fa:	23cd      	movs	r3, #205	; 0xcd
 80004fc:	707b      	strb	r3, [r7, #1]
	  HAL_SPI_Transmit(&hspi1, data, 2, 100);
 80004fe:	4639      	mov	r1, r7
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	2202      	movs	r2, #2
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <main+0x4c>)
 8000506:	f003 f884 	bl	8003612 <HAL_SPI_Transmit>

	  HAL_SPI_Transmit(&hspi1, "Hello, world!", 14, 100);
 800050a:	2364      	movs	r3, #100	; 0x64
 800050c:	220e      	movs	r2, #14
 800050e:	4905      	ldr	r1, [pc, #20]	; (8000524 <main+0x50>)
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x4c>)
 8000512:	f003 f87e 	bl	8003612 <HAL_SPI_Transmit>

	  HAL_Delay(100);
 8000516:	2064      	movs	r0, #100	; 0x64
 8000518:	f000 fbac 	bl	8000c74 <HAL_Delay>
  {
 800051c:	e7eb      	b.n	80004f6 <main+0x22>
 800051e:	bf00      	nop
 8000520:	20000118 	.word	0x20000118
 8000524:	08007f8c 	.word	0x08007f8c

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f007 fcf0 	bl	8007f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <SystemClock_Config+0xd0>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a22      	ldr	r2, [pc, #136]	; (80005fc <SystemClock_Config+0xd4>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000584:	2303      	movs	r3, #3
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a0:	2310      	movs	r3, #16
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 80005a4:	237b      	movs	r3, #123	; 0x7b
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fb73 	bl	8002ca0 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f910 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fdd6 	bl	8003190 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ea:	f000 f8fb 	bl	80007e4 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_SPI1_Init+0x5c>)
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_SPI1_Init+0x60>)
 8000608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_SPI1_Init+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_SPI1_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_SPI1_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_SPI1_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_SPI1_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_SPI1_Init+0x5c>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_SPI1_Init+0x5c>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SPI1_Init+0x5c>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_SPI1_Init+0x5c>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SPI1_Init+0x5c>)
 8000642:	220a      	movs	r2, #10
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_SPI1_Init+0x5c>)
 8000648:	f002 ff5a 	bl	8003500 <HAL_SPI_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000652:	f000 f8c7 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000118 	.word	0x20000118
 8000660:	40013000 	.word	0x40013000

08000664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2224      	movs	r2, #36	; 0x24
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 fc52 	bl	8007f1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_TIM2_Init+0xa4>)
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_TIM2_Init+0xa4>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_TIM2_Init+0xa4>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_TIM2_Init+0xa4>)
 8000696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800069a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_TIM2_Init+0xa4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM2_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_TIM2_Init+0xa4>)
 80006d4:	f003 face 	bl	8003c74 <HAL_TIM_Encoder_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006de:	f000 f881 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_TIM2_Init+0xa4>)
 80006f0:	f003 fbf2 	bl	8003ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006fa:	f000 f873 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	3730      	adds	r7, #48	; 0x30
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000230 	.word	0x20000230

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_DMA_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_DMA_Init+0x4c>)
 800071c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_DMA_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2038      	movs	r0, #56	; 0x38
 8000734:	f000 fb9d 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000738:	2038      	movs	r0, #56	; 0x38
 800073a:	f000 fbb6 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	203a      	movs	r0, #58	; 0x3a
 8000744:	f000 fb95 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000748:	203a      	movs	r0, #58	; 0x3a
 800074a:	f000 fbae 	bl	8000eaa <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x84>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x84>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_MspInit+0x4c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a5a      	ldr	r2, [pc, #360]	; (80009c8 <HAL_SPI_MspInit+0x188>)
 800085e:	4293      	cmp	r3, r2
 8000860:	f040 80ae 	bne.w	80009c0 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	4b58      	ldr	r3, [pc, #352]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 800086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086c:	4a57      	ldr	r2, [pc, #348]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 800086e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000872:	6453      	str	r3, [r2, #68]	; 0x44
 8000874:	4b55      	ldr	r3, [pc, #340]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b51      	ldr	r3, [pc, #324]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a50      	ldr	r2, [pc, #320]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b4e      	ldr	r3, [pc, #312]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a49      	ldr	r2, [pc, #292]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <HAL_SPI_MspInit+0x18c>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f003 0302 	and.w	r3, r3, #2
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c8:	2305      	movs	r3, #5
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	483f      	ldr	r0, [pc, #252]	; (80009d0 <HAL_SPI_MspInit+0x190>)
 80008d4:	f000 fe10 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80008d8:	2318      	movs	r3, #24
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e8:	2305      	movs	r3, #5
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4838      	ldr	r0, [pc, #224]	; (80009d4 <HAL_SPI_MspInit+0x194>)
 80008f4:	f000 fe00 	bl	80014f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 80008fa:	4a38      	ldr	r2, [pc, #224]	; (80009dc <HAL_SPI_MspInit+0x19c>)
 80008fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000900:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000904:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000918:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000938:	4827      	ldr	r0, [pc, #156]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 800093a:	f000 fad1 	bl	8000ee0 <HAL_DMA_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000944:	f7ff ff4e 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 800094c:	64da      	str	r2, [r3, #76]	; 0x4c
 800094e:	4a22      	ldr	r2, [pc, #136]	; (80009d8 <HAL_SPI_MspInit+0x198>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <HAL_SPI_MspInit+0x1a4>)
 8000958:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 800095c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000960:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000964:	2240      	movs	r2, #64	; 0x40
 8000966:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000974:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 8000996:	f000 faa3 	bl	8000ee0 <HAL_DMA_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 80009a0:	f7ff ff20 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 80009a8:	649a      	str	r2, [r3, #72]	; 0x48
 80009aa:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_SPI_MspInit+0x1a0>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2023      	movs	r0, #35	; 0x23
 80009b6:	f000 fa5c 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009ba:	2023      	movs	r0, #35	; 0x23
 80009bc:	f000 fa75 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40013000 	.word	0x40013000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	20000170 	.word	0x20000170
 80009dc:	40026410 	.word	0x40026410
 80009e0:	200001d0 	.word	0x200001d0
 80009e4:	40026440 	.word	0x40026440

080009e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a08:	d12b      	bne.n	8000a62 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a42:	2303      	movs	r3, #3
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a52:	2301      	movs	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000a5e:	f000 fd4b 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f8b8 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <SPI1_IRQHandler+0x10>)
 8000ace:	f002 fee3 	bl	8003898 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000118 	.word	0x20000118

08000adc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <DMA2_Stream0_IRQHandler+0x10>)
 8000ae2:	f000 facd 	bl	8001080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000170 	.word	0x20000170

08000af0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <DMA2_Stream2_IRQHandler+0x10>)
 8000af6:	f000 fac3 	bl	8001080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001d0 	.word	0x200001d0

08000b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <OTG_FS_IRQHandler+0x10>)
 8000b0a:	f000 ffbd 	bl	8001a88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000175c 	.word	0x2000175c

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f007 f9df 	bl	8007f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fcb1 	bl	80004d4 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000b80:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 8000b84:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000b88:	20001e60 	.word	0x20001e60

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f94f 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe14 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f967 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 f92f 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000278 	.word	0x20000278

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000278 	.word	0x20000278

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff3e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff31 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff feb6 	bl	8000c5c <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e099      	b.n	8001030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1c:	e00f      	b.n	8000f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f1e:	f7ff fe9d 	bl	8000c5c <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d908      	bls.n	8000f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e078      	b.n	8001030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1e8      	bne.n	8000f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_DMA_Init+0x158>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d107      	bne.n	8000fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f023 0307 	bic.w	r3, r3, #7
 8000fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d117      	bne.n	8001002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00e      	beq.n	8001002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fa0b 	bl	8001400 <DMA_CheckFifoParam>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ffe:	2301      	movs	r3, #1
 8001000:	e016      	b.n	8001030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f9c2 	bl	8001394 <DMA_CalcBaseAndBitshift>
 8001010:	4603      	mov	r3, r0
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001018:	223f      	movs	r2, #63	; 0x3f
 800101a:	409a      	lsls	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	f010803f 	.word	0xf010803f

0800103c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d004      	beq.n	800105a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00c      	b.n	8001074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2205      	movs	r2, #5
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800108c:	4b8e      	ldr	r3, [pc, #568]	; (80012c8 <HAL_DMA_IRQHandler+0x248>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a8e      	ldr	r2, [pc, #568]	; (80012cc <HAL_DMA_IRQHandler+0x24c>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0a9b      	lsrs	r3, r3, #10
 8001098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010aa:	2208      	movs	r2, #8
 80010ac:	409a      	lsls	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d01a      	beq.n	80010ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0204 	bic.w	r2, r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d8:	2208      	movs	r2, #8
 80010da:	409a      	lsls	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	f043 0201 	orr.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	2201      	movs	r2, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d012      	beq.n	8001122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110e:	2201      	movs	r2, #1
 8001110:	409a      	lsls	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111a:	f043 0202 	orr.w	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	2204      	movs	r2, #4
 8001128:	409a      	lsls	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d012      	beq.n	8001158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	2204      	movs	r2, #4
 8001146:	409a      	lsls	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	f043 0204 	orr.w	r2, r3, #4
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	2210      	movs	r2, #16
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d043      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d03c      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117a:	2210      	movs	r2, #16
 800117c:	409a      	lsls	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d018      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d108      	bne.n	80011b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d024      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
 80011ae:	e01f      	b.n	80011f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01b      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	4798      	blx	r3
 80011c0:	e016      	b.n	80011f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0208 	bic.w	r2, r2, #8
 80011de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	2220      	movs	r2, #32
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 808f 	beq.w	8001320 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8087 	beq.w	8001320 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2220      	movs	r2, #32
 8001218:	409a      	lsls	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b05      	cmp	r3, #5
 8001228:	d136      	bne.n	8001298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0216 	bic.w	r2, r2, #22
 8001238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <HAL_DMA_IRQHandler+0x1da>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0208 	bic.w	r2, r2, #8
 8001268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126e:	223f      	movs	r2, #63	; 0x3f
 8001270:	409a      	lsls	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800128a:	2b00      	cmp	r3, #0
 800128c:	d07e      	beq.n	800138c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
        }
        return;
 8001296:	e079      	b.n	800138c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01d      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d031      	beq.n	8001320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
 80012c4:	e02c      	b.n	8001320 <HAL_DMA_IRQHandler+0x2a0>
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000
 80012cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d023      	beq.n	8001320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4798      	blx	r3
 80012e0:	e01e      	b.n	8001320 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10f      	bne.n	8001310 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0210 	bic.w	r2, r2, #16
 80012fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	2b00      	cmp	r3, #0
 8001326:	d032      	beq.n	800138e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d022      	beq.n	800137a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2205      	movs	r2, #5
 8001338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3301      	adds	r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	d307      	bcc.n	8001368 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f2      	bne.n	800134c <HAL_DMA_IRQHandler+0x2cc>
 8001366:	e000      	b.n	800136a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001368:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
 800138a:	e000      	b.n	800138e <HAL_DMA_IRQHandler+0x30e>
        return;
 800138c:	bf00      	nop
    }
  }
}
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3b10      	subs	r3, #16
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <DMA_CalcBaseAndBitshift+0x64>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <DMA_CalcBaseAndBitshift+0x68>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d909      	bls.n	80013d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	1d1a      	adds	r2, r3, #4
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	659a      	str	r2, [r3, #88]	; 0x58
 80013d4:	e007      	b.n	80013e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013de:	f023 0303 	bic.w	r3, r3, #3
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	aaaaaaab 	.word	0xaaaaaaab
 80013fc:	08007ff4 	.word	0x08007ff4

08001400 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d11f      	bne.n	800145a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d856      	bhi.n	80014ce <DMA_CheckFifoParam+0xce>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <DMA_CheckFifoParam+0x28>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001439 	.word	0x08001439
 800142c:	0800144b 	.word	0x0800144b
 8001430:	08001439 	.word	0x08001439
 8001434:	080014cf 	.word	0x080014cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d046      	beq.n	80014d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001448:	e043      	b.n	80014d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001452:	d140      	bne.n	80014d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001458:	e03d      	b.n	80014d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001462:	d121      	bne.n	80014a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d837      	bhi.n	80014da <DMA_CheckFifoParam+0xda>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <DMA_CheckFifoParam+0x70>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	08001481 	.word	0x08001481
 8001474:	08001487 	.word	0x08001487
 8001478:	08001481 	.word	0x08001481
 800147c:	08001499 	.word	0x08001499
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
      break;
 8001484:	e030      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d025      	beq.n	80014de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001496:	e022      	b.n	80014de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014a0:	d11f      	bne.n	80014e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014a6:	e01c      	b.n	80014e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d903      	bls.n	80014b6 <DMA_CheckFifoParam+0xb6>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d003      	beq.n	80014bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014b4:	e018      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
      break;
 80014ba:	e015      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00e      	beq.n	80014e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
      break;
 80014cc:	e00b      	b.n	80014e6 <DMA_CheckFifoParam+0xe6>
      break;
 80014ce:	bf00      	nop
 80014d0:	e00a      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      break;
 80014d2:	bf00      	nop
 80014d4:	e008      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      break;
 80014d6:	bf00      	nop
 80014d8:	e006      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      break;
 80014da:	bf00      	nop
 80014dc:	e004      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      break;
 80014de:	bf00      	nop
 80014e0:	e002      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014e2:	bf00      	nop
 80014e4:	e000      	b.n	80014e8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e6:	bf00      	nop
    }
  } 
  
  return status; 
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e159      	b.n	80017c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8148 	bne.w	80017c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a2 	beq.w	80017c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a56      	ldr	r2, [pc, #344]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_GPIO_Init+0x2ec>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_GPIO_Init+0x2f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x202>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x2f4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x1fe>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <HAL_GPIO_Init+0x2f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x1f6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a45      	ldr	r2, [pc, #276]	; (80017f8 <HAL_GPIO_Init+0x300>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x1f2>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x2ec>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_GPIO_Init+0x304>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <HAL_GPIO_Init+0x304>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_GPIO_Init+0x304>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a24      	ldr	r2, [pc, #144]	; (80017fc <HAL_GPIO_Init+0x304>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <HAL_GPIO_Init+0x304>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_GPIO_Init+0x304>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_GPIO_Init+0x304>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_GPIO_Init+0x304>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f aea2 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e101      	b.n	8001a16 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f006 f86b 	bl	8007908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001840:	d102      	bne.n	8001848 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fcc8 	bl	80041e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7c1a      	ldrb	r2, [r3, #16]
 800185a:	f88d 2000 	strb.w	r2, [sp]
 800185e:	3304      	adds	r3, #4
 8001860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001862:	f002 fba7 	bl	8003fb4 <USB_CoreInit>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0ce      	b.n	8001a16 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fcc0 	bl	8004204 <USB_SetCurrentMode>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0bf      	b.n	8001a16 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e04a      	b.n	8001932 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	3315      	adds	r3, #21
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3314      	adds	r3, #20
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	b298      	uxth	r0, r3
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	332e      	adds	r3, #46	; 0x2e
 80018d8:	4602      	mov	r2, r0
 80018da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3318      	adds	r3, #24
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	331c      	adds	r3, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3320      	adds	r3, #32
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	3324      	adds	r3, #36	; 0x24
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	3301      	adds	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	429a      	cmp	r2, r3
 800193a:	d3af      	bcc.n	800189c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e044      	b.n	80019cc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	3301      	adds	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3b5      	bcc.n	8001942 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7c1a      	ldrb	r2, [r3, #16]
 80019de:	f88d 2000 	strb.w	r2, [sp]
 80019e2:	3304      	adds	r3, #4
 80019e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e6:	f002 fc59 	bl	800429c <USB_DevInit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e00c      	b.n	8001a16 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fc9d 	bl	800534e <USB_DevDisconnect>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_Start+0x1c>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e022      	b.n	8001a80 <HAL_PCD_Start+0x62>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fbaa 	bl	80041c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fc4b 	bl	800530c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b08d      	sub	sp, #52	; 0x34
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fd09 	bl	80054b6 <USB_GetMode>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 848c 	bne.w	80023c4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fc6d 	bl	8005390 <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8482 	beq.w	80023c2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fc5a 	bl	8005390 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f002 0202 	and.w	r2, r2, #2
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fc48 	bl	8005390 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d161      	bne.n	8001bce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0210 	bic.w	r2, r2, #16
 8001b18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 020f 	and.w	r2, r3, #15
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	3304      	adds	r3, #4
 8001b38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	0c5b      	lsrs	r3, r3, #17
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d124      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d035      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	6a38      	ldr	r0, [r7, #32]
 8001b66:	f003 fa7f 	bl	8005068 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b76:	441a      	add	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b88:	441a      	add	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	e016      	b.n	8001bbe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d110      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6a38      	ldr	r0, [r7, #32]
 8001ba8:	f003 fa5e 	bl	8005068 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb8:	441a      	add	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0210 	orr.w	r2, r2, #16
 8001bcc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fbdc 	bl	8005390 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001be2:	f040 80a7 	bne.w	8001d34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fbe1 	bl	80053b6 <USB_ReadDevAllOutEpInterrupt>
 8001bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bf6:	e099      	b.n	8001d2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 808e 	beq.w	8001d20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fc05 	bl	800541e <USB_ReadDevOutEPInterrupt>
 8001c14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00c      	beq.n	8001c3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2301      	movs	r3, #1
 8001c30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fea1 	bl	800297c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c50:	461a      	mov	r2, r3
 8001c52:	2308      	movs	r3, #8
 8001c54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 ff77 	bl	8002b4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c74:	461a      	mov	r2, r3
 8001c76:	2310      	movs	r3, #16
 8001c78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d030      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8c:	2b80      	cmp	r3, #128	; 0x80
 8001c8e:	d109      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f005 ff16 	bl	8007b00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2320      	movs	r3, #32
 8001d00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	3301      	adds	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f af62 	bne.w	8001bf8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fb29 	bl	8005390 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d48:	f040 80db 	bne.w	8001f02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fb4a 	bl	80053ea <USB_ReadDevAllInEpInterrupt>
 8001d56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d5c:	e0cd      	b.n	8001efa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80c2 	beq.w	8001eee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fb70 	bl	800545a <USB_ReadDevInEPInterrupt>
 8001d7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d057      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69f9      	ldr	r1, [r7, #28]
 8001da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001da6:	4013      	ands	r3, r2
 8001da8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	799b      	ldrb	r3, [r3, #6]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d132      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4403      	add	r3, r0
 8001de4:	331c      	adds	r3, #28
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4419      	add	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4403      	add	r3, r0
 8001df8:	3320      	adds	r3, #32
 8001dfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d113      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x3a2>
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	3324      	adds	r3, #36	; 0x24
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d108      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e22:	461a      	mov	r2, r3
 8001e24:	2101      	movs	r1, #1
 8001e26:	f003 fb77 	bl	8005518 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f005 fdea 	bl	8007a0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2308      	movs	r3, #8
 8001e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e84:	461a      	mov	r2, r3
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d023      	beq.n	8001edc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e96:	6a38      	ldr	r0, [r7, #32]
 8001e98:	f002 fb64 	bl	8004564 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	78db      	ldrb	r3, [r3, #3]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d108      	bne.n	8001eca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f005 fe2d 	bl	8007b24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2302      	movs	r3, #2
 8001eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fcbb 	bl	8002864 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f af2e 	bne.w	8001d5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fa42 	bl	8005390 <USB_ReadInterrupts>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f16:	d122      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fea1 	bl	8002c88 <HAL_PCDEx_LPM_Callback>
 8001f46:	e002      	b.n	8001f4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f005 fdcb 	bl	8007ae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fa14 	bl	8005390 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f72:	d112      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f005 fd87 	bl	8007a98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f98:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 f9f6 	bl	8005390 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fae:	f040 80b7 	bne.w	8002120 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2110      	movs	r1, #16
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fac9 	bl	8004564 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd6:	e046      	b.n	8002066 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffc:	0151      	lsls	r1, r2, #5
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	440a      	add	r2, r1
 8002002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800200a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002018:	461a      	mov	r2, r3
 800201a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800201e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	440a      	add	r2, r1
 8002036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800203a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800203e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002050:	0151      	lsls	r1, r2, #5
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	440a      	add	r2, r1
 8002056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800205a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800205e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	3301      	adds	r3, #1
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	4293      	cmp	r3, r2
 8002070:	d3b2      	bcc.n	8001fd8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002080:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002084:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7bdb      	ldrb	r3, [r3, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f043 030b 	orr.w	r3, r3, #11
 80020a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b4:	f043 030b 	orr.w	r3, r3, #11
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	e015      	b.n	80020e8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e2:	f043 030b 	orr.w	r3, r3, #11
 80020e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800210a:	461a      	mov	r2, r3
 800210c:	f003 fa04 	bl	8005518 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800211e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 f933 	bl	8005390 <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002134:	d123      	bne.n	800217e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 f9c9 	bl	80054d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fa86 	bl	8004656 <USB_GetDevSpeed>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681c      	ldr	r4, [r3, #0]
 8002156:	f001 f9c7 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 800215a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002160:	461a      	mov	r2, r3
 8002162:	4620      	mov	r0, r4
 8002164:	f001 ff8a 	bl	800407c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f005 fc76 	bl	8007a5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800217c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 f904 	bl	8005390 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b08      	cmp	r3, #8
 8002190:	d10a      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f005 fc53 	bl	8007a3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f002 0208 	and.w	r2, r2, #8
 80021a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 f8ef 	bl	8005390 <USB_ReadInterrupts>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d123      	bne.n	8002204 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c8:	2301      	movs	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	e014      	b.n	80021f8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f203 2357 	addw	r3, r3, #599	; 0x257
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fb08 	bl	8002802 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	3301      	adds	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	461a      	mov	r2, r3
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	4293      	cmp	r3, r2
 8002202:	d3e4      	bcc.n	80021ce <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f003 f8c1 	bl	8005390 <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002218:	d13c      	bne.n	8002294 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800221a:	2301      	movs	r3, #1
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	e02b      	b.n	8002278 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3318      	adds	r3, #24
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d115      	bne.n	8002272 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002246:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	da12      	bge.n	8002272 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3317      	adds	r3, #23
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fac8 	bl	8002802 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	3301      	adds	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	461a      	mov	r2, r3
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	4293      	cmp	r3, r2
 8002282:	d3cd      	bcc.n	8002220 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f003 f879 	bl	8005390 <USB_ReadInterrupts>
 800229e:	4603      	mov	r3, r0
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022a8:	d156      	bne.n	8002358 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e045      	b.n	800233c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d12e      	bne.n	8002336 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da2b      	bge.n	8002336 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80022ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d121      	bne.n	8002336 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800232e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002332:	6053      	str	r3, [r2, #4]
            break;
 8002334:	e008      	b.n	8002348 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	791b      	ldrb	r3, [r3, #4]
 8002340:	461a      	mov	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	4293      	cmp	r3, r2
 8002346:	d3b3      	bcc.n	80022b0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 f817 	bl	8005390 <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d10a      	bne.n	8002384 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f005 fbea 	bl	8007b48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002382:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f801 	bl	8005390 <USB_ReadInterrupts>
 800238e:	4603      	mov	r3, r0
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d115      	bne.n	80023c4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f005 fbda 	bl	8007b64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	e000      	b.n	80023c4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80023c2:	bf00      	nop
    }
  }
}
 80023c4:	3734      	adds	r7, #52	; 0x34
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}

080023ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_PCD_SetAddress+0x1a>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e012      	b.n	800240a <HAL_PCD_SetAddress+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 ff60 	bl	80052c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	4608      	mov	r0, r1
 800241c:	4611      	mov	r1, r2
 800241e:	461a      	mov	r2, r3
 8002420:	4603      	mov	r3, r0
 8002422:	70fb      	strb	r3, [r7, #3]
 8002424:	460b      	mov	r3, r1
 8002426:	803b      	strh	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da0f      	bge.n	8002458 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	3310      	adds	r3, #16
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
 8002456:	e00f      	b.n	8002478 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002484:	883a      	ldrh	r2, [r7, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	78ba      	ldrb	r2, [r7, #2]
 800248e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024a2:	78bb      	ldrb	r3, [r7, #2]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d102      	bne.n	80024ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_Open+0xaa>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e00e      	b.n	80024da <HAL_PCD_EP_Open+0xc8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 f8e8 	bl	80046a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80024d8:	7afb      	ldrb	r3, [r7, #11]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da0f      	bge.n	8002516 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 020f 	and.w	r2, r3, #15
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	3310      	adds	r3, #16
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	705a      	strb	r2, [r3, #1]
 8002514:	e00f      	b.n	8002536 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_PCD_EP_Close+0x6e>
 800254c:	2302      	movs	r3, #2
 800254e:	e00e      	b.n	800256e <HAL_PCD_EP_Close+0x8c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 f926 	bl	80047b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	f003 020f 	and.w	r2, r3, #15
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	3304      	adds	r3, #4
 800259e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b8:	7afb      	ldrb	r3, [r7, #11]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	799b      	ldrb	r3, [r3, #6]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	799b      	ldrb	r3, [r3, #6]
 80025da:	461a      	mov	r2, r3
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	f002 f9c3 	bl	8004968 <USB_EPStartXfer>

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	460b      	mov	r3, r1
 800262a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800262c:	7afb      	ldrb	r3, [r7, #11]
 800262e:	f003 020f 	and.w	r2, r3, #15
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	3310      	adds	r3, #16
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2201      	movs	r2, #1
 800265a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	b2da      	uxtb	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	799b      	ldrb	r3, [r3, #6]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	799b      	ldrb	r3, [r3, #6]
 800267e:	461a      	mov	r2, r3
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	f002 f971 	bl	8004968 <USB_EPStartXfer>

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	7912      	ldrb	r2, [r2, #4]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e04f      	b.n	800274e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da0f      	bge.n	80026d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 020f 	and.w	r2, r3, #15
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	3310      	adds	r3, #16
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	705a      	strb	r2, [r3, #1]
 80026d4:	e00d      	b.n	80026f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PCD_EP_SetStall+0x82>
 800270e:	2302      	movs	r3, #2
 8002710:	e01d      	b.n	800274e <HAL_PCD_EP_SetStall+0xbe>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fcf9 	bl	8005118 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7999      	ldrb	r1, [r3, #6]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800273e:	461a      	mov	r2, r3
 8002740:	f002 feea 	bl	8005518 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	7912      	ldrb	r2, [r2, #4]
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e042      	b.n	80027fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da0f      	bge.n	800279c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 020f 	and.w	r2, r3, #15
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3310      	adds	r3, #16
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	705a      	strb	r2, [r3, #1]
 800279a:	e00f      	b.n	80027bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3304      	adds	r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_PCD_EP_ClrStall+0x86>
 80027d8:	2302      	movs	r3, #2
 80027da:	e00e      	b.n	80027fa <HAL_PCD_EP_ClrStall+0xa4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 fd02 	bl	80051f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800280e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002812:	2b00      	cmp	r3, #0
 8002814:	da0c      	bge.n	8002830 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	3310      	adds	r3, #16
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e00c      	b.n	800284a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 020f 	and.w	r2, r3, #15
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fb21 	bl	8004e98 <USB_EPStopXfer>
 8002856:	4603      	mov	r3, r0
 8002858:	72fb      	strb	r3, [r7, #11]

  return ret;
 800285a:	7afb      	ldrb	r3, [r7, #11]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af02      	add	r7, sp, #8
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	3310      	adds	r3, #16
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d901      	bls.n	800289c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e06b      	b.n	8002974 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d902      	bls.n	80028b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3303      	adds	r3, #3
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028c0:	e02a      	b.n	8002918 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d902      	bls.n	80028de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3303      	adds	r3, #3
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68d9      	ldr	r1, [r3, #12]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f002 fb76 	bl	8004fec <USB_WritePacket>

    ep->xfer_buff  += len;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	441a      	add	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	441a      	add	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	429a      	cmp	r2, r3
 800292c:	d809      	bhi.n	8002942 <PCD_WriteEmptyTxFifo+0xde>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002936:	429a      	cmp	r2, r3
 8002938:	d203      	bcs.n	8002942 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1bf      	bne.n	80028c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	429a      	cmp	r2, r3
 800294c:	d811      	bhi.n	8002972 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	2201      	movs	r2, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	43db      	mvns	r3, r3
 8002968:	6939      	ldr	r1, [r7, #16]
 800296a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800296e:	4013      	ands	r3, r2
 8002970:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	333c      	adds	r3, #60	; 0x3c
 8002994:	3304      	adds	r3, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	799b      	ldrb	r3, [r3, #6]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d17b      	bne.n	8002aaa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	4a61      	ldr	r2, [pc, #388]	; (8002b44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	f240 80b9 	bls.w	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80b3 	beq.w	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029de:	461a      	mov	r2, r3
 80029e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e4:	6093      	str	r3, [r2, #8]
 80029e6:	e0a7      	b.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fe:	461a      	mov	r2, r3
 8002a00:	2320      	movs	r3, #32
 8002a02:	6093      	str	r3, [r2, #8]
 8002a04:	e098      	b.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 8093 	bne.w	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d90f      	bls.n	8002a3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a30:	461a      	mov	r2, r3
 8002a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a36:	6093      	str	r3, [r2, #8]
 8002a38:	e07e      	b.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	0159      	lsls	r1, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d114      	bne.n	8002a9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a84:	461a      	mov	r2, r3
 8002a86:	2101      	movs	r1, #1
 8002a88:	f002 fd46 	bl	8005518 <USB_EP0_OutStart>
 8002a8c:	e006      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	441a      	add	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f004 ff96 	bl	80079d4 <HAL_PCD_DataOutStageCallback>
 8002aa8:	e046      	b.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d124      	bne.n	8002afc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ace:	6093      	str	r3, [r2, #8]
 8002ad0:	e032      	b.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2320      	movs	r3, #32
 8002aec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f004 ff6d 	bl	80079d4 <HAL_PCD_DataOutStageCallback>
 8002afa:	e01d      	b.n	8002b38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d114      	bne.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b24:	461a      	mov	r2, r3
 8002b26:	2100      	movs	r1, #0
 8002b28:	f002 fcf6 	bl	8005518 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f004 ff4e 	bl	80079d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	4f54300a 	.word	0x4f54300a
 8002b48:	4f54310a 	.word	0x4f54310a

08002b4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	333c      	adds	r3, #60	; 0x3c
 8002b64:	3304      	adds	r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d90e      	bls.n	8002ba0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f004 ff05 	bl	80079b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d90c      	bls.n	8002bc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	799b      	ldrb	r3, [r3, #6]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	f002 fca8 	bl	8005518 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	4f54300a 	.word	0x4f54300a

08002bd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
 8002be4:	4613      	mov	r3, r2
 8002be6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bf6:	883b      	ldrh	r3, [r7, #0]
 8002bf8:	0419      	lsls	r1, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
 8002c04:	e028      	b.n	8002c58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	4413      	add	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e00d      	b.n	8002c36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	3340      	adds	r3, #64	; 0x40
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3301      	adds	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3ec      	bcc.n	8002c1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c40:	883b      	ldrh	r3, [r7, #0]
 8002c42:	0418      	lsls	r0, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	3340      	adds	r3, #64	; 0x40
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e267      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d075      	beq.n	8002daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d112      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d157      	bne.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e242      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x74>
 8002d06:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d38:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fd ff80 	bl	8000c5c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fd ff7c 	bl	8000c5c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e207      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xc0>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fd ff6c 	bl	8000c5c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fd ff68 	bl	8000c5c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1f3      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0xe8>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1c7      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fd ff21 	bl	8000c5c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fd ff1d 	bl	8000c5c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1a8      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fd ff00 	bl	8000c5c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fd fefc 	bl	8000c5c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e187      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d036      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fd fee0 	bl	8000c5c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fd fedc 	bl	8000c5c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e167      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x200>
 8002ebe:	e01b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd fec9 	bl	8000c5c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fd fec5 	bl	8000c5c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d907      	bls.n	8002eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e150      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ea      	bne.n	8002ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b7a      	ldr	r3, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b74      	ldr	r3, [pc, #464]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a73      	ldr	r2, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fd fe85 	bl	8000c5c <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fd fe81 	bl	8000c5c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e10c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2ea>
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a63      	ldr	r2, [pc, #396]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x30c>
 8002f92:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a54      	ldr	r2, [pc, #336]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fd fe46 	bl	8000c5c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fd fe42 	bl	8000c5c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0cb      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fd fe30 	bl	8000c5c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fd fe2c 	bl	8000c5c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0b5      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a38      	ldr	r2, [pc, #224]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a1 	beq.w	8003180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d05c      	beq.n	8003104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d141      	bne.n	80030d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fd fe00 	bl	8000c5c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fd fdfc 	bl	8000c5c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e087      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fd fdd5 	bl	8000c5c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fd fdd1 	bl	8000c5c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e05c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x416>
 80030d4:	e054      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fd fdbe 	bl	8000c5c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fd fdba 	bl	8000c5c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e045      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e038      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d028      	beq.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d121      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cc      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d90c      	bls.n	80031cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b8      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d044      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d119      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d003      	beq.n	800324e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e067      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4934      	ldr	r1, [pc, #208]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7fd fcec 	bl	8000c5c <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fd fce8 	bl	8000c5c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e04f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d20c      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e032      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4916      	ldr	r1, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f821 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490a      	ldr	r1, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fc4c 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023c00 	.word	0x40023c00
 800334c:	40023800 	.word	0x40023800
 8003350:	08007fe4 	.word	0x08007fe4
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003360:	b090      	sub	sp, #64	; 0x40
 8003362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
 8003368:	2300      	movs	r3, #0
 800336a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d00d      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x40>
 8003380:	2b08      	cmp	r3, #8
 8003382:	f200 80a1 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 800338a:	2b04      	cmp	r3, #4
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x3a>
 800338e:	e09b      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003394:	e09b      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800339a:	e098      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	627a      	str	r2, [r7, #36]	; 0x24
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c4:	2100      	movs	r1, #0
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c8:	fb03 f201 	mul.w	r2, r3, r1
 80033cc:	2300      	movs	r3, #0
 80033ce:	fb00 f303 	mul.w	r3, r0, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d6:	fba0 1202 	umull	r1, r2, r0, r2
 80033da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033dc:	460a      	mov	r2, r1
 80033de:	62ba      	str	r2, [r7, #40]	; 0x28
 80033e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e2:	4413      	add	r3, r2
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e8:	2200      	movs	r2, #0
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	61fa      	str	r2, [r7, #28]
 80033ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033f6:	f7fc feef 	bl	80001d8 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4613      	mov	r3, r2
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003402:	e053      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003404:	4b35      	ldr	r3, [pc, #212]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	2200      	movs	r2, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	617a      	str	r2, [r7, #20]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003416:	f04f 0b00 	mov.w	fp, #0
 800341a:	4652      	mov	r2, sl
 800341c:	465b      	mov	r3, fp
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342c:	0150      	lsls	r0, r2, #5
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	ebb2 080a 	subs.w	r8, r2, sl
 8003436:	eb63 090b 	sbc.w	r9, r3, fp
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003446:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800344a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800344e:	ebb2 0408 	subs.w	r4, r2, r8
 8003452:	eb63 0509 	sbc.w	r5, r3, r9
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	00eb      	lsls	r3, r5, #3
 8003460:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003464:	00e2      	lsls	r2, r4, #3
 8003466:	4614      	mov	r4, r2
 8003468:	461d      	mov	r5, r3
 800346a:	eb14 030a 	adds.w	r3, r4, sl
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	eb45 030b 	adc.w	r3, r5, fp
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003482:	4629      	mov	r1, r5
 8003484:	028b      	lsls	r3, r1, #10
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800348c:	4621      	mov	r1, r4
 800348e:	028a      	lsls	r2, r1, #10
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	2200      	movs	r2, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	60fa      	str	r2, [r7, #12]
 800349c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a0:	f7fc fe9a 	bl	80001d8 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3740      	adds	r7, #64	; 0x40
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	017d7840 	.word	0x017d7840

080034e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ee:	681b      	ldr	r3, [r3, #0]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000

08003500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07b      	b.n	800360a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003522:	d009      	beq.n	8003538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	61da      	str	r2, [r3, #28]
 800352a:	e005      	b.n	8003538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd f974 	bl	8000840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	ea42 0103 	orr.w	r1, r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0104 	and.w	r1, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0210 	and.w	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_SPI_Transmit+0x22>
 8003630:	2302      	movs	r3, #2
 8003632:	e12d      	b.n	8003890 <HAL_SPI_Transmit+0x27e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800363c:	f7fd fb0e 	bl	8000c5c <HAL_GetTick>
 8003640:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003656:	e116      	b.n	8003886 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_SPI_Transmit+0x52>
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003668:	e10d      	b.n	8003886 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d10f      	bne.n	80036d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d007      	beq.n	80036f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f8:	d14f      	bne.n	800379a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_SPI_Transmit+0xf6>
 8003702:	8afb      	ldrh	r3, [r7, #22]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d142      	bne.n	800378e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	881a      	ldrh	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	1c9a      	adds	r2, r3, #2
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800372c:	e02f      	b.n	800378e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d112      	bne.n	8003762 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	1c9a      	adds	r2, r3, #2
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003760:	e015      	b.n	800378e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003762:	f7fd fa7b 	bl	8000c5c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d803      	bhi.n	800377a <HAL_SPI_Transmit+0x168>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003778:	d102      	bne.n	8003780 <HAL_SPI_Transmit+0x16e>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800378c:	e07b      	b.n	8003886 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ca      	bne.n	800372e <HAL_SPI_Transmit+0x11c>
 8003798:	e050      	b.n	800383c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_Transmit+0x196>
 80037a2:	8afb      	ldrh	r3, [r7, #22]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d144      	bne.n	8003832 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037ce:	e030      	b.n	8003832 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d113      	bne.n	8003806 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	86da      	strh	r2, [r3, #54]	; 0x36
 8003804:	e015      	b.n	8003832 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003806:	f7fd fa29 	bl	8000c5c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d803      	bhi.n	800381e <HAL_SPI_Transmit+0x20c>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Transmit+0x212>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003830:	e029      	b.n	8003886 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1c9      	bne.n	80037d0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f9c3 	bl	8003bcc <SPI_EndRxTxTransaction>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e003      	b.n	8003886 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800388e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10e      	bne.n	80038d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
    return;
 80038d6:	e0ce      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_SPI_IRQHandler+0x5e>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
    return;
 80038f4:	e0bf      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <HAL_SPI_IRQHandler+0x7e>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b0 	beq.w	8003a76 <HAL_SPI_IRQHandler+0x1de>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80aa 	beq.w	8003a76 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d023      	beq.n	8003974 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d011      	beq.n	800395c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	e00b      	b.n	8003974 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
        return;
 8003972:	e080      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d014      	beq.n	80039a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d04f      	beq.n	8003a74 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_SPI_IRQHandler+0x168>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d034      	beq.n	8003a6a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0203 	bic.w	r2, r2, #3
 8003a0e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d011      	beq.n	8003a3c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_SPI_IRQHandler+0x1e4>)
 8003a1e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd fb09 	bl	800103c <HAL_DMA_Abort_IT>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_SPI_IRQHandler+0x1e4>)
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fd faf3 	bl	800103c <HAL_DMA_Abort_IT>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a68:	e003      	b.n	8003a72 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f808 	bl	8003a80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a70:	e000      	b.n	8003a74 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a72:	bf00      	nop
    return;
 8003a74:	bf00      	nop
  }
}
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08003a95 	.word	0x08003a95

08003a80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7ff ffe6 	bl	8003a80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003acc:	f7fd f8c6 	bl	8000c5c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4413      	add	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003adc:	f7fd f8be 	bl	8000c5c <HAL_GetTick>
 8003ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	0d1b      	lsrs	r3, r3, #20
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af2:	e054      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afa:	d050      	beq.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003afc:	f7fd f8ae 	bl	8000c5c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13d      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d111      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	d004      	beq.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d107      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d10f      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e017      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d19b      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2201      	movs	r2, #1
 8003be0:	2102      	movs	r1, #2
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff6a 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e032      	b.n	8003c64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <SPI_EndRxTxTransaction+0xa0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <SPI_EndRxTxTransaction+0xa4>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	0d5b      	lsrs	r3, r3, #21
 8003c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1c:	d112      	bne.n	8003c44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff ff47 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d016      	beq.n	8003c62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f043 0220 	orr.w	r2, r3, #32
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e00f      	b.n	8003c64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d0f2      	beq.n	8003c44 <SPI_EndRxTxTransaction+0x78>
 8003c5e:	e000      	b.n	8003c62 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c60:	bf00      	nop
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	165e9f81 	.word	0x165e9f81

08003c74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e097      	b.n	8003db8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fc fea3 	bl	80009e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f000 f879 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	4313      	orrs	r3, r2
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d14:	f023 030c 	bic.w	r3, r3, #12
 8003d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	4313      	orrs	r3, r2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	011a      	lsls	r2, r3, #4
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	4313      	orrs	r3, r2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	4313      	orrs	r3, r2
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3a      	ldr	r2, [pc, #232]	; (8003ebc <TIM_Base_SetConfig+0xfc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a37      	ldr	r2, [pc, #220]	; (8003ec0 <TIM_Base_SetConfig+0x100>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a36      	ldr	r2, [pc, #216]	; (8003ec4 <TIM_Base_SetConfig+0x104>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <TIM_Base_SetConfig+0x108>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <TIM_Base_SetConfig+0xfc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d017      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <TIM_Base_SetConfig+0x100>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <TIM_Base_SetConfig+0x104>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <TIM_Base_SetConfig+0x108>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <TIM_Base_SetConfig+0x10c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <TIM_Base_SetConfig+0x110>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <TIM_Base_SetConfig+0x114>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <TIM_Base_SetConfig+0xfc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d103      	bne.n	8003e90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]
  }
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800

08003ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e050      	b.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d013      	beq.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10c      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40014000 	.word	0x40014000

08003fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	f107 001c 	add.w	r0, r7, #28
 8003fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d123      	bne.n	8004016 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 fae2 	bl	80055d4 <USB_CoreReset>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e01b      	b.n	800404e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 fad6 	bl	80055d4 <USB_CoreReset>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800402c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
 8004040:	e005      	b.n	800404e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800404e:	7fbb      	ldrb	r3, [r7, #30]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10b      	bne.n	800406c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f043 0206 	orr.w	r2, r3, #6
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004078:	b004      	add	sp, #16
 800407a:	4770      	bx	lr

0800407c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d165      	bne.n	800415c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4a41      	ldr	r2, [pc, #260]	; (8004198 <USB_SetTurnaroundTime+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d906      	bls.n	80040a6 <USB_SetTurnaroundTime+0x2a>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4a40      	ldr	r2, [pc, #256]	; (800419c <USB_SetTurnaroundTime+0x120>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d202      	bcs.n	80040a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040a0:	230f      	movs	r3, #15
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e062      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	; (800419c <USB_SetTurnaroundTime+0x120>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d306      	bcc.n	80040bc <USB_SetTurnaroundTime+0x40>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a3b      	ldr	r2, [pc, #236]	; (80041a0 <USB_SetTurnaroundTime+0x124>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d202      	bcs.n	80040bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040b6:	230e      	movs	r3, #14
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e057      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <USB_SetTurnaroundTime+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d306      	bcc.n	80040d2 <USB_SetTurnaroundTime+0x56>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <USB_SetTurnaroundTime+0x128>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d202      	bcs.n	80040d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040cc:	230d      	movs	r3, #13
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e04c      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <USB_SetTurnaroundTime+0x128>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d306      	bcc.n	80040e8 <USB_SetTurnaroundTime+0x6c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <USB_SetTurnaroundTime+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d802      	bhi.n	80040e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040e2:	230c      	movs	r3, #12
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e041      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <USB_SetTurnaroundTime+0x12c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d906      	bls.n	80040fe <USB_SetTurnaroundTime+0x82>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a2e      	ldr	r2, [pc, #184]	; (80041ac <USB_SetTurnaroundTime+0x130>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d802      	bhi.n	80040fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040f8:	230b      	movs	r3, #11
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e036      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <USB_SetTurnaroundTime+0x130>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d906      	bls.n	8004114 <USB_SetTurnaroundTime+0x98>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <USB_SetTurnaroundTime+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d802      	bhi.n	8004114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800410e:	230a      	movs	r3, #10
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e02b      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <USB_SetTurnaroundTime+0x134>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d906      	bls.n	800412a <USB_SetTurnaroundTime+0xae>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <USB_SetTurnaroundTime+0x138>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d202      	bcs.n	800412a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004124:	2309      	movs	r3, #9
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e020      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <USB_SetTurnaroundTime+0x138>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d306      	bcc.n	8004140 <USB_SetTurnaroundTime+0xc4>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <USB_SetTurnaroundTime+0x13c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d802      	bhi.n	8004140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800413a:	2308      	movs	r3, #8
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e015      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <USB_SetTurnaroundTime+0x13c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d906      	bls.n	8004156 <USB_SetTurnaroundTime+0xda>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <USB_SetTurnaroundTime+0x140>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d202      	bcs.n	8004156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004150:	2307      	movs	r3, #7
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e00a      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004156:	2306      	movs	r3, #6
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	e007      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004162:	2309      	movs	r3, #9
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e001      	b.n	800416c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004168:	2309      	movs	r3, #9
 800416a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	00d8acbf 	.word	0x00d8acbf
 800419c:	00e4e1c0 	.word	0x00e4e1c0
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	01067380 	.word	0x01067380
 80041a8:	011a499f 	.word	0x011a499f
 80041ac:	01312cff 	.word	0x01312cff
 80041b0:	014ca43f 	.word	0x014ca43f
 80041b4:	016e3600 	.word	0x016e3600
 80041b8:	01a6ab1f 	.word	0x01a6ab1f
 80041bc:	01e84800 	.word	0x01e84800

080041c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f043 0201 	orr.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d115      	bne.n	8004252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004232:	200a      	movs	r0, #10
 8004234:	f7fc fd1e 	bl	8000c74 <HAL_Delay>
      ms += 10U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	330a      	adds	r3, #10
 800423c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 f939 	bl	80054b6 <USB_GetMode>
 8004244:	4603      	mov	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d01e      	beq.n	8004288 <USB_SetCurrentMode+0x84>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2bc7      	cmp	r3, #199	; 0xc7
 800424e:	d9f0      	bls.n	8004232 <USB_SetCurrentMode+0x2e>
 8004250:	e01a      	b.n	8004288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004264:	200a      	movs	r0, #10
 8004266:	f7fc fd05 	bl	8000c74 <HAL_Delay>
      ms += 10U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	330a      	adds	r3, #10
 800426e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f920 	bl	80054b6 <USB_GetMode>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <USB_SetCurrentMode+0x84>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2bc7      	cmp	r3, #199	; 0xc7
 8004280:	d9f0      	bls.n	8004264 <USB_SetCurrentMode+0x60>
 8004282:	e001      	b.n	8004288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e005      	b.n	8004294 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2bc8      	cmp	r3, #200	; 0xc8
 800428c:	d101      	bne.n	8004292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800429c:	b084      	sub	sp, #16
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e009      	b.n	80042d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3340      	adds	r3, #64	; 0x40
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	3301      	adds	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b0e      	cmp	r3, #14
 80042d4:	d9f2      	bls.n	80042bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11c      	bne.n	8004318 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
 8004316:	e00b      	b.n	8004330 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800433c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10d      	bne.n	8004360 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800434c:	2100      	movs	r1, #0
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f968 	bl	8004624 <USB_SetDevSpeed>
 8004354:	e008      	b.n	8004368 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004356:	2101      	movs	r1, #1
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f963 	bl	8004624 <USB_SetDevSpeed>
 800435e:	e003      	b.n	8004368 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004360:	2103      	movs	r1, #3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f95e 	bl	8004624 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004368:	2110      	movs	r1, #16
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8fa 	bl	8004564 <USB_FlushTxFifo>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f924 	bl	80045c8 <USB_FlushRxFifo>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439c:	461a      	mov	r2, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	461a      	mov	r2, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e043      	b.n	800443c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ca:	d118      	bne.n	80043fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	461a      	mov	r2, r3
 80043e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e013      	b.n	8004410 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e008      	b.n	8004410 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	461a      	mov	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	461a      	mov	r2, r3
 8004430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004440:	461a      	mov	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4293      	cmp	r3, r2
 8004446:	d3b5      	bcc.n	80043b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e043      	b.n	80044d6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004464:	d118      	bne.n	8004498 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	e013      	b.n	80044aa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448e:	461a      	mov	r2, r3
 8004490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e008      	b.n	80044aa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	461a      	mov	r2, r3
 80044a6:	2300      	movs	r3, #0
 80044a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	461a      	mov	r2, r3
 80044b8:	2300      	movs	r3, #0
 80044ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	3301      	adds	r3, #1
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044da:	461a      	mov	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4293      	cmp	r3, r2
 80044e0:	d3b5      	bcc.n	800444e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004502:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f043 0210 	orr.w	r2, r3, #16
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	4b10      	ldr	r3, [pc, #64]	; (8004560 <USB_DevInit+0x2c4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004524:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f043 0208 	orr.w	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004538:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800453c:	2b01      	cmp	r3, #1
 800453e:	d107      	bne.n	8004550 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800455c:	b004      	add	sp, #16
 800455e:	4770      	bx	lr
 8004560:	803c3800 	.word	0x803c3800

08004564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3301      	adds	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800457e:	d901      	bls.n	8004584 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e01b      	b.n	80045bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	daf2      	bge.n	8004572 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	019b      	lsls	r3, r3, #6
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80045a8:	d901      	bls.n	80045ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e006      	b.n	80045bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d0f0      	beq.n	800459c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80045e0:	d901      	bls.n	80045e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e018      	b.n	8004618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	daf2      	bge.n	80045d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2210      	movs	r2, #16
 80045f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004604:	d901      	bls.n	800460a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e006      	b.n	8004618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b10      	cmp	r3, #16
 8004614:	d0f0      	beq.n	80045f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004656:	b480      	push	{r7}
 8004658:	b087      	sub	sp, #28
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0306 	and.w	r3, r3, #6
 800466e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
 800467a:	e00a      	b.n	8004692 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d002      	beq.n	8004688 <USB_GetDevSpeed+0x32>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d102      	bne.n	800468e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004688:	2302      	movs	r3, #2
 800468a:	75fb      	strb	r3, [r7, #23]
 800468c:	e001      	b.n	8004692 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800468e:	230f      	movs	r3, #15
 8004690:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d13a      	bne.n	8004732 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	2101      	movs	r1, #1
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046da:	4313      	orrs	r3, r2
 80046dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d155      	bne.n	80047a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	791b      	ldrb	r3, [r3, #4]
 800470e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004710:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	059b      	lsls	r3, r3, #22
 8004716:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004718:	4313      	orrs	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e036      	b.n	80047a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11a      	bne.n	80047a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	791b      	ldrb	r3, [r3, #4]
 8004784:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004786:	430b      	orrs	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d161      	bne.n	8004890 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e2:	d11f      	bne.n	8004824 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004802:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004822:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	b29b      	uxth	r3, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004844:	4013      	ands	r3, r2
 8004846:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004868:	4013      	ands	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0159      	lsls	r1, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	440b      	add	r3, r1
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	4619      	mov	r1, r3
 8004888:	4b35      	ldr	r3, [pc, #212]	; (8004960 <USB_DeactivateEndpoint+0x1b0>)
 800488a:	4013      	ands	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
 800488e:	e060      	b.n	8004952 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a6:	d11f      	bne.n	80048e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	2101      	movs	r1, #1
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	43db      	mvns	r3, r3
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004908:	4013      	ands	r3, r2
 800490a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	43db      	mvns	r3, r3
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4013      	ands	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0159      	lsls	r1, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	440b      	add	r3, r1
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	4619      	mov	r1, r3
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <USB_DeactivateEndpoint+0x1b4>)
 800494e:	4013      	ands	r3, r2
 8004950:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	ec337800 	.word	0xec337800
 8004964:	eff37800 	.word	0xeff37800

08004968 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b01      	cmp	r3, #1
 8004986:	f040 817a 	bne.w	8004c7e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d132      	bne.n	80049f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f0:	0cdb      	lsrs	r3, r3, #19
 80049f2:	04db      	lsls	r3, r3, #19
 80049f4:	6113      	str	r3, [r2, #16]
 80049f6:	e092      	b.n	8004b1e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	0cdb      	lsrs	r3, r3, #19
 8004a14:	04db      	lsls	r3, r3, #19
 8004a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a3a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11a      	bne.n	8004a78 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d903      	bls.n	8004a56 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a74:	6113      	str	r3, [r2, #16]
 8004a76:	e01b      	b.n	8004ab0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6919      	ldr	r1, [r3, #16]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	440b      	add	r3, r1
 8004a90:	1e59      	subs	r1, r3, #1
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a9c:	4ba2      	ldr	r3, [pc, #648]	; (8004d28 <USB_EPStartXfer+0x3c0>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	69b9      	ldr	r1, [r7, #24]
 8004aa2:	0148      	lsls	r0, r1, #5
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	4401      	add	r1, r0
 8004aa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aac:	4313      	orrs	r3, r2
 8004aae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	0148      	lsls	r0, r1, #5
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	4401      	add	r1, r0
 8004ace:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d11f      	bne.n	8004b1e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004afc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d14b      	bne.n	8004bbc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d128      	bne.n	8004b9a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d110      	bne.n	8004b7a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e00f      	b.n	8004b9a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e165      	b.n	8004e88 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	791b      	ldrb	r3, [r3, #4]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d015      	beq.n	8004c10 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 814d 	beq.w	8004e88 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	69f9      	ldr	r1, [r7, #28]
 8004c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c0e:	e13b      	b.n	8004e88 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e00f      	b.n	8004c62 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	b298      	uxth	r0, r3
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f9b8 	bl	8004fec <USB_WritePacket>
 8004c7c:	e104      	b.n	8004e88 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c98:	0cdb      	lsrs	r3, r3, #19
 8004c9a:	04db      	lsls	r3, r3, #19
 8004c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cc0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d131      	bne.n	8004d2c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	0148      	lsls	r0, r1, #5
 8004cfa:	69f9      	ldr	r1, [r7, #28]
 8004cfc:	4401      	add	r1, r0
 8004cfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d24:	6113      	str	r3, [r2, #16]
 8004d26:	e061      	b.n	8004dec <USB_EPStartXfer+0x484>
 8004d28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d123      	bne.n	8004d7c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	0148      	lsls	r0, r1, #5
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	4401      	add	r1, r0
 8004d52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d78:	6113      	str	r3, [r2, #16]
 8004d7a:	e037      	b.n	8004dec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4413      	add	r3, r2
 8004d86:	1e5a      	subs	r2, r3, #1
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	8afa      	ldrh	r2, [r7, #22]
 8004d98:	fb03 f202 	mul.w	r2, r3, r2
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	8afb      	ldrh	r3, [r7, #22]
 8004db0:	04d9      	lsls	r1, r3, #19
 8004db2:	4b38      	ldr	r3, [pc, #224]	; (8004e94 <USB_EPStartXfer+0x52c>)
 8004db4:	400b      	ands	r3, r1
 8004db6:	69b9      	ldr	r1, [r7, #24]
 8004db8:	0148      	lsls	r0, r1, #5
 8004dba:	69f9      	ldr	r1, [r7, #28]
 8004dbc:	4401      	add	r1, r0
 8004dbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ddc:	69b9      	ldr	r1, [r7, #24]
 8004dde:	0148      	lsls	r0, r1, #5
 8004de0:	69f9      	ldr	r1, [r7, #28]
 8004de2:	4401      	add	r1, r0
 8004de4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004de8:	4313      	orrs	r3, r2
 8004dea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10d      	bne.n	8004e0e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	68d9      	ldr	r1, [r3, #12]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	460a      	mov	r2, r1
 8004e0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	791b      	ldrb	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d128      	bne.n	8004e68 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d110      	bne.n	8004e48 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e00f      	b.n	8004e68 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	1ff80000 	.word	0x1ff80000

08004e98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d14a      	bne.n	8004f4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ece:	f040 8086 	bne.w	8004fde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ef4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d902      	bls.n	8004f30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f2e:	e056      	b.n	8004fde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f48:	d0e7      	beq.n	8004f1a <USB_EPStopXfer+0x82>
 8004f4a:	e048      	b.n	8004fde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f64:	d13b      	bne.n	8004fde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d902      	bls.n	8004fc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc2:	e00c      	b.n	8004fde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fdc:	d0e7      	beq.n	8004fae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	; 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	71fb      	strb	r3, [r7, #7]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800500a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d123      	bne.n	800505a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	3303      	adds	r3, #3
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e018      	b.n	8005052 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	031a      	lsls	r2, r3, #12
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502c:	461a      	mov	r2, r3
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3301      	adds	r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3301      	adds	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3301      	adds	r3, #1
 800504a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	3301      	adds	r3, #1
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3e2      	bcc.n	8005020 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3724      	adds	r7, #36	; 0x24
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005068:	b480      	push	{r7}
 800506a:	b08b      	sub	sp, #44	; 0x2c
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	b29b      	uxth	r3, r3
 8005084:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	623b      	str	r3, [r7, #32]
 8005092:	e014      	b.n	80050be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	601a      	str	r2, [r3, #0]
    pDest++;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	3301      	adds	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	3301      	adds	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	3301      	adds	r3, #1
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	3301      	adds	r3, #1
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	6a3a      	ldr	r2, [r7, #32]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d3e6      	bcc.n	8005094 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050c6:	8bfb      	ldrh	r3, [r7, #30]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01e      	beq.n	800510a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d6:	461a      	mov	r2, r3
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	701a      	strb	r2, [r3, #0]
      i++;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	3301      	adds	r3, #1
 80050f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	3301      	adds	r3, #1
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050fe:	8bfb      	ldrh	r3, [r7, #30]
 8005100:	3b01      	subs	r3, #1
 8005102:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005104:	8bfb      	ldrh	r3, [r7, #30]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ea      	bne.n	80050e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800510c:	4618      	mov	r0, r3
 800510e:	372c      	adds	r7, #44	; 0x2c
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d12c      	bne.n	800518e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	db12      	blt.n	800516c <USB_EPSetStall+0x54>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00f      	beq.n	800516c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800516a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e02b      	b.n	80051e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db12      	blt.n	80051c6 <USB_EPSetStall+0xae>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00f      	beq.n	80051c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d128      	bne.n	8005262 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800522e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	791b      	ldrb	r3, [r3, #4]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d003      	beq.n	8005240 <USB_EPClearStall+0x4c>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	791b      	ldrb	r3, [r3, #4]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d138      	bne.n	80052b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e027      	b.n	80052b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005280:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	791b      	ldrb	r3, [r3, #4]
 8005286:	2b03      	cmp	r3, #3
 8005288:	d003      	beq.n	8005292 <USB_EPClearStall+0x9e>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	791b      	ldrb	r3, [r3, #4]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d10f      	bne.n	80052b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052f4:	68f9      	ldr	r1, [r7, #12]
 80052f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533a:	f023 0302 	bic.w	r3, r3, #2
 800533e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005368:	f023 0303 	bic.w	r3, r3, #3
 800536c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	0c1b      	lsrs	r3, r3, #16
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	b29b      	uxth	r3, r3
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800544c:	68bb      	ldr	r3, [r7, #8]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	fa22 f303 	lsr.w	r3, r2, r3
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	b2db      	uxtb	r3, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4013      	ands	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054a8:	68bb      	ldr	r3, [r7, #8]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0301 	and.w	r3, r3, #1
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	460b      	mov	r3, r1
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	333c      	adds	r3, #60	; 0x3c
 800552e:	3304      	adds	r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <USB_EP0_OutStart+0xb8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d90a      	bls.n	8005552 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554c:	d101      	bne.n	8005552 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e037      	b.n	80055c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	461a      	mov	r2, r3
 800555a:	2300      	movs	r3, #0
 800555c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	f043 0318 	orr.w	r3, r3, #24
 8005584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005594:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005598:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10f      	bne.n	80055c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	4f54300a 	.word	0x4f54300a

080055d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055ec:	d901      	bls.n	80055f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e01b      	b.n	800562a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	daf2      	bge.n	80055e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f043 0201 	orr.w	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005616:	d901      	bls.n	800561c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e006      	b.n	800562a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d0f0      	beq.n	800560a <USB_CoreReset+0x36>

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005644:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005648:	f002 fc24 	bl	8007e94 <USBD_static_malloc>
 800564c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	32b0      	adds	r2, #176	; 0xb0
 800565e:	2100      	movs	r1, #0
 8005660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005664:	2302      	movs	r3, #2
 8005666:	e0d4      	b.n	8005812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005668:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800566c:	2100      	movs	r1, #0
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f002 fc54 	bl	8007f1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	32b0      	adds	r2, #176	; 0xb0
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	32b0      	adds	r2, #176	; 0xb0
 800568e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7c1b      	ldrb	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d138      	bne.n	8005712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <USBD_CDC_Init+0x1e4>)
 80056a2:	7819      	ldrb	r1, [r3, #0]
 80056a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a8:	2202      	movs	r2, #2
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f002 facf 	bl	8007c4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056b0:	4b5a      	ldr	r3, [pc, #360]	; (800581c <USBD_CDC_Init+0x1e4>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3324      	adds	r3, #36	; 0x24
 80056c6:	2201      	movs	r2, #1
 80056c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056ca:	4b55      	ldr	r3, [pc, #340]	; (8005820 <USBD_CDC_Init+0x1e8>)
 80056cc:	7819      	ldrb	r1, [r3, #0]
 80056ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056d2:	2202      	movs	r2, #2
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f002 faba 	bl	8007c4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056da:	4b51      	ldr	r3, [pc, #324]	; (8005820 <USBD_CDC_Init+0x1e8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056f2:	2201      	movs	r2, #1
 80056f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056f6:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <USBD_CDC_Init+0x1ec>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	3326      	adds	r3, #38	; 0x26
 800570c:	2210      	movs	r2, #16
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e035      	b.n	800577e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005712:	4b42      	ldr	r3, [pc, #264]	; (800581c <USBD_CDC_Init+0x1e4>)
 8005714:	7819      	ldrb	r1, [r3, #0]
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	2202      	movs	r2, #2
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f002 fa97 	bl	8007c4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <USBD_CDC_Init+0x1e4>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	3324      	adds	r3, #36	; 0x24
 8005736:	2201      	movs	r2, #1
 8005738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800573a:	4b39      	ldr	r3, [pc, #228]	; (8005820 <USBD_CDC_Init+0x1e8>)
 800573c:	7819      	ldrb	r1, [r3, #0]
 800573e:	2340      	movs	r3, #64	; 0x40
 8005740:	2202      	movs	r2, #2
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f002 fa83 	bl	8007c4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005748:	4b35      	ldr	r3, [pc, #212]	; (8005820 <USBD_CDC_Init+0x1e8>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005760:	2201      	movs	r2, #1
 8005762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005764:	4b2f      	ldr	r3, [pc, #188]	; (8005824 <USBD_CDC_Init+0x1ec>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3326      	adds	r3, #38	; 0x26
 800577a:	2210      	movs	r2, #16
 800577c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800577e:	4b29      	ldr	r3, [pc, #164]	; (8005824 <USBD_CDC_Init+0x1ec>)
 8005780:	7819      	ldrb	r1, [r3, #0]
 8005782:	2308      	movs	r3, #8
 8005784:	2203      	movs	r2, #3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 fa61 	bl	8007c4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800578c:	4b25      	ldr	r3, [pc, #148]	; (8005824 <USBD_CDC_Init+0x1ec>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3324      	adds	r3, #36	; 0x24
 80057a2:	2201      	movs	r2, #1
 80057a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	33b0      	adds	r3, #176	; 0xb0
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057dc:	2302      	movs	r3, #2
 80057de:	e018      	b.n	8005812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7c1b      	ldrb	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <USBD_CDC_Init+0x1e8>)
 80057ea:	7819      	ldrb	r1, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f002 fb18 	bl	8007e2c <USBD_LL_PrepareReceive>
 80057fc:	e008      	b.n	8005810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <USBD_CDC_Init+0x1e8>)
 8005800:	7819      	ldrb	r1, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f002 fb0e 	bl	8007e2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000093 	.word	0x20000093
 8005820:	20000094 	.word	0x20000094
 8005824:	20000095 	.word	0x20000095

08005828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005834:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <USBD_CDC_DeInit+0xf8>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f002 fa2d 	bl	8007c9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005840:	4b37      	ldr	r3, [pc, #220]	; (8005920 <USBD_CDC_DeInit+0xf8>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	2200      	movs	r2, #0
 8005858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800585a:	4b32      	ldr	r3, [pc, #200]	; (8005924 <USBD_CDC_DeInit+0xfc>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f002 fa1a 	bl	8007c9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005866:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <USBD_CDC_DeInit+0xfc>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800587e:	2200      	movs	r2, #0
 8005880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005882:	4b29      	ldr	r3, [pc, #164]	; (8005928 <USBD_CDC_DeInit+0x100>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 fa06 	bl	8007c9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <USBD_CDC_DeInit+0x100>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f003 020f 	and.w	r2, r3, #15
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	2200      	movs	r2, #0
 80058a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058a8:	4b1f      	ldr	r3, [pc, #124]	; (8005928 <USBD_CDC_DeInit+0x100>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3326      	adds	r3, #38	; 0x26
 80058be:	2200      	movs	r2, #0
 80058c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	32b0      	adds	r2, #176	; 0xb0
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01f      	beq.n	8005914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	33b0      	adds	r3, #176	; 0xb0
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	32b0      	adds	r2, #176	; 0xb0
 80058f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f002 fada 	bl	8007eb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	32b0      	adds	r2, #176	; 0xb0
 8005906:	2100      	movs	r1, #0
 8005908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000093 	.word	0x20000093
 8005924:	20000094 	.word	0x20000094
 8005928:	20000095 	.word	0x20000095

0800592c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	32b0      	adds	r2, #176	; 0xb0
 8005940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	e0bf      	b.n	8005adc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005964:	2b00      	cmp	r3, #0
 8005966:	d050      	beq.n	8005a0a <USBD_CDC_Setup+0xde>
 8005968:	2b20      	cmp	r3, #32
 800596a:	f040 80af 	bne.w	8005acc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	88db      	ldrh	r3, [r3, #6]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03a      	beq.n	80059ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b25b      	sxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	da1b      	bge.n	80059b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	33b0      	adds	r3, #176	; 0xb0
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	88d2      	ldrh	r2, [r2, #6]
 800599c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	88db      	ldrh	r3, [r3, #6]
 80059a2:	2b07      	cmp	r3, #7
 80059a4:	bf28      	it	cs
 80059a6:	2307      	movcs	r3, #7
 80059a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	89fa      	ldrh	r2, [r7, #14]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fd49 	bl	8007448 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059b6:	e090      	b.n	8005ada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785a      	ldrb	r2, [r3, #1]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	88db      	ldrh	r3, [r3, #6]
 80059c6:	2b3f      	cmp	r3, #63	; 0x3f
 80059c8:	d803      	bhi.n	80059d2 <USBD_CDC_Setup+0xa6>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	88db      	ldrh	r3, [r3, #6]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	e000      	b.n	80059d4 <USBD_CDC_Setup+0xa8>
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059da:	6939      	ldr	r1, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059e2:	461a      	mov	r2, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 fd5b 	bl	80074a0 <USBD_CtlPrepareRx>
      break;
 80059ea:	e076      	b.n	8005ada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	33b0      	adds	r3, #176	; 0xb0
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	7850      	ldrb	r0, [r2, #1]
 8005a02:	2200      	movs	r2, #0
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	4798      	blx	r3
      break;
 8005a08:	e067      	b.n	8005ada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b0b      	cmp	r3, #11
 8005a10:	d851      	bhi.n	8005ab6 <USBD_CDC_Setup+0x18a>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USBD_CDC_Setup+0xec>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a49 	.word	0x08005a49
 8005a1c:	08005ac5 	.word	0x08005ac5
 8005a20:	08005ab7 	.word	0x08005ab7
 8005a24:	08005ab7 	.word	0x08005ab7
 8005a28:	08005ab7 	.word	0x08005ab7
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005ab7 	.word	0x08005ab7
 8005a34:	08005ab7 	.word	0x08005ab7
 8005a38:	08005ab7 	.word	0x08005ab7
 8005a3c:	08005ab7 	.word	0x08005ab7
 8005a40:	08005a73 	.word	0x08005a73
 8005a44:	08005a9d 	.word	0x08005a9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d107      	bne.n	8005a64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a54:	f107 030a 	add.w	r3, r7, #10
 8005a58:	2202      	movs	r2, #2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 fcf3 	bl	8007448 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a62:	e032      	b.n	8005aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fc7d 	bl	8007366 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a70:	e02b      	b.n	8005aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d107      	bne.n	8005a8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a7e:	f107 030d 	add.w	r3, r7, #13
 8005a82:	2201      	movs	r2, #1
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 fcde 	bl	8007448 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a8c:	e01d      	b.n	8005aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 fc68 	bl	8007366 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a96:	2303      	movs	r3, #3
 8005a98:	75fb      	strb	r3, [r7, #23]
          break;
 8005a9a:	e016      	b.n	8005aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d00f      	beq.n	8005ac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 fc5b 	bl	8007366 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ab4:	e008      	b.n	8005ac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fc54 	bl	8007366 <USBD_CtlError>
          ret = USBD_FAIL;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ac2:	e002      	b.n	8005aca <USBD_CDC_Setup+0x19e>
          break;
 8005ac4:	bf00      	nop
 8005ac6:	e008      	b.n	8005ada <USBD_CDC_Setup+0x1ae>
          break;
 8005ac8:	bf00      	nop
      }
      break;
 8005aca:	e006      	b.n	8005ada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fc49 	bl	8007366 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	32b0      	adds	r2, #176	; 0xb0
 8005b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e065      	b.n	8005bda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	32b0      	adds	r2, #176	; 0xb0
 8005b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	f003 020f 	and.w	r2, r3, #15
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3318      	adds	r3, #24
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d02f      	beq.n	8005b98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	f003 020f 	and.w	r2, r3, #15
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	f003 010f 	and.w	r1, r3, #15
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	460b      	mov	r3, r1
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	440b      	add	r3, r1
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4403      	add	r3, r0
 8005b60:	331c      	adds	r3, #28
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d112      	bne.n	8005b98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3318      	adds	r3, #24
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b8a:	78f9      	ldrb	r1, [r7, #3]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2200      	movs	r2, #0
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f002 f92a 	bl	8007dea <USBD_LL_Transmit>
 8005b96:	e01f      	b.n	8005bd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	33b0      	adds	r3, #176	; 0xb0
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	33b0      	adds	r3, #176	; 0xb0
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	32b0      	adds	r2, #176	; 0xb0
 8005bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	32b0      	adds	r2, #176	; 0xb0
 8005c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e01a      	b.n	8005c4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 f928 	bl	8007e6e <USBD_LL_GetRxDataSize>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	33b0      	adds	r3, #176	; 0xb0
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c44:	4611      	mov	r1, r2
 8005c46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	32b0      	adds	r2, #176	; 0xb0
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e025      	b.n	8005cc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	33b0      	adds	r3, #176	; 0xb0
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01a      	beq.n	8005cbe <USBD_CDC_EP0_RxReady+0x6c>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	d015      	beq.n	8005cbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	33b0      	adds	r3, #176	; 0xb0
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005caa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cd0:	2182      	movs	r1, #130	; 0x82
 8005cd2:	4818      	ldr	r0, [pc, #96]	; (8005d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cd4:	f000 fd0f 	bl	80066f6 <USBD_GetEpDesc>
 8005cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cda:	2101      	movs	r1, #1
 8005cdc:	4815      	ldr	r0, [pc, #84]	; (8005d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cde:	f000 fd0a 	bl	80066f6 <USBD_GetEpDesc>
 8005ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ce4:	2181      	movs	r1, #129	; 0x81
 8005ce6:	4813      	ldr	r0, [pc, #76]	; (8005d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ce8:	f000 fd05 	bl	80066f6 <USBD_GetEpDesc>
 8005cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d006      	beq.n	8005d0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d08:	711a      	strb	r2, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d006      	beq.n	8005d22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1c:	711a      	strb	r2, [r3, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2243      	movs	r2, #67	; 0x43
 8005d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d28:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000050 	.word	0x20000050

08005d38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d40:	2182      	movs	r1, #130	; 0x82
 8005d42:	4818      	ldr	r0, [pc, #96]	; (8005da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d44:	f000 fcd7 	bl	80066f6 <USBD_GetEpDesc>
 8005d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4815      	ldr	r0, [pc, #84]	; (8005da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d4e:	f000 fcd2 	bl	80066f6 <USBD_GetEpDesc>
 8005d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d54:	2181      	movs	r1, #129	; 0x81
 8005d56:	4813      	ldr	r0, [pc, #76]	; (8005da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d58:	f000 fccd 	bl	80066f6 <USBD_GetEpDesc>
 8005d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2210      	movs	r2, #16
 8005d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d006      	beq.n	8005d7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2200      	movs	r2, #0
 8005d74:	711a      	strb	r2, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f042 0202 	orr.w	r2, r2, #2
 8005d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	711a      	strb	r2, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f042 0202 	orr.w	r2, r2, #2
 8005d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2243      	movs	r2, #67	; 0x43
 8005d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000050 	.word	0x20000050

08005da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005db0:	2182      	movs	r1, #130	; 0x82
 8005db2:	4818      	ldr	r0, [pc, #96]	; (8005e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005db4:	f000 fc9f 	bl	80066f6 <USBD_GetEpDesc>
 8005db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4815      	ldr	r0, [pc, #84]	; (8005e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dbe:	f000 fc9a 	bl	80066f6 <USBD_GetEpDesc>
 8005dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dc4:	2181      	movs	r1, #129	; 0x81
 8005dc6:	4813      	ldr	r0, [pc, #76]	; (8005e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dc8:	f000 fc95 	bl	80066f6 <USBD_GetEpDesc>
 8005dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de8:	711a      	strb	r2, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	711a      	strb	r2, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2243      	movs	r2, #67	; 0x43
 8005e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000050 	.word	0x20000050

08005e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	220a      	movs	r2, #10
 8005e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e26:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	2000000c 	.word	0x2000000c

08005e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e009      	b.n	8005e60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	33b0      	adds	r3, #176	; 0xb0
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	32b0      	adds	r2, #176	; 0xb0
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e008      	b.n	8005ea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32b0      	adds	r2, #176	; 0xb0
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e004      	b.n	8005ede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32b0      	adds	r2, #176	; 0xb0
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	32b0      	adds	r2, #176	; 0xb0
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e018      	b.n	8005f4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	7c1b      	ldrb	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <USBD_CDC_ReceivePacket+0x68>)
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 ff7b 	bl	8007e2c <USBD_LL_PrepareReceive>
 8005f36:	e008      	b.n	8005f4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <USBD_CDC_ReceivePacket+0x68>)
 8005f3a:	7819      	ldrb	r1, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 ff71 	bl	8007e2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000094 	.word	0x20000094

08005f58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e01f      	b.n	8005fb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	79fa      	ldrb	r2, [r7, #7]
 8005fa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 fdeb 	bl	8007b80 <USBD_LL_Init>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e025      	b.n	800601c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32ae      	adds	r2, #174	; 0xae
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00f      	beq.n	800600c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32ae      	adds	r2, #174	; 0xae
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f107 020e 	add.w	r2, r7, #14
 8006000:	4610      	mov	r0, r2
 8006002:	4798      	blx	r3
 8006004:	4602      	mov	r2, r0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fdf3 	bl	8007c18 <USBD_LL_Start>
 8006032:	4603      	mov	r3, r0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006044:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	4611      	mov	r1, r2
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	4611      	mov	r1, r2
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80060b0:	2303      	movs	r3, #3
 80060b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f90e 	bl	80072f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060e4:	461a      	mov	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d01a      	beq.n	8006130 <USBD_LL_SetupStage+0x72>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d822      	bhi.n	8006144 <USBD_LL_SetupStage+0x86>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <USBD_LL_SetupStage+0x4a>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d00a      	beq.n	800611c <USBD_LL_SetupStage+0x5e>
 8006106:	e01d      	b.n	8006144 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb65 	bl	80067e0 <USBD_StdDevReq>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
      break;
 800611a:	e020      	b.n	800615e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fbcd 	bl	80068c4 <USBD_StdItfReq>
 800612a:	4603      	mov	r3, r0
 800612c:	73fb      	strb	r3, [r7, #15]
      break;
 800612e:	e016      	b.n	800615e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fc2f 	bl	800699c <USBD_StdEPReq>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
      break;
 8006142:	e00c      	b.n	800615e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800614a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800614e:	b2db      	uxtb	r3, r3
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fdc0 	bl	8007cd8 <USBD_LL_StallEP>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
      break;
 800615c:	bf00      	nop
  }

  return ret;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	460b      	mov	r3, r1
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800617a:	7afb      	ldrb	r3, [r7, #11]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d16e      	bne.n	800625e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800618e:	2b03      	cmp	r3, #3
 8006190:	f040 8098 	bne.w	80062c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	429a      	cmp	r2, r3
 800619e:	d913      	bls.n	80061c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	1ad2      	subs	r2, r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bf28      	it	cs
 80061ba:	4613      	movcs	r3, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 f98a 	bl	80074da <USBD_CtlContinueRx>
 80061c6:	e07d      	b.n	80062c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d014      	beq.n	8006200 <USBD_LL_DataOutStage+0x98>
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d81d      	bhi.n	8006216 <USBD_LL_DataOutStage+0xae>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <USBD_LL_DataOutStage+0x7c>
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d003      	beq.n	80061ea <USBD_LL_DataOutStage+0x82>
 80061e2:	e018      	b.n	8006216 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	75bb      	strb	r3, [r7, #22]
            break;
 80061e8:	e018      	b.n	800621c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fa64 	bl	80066c2 <USBD_CoreFindIF>
 80061fa:	4603      	mov	r3, r0
 80061fc:	75bb      	strb	r3, [r7, #22]
            break;
 80061fe:	e00d      	b.n	800621c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa66 	bl	80066dc <USBD_CoreFindEP>
 8006210:	4603      	mov	r3, r0
 8006212:	75bb      	strb	r3, [r7, #22]
            break;
 8006214:	e002      	b.n	800621c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	75bb      	strb	r3, [r7, #22]
            break;
 800621a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800621c:	7dbb      	ldrb	r3, [r7, #22]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d119      	bne.n	8006256 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b03      	cmp	r3, #3
 800622c:	d113      	bne.n	8006256 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800622e:	7dba      	ldrb	r2, [r7, #22]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	32ae      	adds	r2, #174	; 0xae
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800623e:	7dba      	ldrb	r2, [r7, #22]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006246:	7dba      	ldrb	r2, [r7, #22]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	32ae      	adds	r2, #174	; 0xae
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f001 f950 	bl	80074fc <USBD_CtlSendStatus>
 800625c:	e032      	b.n	80062c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	b2db      	uxtb	r3, r3
 8006266:	4619      	mov	r1, r3
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fa37 	bl	80066dc <USBD_CoreFindEP>
 800626e:	4603      	mov	r3, r0
 8006270:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006272:	7dbb      	ldrb	r3, [r7, #22]
 8006274:	2bff      	cmp	r3, #255	; 0xff
 8006276:	d025      	beq.n	80062c4 <USBD_LL_DataOutStage+0x15c>
 8006278:	7dbb      	ldrb	r3, [r7, #22]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d122      	bne.n	80062c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d117      	bne.n	80062ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800628a:	7dba      	ldrb	r2, [r7, #22]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	32ae      	adds	r2, #174	; 0xae
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00f      	beq.n	80062ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800629a:	7dba      	ldrb	r2, [r7, #22]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80062a2:	7dba      	ldrb	r2, [r7, #22]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	32ae      	adds	r2, #174	; 0xae
 80062a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	7afa      	ldrb	r2, [r7, #11]
 80062b0:	4611      	mov	r1, r2
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	4798      	blx	r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	e000      	b.n	80062c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	460b      	mov	r3, r1
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d16f      	bne.n	80063c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3314      	adds	r3, #20
 80062e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d15a      	bne.n	80063a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d914      	bls.n	8006328 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	461a      	mov	r2, r3
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f001 f8b2 	bl	800747e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800631a:	2300      	movs	r3, #0
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f001 fd83 	bl	8007e2c <USBD_LL_PrepareReceive>
 8006326:	e03f      	b.n	80063a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	d11c      	bne.n	800636e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800633c:	429a      	cmp	r2, r3
 800633e:	d316      	bcc.n	800636e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800634a:	429a      	cmp	r2, r3
 800634c:	d20f      	bcs.n	800636e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800634e:	2200      	movs	r2, #0
 8006350:	2100      	movs	r1, #0
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f001 f893 	bl	800747e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006360:	2300      	movs	r3, #0
 8006362:	2200      	movs	r2, #0
 8006364:	2100      	movs	r1, #0
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f001 fd60 	bl	8007e2c <USBD_LL_PrepareReceive>
 800636c:	e01c      	b.n	80063a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d10f      	bne.n	800639a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f001 fc9b 	bl	8007cd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f001 f8bd 	bl	8007522 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d03a      	beq.n	8006428 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff fe42 	bl	800603c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063c0:	e032      	b.n	8006428 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4619      	mov	r1, r3
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f985 	bl	80066dc <USBD_CoreFindEP>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	2bff      	cmp	r3, #255	; 0xff
 80063da:	d025      	beq.n	8006428 <USBD_LL_DataInStage+0x15a>
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d122      	bne.n	8006428 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d11c      	bne.n	8006428 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063ee:	7dfa      	ldrb	r2, [r7, #23]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	32ae      	adds	r2, #174	; 0xae
 80063f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063fe:	7dfa      	ldrb	r2, [r7, #23]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006406:	7dfa      	ldrb	r2, [r7, #23]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	32ae      	adds	r2, #174	; 0xae
 800640c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	7afa      	ldrb	r2, [r7, #11]
 8006414:	4611      	mov	r1, r2
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	4798      	blx	r3
 800641a:	4603      	mov	r3, r0
 800641c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800641e:	7dbb      	ldrb	r3, [r7, #22]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006424:	7dbb      	ldrb	r3, [r7, #22]
 8006426:	e000      	b.n	800642a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d014      	beq.n	8006498 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6852      	ldr	r2, [r2, #4]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	4611      	mov	r1, r2
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006494:	2303      	movs	r3, #3
 8006496:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006498:	2340      	movs	r3, #64	; 0x40
 800649a:	2200      	movs	r2, #0
 800649c:	2100      	movs	r1, #0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fbd5 	bl	8007c4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064b4:	2340      	movs	r3, #64	; 0x40
 80064b6:	2200      	movs	r2, #0
 80064b8:	2180      	movs	r1, #128	; 0x80
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fbc7 	bl	8007c4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2240      	movs	r2, #64	; 0x40
 80064ca:	621a      	str	r2, [r3, #32]

  return ret;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b04      	cmp	r3, #4
 8006508:	d006      	beq.n	8006518 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006510:	b2da      	uxtb	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b04      	cmp	r3, #4
 8006540:	d106      	bne.n	8006550 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d110      	bne.n	8006594 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	32ae      	adds	r2, #174	; 0xae
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	e01c      	b.n	80065fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d115      	bne.n	80065f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32ae      	adds	r2, #174	; 0xae
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	32ae      	adds	r2, #174	; 0xae
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	4611      	mov	r1, r2
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	32ae      	adds	r2, #174	; 0xae
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006620:	2303      	movs	r3, #3
 8006622:	e01c      	b.n	800665e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b03      	cmp	r3, #3
 800662e:	d115      	bne.n	800665c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32ae      	adds	r2, #174	; 0xae
 800663a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	32ae      	adds	r2, #174	; 0xae
 800664e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	78fa      	ldrb	r2, [r7, #3]
 8006656:	4611      	mov	r1, r2
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6852      	ldr	r2, [r2, #4]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	4611      	mov	r1, r2
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	885b      	ldrh	r3, [r3, #2]
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	429a      	cmp	r2, r3
 800671c:	d920      	bls.n	8006760 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006726:	e013      	b.n	8006750 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006728:	f107 030a 	add.w	r3, r7, #10
 800672c:	4619      	mov	r1, r3
 800672e:	6978      	ldr	r0, [r7, #20]
 8006730:	f000 f81b 	bl	800676a <USBD_GetNextDesc>
 8006734:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b05      	cmp	r3, #5
 800673c:	d108      	bne.n	8006750 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	789b      	ldrb	r3, [r3, #2]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	429a      	cmp	r2, r3
 800674a:	d008      	beq.n	800675e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	885b      	ldrh	r3, [r3, #2]
 8006754:	b29a      	uxth	r2, r3
 8006756:	897b      	ldrh	r3, [r7, #10]
 8006758:	429a      	cmp	r2, r3
 800675a:	d8e5      	bhi.n	8006728 <USBD_GetEpDesc+0x32>
 800675c:	e000      	b.n	8006760 <USBD_GetEpDesc+0x6a>
          break;
 800675e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006760:	693b      	ldr	r3, [r7, #16]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	881a      	ldrh	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	4413      	add	r3, r2
 8006784:	b29a      	uxth	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067c2:	8a3b      	ldrh	r3, [r7, #16]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	b21a      	sxth	r2, r3
 80067c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067d2:	89fb      	ldrh	r3, [r7, #14]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d005      	beq.n	8006806 <USBD_StdDevReq+0x26>
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d857      	bhi.n	80068ae <USBD_StdDevReq+0xce>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00f      	beq.n	8006822 <USBD_StdDevReq+0x42>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d153      	bne.n	80068ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32ae      	adds	r2, #174	; 0xae
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
      break;
 8006820:	e04a      	b.n	80068b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b09      	cmp	r3, #9
 8006828:	d83b      	bhi.n	80068a2 <USBD_StdDevReq+0xc2>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <USBD_StdDevReq+0x50>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006885 	.word	0x08006885
 8006834:	08006899 	.word	0x08006899
 8006838:	080068a3 	.word	0x080068a3
 800683c:	0800688f 	.word	0x0800688f
 8006840:	080068a3 	.word	0x080068a3
 8006844:	08006863 	.word	0x08006863
 8006848:	08006859 	.word	0x08006859
 800684c:	080068a3 	.word	0x080068a3
 8006850:	0800687b 	.word	0x0800687b
 8006854:	0800686d 	.word	0x0800686d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa3c 	bl	8006cd8 <USBD_GetDescriptor>
          break;
 8006860:	e024      	b.n	80068ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fba1 	bl	8006fac <USBD_SetAddress>
          break;
 800686a:	e01f      	b.n	80068ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fbe0 	bl	8007034 <USBD_SetConfig>
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
          break;
 8006878:	e018      	b.n	80068ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fc83 	bl	8007188 <USBD_GetConfig>
          break;
 8006882:	e013      	b.n	80068ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fcb4 	bl	80071f4 <USBD_GetStatus>
          break;
 800688c:	e00e      	b.n	80068ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fce3 	bl	800725c <USBD_SetFeature>
          break;
 8006896:	e009      	b.n	80068ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fd07 	bl	80072ae <USBD_ClrFeature>
          break;
 80068a0:	e004      	b.n	80068ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fd5e 	bl	8007366 <USBD_CtlError>
          break;
 80068aa:	bf00      	nop
      }
      break;
 80068ac:	e004      	b.n	80068b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fd58 	bl	8007366 <USBD_CtlError>
      break;
 80068b6:	bf00      	nop
  }

  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop

080068c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d005      	beq.n	80068ea <USBD_StdItfReq+0x26>
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d852      	bhi.n	8006988 <USBD_StdItfReq+0xc4>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <USBD_StdItfReq+0x26>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d14e      	bne.n	8006988 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d840      	bhi.n	800697a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	889b      	ldrh	r3, [r3, #4]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d836      	bhi.n	8006970 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	889b      	ldrh	r3, [r3, #4]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fed9 	bl	80066c2 <USBD_CoreFindIF>
 8006910:	4603      	mov	r3, r0
 8006912:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	2bff      	cmp	r3, #255	; 0xff
 8006918:	d01d      	beq.n	8006956 <USBD_StdItfReq+0x92>
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11a      	bne.n	8006956 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006920:	7bba      	ldrb	r2, [r7, #14]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32ae      	adds	r2, #174	; 0xae
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006930:	7bba      	ldrb	r2, [r7, #14]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006938:	7bba      	ldrb	r2, [r7, #14]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	; 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800694e:	e004      	b.n	800695a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006950:	2303      	movs	r3, #3
 8006952:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006954:	e001      	b.n	800695a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d110      	bne.n	8006984 <USBD_StdItfReq+0xc0>
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10d      	bne.n	8006984 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fdc7 	bl	80074fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800696e:	e009      	b.n	8006984 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fcf7 	bl	8007366 <USBD_CtlError>
          break;
 8006978:	e004      	b.n	8006984 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fcf2 	bl	8007366 <USBD_CtlError>
          break;
 8006982:	e000      	b.n	8006986 <USBD_StdItfReq+0xc2>
          break;
 8006984:	bf00      	nop
      }
      break;
 8006986:	e004      	b.n	8006992 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fceb 	bl	8007366 <USBD_CtlError>
      break;
 8006990:	bf00      	nop
  }

  return ret;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	889b      	ldrh	r3, [r3, #4]
 80069ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b8:	2b40      	cmp	r3, #64	; 0x40
 80069ba:	d007      	beq.n	80069cc <USBD_StdEPReq+0x30>
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	f200 817f 	bhi.w	8006cc0 <USBD_StdEPReq+0x324>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02a      	beq.n	8006a1c <USBD_StdEPReq+0x80>
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	f040 817a 	bne.w	8006cc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fe83 	bl	80066dc <USBD_CoreFindEP>
 80069d6:	4603      	mov	r3, r0
 80069d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069da:	7b7b      	ldrb	r3, [r7, #13]
 80069dc:	2bff      	cmp	r3, #255	; 0xff
 80069de:	f000 8174 	beq.w	8006cca <USBD_StdEPReq+0x32e>
 80069e2:	7b7b      	ldrb	r3, [r7, #13]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 8170 	bne.w	8006cca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069ea:	7b7a      	ldrb	r2, [r7, #13]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069f2:	7b7a      	ldrb	r2, [r7, #13]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	32ae      	adds	r2, #174	; 0xae
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8163 	beq.w	8006cca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a04:	7b7a      	ldrb	r2, [r7, #13]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	32ae      	adds	r2, #174	; 0xae
 8006a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a1a:	e156      	b.n	8006cca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d008      	beq.n	8006a36 <USBD_StdEPReq+0x9a>
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	f300 8145 	bgt.w	8006cb4 <USBD_StdEPReq+0x318>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 809b 	beq.w	8006b66 <USBD_StdEPReq+0x1ca>
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d03c      	beq.n	8006aae <USBD_StdEPReq+0x112>
 8006a34:	e13e      	b.n	8006cb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d002      	beq.n	8006a48 <USBD_StdEPReq+0xac>
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d016      	beq.n	8006a74 <USBD_StdEPReq+0xd8>
 8006a46:	e02c      	b.n	8006aa2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <USBD_StdEPReq+0xce>
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d00a      	beq.n	8006a6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f93d 	bl	8007cd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a5e:	2180      	movs	r1, #128	; 0x80
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f939 	bl	8007cd8 <USBD_LL_StallEP>
 8006a66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a68:	e020      	b.n	8006aac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc7a 	bl	8007366 <USBD_CtlError>
              break;
 8006a72:	e01b      	b.n	8006aac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	885b      	ldrh	r3, [r3, #2]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10e      	bne.n	8006a9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <USBD_StdEPReq+0xfe>
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d008      	beq.n	8006a9a <USBD_StdEPReq+0xfe>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	88db      	ldrh	r3, [r3, #6]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f91f 	bl	8007cd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fd2e 	bl	80074fc <USBD_CtlSendStatus>

              break;
 8006aa0:	e004      	b.n	8006aac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fc5e 	bl	8007366 <USBD_CtlError>
              break;
 8006aaa:	bf00      	nop
          }
          break;
 8006aac:	e107      	b.n	8006cbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d002      	beq.n	8006ac0 <USBD_StdEPReq+0x124>
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d016      	beq.n	8006aec <USBD_StdEPReq+0x150>
 8006abe:	e04b      	b.n	8006b58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <USBD_StdEPReq+0x146>
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d00a      	beq.n	8006ae2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f901 	bl	8007cd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f8fd 	bl	8007cd8 <USBD_LL_StallEP>
 8006ade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ae0:	e040      	b.n	8006b64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fc3e 	bl	8007366 <USBD_CtlError>
              break;
 8006aea:	e03b      	b.n	8006b64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	885b      	ldrh	r3, [r3, #2]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d136      	bne.n	8006b62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 f907 	bl	8007d16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fcf7 	bl	80074fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff fde2 	bl	80066dc <USBD_CoreFindEP>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b1c:	7b7b      	ldrb	r3, [r7, #13]
 8006b1e:	2bff      	cmp	r3, #255	; 0xff
 8006b20:	d01f      	beq.n	8006b62 <USBD_StdEPReq+0x1c6>
 8006b22:	7b7b      	ldrb	r3, [r7, #13]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d11c      	bne.n	8006b62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b28:	7b7a      	ldrb	r2, [r7, #13]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b30:	7b7a      	ldrb	r2, [r7, #13]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	; 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b40:	7b7a      	ldrb	r2, [r7, #13]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	32ae      	adds	r2, #174	; 0xae
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b56:	e004      	b.n	8006b62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fc03 	bl	8007366 <USBD_CtlError>
              break;
 8006b60:	e000      	b.n	8006b64 <USBD_StdEPReq+0x1c8>
              break;
 8006b62:	bf00      	nop
          }
          break;
 8006b64:	e0ab      	b.n	8006cbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d002      	beq.n	8006b78 <USBD_StdEPReq+0x1dc>
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d032      	beq.n	8006bdc <USBD_StdEPReq+0x240>
 8006b76:	e097      	b.n	8006ca8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <USBD_StdEPReq+0x1f2>
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d004      	beq.n	8006b8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fbed 	bl	8007366 <USBD_CtlError>
                break;
 8006b8c:	e091      	b.n	8006cb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da0b      	bge.n	8006bae <USBD_StdEPReq+0x212>
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	3310      	adds	r3, #16
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	3304      	adds	r3, #4
 8006bac:	e00b      	b.n	8006bc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fc37 	bl	8007448 <USBD_CtlSendData>
              break;
 8006bda:	e06a      	b.n	8006cb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da11      	bge.n	8006c08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	f003 020f 	and.w	r2, r3, #15
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3324      	adds	r3, #36	; 0x24
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d117      	bne.n	8006c2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fbb0 	bl	8007366 <USBD_CtlError>
                  break;
 8006c06:	e054      	b.n	8006cb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	f003 020f 	and.w	r2, r3, #15
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb9d 	bl	8007366 <USBD_CtlError>
                  break;
 8006c2c:	e041      	b.n	8006cb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da0b      	bge.n	8006c4e <USBD_StdEPReq+0x2b2>
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	3310      	adds	r3, #16
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	e00b      	b.n	8006c66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	3304      	adds	r3, #4
 8006c66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <USBD_StdEPReq+0x2d8>
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d103      	bne.n	8006c7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	e00e      	b.n	8006c9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f867 	bl	8007d54 <USBD_LL_IsStallEP>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fbd1 	bl	8007448 <USBD_CtlSendData>
              break;
 8006ca6:	e004      	b.n	8006cb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb5b 	bl	8007366 <USBD_CtlError>
              break;
 8006cb0:	bf00      	nop
          }
          break;
 8006cb2:	e004      	b.n	8006cbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fb55 	bl	8007366 <USBD_CtlError>
          break;
 8006cbc:	bf00      	nop
      }
      break;
 8006cbe:	e005      	b.n	8006ccc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fb4f 	bl	8007366 <USBD_CtlError>
      break;
 8006cc8:	e000      	b.n	8006ccc <USBD_StdEPReq+0x330>
      break;
 8006cca:	bf00      	nop
  }

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	f200 8128 	bhi.w	8006f4e <USBD_GetDescriptor+0x276>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <USBD_GetDescriptor+0x2c>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d21 	.word	0x08006d21
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006d79 	.word	0x08006d79
 8006d10:	08006f4f 	.word	0x08006f4f
 8006d14:	08006f4f 	.word	0x08006f4f
 8006d18:	08006eef 	.word	0x08006eef
 8006d1c:	08006f1b 	.word	0x08006f1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	7c12      	ldrb	r2, [r2, #16]
 8006d2c:	f107 0108 	add.w	r1, r7, #8
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	60f8      	str	r0, [r7, #12]
      break;
 8006d36:	e112      	b.n	8006f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7c1b      	ldrb	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10d      	bne.n	8006d5c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	2202      	movs	r2, #2
 8006d58:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d5a:	e100      	b.n	8006f5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	f107 0208 	add.w	r2, r7, #8
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4798      	blx	r3
 8006d6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	2202      	movs	r2, #2
 8006d74:	701a      	strb	r2, [r3, #0]
      break;
 8006d76:	e0f2      	b.n	8006f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	885b      	ldrh	r3, [r3, #2]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	f200 80ac 	bhi.w	8006edc <USBD_GetDescriptor+0x204>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <USBD_GetDescriptor+0xb4>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006dd9 	.word	0x08006dd9
 8006d94:	08006e0d 	.word	0x08006e0d
 8006d98:	08006e41 	.word	0x08006e41
 8006d9c:	08006e75 	.word	0x08006e75
 8006da0:	08006ea9 	.word	0x08006ea9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	f107 0108 	add.w	r1, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc6:	e091      	b.n	8006eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 facb 	bl	8007366 <USBD_CtlError>
            err++;
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd6:	e089      	b.n	8006eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfa:	e077      	b.n	8006eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fab1 	bl	8007366 <USBD_CtlError>
            err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0a:	e06f      	b.n	8006eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2e:	e05d      	b.n	8006eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa97 	bl	8007366 <USBD_CtlError>
            err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3e:	e055      	b.n	8006eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e62:	e043      	b.n	8006eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa7d 	bl	8007366 <USBD_CtlError>
            err++;
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72fb      	strb	r3, [r7, #11]
          break;
 8006e72:	e03b      	b.n	8006eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e96:	e029      	b.n	8006eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa63 	bl	8007366 <USBD_CtlError>
            err++;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea6:	e021      	b.n	8006eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 0108 	add.w	r1, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eca:	e00f      	b.n	8006eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa49 	bl	8007366 <USBD_CtlError>
            err++;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eda:	e007      	b.n	8006eec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa41 	bl	8007366 <USBD_CtlError>
          err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006eea:	bf00      	nop
      }
      break;
 8006eec:	e037      	b.n	8006f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7c1b      	ldrb	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	f107 0208 	add.w	r2, r7, #8
 8006f02:	4610      	mov	r0, r2
 8006f04:	4798      	blx	r3
 8006f06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f08:	e029      	b.n	8006f5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fa2a 	bl	8007366 <USBD_CtlError>
        err++;
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	3301      	adds	r3, #1
 8006f16:	72fb      	strb	r3, [r7, #11]
      break;
 8006f18:	e021      	b.n	8006f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7c1b      	ldrb	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10d      	bne.n	8006f3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	f107 0208 	add.w	r2, r7, #8
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4798      	blx	r3
 8006f32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	2207      	movs	r2, #7
 8006f3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3c:	e00f      	b.n	8006f5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa10 	bl	8007366 <USBD_CtlError>
        err++;
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4c:	e007      	b.n	8006f5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa08 	bl	8007366 <USBD_CtlError>
      err++;
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f5c:	bf00      	nop
  }

  if (err != 0U)
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11e      	bne.n	8006fa2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	88db      	ldrh	r3, [r3, #6]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d016      	beq.n	8006f9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f6c:	893b      	ldrh	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	88da      	ldrh	r2, [r3, #6]
 8006f76:	893b      	ldrh	r3, [r7, #8]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	bf28      	it	cs
 8006f7c:	4613      	movcs	r3, r2
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f82:	893b      	ldrh	r3, [r7, #8]
 8006f84:	461a      	mov	r2, r3
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa5d 	bl	8007448 <USBD_CtlSendData>
 8006f8e:	e009      	b.n	8006fa4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9e7 	bl	8007366 <USBD_CtlError>
 8006f98:	e004      	b.n	8006fa4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 faae 	bl	80074fc <USBD_CtlSendStatus>
 8006fa0:	e000      	b.n	8006fa4 <USBD_GetDescriptor+0x2cc>
    return;
 8006fa2:	bf00      	nop
  }
}
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop

08006fac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	889b      	ldrh	r3, [r3, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d131      	bne.n	8007022 <USBD_SetAddress+0x76>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	88db      	ldrh	r3, [r3, #6]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d12d      	bne.n	8007022 <USBD_SetAddress+0x76>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	2b7f      	cmp	r3, #127	; 0x7f
 8006fcc:	d829      	bhi.n	8007022 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d104      	bne.n	8006ff0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9bc 	bl	8007366 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fee:	e01d      	b.n	800702c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7bfa      	ldrb	r2, [r7, #15]
 8006ff4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fed5 	bl	8007dac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa7a 	bl	80074fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2202      	movs	r2, #2
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007016:	e009      	b.n	800702c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	e004      	b.n	800702c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f99e 	bl	8007366 <USBD_CtlError>
  }
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	b2da      	uxtb	r2, r3
 8007048:	4b4e      	ldr	r3, [pc, #312]	; (8007184 <USBD_SetConfig+0x150>)
 800704a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800704c:	4b4d      	ldr	r3, [pc, #308]	; (8007184 <USBD_SetConfig+0x150>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d905      	bls.n	8007060 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f985 	bl	8007366 <USBD_CtlError>
    return USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	e08c      	b.n	800717a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d002      	beq.n	8007072 <USBD_SetConfig+0x3e>
 800706c:	2b03      	cmp	r3, #3
 800706e:	d029      	beq.n	80070c4 <USBD_SetConfig+0x90>
 8007070:	e075      	b.n	800715e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007072:	4b44      	ldr	r3, [pc, #272]	; (8007184 <USBD_SetConfig+0x150>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d020      	beq.n	80070bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800707a:	4b42      	ldr	r3, [pc, #264]	; (8007184 <USBD_SetConfig+0x150>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007084:	4b3f      	ldr	r3, [pc, #252]	; (8007184 <USBD_SetConfig+0x150>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7fe ffe1 	bl	8006052 <USBD_SetClassConfig>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f962 	bl	8007366 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070aa:	e065      	b.n	8007178 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa25 	bl	80074fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2203      	movs	r2, #3
 80070b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070ba:	e05d      	b.n	8007178 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa1d 	bl	80074fc <USBD_CtlSendStatus>
      break;
 80070c2:	e059      	b.n	8007178 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070c4:	4b2f      	ldr	r3, [pc, #188]	; (8007184 <USBD_SetConfig+0x150>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d112      	bne.n	80070f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070d4:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <USBD_SetConfig+0x150>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <USBD_SetConfig+0x150>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fe ffd0 	bl	800608a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa06 	bl	80074fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070f0:	e042      	b.n	8007178 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80070f2:	4b24      	ldr	r3, [pc, #144]	; (8007184 <USBD_SetConfig+0x150>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d02a      	beq.n	8007156 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fe ffbe 	bl	800608a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <USBD_SetConfig+0x150>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <USBD_SetConfig+0x150>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fe ff97 	bl	8006052 <USBD_SetClassConfig>
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00f      	beq.n	800714e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f918 	bl	8007366 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe ffa3 	bl	800608a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800714c:	e014      	b.n	8007178 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9d4 	bl	80074fc <USBD_CtlSendStatus>
      break;
 8007154:	e010      	b.n	8007178 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f9d0 	bl	80074fc <USBD_CtlSendStatus>
      break;
 800715c:	e00c      	b.n	8007178 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f900 	bl	8007366 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <USBD_SetConfig+0x150>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fe ff8c 	bl	800608a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007172:	2303      	movs	r3, #3
 8007174:	73fb      	strb	r3, [r7, #15]
      break;
 8007176:	bf00      	nop
  }

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	2000027c 	.word	0x2000027c

08007188 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d004      	beq.n	80071a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8e2 	bl	8007366 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071a2:	e023      	b.n	80071ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	dc02      	bgt.n	80071b6 <USBD_GetConfig+0x2e>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dc03      	bgt.n	80071bc <USBD_GetConfig+0x34>
 80071b4:	e015      	b.n	80071e2 <USBD_GetConfig+0x5a>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d00b      	beq.n	80071d2 <USBD_GetConfig+0x4a>
 80071ba:	e012      	b.n	80071e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3308      	adds	r3, #8
 80071c6:	2201      	movs	r2, #1
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f93c 	bl	8007448 <USBD_CtlSendData>
        break;
 80071d0:	e00c      	b.n	80071ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3304      	adds	r3, #4
 80071d6:	2201      	movs	r2, #1
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f934 	bl	8007448 <USBD_CtlSendData>
        break;
 80071e0:	e004      	b.n	80071ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f8be 	bl	8007366 <USBD_CtlError>
        break;
 80071ea:	bf00      	nop
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	2b02      	cmp	r3, #2
 800720a:	d81e      	bhi.n	800724a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	88db      	ldrh	r3, [r3, #6]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d004      	beq.n	800721e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f8a5 	bl	8007366 <USBD_CtlError>
        break;
 800721c:	e01a      	b.n	8007254 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f043 0202 	orr.w	r2, r3, #2
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	330c      	adds	r3, #12
 800723e:	2202      	movs	r2, #2
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f900 	bl	8007448 <USBD_CtlSendData>
      break;
 8007248:	e004      	b.n	8007254 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f88a 	bl	8007366 <USBD_CtlError>
      break;
 8007252:	bf00      	nop
  }
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	885b      	ldrh	r3, [r3, #2]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d107      	bne.n	800727e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f940 	bl	80074fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800727c:	e013      	b.n	80072a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	885b      	ldrh	r3, [r3, #2]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d10b      	bne.n	800729e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	0a1b      	lsrs	r3, r3, #8
 800728c:	b29b      	uxth	r3, r3
 800728e:	b2da      	uxtb	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f930 	bl	80074fc <USBD_CtlSendStatus>
}
 800729c:	e003      	b.n	80072a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f860 	bl	8007366 <USBD_CtlError>
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d80b      	bhi.n	80072de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d10c      	bne.n	80072e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f910 	bl	80074fc <USBD_CtlSendStatus>
      }
      break;
 80072dc:	e004      	b.n	80072e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f840 	bl	8007366 <USBD_CtlError>
      break;
 80072e6:	e000      	b.n	80072ea <USBD_ClrFeature+0x3c>
      break;
 80072e8:	bf00      	nop
  }
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fa41 	bl	80067a4 <SWAPBYTE>
 8007322:	4603      	mov	r3, r0
 8007324:	461a      	mov	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff fa34 	bl	80067a4 <SWAPBYTE>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fa27 	bl	80067a4 <SWAPBYTE>
 8007356:	4603      	mov	r3, r0
 8007358:	461a      	mov	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	80da      	strh	r2, [r3, #6]
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007370:	2180      	movs	r1, #128	; 0x80
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fcb0 	bl	8007cd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fcac 	bl	8007cd8 <USBD_LL_StallEP>
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d036      	beq.n	800740c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073a2:	6938      	ldr	r0, [r7, #16]
 80073a4:	f000 f836 	bl	8007414 <USBD_GetLen>
 80073a8:	4603      	mov	r3, r0
 80073aa:	3301      	adds	r3, #1
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4413      	add	r3, r2
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7812      	ldrb	r2, [r2, #0]
 80073c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	3301      	adds	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	2203      	movs	r2, #3
 80073d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	3301      	adds	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073d8:	e013      	b.n	8007402 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	4413      	add	r3, r2
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3301      	adds	r3, #1
 80073ea:	613b      	str	r3, [r7, #16]
    idx++;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	3301      	adds	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	4413      	add	r3, r2
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	3301      	adds	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e7      	bne.n	80073da <USBD_GetString+0x52>
 800740a:	e000      	b.n	800740e <USBD_GetString+0x86>
    return;
 800740c:	bf00      	nop
  }
}
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007424:	e005      	b.n	8007432 <USBD_GetLen+0x1e>
  {
    len++;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	3301      	adds	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3301      	adds	r3, #1
 8007430:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f5      	bne.n	8007426 <USBD_GetLen+0x12>
  }

  return len;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2202      	movs	r2, #2
 8007458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	2100      	movs	r1, #0
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fcbb 	bl	8007dea <USBD_LL_Transmit>

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	2100      	movs	r1, #0
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fcaa 	bl	8007dea <USBD_LL_Transmit>

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2203      	movs	r2, #3
 80074b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	2100      	movs	r1, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fcae 	bl	8007e2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	2100      	movs	r1, #0
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fc9d 	bl	8007e2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2204      	movs	r2, #4
 8007508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800750c:	2300      	movs	r3, #0
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc69 	bl	8007dea <USBD_LL_Transmit>

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2205      	movs	r2, #5
 800752e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007532:	2300      	movs	r3, #0
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fc77 	bl	8007e2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800754c:	2200      	movs	r2, #0
 800754e:	4912      	ldr	r1, [pc, #72]	; (8007598 <MX_USB_DEVICE_Init+0x50>)
 8007550:	4812      	ldr	r0, [pc, #72]	; (800759c <MX_USB_DEVICE_Init+0x54>)
 8007552:	f7fe fd01 	bl	8005f58 <USBD_Init>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800755c:	f7f9 f942 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007560:	490f      	ldr	r1, [pc, #60]	; (80075a0 <MX_USB_DEVICE_Init+0x58>)
 8007562:	480e      	ldr	r0, [pc, #56]	; (800759c <MX_USB_DEVICE_Init+0x54>)
 8007564:	f7fe fd28 	bl	8005fb8 <USBD_RegisterClass>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800756e:	f7f9 f939 	bl	80007e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007572:	490c      	ldr	r1, [pc, #48]	; (80075a4 <MX_USB_DEVICE_Init+0x5c>)
 8007574:	4809      	ldr	r0, [pc, #36]	; (800759c <MX_USB_DEVICE_Init+0x54>)
 8007576:	f7fe fc5f 	bl	8005e38 <USBD_CDC_RegisterInterface>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007580:	f7f9 f930 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007584:	4805      	ldr	r0, [pc, #20]	; (800759c <MX_USB_DEVICE_Init+0x54>)
 8007586:	f7fe fd4d 	bl	8006024 <USBD_Start>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007590:	f7f9 f928 	bl	80007e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007594:	bf00      	nop
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200000ac 	.word	0x200000ac
 800759c:	20000280 	.word	0x20000280
 80075a0:	20000018 	.word	0x20000018
 80075a4:	20000098 	.word	0x20000098

080075a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075ac:	2200      	movs	r2, #0
 80075ae:	4905      	ldr	r1, [pc, #20]	; (80075c4 <CDC_Init_FS+0x1c>)
 80075b0:	4805      	ldr	r0, [pc, #20]	; (80075c8 <CDC_Init_FS+0x20>)
 80075b2:	f7fe fc5b 	bl	8005e6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075b6:	4905      	ldr	r1, [pc, #20]	; (80075cc <CDC_Init_FS+0x24>)
 80075b8:	4803      	ldr	r0, [pc, #12]	; (80075c8 <CDC_Init_FS+0x20>)
 80075ba:	f7fe fc79 	bl	8005eb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000d5c 	.word	0x20000d5c
 80075c8:	20000280 	.word	0x20000280
 80075cc:	2000055c 	.word	0x2000055c

080075d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	6039      	str	r1, [r7, #0]
 80075ea:	71fb      	strb	r3, [r7, #7]
 80075ec:	4613      	mov	r3, r2
 80075ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b23      	cmp	r3, #35	; 0x23
 80075f4:	d84a      	bhi.n	800768c <CDC_Control_FS+0xac>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <CDC_Control_FS+0x1c>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	0800768d 	.word	0x0800768d
 8007600:	0800768d 	.word	0x0800768d
 8007604:	0800768d 	.word	0x0800768d
 8007608:	0800768d 	.word	0x0800768d
 800760c:	0800768d 	.word	0x0800768d
 8007610:	0800768d 	.word	0x0800768d
 8007614:	0800768d 	.word	0x0800768d
 8007618:	0800768d 	.word	0x0800768d
 800761c:	0800768d 	.word	0x0800768d
 8007620:	0800768d 	.word	0x0800768d
 8007624:	0800768d 	.word	0x0800768d
 8007628:	0800768d 	.word	0x0800768d
 800762c:	0800768d 	.word	0x0800768d
 8007630:	0800768d 	.word	0x0800768d
 8007634:	0800768d 	.word	0x0800768d
 8007638:	0800768d 	.word	0x0800768d
 800763c:	0800768d 	.word	0x0800768d
 8007640:	0800768d 	.word	0x0800768d
 8007644:	0800768d 	.word	0x0800768d
 8007648:	0800768d 	.word	0x0800768d
 800764c:	0800768d 	.word	0x0800768d
 8007650:	0800768d 	.word	0x0800768d
 8007654:	0800768d 	.word	0x0800768d
 8007658:	0800768d 	.word	0x0800768d
 800765c:	0800768d 	.word	0x0800768d
 8007660:	0800768d 	.word	0x0800768d
 8007664:	0800768d 	.word	0x0800768d
 8007668:	0800768d 	.word	0x0800768d
 800766c:	0800768d 	.word	0x0800768d
 8007670:	0800768d 	.word	0x0800768d
 8007674:	0800768d 	.word	0x0800768d
 8007678:	0800768d 	.word	0x0800768d
 800767c:	0800768d 	.word	0x0800768d
 8007680:	0800768d 	.word	0x0800768d
 8007684:	0800768d 	.word	0x0800768d
 8007688:	0800768d 	.word	0x0800768d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800768c:	bf00      	nop
  }

  return (USBD_OK);
 800768e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4805      	ldr	r0, [pc, #20]	; (80076c0 <CDC_Receive_FS+0x24>)
 80076aa:	f7fe fc01 	bl	8005eb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076ae:	4804      	ldr	r0, [pc, #16]	; (80076c0 <CDC_Receive_FS+0x24>)
 80076b0:	f7fe fc1c 	bl	8005eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000280 	.word	0x20000280

080076c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2212      	movs	r2, #18
 80076f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	200000c8 	.word	0x200000c8

0800770c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2204      	movs	r2, #4
 800771c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800771e:	4b03      	ldr	r3, [pc, #12]	; (800772c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	200000dc 	.word	0x200000dc

08007730 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	4907      	ldr	r1, [pc, #28]	; (8007764 <USBD_FS_ProductStrDescriptor+0x34>)
 8007746:	4808      	ldr	r0, [pc, #32]	; (8007768 <USBD_FS_ProductStrDescriptor+0x38>)
 8007748:	f7ff fe1e 	bl	8007388 <USBD_GetString>
 800774c:	e004      	b.n	8007758 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	4904      	ldr	r1, [pc, #16]	; (8007764 <USBD_FS_ProductStrDescriptor+0x34>)
 8007752:	4805      	ldr	r0, [pc, #20]	; (8007768 <USBD_FS_ProductStrDescriptor+0x38>)
 8007754:	f7ff fe18 	bl	8007388 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007758:	4b02      	ldr	r3, [pc, #8]	; (8007764 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	2000155c 	.word	0x2000155c
 8007768:	08007f9c 	.word	0x08007f9c

0800776c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	4904      	ldr	r1, [pc, #16]	; (800778c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800777c:	4804      	ldr	r0, [pc, #16]	; (8007790 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800777e:	f7ff fe03 	bl	8007388 <USBD_GetString>
  return USBD_StrDesc;
 8007782:	4b02      	ldr	r3, [pc, #8]	; (800778c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	2000155c 	.word	0x2000155c
 8007790:	08007fb4 	.word	0x08007fb4

08007794 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	221a      	movs	r2, #26
 80077a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077a6:	f000 f843 	bl	8007830 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077aa:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	200000e0 	.word	0x200000e0

080077b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d105      	bne.n	80077d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4907      	ldr	r1, [pc, #28]	; (80077ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ce:	4808      	ldr	r0, [pc, #32]	; (80077f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077d0:	f7ff fdda 	bl	8007388 <USBD_GetString>
 80077d4:	e004      	b.n	80077e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	4904      	ldr	r1, [pc, #16]	; (80077ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80077da:	4805      	ldr	r0, [pc, #20]	; (80077f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077dc:	f7ff fdd4 	bl	8007388 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	2000155c 	.word	0x2000155c
 80077f0:	08007fc8 	.word	0x08007fc8

080077f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d105      	bne.n	8007812 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4907      	ldr	r1, [pc, #28]	; (8007828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800780a:	4808      	ldr	r0, [pc, #32]	; (800782c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800780c:	f7ff fdbc 	bl	8007388 <USBD_GetString>
 8007810:	e004      	b.n	800781c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007816:	4805      	ldr	r0, [pc, #20]	; (800782c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007818:	f7ff fdb6 	bl	8007388 <USBD_GetString>
  }
  return USBD_StrDesc;
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	2000155c 	.word	0x2000155c
 800782c:	08007fd4 	.word	0x08007fd4

08007830 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007836:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <Get_SerialNum+0x44>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800783c:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <Get_SerialNum+0x48>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <Get_SerialNum+0x4c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007856:	2208      	movs	r2, #8
 8007858:	4909      	ldr	r1, [pc, #36]	; (8007880 <Get_SerialNum+0x50>)
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f814 	bl	8007888 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007860:	2204      	movs	r2, #4
 8007862:	4908      	ldr	r1, [pc, #32]	; (8007884 <Get_SerialNum+0x54>)
 8007864:	68b8      	ldr	r0, [r7, #8]
 8007866:	f000 f80f 	bl	8007888 <IntToUnicode>
  }
}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	1fff7a10 	.word	0x1fff7a10
 8007878:	1fff7a14 	.word	0x1fff7a14
 800787c:	1fff7a18 	.word	0x1fff7a18
 8007880:	200000e2 	.word	0x200000e2
 8007884:	200000f2 	.word	0x200000f2

08007888 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800789a:	2300      	movs	r3, #0
 800789c:	75fb      	strb	r3, [r7, #23]
 800789e:	e027      	b.n	80078f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	0f1b      	lsrs	r3, r3, #28
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	d80b      	bhi.n	80078c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	0f1b      	lsrs	r3, r3, #28
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	4619      	mov	r1, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	440b      	add	r3, r1
 80078b8:	3230      	adds	r2, #48	; 0x30
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e00a      	b.n	80078d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0f1b      	lsrs	r3, r3, #28
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4619      	mov	r1, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	440b      	add	r3, r1
 80078d0:	3237      	adds	r2, #55	; 0x37
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	3301      	adds	r3, #1
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	4413      	add	r3, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	3301      	adds	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
 80078f0:	7dfa      	ldrb	r2, [r7, #23]
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d3d3      	bcc.n	80078a0 <IntToUnicode+0x18>
  }
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
	...

08007908 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007910:	f107 0314 	add.w	r3, r7, #20
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	605a      	str	r2, [r3, #4]
 800791a:	609a      	str	r2, [r3, #8]
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007928:	d13a      	bne.n	80079a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 8007934:	f043 0301 	orr.w	r3, r3, #1
 8007938:	6313      	str	r3, [r2, #48]	; 0x30
 800793a:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800794a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794c:	2302      	movs	r3, #2
 800794e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007954:	2303      	movs	r3, #3
 8007956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007958:	230a      	movs	r3, #10
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800795c:	f107 0314 	add.w	r3, r7, #20
 8007960:	4619      	mov	r1, r3
 8007962:	4812      	ldr	r0, [pc, #72]	; (80079ac <HAL_PCD_MspInit+0xa4>)
 8007964:	f7f9 fdc8 	bl	80014f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 800796a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796c:	4a0e      	ldr	r2, [pc, #56]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	6353      	str	r3, [r2, #52]	; 0x34
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 800797a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 800797e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007982:	6453      	str	r3, [r2, #68]	; 0x44
 8007984:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <HAL_PCD_MspInit+0xa0>)
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007990:	2200      	movs	r2, #0
 8007992:	2100      	movs	r1, #0
 8007994:	2043      	movs	r0, #67	; 0x43
 8007996:	f7f9 fa6c 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800799a:	2043      	movs	r0, #67	; 0x43
 800799c:	f7f9 fa85 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079a0:	bf00      	nop
 80079a2:	3728      	adds	r7, #40	; 0x28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40023800 	.word	0x40023800
 80079ac:	40020000 	.word	0x40020000

080079b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe fb79 	bl	80060be <USBD_LL_SetupStage>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80079e6:	78fa      	ldrb	r2, [r7, #3]
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	440b      	add	r3, r1
 80079f4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	4619      	mov	r1, r3
 80079fe:	f7fe fbb3 	bl	8006168 <USBD_LL_DataOutStage>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	3320      	adds	r3, #32
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	4619      	mov	r1, r3
 8007a32:	f7fe fc4c 	bl	80062ce <USBD_LL_DataInStage>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fd86 	bl	800655e <USBD_LL_SOF>
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a62:	2301      	movs	r3, #1
 8007a64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	79db      	ldrb	r3, [r3, #7]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d001      	beq.n	8007a72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a6e:	f7f8 feb9 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a78:	7bfa      	ldrb	r2, [r7, #15]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fd2a 	bl	80064d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe fcd2 	bl	8006432 <USBD_LL_Reset>
}
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fd25 	bl	80064f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7adb      	ldrb	r3, [r3, #11]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <HAL_PCD_SuspendCallback+0x48>)
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	4a03      	ldr	r2, [pc, #12]	; (8007ae0 <HAL_PCD_SuspendCallback+0x48>)
 8007ad2:	f043 0306 	orr.w	r3, r3, #6
 8007ad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	e000ed00 	.word	0xe000ed00

08007ae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fd1b 	bl	800652e <USBD_LL_Resume>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	4611      	mov	r1, r2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fd73 	bl	8006602 <USBD_LL_IsoOUTIncomplete>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b36:	78fa      	ldrb	r2, [r7, #3]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fd2f 	bl	800659e <USBD_LL_IsoINIncomplete>
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fd85 	bl	8006666 <USBD_LL_DevConnected>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fd82 	bl	800667c <USBD_LL_DevDisconnected>
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d13c      	bne.n	8007c0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b90:	4a20      	ldr	r2, [pc, #128]	; (8007c14 <USBD_LL_Init+0x94>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <USBD_LL_Init+0x94>)
 8007b9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ba0:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <USBD_LL_Init+0x94>)
 8007ba2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ba6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	; (8007c14 <USBD_LL_Init+0x94>)
 8007baa:	2204      	movs	r2, #4
 8007bac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bae:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bb4:	4b17      	ldr	r3, [pc, #92]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bba:	4b16      	ldr	r3, [pc, #88]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007bc0:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bc6:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bcc:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bd2:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bde:	480d      	ldr	r0, [pc, #52]	; (8007c14 <USBD_LL_Init+0x94>)
 8007be0:	f7f9 fe0e 	bl	8001800 <HAL_PCD_Init>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bea:	f7f8 fdfb 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bee:	2180      	movs	r1, #128	; 0x80
 8007bf0:	4808      	ldr	r0, [pc, #32]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bf2:	f7fb f838 	bl	8002c66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bf6:	2240      	movs	r2, #64	; 0x40
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	4806      	ldr	r0, [pc, #24]	; (8007c14 <USBD_LL_Init+0x94>)
 8007bfc:	f7fa ffec 	bl	8002bd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c00:	2280      	movs	r2, #128	; 0x80
 8007c02:	2101      	movs	r1, #1
 8007c04:	4803      	ldr	r0, [pc, #12]	; (8007c14 <USBD_LL_Init+0x94>)
 8007c06:	f7fa ffe7 	bl	8002bd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	2000175c 	.word	0x2000175c

08007c18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7f9 fef5 	bl	8001a1e <HAL_PCD_Start>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f942 	bl	8007ec4 <USBD_Get_USB_Status>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	70fb      	strb	r3, [r7, #3]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70bb      	strb	r3, [r7, #2]
 8007c64:	4613      	mov	r3, r2
 8007c66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c76:	78bb      	ldrb	r3, [r7, #2]
 8007c78:	883a      	ldrh	r2, [r7, #0]
 8007c7a:	78f9      	ldrb	r1, [r7, #3]
 8007c7c:	f7fa fbc9 	bl	8002412 <HAL_PCD_EP_Open>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f91c 	bl	8007ec4 <USBD_Get_USB_Status>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fa fc12 	bl	80024e2 <HAL_PCD_EP_Close>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 f8fd 	bl	8007ec4 <USBD_Get_USB_Status>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fa fcca 	bl	8002690 <HAL_PCD_EP_SetStall>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f8de 	bl	8007ec4 <USBD_Get_USB_Status>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d30:	78fa      	ldrb	r2, [r7, #3]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fa fd0e 	bl	8002756 <HAL_PCD_EP_ClrStall>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f8bf 	bl	8007ec4 <USBD_Get_USB_Status>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da0b      	bge.n	8007d88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d76:	68f9      	ldr	r1, [r7, #12]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	3316      	adds	r3, #22
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	e00b      	b.n	8007da0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	4613      	mov	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007d9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fa fafd 	bl	80023ca <HAL_PCD_SetAddress>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f874 	bl	8007ec4 <USBD_Get_USB_Status>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b086      	sub	sp, #24
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
 8007df6:	460b      	mov	r3, r1
 8007df8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e08:	7af9      	ldrb	r1, [r7, #11]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	f7fa fc05 	bl	800261c <HAL_PCD_EP_Transmit>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f853 	bl	8007ec4 <USBD_Get_USB_Status>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e22:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e4a:	7af9      	ldrb	r1, [r7, #11]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	f7fa fb91 	bl	8002576 <HAL_PCD_EP_Receive>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f832 	bl	8007ec4 <USBD_Get_USB_Status>
 8007e60:	4603      	mov	r3, r0
 8007e62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e64:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fa fbb1 	bl	80025ec <HAL_PCD_EP_GetRxCount>
 8007e8a:	4603      	mov	r3, r0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e9c:	4b03      	ldr	r3, [pc, #12]	; (8007eac <USBD_static_malloc+0x18>)
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20001c40 	.word	0x20001c40

08007eb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d817      	bhi.n	8007f08 <USBD_Get_USB_Status+0x44>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <USBD_Get_USB_Status+0x1c>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007ef7 	.word	0x08007ef7
 8007ee8:	08007efd 	.word	0x08007efd
 8007eec:	08007f03 	.word	0x08007f03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef4:	e00b      	b.n	8007f0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8007efa:	e008      	b.n	8007f0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
    break;
 8007f00:	e005      	b.n	8007f0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f02:	2303      	movs	r3, #3
 8007f04:	73fb      	strb	r3, [r7, #15]
    break;
 8007f06:	e002      	b.n	8007f0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0c:	bf00      	nop
  }
  return usb_status;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <memset>:
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d100      	bne.n	8007f26 <memset+0xa>
 8007f24:	4770      	bx	lr
 8007f26:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2a:	e7f9      	b.n	8007f20 <memset+0x4>

08007f2c <__libc_init_array>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4d0d      	ldr	r5, [pc, #52]	; (8007f64 <__libc_init_array+0x38>)
 8007f30:	4c0d      	ldr	r4, [pc, #52]	; (8007f68 <__libc_init_array+0x3c>)
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	2600      	movs	r6, #0
 8007f38:	42a6      	cmp	r6, r4
 8007f3a:	d109      	bne.n	8007f50 <__libc_init_array+0x24>
 8007f3c:	4d0b      	ldr	r5, [pc, #44]	; (8007f6c <__libc_init_array+0x40>)
 8007f3e:	4c0c      	ldr	r4, [pc, #48]	; (8007f70 <__libc_init_array+0x44>)
 8007f40:	f000 f818 	bl	8007f74 <_init>
 8007f44:	1b64      	subs	r4, r4, r5
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	2600      	movs	r6, #0
 8007f4a:	42a6      	cmp	r6, r4
 8007f4c:	d105      	bne.n	8007f5a <__libc_init_array+0x2e>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f54:	4798      	blx	r3
 8007f56:	3601      	adds	r6, #1
 8007f58:	e7ee      	b.n	8007f38 <__libc_init_array+0xc>
 8007f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5e:	4798      	blx	r3
 8007f60:	3601      	adds	r6, #1
 8007f62:	e7f2      	b.n	8007f4a <__libc_init_array+0x1e>
 8007f64:	08008004 	.word	0x08008004
 8007f68:	08008004 	.word	0x08008004
 8007f6c:	08008004 	.word	0x08008004
 8007f70:	08008008 	.word	0x08008008

08007f74 <_init>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr

08007f80 <_fini>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr
