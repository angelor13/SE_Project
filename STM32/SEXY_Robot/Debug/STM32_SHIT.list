
STM32_SHIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000b180  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800b320  0800b320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b408  0800b408  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b410  0800b410  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b414  0800b414  0001b414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800b418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002018  2000014c  0800b564  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002164  0800b564  00022164  2**0
=======
  1 .text         0000abec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800ad8c  0800ad8c  0001ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae60  0800ae60  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae60  0800ae60  0001ae60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae68  0800ae68  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae68  0800ae68  0001ae68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800ae70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb4  2000014c  0800afbc  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002100  0800afbc  00022100  2**0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   00015c1a  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375f  00000000  00000000  00035dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00039538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2f  00000000  00000000  0003a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194f6  00000000  00000000  0003b83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170e7  00000000  00000000  00054d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091ec6  00000000  00000000  0006be1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005940  00000000  00000000  000fdce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00103624  2**0
=======
 13 .debug_info   000158de  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375e  00000000  00000000  00035a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00039200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f08  00000000  00000000  0003a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194f6  00000000  00000000  0003b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018088  00000000  00000000  000549a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091e51  00000000  00000000  0006ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005864  00000000  00000000  000fe880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001040e4  2**0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	0800b308 	.word	0x0800b308
=======
 80001c0:	0800ad74 	.word	0x0800ad74
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
<<<<<<< HEAD
 80001dc:	0800b308 	.word	0x0800b308
=======
 80001dc:	0800ad74 	.word	0x0800ad74
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

<<<<<<< HEAD
08000db8 <xprintf>:
#include <stdint.h>
#include <stdarg.h>
#include <stdio.h>

int xprintf(const char* fmt, ...) {
 8000db8:	b40f      	push	{r0, r1, r2, r3}
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b0a4      	sub	sp, #144	; 0x90
 8000dbe:	af00      	add	r7, sp, #0
    uint8_t rc = USBD_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    char tmp[128];
	va_list ptr;

	va_start(ptr, fmt);
 8000dc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dca:	607b      	str	r3, [r7, #4]
	int len = vsprintf(tmp, fmt, ptr);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f009 fe08 	bl	800a9ec <vsiprintf>
 8000ddc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    va_end(ptr);

    do {
        rc = CDC_Transmit_FS((uint8_t*)tmp, len);
 8000de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f009 f995 	bl	800a11c <CDC_Transmit_FS>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    } while (USBD_BUSY == rc);
 8000df8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d0ef      	beq.n	8000de0 <xprintf+0x28>

    if (USBD_FAIL == rc) {
 8000e00:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d101      	bne.n	8000e0c <xprintf+0x54>
        return 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e001      	b.n	8000e10 <xprintf+0x58>
    }

    return len;
 8000e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3790      	adds	r7, #144	; 0x90
 8000e14:	46bd      	mov	sp, r7
 8000e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e1a:	b004      	add	sp, #16
 8000e1c:	4770      	bx	lr

08000e1e <constrain>:
int32_t delta_right = 0;

#define PID_OUTPUT_MAX 65535
#define ERROR_INTEGRAL_MAX 10000

float constrain(float x, float min, float max) {
 8000e1e:	b480      	push	{r7}
 8000e20:	b085      	sub	sp, #20
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e28:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e2c:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x < min) {
 8000e30:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	d501      	bpl.n	8000e46 <constrain+0x28>
		return min;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	e00b      	b.n	8000e5e <constrain+0x40>
	} else if (x > max) {
 8000e46:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	dd01      	ble.n	8000e5c <constrain+0x3e>
		return max;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	e000      	b.n	8000e5e <constrain+0x40>
	} else {
		return x;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb0 0a67 	vmov.f32	s0, s15
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <GetMicros>:

float lerpf(float a, float b, float t) {
    return (b - a) * t;
}

static inline float GetMicros() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
    uint32_t ms;
    uint32_t st;

    do {
        ms = HAL_GetTick();
 8000e76:	f001 fad9 	bl	800242c <HAL_GetTick>
 8000e7a:	6078      	str	r0, [r7, #4]
        st = SysTick->VAL;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <GetMicros+0x54>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	603b      	str	r3, [r7, #0]
        asm volatile("nop");
 8000e82:	bf00      	nop
        asm volatile("nop");
 8000e84:	bf00      	nop
    } while (ms != HAL_GetTick());
 8000e86:	f001 fad1 	bl	800242c <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d1f1      	bne.n	8000e76 <GetMicros+0x6>

    return (float) (ms * 1000 - st / ((SysTick->LOAD + 1) / 1000));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e98:	fb03 f202 	mul.w	r2, r3, r2
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <GetMicros+0x54>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4909      	ldr	r1, [pc, #36]	; (8000ec8 <GetMicros+0x58>)
 8000ea4:	fba1 1303 	umull	r1, r3, r1, r3
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	6839      	ldr	r1, [r7, #0]
 8000eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	e000e010 	.word	0xe000e010
 8000ec8:	10624dd3 	.word	0x10624dd3
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <PID_Control_L>:

float PID_Control_L(float Kp, float Ki, float Kd, float setpoint, float value) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000eda:	edc7 0a04 	vstr	s1, [r7, #16]
 8000ede:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ee2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ee6:	ed87 2a01 	vstr	s4, [r7, #4]
=======
08000db8 <constrain>:
#include "stm32f4xx_hal.h"

#define ERROR_INTEGRAL_MAX 1000
#define PID_OUTPUT_MAX 65535

float constrain(float x, float min, float max) {
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dc6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x < min) {
 8000dca:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	d501      	bpl.n	8000de0 <constrain+0x28>
		return min;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	e00b      	b.n	8000df8 <constrain+0x40>
	} else if (x > max) {
 8000de0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df0:	dd01      	ble.n	8000df6 <constrain+0x3e>
		return max;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e000      	b.n	8000df8 <constrain+0x40>
	} else {
		return x;
 8000df6:	68fb      	ldr	r3, [r7, #12]
	}
}
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <PID_Control>:


float PID_Control(float Kp, float Ki, float Kd, float setpoint, float value) {
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e16:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e1a:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e1e:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e22:	ed87 2a01 	vstr	s4, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    static float error_previous = 0.0;
    static float time_current = 0.0;
    static float time_previous = 0.0;

    // Calculate time difference
<<<<<<< HEAD
    time_current = GetMicros() / 1e6;
 8000eea:	f7ff ffc1 	bl	8000e70 <GetMicros>
 8000eee:	ee10 3a10 	vmov	r3, s0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb28 	bl	8000548 <__aeabi_f2d>
 8000ef8:	a353      	add	r3, pc, #332	; (adr r3, 8001048 <PID_Control_L+0x178>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fca5 	bl	800084c <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fd87 	bl	8000a1c <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a45      	ldr	r2, [pc, #276]	; (8001028 <PID_Control_L+0x158>)
 8000f12:	6013      	str	r3, [r2, #0]
    double dt = time_current - time_previous;
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <PID_Control_L+0x158>)
 8000f16:	ed93 7a00 	vldr	s14, [r3]
 8000f1a:	4b44      	ldr	r3, [pc, #272]	; (800102c <PID_Control_L+0x15c>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	ee17 0a90 	vmov	r0, s15
 8000f28:	f7ff fb0e 	bl	8000548 <__aeabi_f2d>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    time_previous = time_current;
 8000f34:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <PID_Control_L+0x158>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a3c      	ldr	r2, [pc, #240]	; (800102c <PID_Control_L+0x15c>)
 8000f3a:	6013      	str	r3, [r2, #0]

    // Calculate error
    float error = setpoint - value;
 8000f3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//    xprintf("X:%d, %d\n", (int32_t)(error * 1e6), (int32_t)value);

    // Proportional term
    float P = Kp * error;
 8000f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f58:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Integral term
    error_integral = error_integral + error;
 8000f5c:	4b34      	ldr	r3, [pc, #208]	; (8001030 <PID_Control_L+0x160>)
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <PID_Control_L+0x160>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
    float I = constrain(Ki * error_integral * dt, -ERROR_INTEGRAL_MAX, ERROR_INTEGRAL_MAX);
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <PID_Control_L+0x160>)
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	ee17 0a90 	vmov	r0, s15
 8000f82:	f7ff fae1 	bl	8000548 <__aeabi_f2d>
 8000f86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f8a:	f7ff fb35 	bl	80005f8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd41 	bl	8000a1c <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8001034 <PID_Control_L+0x164>
 8000fa0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001038 <PID_Control_L+0x168>
 8000fa4:	ee00 3a10 	vmov	s0, r3
 8000fa8:	f7ff ff39 	bl	8000e1e <constrain>
 8000fac:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    // Derivative term
    float D = Kd * (error - error_previous) / dt;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <PID_Control_L+0x16c>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc6:	ee17 0a90 	vmov	r0, s15
 8000fca:	f7ff fabd 	bl	8000548 <__aeabi_f2d>
 8000fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fd2:	f7ff fc3b 	bl	800084c <__aeabi_ddiv>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fd1d 	bl	8000a1c <__aeabi_d2f>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	623b      	str	r3, [r7, #32]
    error_previous = error;
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <PID_Control_L+0x16c>)
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fea:	6013      	str	r3, [r2, #0]

    // PID Output
    float output = constrain(P + I + D, -PID_OUTPUT_MAX, PID_OUTPUT_MAX);
 8000fec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000ff0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001040 <PID_Control_L+0x170>
 8001004:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001044 <PID_Control_L+0x174>
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	f7ff ff07 	bl	8000e1e <constrain>
 8001010:	ed87 0a07 	vstr	s0, [r7, #28]

    return output;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	ee07 3a90 	vmov	s15, r3
}
 800101a:	eeb0 0a67 	vmov.f32	s0, s15
 800101e:	3738      	adds	r7, #56	; 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	f3af 8000 	nop.w
 8001028:	200003f0 	.word	0x200003f0
 800102c:	200003f4 	.word	0x200003f4
 8001030:	200003f8 	.word	0x200003f8
 8001034:	461c4000 	.word	0x461c4000
 8001038:	c61c4000 	.word	0xc61c4000
 800103c:	200003fc 	.word	0x200003fc
 8001040:	477fff00 	.word	0x477fff00
 8001044:	c77fff00 	.word	0xc77fff00
 8001048:	00000000 	.word	0x00000000
 800104c:	412e8480 	.word	0x412e8480

08001050 <PID_Control_R>:
=======
    time_current += HAL_GetTick() / 1000.0;
 8000e26:	f001 f837 	bl	8001e98 <HAL_GetTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb69 	bl	8000504 <__aeabi_ui2d>
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b52      	ldr	r3, [pc, #328]	; (8000f80 <PID_Control+0x174>)
 8000e38:	f7ff fd08 	bl	800084c <__aeabi_ddiv>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4614      	mov	r4, r2
 8000e42:	461d      	mov	r5, r3
 8000e44:	4b4f      	ldr	r3, [pc, #316]	; (8000f84 <PID_Control+0x178>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb7d 	bl	8000548 <__aeabi_f2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4620      	mov	r0, r4
 8000e54:	4629      	mov	r1, r5
 8000e56:	f7ff fa19 	bl	800028c <__adddf3>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fddb 	bl	8000a1c <__aeabi_d2f>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a46      	ldr	r2, [pc, #280]	; (8000f84 <PID_Control+0x178>)
 8000e6a:	6013      	str	r3, [r2, #0]
    double dt = time_current - time_previous;
 8000e6c:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <PID_Control+0x178>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <PID_Control+0x17c>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7c:	ee17 0a90 	vmov	r0, s15
 8000e80:	f7ff fb62 	bl	8000548 <__aeabi_f2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    time_previous = time_current;
 8000e8c:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <PID_Control+0x178>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <PID_Control+0x17c>)
 8000e92:	6013      	str	r3, [r2, #0]

    // Calculate error
    float error = setpoint - value;
 8000e94:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Proportional term
    float P = Kp * error;
 8000ea4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ea8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Integral term
    error_integral = constrain(error_integral + error, 0, ERROR_INTEGRAL_MAX);
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <PID_Control+0x180>)
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8000f90 <PID_Control+0x184>
 8000ec6:	eddf 0a33 	vldr	s1, [pc, #204]	; 8000f94 <PID_Control+0x188>
 8000eca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ece:	f7ff ff73 	bl	8000db8 <constrain>
 8000ed2:	eef0 7a40 	vmov.f32	s15, s0
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <PID_Control+0x180>)
 8000ed8:	edc3 7a00 	vstr	s15, [r3]
    float I = Ki * error_integral * dt;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <PID_Control+0x180>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eea:	ee17 0a90 	vmov	r0, s15
 8000eee:	f7ff fb2b 	bl	8000548 <__aeabi_f2d>
 8000ef2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ef6:	f7ff fb7f 	bl	80005f8 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fd8b 	bl	8000a1c <__aeabi_d2f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24

    // Derivative term
    float D = Kd * (error - error_previous) / dt;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <PID_Control+0x18c>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000f14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	ee17 0a90 	vmov	r0, s15
 8000f24:	f7ff fb10 	bl	8000548 <__aeabi_f2d>
 8000f28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f2c:	f7ff fc8e 	bl	800084c <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd70 	bl	8000a1c <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	623b      	str	r3, [r7, #32]
    error_previous = error;
 8000f40:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <PID_Control+0x18c>)
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	6013      	str	r3, [r2, #0]

    // PID Output
    float output = constrain(P + I + D, -PID_OUTPUT_MAX, PID_OUTPUT_MAX);
 8000f46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8000f9c <PID_Control+0x190>
 8000f5e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8000fa0 <PID_Control+0x194>
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f7ff ff27 	bl	8000db8 <constrain>
 8000f6a:	ed87 0a07 	vstr	s0, [r7, #28]

    return output;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	ee07 3a90 	vmov	s15, r3
}
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	3738      	adds	r7, #56	; 0x38
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	408f4000 	.word	0x408f4000
 8000f84:	200003a8 	.word	0x200003a8
 8000f88:	200003ac 	.word	0x200003ac
 8000f8c:	200003b0 	.word	0x200003b0
 8000f90:	447a0000 	.word	0x447a0000
 8000f94:	00000000 	.word	0x00000000
 8000f98:	200003b4 	.word	0x200003b4
 8000f9c:	477fff00 	.word	0x477fff00
 8000fa0:	c77fff00 	.word	0xc77fff00

08000fa4 <xprintf>:
extern TIM_HandleTypeDef htim5;
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c


<<<<<<< HEAD
float PID_Control_R(float Kp, float Ki, float Kd, float setpoint, float value) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a05 	vstr	s0, [r7, #20]
 800105a:	edc7 0a04 	vstr	s1, [r7, #16]
 800105e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001062:	edc7 1a02 	vstr	s3, [r7, #8]
 8001066:	ed87 2a01 	vstr	s4, [r7, #4]
    static float error_previous = 0.0;
    static float time_current = 0.0;
    static float time_previous = 0.0;

    // Calculate time difference
    time_current = GetMicros() / 1e6;
 800106a:	f7ff ff01 	bl	8000e70 <GetMicros>
 800106e:	ee10 3a10 	vmov	r3, s0
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa68 	bl	8000548 <__aeabi_f2d>
 8001078:	a353      	add	r3, pc, #332	; (adr r3, 80011c8 <PID_Control_R+0x178>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbe5 	bl	800084c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fcc7 	bl	8000a1c <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <PID_Control_R+0x158>)
 8001092:	6013      	str	r3, [r2, #0]
    double dt = time_current - time_previous;
 8001094:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <PID_Control_R+0x158>)
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	4b44      	ldr	r3, [pc, #272]	; (80011ac <PID_Control_R+0x15c>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	ee17 0a90 	vmov	r0, s15
 80010a8:	f7ff fa4e 	bl	8000548 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    time_previous = time_current;
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <PID_Control_R+0x158>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3c      	ldr	r2, [pc, #240]	; (80011ac <PID_Control_R+0x15c>)
 80010ba:	6013      	str	r3, [r2, #0]

    // Calculate error
    float error = setpoint - value;
 80010bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80010c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//    xprintf("X:%d, %d\n", (int32_t)(error * 1e6), (int32_t)value);

    // Proportional term
    float P = Kp * error;
 80010cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Integral term
    error_integral = error_integral + error;
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <PID_Control_R+0x160>)
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <PID_Control_R+0x160>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
    float I = constrain(Ki * error_integral * dt, -ERROR_INTEGRAL_MAX, ERROR_INTEGRAL_MAX);
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <PID_Control_R+0x160>)
 80010f2:	ed93 7a00 	vldr	s14, [r3]
 80010f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	ee17 0a90 	vmov	r0, s15
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800110a:	f7ff fa75 	bl	80005f8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fc81 	bl	8000a1c <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80011b4 <PID_Control_R+0x164>
 8001120:	eddf 0a25 	vldr	s1, [pc, #148]	; 80011b8 <PID_Control_R+0x168>
 8001124:	ee00 3a10 	vmov	s0, r3
 8001128:	f7ff fe79 	bl	8000e1e <constrain>
 800112c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    // Derivative term
    float D = Kd * (error - error_previous) / dt;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <PID_Control_R+0x16c>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800113a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800113e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff f9fd 	bl	8000548 <__aeabi_f2d>
 800114e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc5d 	bl	8000a1c <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	623b      	str	r3, [r7, #32]
    error_previous = error;
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <PID_Control_R+0x16c>)
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	6013      	str	r3, [r2, #0]

    // PID Output
    float output = constrain(P + I + D, -PID_OUTPUT_MAX, PID_OUTPUT_MAX);
 800116c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001170:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001178:	edd7 7a08 	vldr	s15, [r7, #32]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80011c0 <PID_Control_R+0x170>
 8001184:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80011c4 <PID_Control_R+0x174>
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	f7ff fe47 	bl	8000e1e <constrain>
 8001190:	ed87 0a07 	vstr	s0, [r7, #28]

    return output;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	ee07 3a90 	vmov	s15, r3
}
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	f3af 8000 	nop.w
 80011a8:	20000400 	.word	0x20000400
 80011ac:	20000404 	.word	0x20000404
 80011b0:	20000408 	.word	0x20000408
 80011b4:	461c4000 	.word	0x461c4000
 80011b8:	c61c4000 	.word	0xc61c4000
 80011bc:	2000040c 	.word	0x2000040c
 80011c0:	477fff00 	.word	0x477fff00
 80011c4:	c77fff00 	.word	0xc77fff00
 80011c8:	00000000 	.word	0x00000000
 80011cc:	412e8480 	.word	0x412e8480

080011d0 <getMotorDeltaLeft>:


int32_t getMotorDeltaLeft() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;

	int32_t current_pulse = htim1.Instance->CNT;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <getMotorDeltaLeft+0x5c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 80011de:	f001 f925 	bl	800242c <HAL_GetTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <getMotorDeltaLeft+0x60>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <getMotorDeltaLeft+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	603b      	str	r3, [r7, #0]

	if (delta_tick > 5) {
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	dd0f      	ble.n	8001220 <getMotorDeltaLeft+0x50>
		delta_left = delta_pulse * 1000 / delta_tick;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001206:	fb03 f202 	mul.w	r2, r3, r2
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <getMotorDeltaLeft+0x68>)
 8001212:	6013      	str	r3, [r2, #0]
		last_tick = current_tick;
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <getMotorDeltaLeft+0x64>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	6013      	str	r3, [r2, #0]
		last_pulse = current_pulse;
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <getMotorDeltaLeft+0x60>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6013      	str	r3, [r2, #0]
	}

	return delta_left;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <getMotorDeltaLeft+0x68>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000288 	.word	0x20000288
 8001230:	20000410 	.word	0x20000410
 8001234:	20000414 	.word	0x20000414
 8001238:	20000168 	.word	0x20000168

0800123c <getMotorDeltaRight>:

int32_t getMotorDeltaRight() {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
=======
int xprintf(const char* fmt, ...) {
 8000fa4:	b40f      	push	{r0, r1, r2, r3}
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b0a4      	sub	sp, #144	; 0x90
 8000faa:	af00      	add	r7, sp, #0
    uint8_t rc = USBD_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    char tmp[128];
	va_list ptr;

	va_start(ptr, fmt);
 8000fb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb6:	607b      	str	r3, [r7, #4]
	int len = vsprintf(tmp, fmt, ptr);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 fa48 	bl	800a458 <vsiprintf>
 8000fc8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    va_end(ptr);

    do {
        rc = CDC_Transmit_FS((uint8_t*)tmp, len);
 8000fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f008 fdd5 	bl	8009b88 <CDC_Transmit_FS>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    } while (USBD_BUSY == rc);
 8000fe4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d0ef      	beq.n	8000fcc <xprintf+0x28>

    if (USBD_FAIL == rc) {
 8000fec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d101      	bne.n	8000ff8 <xprintf+0x54>
        return 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e001      	b.n	8000ffc <xprintf+0x58>
    }

    return len;
 8000ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3790      	adds	r7, #144	; 0x90
 8001000:	46bd      	mov	sp, r7
 8001002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001006:	b004      	add	sp, #16
 8001008:	4770      	bx	lr
	...

0800100c <getMotorDeltaLeft>:

int32_t getMotorDeltaLeft() {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;

	int32_t current_pulse = htim5.Instance->CNT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <getMotorDeltaLeft+0x58>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 800101a:	f000 ff3d 	bl	8001e98 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <getMotorDeltaLeft+0x5c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <getMotorDeltaLeft+0x60>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	603b      	str	r3, [r7, #0]

	last_tick = current_tick;
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <getMotorDeltaLeft+0x60>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	6013      	str	r3, [r2, #0]
	last_pulse = current_pulse;
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <getMotorDeltaLeft+0x5c>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6013      	str	r3, [r2, #0]

//	xprintf("%d, %d\n\n", delta_pulse, delta_tick);

	delta_left = delta_pulse * 1000 / delta_tick;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001048:	fb03 f202 	mul.w	r2, r3, r2
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <getMotorDeltaLeft+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

	return delta_left;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <getMotorDeltaLeft+0x64>)
 8001058:	681b      	ldr	r3, [r3, #0]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000360 	.word	0x20000360
 8001068:	200003b8 	.word	0x200003b8
 800106c:	200003bc 	.word	0x200003bc
 8001070:	20000168 	.word	0x20000168

08001074 <getMotorDeltaRight>:

int32_t getMotorDeltaRight() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;

	int32_t current_pulse = htim5.Instance->CNT;
<<<<<<< HEAD
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <getMotorDeltaRight+0x5c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 800124a:	f001 f8ef 	bl	800242c <HAL_GetTick>
 800124e:	4603      	mov	r3, r0
 8001250:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <getMotorDeltaRight+0x60>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <getMotorDeltaRight+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	603b      	str	r3, [r7, #0]

	if (delta_tick > 5) {
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b05      	cmp	r3, #5
 800126a:	dd0f      	ble.n	800128c <getMotorDeltaRight+0x50>
		delta_right = delta_pulse * 1000 / delta_tick;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001272:	fb03 f202 	mul.w	r2, r3, r2
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	fb92 f3f3 	sdiv	r3, r2, r3
 800127c:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <getMotorDeltaRight+0x68>)
 800127e:	6013      	str	r3, [r2, #0]
		last_tick = current_tick;
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <getMotorDeltaRight+0x64>)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	6013      	str	r3, [r2, #0]
		last_pulse = current_pulse;
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <getMotorDeltaRight+0x60>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6013      	str	r3, [r2, #0]
	}

	return delta_right;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <getMotorDeltaRight+0x68>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200003a8 	.word	0x200003a8
 800129c:	20000418 	.word	0x20000418
 80012a0:	2000041c 	.word	0x2000041c
 80012a4:	2000016c 	.word	0x2000016c

080012a8 <setMotorDeltaLeft>:

void setMotorDeltaLeft(int32_t target) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	static float offset = 0;
	static uint32_t last_tick = 0;
	float pid = PID_Control_L(20, 10, 0, target, delta_left);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <setMotorDeltaLeft+0x19c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	ee07 3a10 	vmov	s14, r3
 80012c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012c6:	eeb0 2a47 	vmov.f32	s4, s14
 80012ca:	eef0 1a67 	vmov.f32	s3, s15
 80012ce:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8001448 <setMotorDeltaLeft+0x1a0>
 80012d2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80012d6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80012da:	f7ff fdf9 	bl	8000ed0 <PID_Control_L>
 80012de:	ed87 0a03 	vstr	s0, [r7, #12]
	uint32_t tick = GetMicros();
 80012e2:	f7ff fdc5 	bl	8000e70 <GetMicros>
 80012e6:	eef0 7a40 	vmov.f32	s15, s0
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
 80012f2:	60bb      	str	r3, [r7, #8]

	offset = constrain(offset, -65535, 65535);
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <setMotorDeltaLeft+0x1a4>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001450 <setMotorDeltaLeft+0x1a8>
 80012fe:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001454 <setMotorDeltaLeft+0x1ac>
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	f7ff fd8a 	bl	8000e1e <constrain>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	4b4f      	ldr	r3, [pc, #316]	; (800144c <setMotorDeltaLeft+0x1a4>)
 8001310:	edc3 7a00 	vstr	s15, [r3]

	xprintf("PWM:%d\nORIGIN:%d\nTARGET:%d\n", (int32_t) pid, (int32_t) delta_left, (int32_t) target);
 8001314:	edd7 7a03 	vldr	s15, [r7, #12]
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	4b49      	ldr	r3, [pc, #292]	; (8001444 <setMotorDeltaLeft+0x19c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ee17 1a90 	vmov	r1, s15
 8001326:	484c      	ldr	r0, [pc, #304]	; (8001458 <setMotorDeltaLeft+0x1b0>)
 8001328:	f7ff fd46 	bl	8000db8 <xprintf>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001332:	484a      	ldr	r0, [pc, #296]	; (800145c <setMotorDeltaLeft+0x1b4>)
 8001334:	f001 fe4c 	bl	8002fd0 <HAL_GPIO_WritePin>

	if (target < 0) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da34      	bge.n	80013a8 <setMotorDeltaLeft+0x100>
		if (delta_left == 0 && tick - last_tick > 500) {
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <setMotorDeltaLeft+0x19c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d113      	bne.n	800136e <setMotorDeltaLeft+0xc6>
 8001346:	4b46      	ldr	r3, [pc, #280]	; (8001460 <setMotorDeltaLeft+0x1b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001352:	d90c      	bls.n	800136e <setMotorDeltaLeft+0xc6>
			last_tick = tick;
 8001354:	4a42      	ldr	r2, [pc, #264]	; (8001460 <setMotorDeltaLeft+0x1b8>)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	6013      	str	r3, [r2, #0]
			offset-=10;
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <setMotorDeltaLeft+0x1a4>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001364:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <setMotorDeltaLeft+0x1a4>)
 800136a:	edc3 7a00 	vstr	s15, [r3]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2120      	movs	r1, #32
 8001372:	483c      	ldr	r0, [pc, #240]	; (8001464 <setMotorDeltaLeft+0x1bc>)
 8001374:	f001 fe2c 	bl	8002fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // 5, 6, 7, 15
 8001378:	2201      	movs	r2, #1
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	4837      	ldr	r0, [pc, #220]	; (800145c <setMotorDeltaLeft+0x1b4>)
 800137e:	f001 fe27 	bl	8002fd0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = abs(offset + pid);
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <setMotorDeltaLeft+0x1a4>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	edd7 7a03 	vldr	s15, [r7, #12]
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001394:	ee17 3a90 	vmov	r3, s15
 8001398:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800139c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
		TIM2->CCR1 = 65535;
	}
//	xprintf("TM: %d\n", pid);
}
 80013a6:	e048      	b.n	800143a <setMotorDeltaLeft+0x192>
	} else if (target > 0) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd36      	ble.n	800141c <setMotorDeltaLeft+0x174>
		if (delta_left == 0 && tick - last_tick > 500) {
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <setMotorDeltaLeft+0x19c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d113      	bne.n	80013de <setMotorDeltaLeft+0x136>
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <setMotorDeltaLeft+0x1b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013c2:	d90c      	bls.n	80013de <setMotorDeltaLeft+0x136>
			last_tick = tick;
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <setMotorDeltaLeft+0x1b8>)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	6013      	str	r3, [r2, #0]
			offset+=10;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <setMotorDeltaLeft+0x1a4>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <setMotorDeltaLeft+0x1a4>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2120      	movs	r1, #32
 80013e2:	4820      	ldr	r0, [pc, #128]	; (8001464 <setMotorDeltaLeft+0x1bc>)
 80013e4:	f001 fdf4 	bl	8002fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 80013e8:	2200      	movs	r2, #0
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	481b      	ldr	r0, [pc, #108]	; (800145c <setMotorDeltaLeft+0x1b4>)
 80013ee:	f001 fdef 	bl	8002fd0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = PID_OUTPUT_MAX - abs(offset + pid);
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <setMotorDeltaLeft+0x1a4>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001404:	ee17 3a90 	vmov	r3, s15
 8001408:	2b00      	cmp	r3, #0
 800140a:	bfb8      	it	lt
 800140c:	425b      	neglt	r3, r3
 800140e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001412:	33ff      	adds	r3, #255	; 0xff
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	6353      	str	r3, [r2, #52]	; 0x34
}
 800141a:	e00e      	b.n	800143a <setMotorDeltaLeft+0x192>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2120      	movs	r1, #32
 8001420:	4810      	ldr	r0, [pc, #64]	; (8001464 <setMotorDeltaLeft+0x1bc>)
 8001422:	f001 fdd5 	bl	8002fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 8001426:	2200      	movs	r2, #0
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <setMotorDeltaLeft+0x1b4>)
 800142c:	f001 fdd0 	bl	8002fd0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = 65535;
 8001430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000168 	.word	0x20000168
 8001448:	00000000 	.word	0x00000000
 800144c:	20000420 	.word	0x20000420
 8001450:	477fff00 	.word	0x477fff00
 8001454:	c77fff00 	.word	0xc77fff00
 8001458:	0800b320 	.word	0x0800b320
 800145c:	40020400 	.word	0x40020400
 8001460:	20000424 	.word	0x20000424
 8001464:	40020000 	.word	0x40020000

08001468 <setMotorDeltaRight>:


void setMotorDeltaRight(int32_t target) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float offset = 0;
	static uint32_t last_tick = 0;
	float pid = PID_Control_R(20, 10, 0, target, delta_right);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	4b62      	ldr	r3, [pc, #392]	; (8001604 <setMotorDeltaRight+0x19c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	ee07 3a10 	vmov	s14, r3
 8001482:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001486:	eeb0 2a47 	vmov.f32	s4, s14
 800148a:	eef0 1a67 	vmov.f32	s3, s15
 800148e:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8001608 <setMotorDeltaRight+0x1a0>
 8001492:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001496:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800149a:	f7ff fdd9 	bl	8001050 <PID_Control_R>
 800149e:	ed87 0a03 	vstr	s0, [r7, #12]
	uint32_t tick = GetMicros();
 80014a2:	f7ff fce5 	bl	8000e70 <GetMicros>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	60bb      	str	r3, [r7, #8]

	offset = constrain(offset, -65535, 65535);
 80014b4:	4b55      	ldr	r3, [pc, #340]	; (800160c <setMotorDeltaRight+0x1a4>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001610 <setMotorDeltaRight+0x1a8>
 80014be:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001614 <setMotorDeltaRight+0x1ac>
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	f7ff fcaa 	bl	8000e1e <constrain>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	4b4f      	ldr	r3, [pc, #316]	; (800160c <setMotorDeltaRight+0x1a4>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]

	xprintf("PWM:%d\nORIGIN:%d\nTARGET:%d\n", (int32_t) pid, (int32_t) delta_right, (int32_t) target);
 80014d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	4b49      	ldr	r3, [pc, #292]	; (8001604 <setMotorDeltaRight+0x19c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	ee17 1a90 	vmov	r1, s15
 80014e6:	484c      	ldr	r0, [pc, #304]	; (8001618 <setMotorDeltaRight+0x1b0>)
 80014e8:	f7ff fc66 	bl	8000db8 <xprintf>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f2:	484a      	ldr	r0, [pc, #296]	; (800161c <setMotorDeltaRight+0x1b4>)
 80014f4:	f001 fd6c 	bl	8002fd0 <HAL_GPIO_WritePin>

	if (target < 0) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da34      	bge.n	8001568 <setMotorDeltaRight+0x100>
		if (delta_left == 0 && tick - last_tick > 500) {
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <setMotorDeltaRight+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d113      	bne.n	800152e <setMotorDeltaRight+0xc6>
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <setMotorDeltaRight+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001512:	d90c      	bls.n	800152e <setMotorDeltaRight+0xc6>
			last_tick = tick;
 8001514:	4a43      	ldr	r2, [pc, #268]	; (8001624 <setMotorDeltaRight+0x1bc>)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	6013      	str	r3, [r2, #0]
			offset-=10;
 800151a:	4b3c      	ldr	r3, [pc, #240]	; (800160c <setMotorDeltaRight+0x1a4>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001528:	4b38      	ldr	r3, [pc, #224]	; (800160c <setMotorDeltaRight+0x1a4>)
 800152a:	edc3 7a00 	vstr	s15, [r3]
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2102      	movs	r1, #2
 8001532:	483a      	ldr	r0, [pc, #232]	; (800161c <setMotorDeltaRight+0x1b4>)
 8001534:	f001 fd4c 	bl	8002fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // 5, 6, 7, 15
 8001538:	2201      	movs	r2, #1
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	4837      	ldr	r0, [pc, #220]	; (800161c <setMotorDeltaRight+0x1b4>)
 800153e:	f001 fd47 	bl	8002fd0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = abs(offset + pid);
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <setMotorDeltaRight+0x1a4>)
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	edd7 7a03 	vldr	s15, [r7, #12]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001554:	ee17 3a90 	vmov	r3, s15
 8001558:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800155c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 5, 6, 7, 15
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		TIM2->CCR1 = 65535;
	}
//	xprintf("TM: %d\n", pid);
}
 8001566:	e048      	b.n	80015fa <setMotorDeltaRight+0x192>
	} else if (target > 0) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dd36      	ble.n	80015dc <setMotorDeltaRight+0x174>
		if (delta_left == 0 && tick - last_tick > 500) {
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <setMotorDeltaRight+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d113      	bne.n	800159e <setMotorDeltaRight+0x136>
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <setMotorDeltaRight+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001582:	d90c      	bls.n	800159e <setMotorDeltaRight+0x136>
			last_tick = tick;
 8001584:	4a27      	ldr	r2, [pc, #156]	; (8001624 <setMotorDeltaRight+0x1bc>)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	6013      	str	r3, [r2, #0]
			offset+=10;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <setMotorDeltaRight+0x1a4>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <setMotorDeltaRight+0x1a4>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2102      	movs	r1, #2
 80015a2:	481e      	ldr	r0, [pc, #120]	; (800161c <setMotorDeltaRight+0x1b4>)
 80015a4:	f001 fd14 	bl	8002fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // 5, 6, 7, 15
 80015a8:	2200      	movs	r2, #0
 80015aa:	2140      	movs	r1, #64	; 0x40
 80015ac:	481b      	ldr	r0, [pc, #108]	; (800161c <setMotorDeltaRight+0x1b4>)
 80015ae:	f001 fd0f 	bl	8002fd0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = PID_OUTPUT_MAX - abs(offset + pid);
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <setMotorDeltaRight+0x1a4>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c4:	ee17 3a90 	vmov	r3, s15
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bfb8      	it	lt
 80015cc:	425b      	neglt	r3, r3
 80015ce:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80015d2:	33ff      	adds	r3, #255	; 0xff
 80015d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015da:	e00e      	b.n	80015fa <setMotorDeltaRight+0x192>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // 5, 6, 7, 15
 80015dc:	2200      	movs	r2, #0
 80015de:	2102      	movs	r1, #2
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <setMotorDeltaRight+0x1b4>)
 80015e2:	f001 fcf5 	bl	8002fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <setMotorDeltaRight+0x1b4>)
 80015ec:	f001 fcf0 	bl	8002fd0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = 65535;
 80015f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000016c 	.word	0x2000016c
 8001608:	00000000 	.word	0x00000000
 800160c:	20000428 	.word	0x20000428
 8001610:	477fff00 	.word	0x477fff00
 8001614:	c77fff00 	.word	0xc77fff00
 8001618:	0800b320 	.word	0x0800b320
 800161c:	40020400 	.word	0x40020400
 8001620:	20000168 	.word	0x20000168
 8001624:	2000042c 	.word	0x2000042c

08001628 <main>:
=======
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <getMotorDeltaRight+0x58>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 8001082:	f000 ff09 	bl	8001e98 <HAL_GetTick>
 8001086:	4603      	mov	r3, r0
 8001088:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <getMotorDeltaRight+0x5c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <getMotorDeltaRight+0x60>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	603b      	str	r3, [r7, #0]

	last_tick = current_tick;
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <getMotorDeltaRight+0x60>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	6013      	str	r3, [r2, #0]
	last_pulse = current_pulse;
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <getMotorDeltaRight+0x5c>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6013      	str	r3, [r2, #0]

	delta_right = delta_pulse * 1000 / delta_tick;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <getMotorDeltaRight+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

	return delta_right;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <getMotorDeltaRight+0x64>)
 80010c0:	681b      	ldr	r3, [r3, #0]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000360 	.word	0x20000360
 80010d0:	200003c0 	.word	0x200003c0
 80010d4:	200003c4 	.word	0x200003c4
 80010d8:	2000016c 	.word	0x2000016c

080010dc <setMotorDeltaLeft>:

void setMotorDeltaLeft(int32_t new_delta) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	int32_t pid = 65535 - (int32_t)(PID_Control(20, 900, 0.1, new_delta, delta_left));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <setMotorDeltaLeft+0xd8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	ee07 3a10 	vmov	s14, r3
 80010f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010fa:	eeb0 2a47 	vmov.f32	s4, s14
 80010fe:	eef0 1a67 	vmov.f32	s3, s15
 8001102:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80011b8 <setMotorDeltaLeft+0xdc>
 8001106:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80011bc <setMotorDeltaLeft+0xe0>
 800110a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800110e:	f7ff fe7d 	bl	8000e0c <PID_Control>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111a:	ee17 3a90 	vmov	r3, s15
 800111e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001122:	33ff      	adds	r3, #255	; 0xff
 8001124:	60fb      	str	r3, [r7, #12]

	if (pid > 65535) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	db03      	blt.n	8001136 <setMotorDeltaLeft+0x5a>
		pid = 65535;
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e005      	b.n	8001142 <setMotorDeltaLeft+0x66>
	} else if (pid < -65535) {
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800113c:	dc01      	bgt.n	8001142 <setMotorDeltaLeft+0x66>
		pid = -65535;
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <setMotorDeltaLeft+0xe4>)
 8001140:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR1 = abs(pid);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001148:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001150:	635a      	str	r2, [r3, #52]	; 0x34

	if (pid > 0) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd0a      	ble.n	800116e <setMotorDeltaLeft+0x92>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // 5, 6, 7, 15
 8001158:	2201      	movs	r2, #1
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <setMotorDeltaLeft+0xe8>)
 800115e:	f001 fc6d 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <setMotorDeltaLeft+0xec>)
 8001168:	f001 fc68 	bl	8002a3c <HAL_GPIO_WritePin>
 800116c:	e017      	b.n	800119e <setMotorDeltaLeft+0xc2>
	} else if (pid < 0) {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	da0a      	bge.n	800118a <setMotorDeltaLeft+0xae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	4812      	ldr	r0, [pc, #72]	; (80011c4 <setMotorDeltaLeft+0xe8>)
 800117a:	f001 fc5f 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2120      	movs	r1, #32
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <setMotorDeltaLeft+0xec>)
 8001184:	f001 fc5a 	bl	8002a3c <HAL_GPIO_WritePin>
 8001188:	e009      	b.n	800119e <setMotorDeltaLeft+0xc2>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 800118a:	2200      	movs	r2, #0
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <setMotorDeltaLeft+0xe8>)
 8001190:	f001 fc54 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <setMotorDeltaLeft+0xec>)
 800119a:	f001 fc4f 	bl	8002a3c <HAL_GPIO_WritePin>
	}

	xprintf("TM: %d\n", TIM2->CCR1);
 800119e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a4:	4619      	mov	r1, r3
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <setMotorDeltaLeft+0xf0>)
 80011a8:	f7ff fefc 	bl	8000fa4 <xprintf>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000168 	.word	0x20000168
 80011b8:	3dcccccd 	.word	0x3dcccccd
 80011bc:	44610000 	.word	0x44610000
 80011c0:	ffff0001 	.word	0xffff0001
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020000 	.word	0x40020000
 80011cc:	0800ad8c 	.word	0x0800ad8c

080011d0 <main>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
=======
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800162e:	f000 fe97 	bl	8002360 <HAL_Init>
=======
 80011d6:	f000 fdf9 	bl	8001dcc <HAL_Init>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001632:	f000 f897 	bl	8001764 <SystemClock_Config>
=======
 80011da:	f000 f887 	bl	80012ec <SystemClock_Config>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8001636:	f000 fb45 	bl	8001cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 800163a:	f000 fb1b 	bl	8001c74 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800163e:	f008 fcaf 	bl	8009fa0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001642:	f000 f981 	bl	8001948 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001646:	f000 f8f5 	bl	8001834 <MX_SPI1_Init>
  MX_TIM3_Init();
 800164a:	f000 f9f3 	bl	8001a34 <MX_TIM3_Init>
  MX_TIM4_Init();
 800164e:	f000 fa3f 	bl	8001ad0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001652:	f000 fabb 	bl	8001bcc <MX_TIM5_Init>
  MX_TIM1_Init();
 8001656:	f000 f91f 	bl	8001898 <MX_TIM1_Init>
=======
 80011de:	f000 fadd 	bl	800179c <MX_GPIO_Init>
  MX_DMA_Init();
 80011e2:	f000 fab3 	bl	800174c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80011e6:	f008 fc11 	bl	8009a0c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80011ea:	f000 f919 	bl	8001420 <MX_TIM2_Init>
  MX_SPI1_Init();
 80011ee:	f000 f8e5 	bl	80013bc <MX_SPI1_Init>
  MX_TIM3_Init();
 80011f2:	f000 f98b 	bl	800150c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011f6:	f000 f9d7 	bl	80015a8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80011fa:	f000 fa53 	bl	80016a4 <MX_TIM5_Init>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	4839      	ldr	r0, [pc, #228]	; (8001744 <main+0x11c>)
 800165e:	f004 fc37 	bl	8005ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8001662:	2104      	movs	r1, #4
 8001664:	4837      	ldr	r0, [pc, #220]	; (8001744 <main+0x11c>)
 8001666:	f004 fc33 	bl	8005ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
<<<<<<< HEAD
 800166a:	2100      	movs	r1, #0
 800166c:	4836      	ldr	r0, [pc, #216]	; (8001748 <main+0x120>)
 800166e:	f004 fc2f 	bl	8005ed0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8001672:	2104      	movs	r1, #4
 8001674:	4834      	ldr	r0, [pc, #208]	; (8001748 <main+0x120>)
 8001676:	f004 fc2b 	bl	8005ed0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800167a:	2100      	movs	r1, #0
 800167c:	4833      	ldr	r0, [pc, #204]	; (800174c <main+0x124>)
 800167e:	f004 fad1 	bl	8005c24 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_ALL);

  TIM1->CCR1 = 65535;
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <main+0x128>)
 8001684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
  TIM5->CCR1 = 65535;
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <main+0x12c>)
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001690:	635a      	str	r2, [r3, #52]	; 0x34

  int32_t speed_left = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
=======
 80011fe:	2100      	movs	r1, #0
 8001200:	4834      	ldr	r0, [pc, #208]	; (80012d4 <main+0x104>)
 8001202:	f004 fb9b 	bl	800593c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8001206:	2104      	movs	r1, #4
 8001208:	4832      	ldr	r0, [pc, #200]	; (80012d4 <main+0x104>)
 800120a:	f004 fb97 	bl	800593c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800120e:	2100      	movs	r1, #0
 8001210:	4831      	ldr	r0, [pc, #196]	; (80012d8 <main+0x108>)
 8001212:	f004 fa3d 	bl	8005690 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_ALL);

  TIM2->CCR1 = 0;
 8001216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	; 0x34

  int32_t speed_left = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t rxdata[8];
	  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
<<<<<<< HEAD
 8001696:	f107 0114 	add.w	r1, r7, #20
 800169a:	2302      	movs	r3, #2
 800169c:	2201      	movs	r2, #1
 800169e:	482e      	ldr	r0, [pc, #184]	; (8001758 <main+0x130>)
 80016a0:	f003 fcfc 	bl	800509c <HAL_SPI_Receive>

	  switch (rxdata[0]) {
 80016a4:	7d3b      	ldrb	r3, [r7, #20]
 80016a6:	2bab      	cmp	r3, #171	; 0xab
 80016a8:	d002      	beq.n	80016b0 <main+0x88>
 80016aa:	2bde      	cmp	r3, #222	; 0xde
 80016ac:	d020      	beq.n	80016f0 <main+0xc8>
=======
 8001222:	f107 0110 	add.w	r1, r7, #16
 8001226:	2302      	movs	r3, #2
 8001228:	2201      	movs	r2, #1
 800122a:	482c      	ldr	r0, [pc, #176]	; (80012dc <main+0x10c>)
 800122c:	f003 fc6c 	bl	8004b08 <HAL_SPI_Receive>

	  switch (rxdata[0]) {
 8001230:	7c3b      	ldrb	r3, [r7, #16]
 8001232:	2bab      	cmp	r3, #171	; 0xab
 8001234:	d002      	beq.n	800123c <main+0x6c>
 8001236:	2bde      	cmp	r3, #222	; 0xde
 8001238:	d020      	beq.n	800127c <main+0xac>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

			  speed_left = rxspeed[0];
		  }
		  break;
	  default:
		  break;
<<<<<<< HEAD
 80016ae:	e03b      	b.n	8001728 <main+0x100>
		  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 80016b0:	f107 0114 	add.w	r1, r7, #20
 80016b4:	2302      	movs	r3, #2
 80016b6:	2201      	movs	r2, #1
 80016b8:	4827      	ldr	r0, [pc, #156]	; (8001758 <main+0x130>)
 80016ba:	f003 fcef 	bl	800509c <HAL_SPI_Receive>
		  if (rxdata[0] == 0xCD) {
 80016be:	7d3b      	ldrb	r3, [r7, #20]
 80016c0:	2bcd      	cmp	r3, #205	; 0xcd
 80016c2:	d12e      	bne.n	8001722 <main+0xfa>
			  int32_t txdata[2] = { getMotorDeltaLeft(), getMotorDeltaRight() };
 80016c4:	f7ff fd84 	bl	80011d0 <getMotorDeltaLeft>
 80016c8:	4603      	mov	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	f7ff fdb6 	bl	800123c <getMotorDeltaRight>
 80016d0:	4603      	mov	r3, r0
 80016d2:	613b      	str	r3, [r7, #16]
			  xprintf("\nGET Left: %d, Right: %d\n", txdata[0], txdata[1]);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4619      	mov	r1, r3
 80016da:	4820      	ldr	r0, [pc, #128]	; (800175c <main+0x134>)
 80016dc:	f7ff fb6c 	bl	8000db8 <xprintf>
			  HAL_SPI_Transmit(&hspi1, (void*)txdata, sizeof(txdata), sizeof(txdata) * 10);
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	2350      	movs	r3, #80	; 0x50
 80016e6:	2208      	movs	r2, #8
 80016e8:	481b      	ldr	r0, [pc, #108]	; (8001758 <main+0x130>)
 80016ea:	f003 fb94 	bl	8004e16 <HAL_SPI_Transmit>
		  break;
 80016ee:	e018      	b.n	8001722 <main+0xfa>
		  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 80016f0:	f107 0114 	add.w	r1, r7, #20
 80016f4:	2302      	movs	r3, #2
 80016f6:	2201      	movs	r2, #1
 80016f8:	4817      	ldr	r0, [pc, #92]	; (8001758 <main+0x130>)
 80016fa:	f003 fccf 	bl	800509c <HAL_SPI_Receive>
		  if (rxdata[0] == 0xAD) {
 80016fe:	7d3b      	ldrb	r3, [r7, #20]
 8001700:	2bad      	cmp	r3, #173	; 0xad
 8001702:	d110      	bne.n	8001726 <main+0xfe>
			  HAL_SPI_Receive(&hspi1, (void*)rxspeed, sizeof(rxspeed), sizeof(rxspeed) * 10);
 8001704:	1d39      	adds	r1, r7, #4
 8001706:	2350      	movs	r3, #80	; 0x50
 8001708:	2208      	movs	r2, #8
 800170a:	4813      	ldr	r0, [pc, #76]	; (8001758 <main+0x130>)
 800170c:	f003 fcc6 	bl	800509c <HAL_SPI_Receive>
			  xprintf("\nSET Left: %d, Right: %d\n", rxspeed[0], rxspeed[1]);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	4812      	ldr	r0, [pc, #72]	; (8001760 <main+0x138>)
 8001718:	f7ff fb4e 	bl	8000db8 <xprintf>
			  speed_left = rxspeed[0];
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	61fb      	str	r3, [r7, #28]
		  break;
 8001720:	e001      	b.n	8001726 <main+0xfe>
		  break;
 8001722:	bf00      	nop
 8001724:	e000      	b.n	8001728 <main+0x100>
		  break;
 8001726:	bf00      	nop
=======
 800123a:	e03b      	b.n	80012b4 <main+0xe4>
		  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 800123c:	f107 0110 	add.w	r1, r7, #16
 8001240:	2302      	movs	r3, #2
 8001242:	2201      	movs	r2, #1
 8001244:	4825      	ldr	r0, [pc, #148]	; (80012dc <main+0x10c>)
 8001246:	f003 fc5f 	bl	8004b08 <HAL_SPI_Receive>
		  if (rxdata[0] == 0xCD) {
 800124a:	7c3b      	ldrb	r3, [r7, #16]
 800124c:	2bcd      	cmp	r3, #205	; 0xcd
 800124e:	d12e      	bne.n	80012ae <main+0xde>
			  int32_t txdata[2] = { getMotorDeltaLeft(), getMotorDeltaRight() };
 8001250:	f7ff fedc 	bl	800100c <getMotorDeltaLeft>
 8001254:	4603      	mov	r3, r0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	f7ff ff0c 	bl	8001074 <getMotorDeltaRight>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
			  xprintf("\nGET Left: %d, Right: %d\n", txdata[0], txdata[1]);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4619      	mov	r1, r3
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <main+0x110>)
 8001268:	f7ff fe9c 	bl	8000fa4 <xprintf>
			  HAL_SPI_Transmit(&hspi1, (void*)txdata, sizeof(txdata), sizeof(txdata) * 10);
 800126c:	f107 0108 	add.w	r1, r7, #8
 8001270:	2350      	movs	r3, #80	; 0x50
 8001272:	2208      	movs	r2, #8
 8001274:	4819      	ldr	r0, [pc, #100]	; (80012dc <main+0x10c>)
 8001276:	f003 fb04 	bl	8004882 <HAL_SPI_Transmit>
		  break;
 800127a:	e018      	b.n	80012ae <main+0xde>
		  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 800127c:	f107 0110 	add.w	r1, r7, #16
 8001280:	2302      	movs	r3, #2
 8001282:	2201      	movs	r2, #1
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <main+0x10c>)
 8001286:	f003 fc3f 	bl	8004b08 <HAL_SPI_Receive>
		  if (rxdata[0] == 0xAD) {
 800128a:	7c3b      	ldrb	r3, [r7, #16]
 800128c:	2bad      	cmp	r3, #173	; 0xad
 800128e:	d110      	bne.n	80012b2 <main+0xe2>
			  HAL_SPI_Receive(&hspi1, (void*)rxspeed, sizeof(rxspeed), sizeof(rxspeed) * 10);
 8001290:	4639      	mov	r1, r7
 8001292:	2350      	movs	r3, #80	; 0x50
 8001294:	2208      	movs	r2, #8
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <main+0x10c>)
 8001298:	f003 fc36 	bl	8004b08 <HAL_SPI_Receive>
			  xprintf("\nSET Left: %d, Right: %d\n", rxspeed[0], rxspeed[1]);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4810      	ldr	r0, [pc, #64]	; (80012e4 <main+0x114>)
 80012a4:	f7ff fe7e 	bl	8000fa4 <xprintf>
			  speed_left = rxspeed[0];
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	61fb      	str	r3, [r7, #28]
		  break;
 80012ac:	e001      	b.n	80012b2 <main+0xe2>
		  break;
 80012ae:	bf00      	nop
 80012b0:	e000      	b.n	80012b4 <main+0xe4>
		  break;
 80012b2:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
	  }
//
//	  xprintf("COUNT_L:%d\n", htim1.Instance->CNT);
//	  xprintf("COUNT_R:%d\n", htim5.Instance->CNT);

<<<<<<< HEAD
	  getMotorDeltaLeft();
 8001728:	f7ff fd52 	bl	80011d0 <getMotorDeltaLeft>
	  getMotorDeltaRight();
 800172c:	f7ff fd86 	bl	800123c <getMotorDeltaRight>
	  setMotorDeltaLeft(1000);
 8001730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001734:	f7ff fdb8 	bl	80012a8 <setMotorDeltaLeft>
	  setMotorDeltaRight(1000);
 8001738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173c:	f7ff fe94 	bl	8001468 <setMotorDeltaRight>
  {
 8001740:	e7a9      	b.n	8001696 <main+0x6e>
 8001742:	bf00      	nop
 8001744:	20000288 	.word	0x20000288
 8001748:	200003a8 	.word	0x200003a8
 800174c:	200002d0 	.word	0x200002d0
 8001750:	40010000 	.word	0x40010000
 8001754:	40000c00 	.word	0x40000c00
 8001758:	20000170 	.word	0x20000170
 800175c:	0800b33c 	.word	0x0800b33c
 8001760:	0800b358 	.word	0x0800b358

08001764 <SystemClock_Config>:
=======
	  uint32_t tick = HAL_GetTick();
 80012b4:	f000 fdf0 	bl	8001e98 <HAL_GetTick>
 80012b8:	61b8      	str	r0, [r7, #24]
	  static uint32_t last_tick = 0;
	  if (tick - last_tick > 100) {
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <main+0x118>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d9ad      	bls.n	8001222 <main+0x52>
	  	  last_tick = tick;
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <main+0x118>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6013      	str	r3, [r2, #0]
	  	  setMotorDeltaLeft(speed_left);
 80012cc:	69f8      	ldr	r0, [r7, #28]
 80012ce:	f7ff ff05 	bl	80010dc <setMotorDeltaLeft>
  {
 80012d2:	e7a6      	b.n	8001222 <main+0x52>
 80012d4:	20000360 	.word	0x20000360
 80012d8:	20000288 	.word	0x20000288
 80012dc:	20000170 	.word	0x20000170
 80012e0:	0800ad94 	.word	0x0800ad94
 80012e4:	0800adb0 	.word	0x0800adb0
 80012e8:	200003c8 	.word	0x200003c8

080012ec <SystemClock_Config>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	; 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	2230      	movs	r2, #48	; 0x30
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f009 f944 	bl	800aa00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
=======
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	; 0x50
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2230      	movs	r2, #48	; 0x30
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f009 f8b6 	bl	800a46c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <SystemClock_Config+0xc8>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <SystemClock_Config+0xc8>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <SystemClock_Config+0xc8>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <SystemClock_Config+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <SystemClock_Config+0xcc>)
 80017ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <SystemClock_Config+0xcc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
=======
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <SystemClock_Config+0xc8>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <SystemClock_Config+0xc8>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <SystemClock_Config+0xc8>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <SystemClock_Config+0xcc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <SystemClock_Config+0xcc>)
 8001336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <SystemClock_Config+0xcc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017d4:	2319      	movs	r3, #25
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017d8:	2390      	movs	r3, #144	; 0x90
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017dc:	2302      	movs	r3, #2
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017e0:	2303      	movs	r3, #3
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fe5b 	bl	80044a4 <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f4:	f000 fac6 	bl	8001d84 <Error_Handler>
=======
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800135c:	2319      	movs	r3, #25
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001360:	2390      	movs	r3, #144	; 0x90
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001368:	2303      	movs	r3, #3
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f002 fdcd 	bl	8003f10 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800137c:	f000 fa6c 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80017f8:	230f      	movs	r3, #15
 80017fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f8bd 	bl	8004994 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001820:	f000 fab0 	bl	8001d84 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3750      	adds	r7, #80	; 0x50
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <MX_SPI1_Init>:
=======
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f003 f82f 	bl	8004400 <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013a8:	f000 fa56 	bl	8001858 <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3750      	adds	r7, #80	; 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_SPI1_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
=======
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_SPI1_Init+0x5c>)
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <MX_SPI1_Init+0x60>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_SPI1_Init+0x5c>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_SPI1_Init+0x5c>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_SPI1_Init+0x5c>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SPI1_Init+0x5c>)
 8001876:	220a      	movs	r2, #10
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_SPI1_Init+0x5c>)
 800187c:	f003 fa42 	bl	8004d04 <HAL_SPI_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8001886:	f000 fa7d 	bl	8001d84 <Error_Handler>
=======
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <MX_SPI1_Init+0x60>)
 80013c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI1_Init+0x5c>)
 80013fe:	220a      	movs	r2, #10
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_SPI1_Init+0x5c>)
 8001404:	f003 f9b4 	bl	8004770 <HAL_SPI_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800140e:	f000 fa23 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000170 	.word	0x20000170
 8001894:	40013000 	.word	0x40013000

08001898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f009 f8aa 	bl	800aa00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018b6:	4a23      	ldr	r2, [pc, #140]	; (8001944 <MX_TIM1_Init+0xac>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_TIM1_Init+0xa8>)
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f8:	2301      	movs	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_TIM1_Init+0xa8>)
 800190c:	f004 fa3a 	bl	8005d84 <HAL_TIM_Encoder_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001916:	f000 fa35 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <MX_TIM1_Init+0xa8>)
 8001928:	f004 ffc2 	bl	80068b0 <HAL_TIMEx_MasterConfigSynchronization>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001932:	f000 fa27 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	3730      	adds	r7, #48	; 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000288 	.word	0x20000288
 8001944:	40010000 	.word	0x40010000

08001948 <MX_TIM2_Init>:
=======
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000170 	.word	0x20000170
 800141c:	40013000 	.word	0x40013000

08001420 <MX_TIM2_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0
=======
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]
=======
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800197a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800198e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a0:	4823      	ldr	r0, [pc, #140]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019a2:	f004 f897 	bl	8005ad4 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019ac:	f000 f9ea 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ba:	4619      	mov	r1, r3
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019be:	f004 fbd7 	bl	8006170 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019c8:	f000 f9dc 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019ce:	f004 f8d0 	bl	8005b72 <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019d8:	f000 f9d4 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4619      	mov	r1, r3
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019ec:	f004 ff60 	bl	80068b0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019f6:	f000 f9c5 	bl	8001d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a06:	2304      	movs	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a12:	f004 faeb 	bl	8005fec <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a1c:	f000 f9b2 	bl	8001d84 <Error_Handler>
=======
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <MX_TIM2_Init+0xe8>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <MX_TIM2_Init+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <MX_TIM2_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <MX_TIM2_Init+0xe8>)
 8001466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <MX_TIM2_Init+0xe8>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <MX_TIM2_Init+0xe8>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <MX_TIM2_Init+0xe8>)
 800147a:	f004 f861 	bl	8005540 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001484:	f000 f9e8 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	4619      	mov	r1, r3
 8001494:	481c      	ldr	r0, [pc, #112]	; (8001508 <MX_TIM2_Init+0xe8>)
 8001496:	f004 fba1 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014a0:	f000 f9da 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <MX_TIM2_Init+0xe8>)
 80014a6:	f004 f89a 	bl	80055de <HAL_TIM_PWM_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014b0:	f000 f9d2 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4619      	mov	r1, r3
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_TIM2_Init+0xe8>)
 80014c4:	f004 ff2a 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014ce:	f000 f9c3 	bl	8001858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	; 0x60
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_TIM2_Init+0xe8>)
 80014ea:	f004 fab5 	bl	8005a58 <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014f4:	f000 f9b0 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a22:	f000 fb79 	bl	8002118 <HAL_TIM_MspPostInit>

}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002d0 	.word	0x200002d0

08001a34 <MX_TIM3_Init>:
=======
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_TIM2_Init+0xe8>)
 80014fa:	f000 fb43 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	; 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000288 	.word	0x20000288

0800150c <MX_TIM3_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
=======
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
=======
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <MX_TIM3_Init+0x98>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a78:	f004 f82c 	bl	8005ad4 <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a82:	f000 f97f 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a94:	f004 fb6c 	bl	8006170 <HAL_TIM_ConfigClockSource>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a9e:	f000 f971 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001ab0:	f004 fefe 	bl	80068b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001aba:	f000 f963 	bl	8001d84 <Error_Handler>
=======
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_TIM3_Init+0x94>)
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MX_TIM3_Init+0x98>)
 800152c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM3_Init+0x94>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM3_Init+0x94>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_TIM3_Init+0x94>)
 800153c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001540:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_TIM3_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_TIM3_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_TIM3_Init+0x94>)
 8001550:	f003 fff6 	bl	8005540 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800155a:	f000 f97d 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM3_Init+0x94>)
 800156c:	f004 fb36 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f96f 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM3_Init+0x94>)
 8001588:	f004 fec8 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001592:	f000 f961 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000318 	.word	0x20000318
 8001acc:	40000400 	.word	0x40000400

08001ad0 <MX_TIM4_Init>:
=======
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002d0 	.word	0x200002d0
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_TIM4_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	; 0x38
 8001ad4:	af00      	add	r7, sp, #0
=======
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f107 0320 	add.w	r3, r7, #32
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]
=======
 80015ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	615a      	str	r2, [r3, #20]
 80015d6:	619a      	str	r2, [r3, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b02:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <MX_TIM4_Init+0xf8>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60000-1;
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b08:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b16:	22f9      	movs	r2, #249	; 0xf9
 8001b18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b26:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b28:	f003 ffd4 	bl	8005ad4 <HAL_TIM_Base_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b32:	f000 f927 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b44:	f004 fb14 	bl	8006170 <HAL_TIM_ConfigClockSource>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b4e:	f000 f919 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b52:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b54:	f004 f80d 	bl	8005b72 <HAL_TIM_PWM_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b5e:	f000 f911 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b72:	f004 fe9d 	bl	80068b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b7c:	f000 f902 	bl	8001d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b80:	2360      	movs	r3, #96	; 0x60
 8001b82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001b98:	f004 fa28 	bl	8005fec <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ba2:	f000 f8ef 	bl	8001d84 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0208 	bic.w	r2, r2, #8
 8001bb4:	619a      	str	r2, [r3, #24]
=======
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <MX_TIM4_Init+0xf4>)
 80015da:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <MX_TIM4_Init+0xf8>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60000-1;
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <MX_TIM4_Init+0xf4>)
 80015e0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80015e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <MX_TIM4_Init+0xf4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <MX_TIM4_Init+0xf4>)
 80015ee:	22f9      	movs	r2, #249	; 0xf9
 80015f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <MX_TIM4_Init+0xf4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <MX_TIM4_Init+0xf4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015fe:	4827      	ldr	r0, [pc, #156]	; (800169c <MX_TIM4_Init+0xf4>)
 8001600:	f003 ff9e 	bl	8005540 <HAL_TIM_Base_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800160a:	f000 f925 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001618:	4619      	mov	r1, r3
 800161a:	4820      	ldr	r0, [pc, #128]	; (800169c <MX_TIM4_Init+0xf4>)
 800161c:	f004 fade 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001626:	f000 f917 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <MX_TIM4_Init+0xf4>)
 800162c:	f003 ffd7 	bl	80055de <HAL_TIM_PWM_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001636:	f000 f90f 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	4619      	mov	r1, r3
 8001648:	4814      	ldr	r0, [pc, #80]	; (800169c <MX_TIM4_Init+0xf4>)
 800164a:	f004 fe67 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001654:	f000 f900 	bl	8001858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001658:	2360      	movs	r3, #96	; 0x60
 800165a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <MX_TIM4_Init+0xf4>)
 8001670:	f004 f9f2 	bl	8005a58 <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800167a:	f000 f8ed 	bl	8001858 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_TIM4_Init+0xf4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <MX_TIM4_Init+0xf4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0208 	bic.w	r2, r2, #8
 800168c:	619a      	str	r2, [r3, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM4_Init+0xf4>)
 8001bb8:	f000 faae 	bl	8002118 <HAL_TIM_MspPostInit>

}
 8001bbc:	bf00      	nop
 8001bbe:	3738      	adds	r7, #56	; 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000360 	.word	0x20000360
 8001bc8:	40000800 	.word	0x40000800

08001bcc <MX_TIM5_Init>:
=======
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <MX_TIM4_Init+0xf4>)
 8001690:	f000 fa78 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 8001694:	bf00      	nop
 8001696:	3738      	adds	r7, #56	; 0x38
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000318 	.word	0x20000318
 80016a0:	40000800 	.word	0x40000800

080016a4 <MX_TIM5_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
<<<<<<< HEAD
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
=======
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2224      	movs	r2, #36	; 0x24
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f008 ff10 	bl	800aa00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
=======
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2224      	movs	r2, #36	; 0x24
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 feda 	bl	800a46c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <MX_TIM5_Init+0xa4>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c16:	2301      	movs	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c26:	2301      	movs	r3, #1
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001c3a:	f004 f8a3 	bl	8005d84 <HAL_TIM_Encoder_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c44:	f000 f89e 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_TIM5_Init+0xa0>)
 8001c56:	f004 fe2b 	bl	80068b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c60:	f000 f890 	bl	8001d84 <Error_Handler>
=======
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_TIM5_Init+0xa0>)
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <MX_TIM5_Init+0xa4>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_TIM5_Init+0xa0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM5_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM5_Init+0xa0>)
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM5_Init+0xa0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM5_Init+0xa0>)
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM5_Init+0xa0>)
 8001712:	f004 f86d 	bl	80057f0 <HAL_TIM_Encoder_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800171c:	f000 f89c 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM5_Init+0xa0>)
 800172e:	f004 fdf5 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001738:	f000 f88e 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
<<<<<<< HEAD
 8001c64:	bf00      	nop
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200003a8 	.word	0x200003a8
 8001c70:	40000c00 	.word	0x40000c00

08001c74 <MX_DMA_Init>:
=======
 800173c:	bf00      	nop
 800173e:	3730      	adds	r7, #48	; 0x30
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000360 	.word	0x20000360
 8001748:	40000c00 	.word	0x40000c00

0800174c <MX_DMA_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MX_DMA_Init+0x4c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <MX_DMA_Init+0x4c>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <MX_DMA_Init+0x4c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
=======
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_DMA_Init+0x4c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <MX_DMA_Init+0x4c>)
 800175c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_DMA_Init+0x4c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2038      	movs	r0, #56	; 0x38
 8001c9c:	f000 fcd1 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ca0:	2038      	movs	r0, #56	; 0x38
 8001ca2:	f000 fcea 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	203a      	movs	r0, #58	; 0x3a
 8001cac:	f000 fcc9 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cb0:	203a      	movs	r0, #58	; 0x3a
 8001cb2:	f000 fce2 	bl	800267a <HAL_NVIC_EnableIRQ>

}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <MX_GPIO_Init>:
=======
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2038      	movs	r0, #56	; 0x38
 8001774:	f000 fc9b 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001778:	2038      	movs	r0, #56	; 0x38
 800177a:	f000 fcb4 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	203a      	movs	r0, #58	; 0x3a
 8001784:	f000 fc93 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001788:	203a      	movs	r0, #58	; 0x3a
 800178a:	f000 fcac 	bl	80020e6 <HAL_NVIC_EnableIRQ>

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <MX_GPIO_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
=======
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_GPIO_Init+0xb8>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <MX_GPIO_Init+0xbc>)
 8001d52:	f001 f93d 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d56:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_GPIO_Init+0xbc>)
 8001d70:	f000 ffaa 	bl	8002cc8 <HAL_GPIO_Init>
=======
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_GPIO_Init+0xb4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_GPIO_Init+0xb4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <MX_GPIO_Init+0xb4>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_GPIO_Init+0xb4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	21a0      	movs	r1, #160	; 0xa0
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <MX_GPIO_Init+0xb8>)
 8001828:	f001 f908 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800182c:	23a0      	movs	r3, #160	; 0xa0
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_GPIO_Init+0xb8>)
 8001844:	f000 ff76 	bl	8002734 <HAL_GPIO_Init>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020400 	.word	0x40020400

08001d84 <Error_Handler>:
=======
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400

08001858 <Error_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
=======
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
=======
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <HAL_MspInit>:
=======
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <HAL_MspInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
=======
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
=======
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_SPI_MspInit>:
=======
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_SPI_MspInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	; (8001f68 <HAL_SPI_MspInit+0x188>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	f040 80ae 	bne.w	8001f60 <HAL_SPI_MspInit+0x180>
=======
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a5a      	ldr	r2, [pc, #360]	; (8001a3c <HAL_SPI_MspInit+0x188>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f040 80ae 	bne.w	8001a34 <HAL_SPI_MspInit+0x180>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	4a57      	ldr	r2, [pc, #348]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e12:	6453      	str	r3, [r2, #68]	; 0x44
 8001e14:	4b55      	ldr	r3, [pc, #340]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_SPI_MspInit+0x18c>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
=======
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e6:	6453      	str	r3, [r2, #68]	; 0x44
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6313      	str	r3, [r2, #48]	; 0x30
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_SPI_MspInit+0x18c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
<<<<<<< HEAD
 8001e58:	2390      	movs	r3, #144	; 0x90
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e68:	2305      	movs	r3, #5
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	483f      	ldr	r0, [pc, #252]	; (8001f70 <HAL_SPI_MspInit+0x190>)
 8001e74:	f000 ff28 	bl	8002cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001e78:	2318      	movs	r3, #24
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e88:	2305      	movs	r3, #5
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4838      	ldr	r0, [pc, #224]	; (8001f74 <HAL_SPI_MspInit+0x194>)
 8001e94:	f000 ff18 	bl	8002cc8 <HAL_GPIO_Init>
=======
 800192c:	2390      	movs	r3, #144	; 0x90
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193c:	2305      	movs	r3, #5
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	483f      	ldr	r0, [pc, #252]	; (8001a44 <HAL_SPI_MspInit+0x190>)
 8001948:	f000 fef4 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800194c:	2318      	movs	r3, #24
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800195c:	2305      	movs	r3, #5
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4838      	ldr	r0, [pc, #224]	; (8001a48 <HAL_SPI_MspInit+0x194>)
 8001968:	f000 fee4 	bl	8002734 <HAL_GPIO_Init>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8001e98:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001e9a:	4a38      	ldr	r2, [pc, #224]	; (8001f7c <HAL_SPI_MspInit+0x19c>)
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ea0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ea4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ed8:	4827      	ldr	r0, [pc, #156]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001eda:	f000 fbe9 	bl	80026b0 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001ee4:	f7ff ff4e 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_SPI_MspInit+0x198>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_SPI_MspInit+0x1a4>)
 8001ef8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001efc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f14:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f34:	4812      	ldr	r0, [pc, #72]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f36:	f000 fbbb 	bl	80026b0 <HAL_DMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001f40:	f7ff ff20 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f48:	649a      	str	r2, [r3, #72]	; 0x48
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_SPI_MspInit+0x1a0>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	2023      	movs	r0, #35	; 0x23
 8001f56:	f000 fb74 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f5a:	2023      	movs	r0, #35	; 0x23
 8001f5c:	f000 fb8d 	bl	800267a <HAL_NVIC_EnableIRQ>
=======
 800196c:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 800196e:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <HAL_SPI_MspInit+0x19c>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 8001974:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001978:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 8001988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 800199c:	2200      	movs	r2, #0
 800199e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019ac:	4827      	ldr	r0, [pc, #156]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 80019ae:	f000 fbb5 	bl	800211c <HAL_DMA_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80019b8:	f7ff ff4e 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 80019c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_SPI_MspInit+0x198>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019ca:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <HAL_SPI_MspInit+0x1a4>)
 80019cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a08:	4812      	ldr	r0, [pc, #72]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 8001a0a:	f000 fb87 	bl	800211c <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001a14:	f7ff ff20 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 8001a1c:	649a      	str	r2, [r3, #72]	; 0x48
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_SPI_MspInit+0x1a0>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2023      	movs	r0, #35	; 0x23
 8001a2a:	f000 fb40 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a2e:	2023      	movs	r0, #35	; 0x23
 8001a30:	f000 fb59 	bl	80020e6 <HAL_NVIC_EnableIRQ>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	200001c8 	.word	0x200001c8
 8001f7c:	40026410 	.word	0x40026410
 8001f80:	20000228 	.word	0x20000228
 8001f84:	40026440 	.word	0x40026440

08001f88 <HAL_TIM_Encoder_MspInit>:
=======
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	200001c8 	.word	0x200001c8
 8001a50:	40026410 	.word	0x40026410
 8001a54:	20000228 	.word	0x20000228
 8001a58:	40026440 	.word	0x40026440

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d10e      	bne.n	8001a8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a8a:	e026      	b.n	8001ada <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_TIM_Base_MspInit+0x90>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10e      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
}
 8001ab2:	e012      	b.n	8001ada <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10d      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_TIM_Base_MspInit+0x8c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40000800 	.word	0x40000800

08001af4 <HAL_TIM_Encoder_MspInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
<<<<<<< HEAD
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a32      	ldr	r2, [pc, #200]	; (8002070 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d12d      	bne.n	8002006 <HAL_TIM_Encoder_MspInit+0x7e>
=======
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12b      	bne.n	8001b6e <HAL_TIM_Encoder_MspInit+0x7a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
<<<<<<< HEAD
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a30      	ldr	r2, [pc, #192]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a29      	ldr	r2, [pc, #164]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	481e      	ldr	r0, [pc, #120]	; (8002078 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002000:	f000 fe62 	bl	8002cc8 <HAL_GPIO_Init>
=======
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b6a:	f000 fde3 	bl	8002734 <HAL_GPIO_Init>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002004:	e030      	b.n	8002068 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_TIM_Encoder_MspInit+0xf4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12b      	bne.n	8002068 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6313      	str	r3, [r2, #48]	; 0x30
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002048:	2303      	movs	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002058:	2302      	movs	r3, #2
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002064:	f000 fe30 	bl	8002cc8 <HAL_GPIO_Init>
}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40010000 	.word	0x40010000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40000c00 	.word	0x40000c00

08002080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ae:	e026      	b.n	80020fe <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <HAL_TIM_Base_MspInit+0x90>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
}
 80020d6:	e012      	b.n	80020fe <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_TIM_Base_MspInit+0x94>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10d      	bne.n	80020fe <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_TIM_Base_MspInit+0x8c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800

08002118 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d11f      	bne.n	800217a <HAL_TIM_MspPostInit+0x62>
=======
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d11f      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x62>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
=======
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
<<<<<<< HEAD
 8002156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4816      	ldr	r0, [pc, #88]	; (80021cc <HAL_TIM_MspPostInit+0xb4>)
 8002174:	f000 fda8 	bl	8002cc8 <HAL_GPIO_Init>
=======
 8001bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <HAL_TIM_MspPostInit+0xb4>)
 8001be0:	f000 fda8 	bl	8002734 <HAL_GPIO_Init>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8002178:	e022      	b.n	80021c0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_TIM_MspPostInit+0xb8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d11d      	bne.n	80021c0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_TIM_MspPostInit+0xb0>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a0:	2340      	movs	r3, #64	; 0x40
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b0:	2302      	movs	r3, #2
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4806      	ldr	r0, [pc, #24]	; (80021d4 <HAL_TIM_MspPostInit+0xbc>)
 80021bc:	f000 fd84 	bl	8002cc8 <HAL_GPIO_Init>
}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40020400 	.word	0x40020400

080021d8 <NMI_Handler>:
=======
 8001be4:	e022      	b.n	8001c2c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_TIM_MspPostInit+0xb8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d11d      	bne.n	8001c2c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_TIM_MspPostInit+0xb0>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <HAL_TIM_MspPostInit+0xbc>)
 8001c28:	f000 fd84 	bl	8002734 <HAL_GPIO_Init>
}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40020400 	.word	0x40020400

08001c44 <NMI_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
=======
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:
=======
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
=======
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:
=======
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
=======
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:
=======
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
=======
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:
=======
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
=======
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:
=======
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
=======
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:
=======
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
=======
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:
=======
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
=======
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:
=======
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
=======
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002224:	f000 f8ee 	bl	8002404 <HAL_IncTick>
=======
 8001c90:	f000 f8ee 	bl	8001e70 <HAL_IncTick>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <SPI1_IRQHandler>:
=======
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SPI1_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
<<<<<<< HEAD
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
=======
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
<<<<<<< HEAD
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <SPI1_IRQHandler+0x10>)
 8002232:	f003 f9fb 	bl	800562c <HAL_SPI_IRQHandler>
=======
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <SPI1_IRQHandler+0x10>)
 8001c9e:	f003 f9fb 	bl	8005098 <HAL_SPI_IRQHandler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
<<<<<<< HEAD
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000170 	.word	0x20000170

08002240 <DMA2_Stream0_IRQHandler>:
=======
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000170 	.word	0x20000170

08001cac <DMA2_Stream0_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
=======
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
<<<<<<< HEAD
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA2_Stream0_IRQHandler+0x10>)
 8002246:	f000 fb03 	bl	8002850 <HAL_DMA_IRQHandler>
=======
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream0_IRQHandler+0x10>)
 8001cb2:	f000 fb03 	bl	80022bc <HAL_DMA_IRQHandler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200001c8 	.word	0x200001c8

08002254 <DMA2_Stream2_IRQHandler>:
=======
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001c8 	.word	0x200001c8

08001cc0 <DMA2_Stream2_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
<<<<<<< HEAD
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
=======
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
<<<<<<< HEAD
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <DMA2_Stream2_IRQHandler+0x10>)
 800225a:	f000 faf9 	bl	8002850 <HAL_DMA_IRQHandler>
=======
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA2_Stream2_IRQHandler+0x10>)
 8001cc6:	f000 faf9 	bl	80022bc <HAL_DMA_IRQHandler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
<<<<<<< HEAD
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000228 	.word	0x20000228

08002268 <OTG_FS_IRQHandler>:
=======
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000228 	.word	0x20000228

08001cd4 <OTG_FS_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
<<<<<<< HEAD
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
=======
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
<<<<<<< HEAD
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <OTG_FS_IRQHandler+0x10>)
 800226e:	f001 f80c 	bl	800328a <HAL_PCD_IRQHandler>
=======
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <OTG_FS_IRQHandler+0x10>)
 8001cda:	f001 f80c 	bl	8002cf6 <HAL_PCD_IRQHandler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
<<<<<<< HEAD
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20001918 	.word	0x20001918

0800227c <_sbrk>:
=======
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200018b4 	.word	0x200018b4

08001ce8 <_sbrk>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
=======
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
=======
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <_sbrk+0x5c>)
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <_sbrk+0x60>)
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
=======
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <_sbrk+0x64>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <_sbrk+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f008 fbb0 	bl	800aa10 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20020000 	.word	0x20020000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	20000430 	.word	0x20000430
 80022e4:	20002168 	.word	0x20002168

080022e8 <SystemInit>:
=======
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d207      	bcs.n	8001d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d18:	f008 fbb0 	bl	800a47c <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	220c      	movs	r2, #12
 8001d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	e009      	b.n	8001d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <_sbrk+0x64>)
 8001d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20020000 	.word	0x20020000
 8001d48:	00000400 	.word	0x00000400
 8001d4c:	200003cc 	.word	0x200003cc
 8001d50:	20002100 	.word	0x20002100

08001d54 <SystemInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:
=======
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< HEAD
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002310:	f7ff ffea 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	; (800234c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	; (8002358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233a:	f008 fb6f 	bl	800aa1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7ff f973 	bl	8001628 <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002350:	0800b418 	.word	0x0800b418
  ldr r2, =_sbss
 8002354:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8002358:	20002164 	.word	0x20002164

0800235c <ADC_IRQHandler>:
=======
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d7c:	f7ff ffea 	bl	8001d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d82:	490d      	ldr	r1, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d98:	4c0a      	ldr	r4, [pc, #40]	; (8001dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da6:	f008 fb6f 	bl	800a488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff fa11 	bl	80011d0 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001dbc:	0800ae70 	.word	0x0800ae70
  ldr r2, =_sbss
 8001dc0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001dc4:	20002100 	.word	0x20002100

08001dc8 <ADC_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>
	...

08002360 <HAL_Init>:
=======
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236e:	6013      	str	r3, [r2, #0]
=======
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237a:	6013      	str	r3, [r2, #0]
=======
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]
=======
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f94f 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	200f      	movs	r0, #15
 8002390:	f000 f808 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fcfc 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_InitTick>:
=======
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f94f 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fd30 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x54>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_InitTick+0x58>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f967 	bl	8002696 <HAL_SYSTICK_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_InitTick+0x4c>
=======
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f967 	bl	8002102 <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d80a      	bhi.n	80023ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e0:	f000 f92f 	bl	8002642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_InitTick+0x5c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
=======
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 f92f 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000000 	.word	0x20000000
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_IncTick>:
=======
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_IncTick>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008
 8002428:	20000434 	.word	0x20000434

0800242c <HAL_GetTick>:
=======
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008
 8001e94:	200003d0 	.word	0x200003d0

08001e98 <HAL_GetTick>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000434 	.word	0x20000434

08002444 <HAL_Delay>:
=======
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200003d0 	.word	0x200003d0

08001eb0 <HAL_Delay>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ffee 	bl	800242c <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245c:	d005      	beq.n	800246a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_Delay+0x44>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246a:	bf00      	nop
 800246c:	f7ff ffde 	bl	800242c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f7      	bhi.n	800246c <HAL_Delay+0x28>
  {
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008

0800248c <__NVIC_SetPriorityGrouping>:
=======
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <__NVIC_SetPriorityGrouping>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
=======
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
=======
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
=======
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
=======
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
=======
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
=======
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
=======
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
=======
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
=======
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
=======
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002654:	f7ff ff3e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff8e 	bl	8002580 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5d 	bl	800252c <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_EnableIRQ>:
=======
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
=======
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff31 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
=======
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffa2 	bl	80025e8 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_DMA_Init>:
=======
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_DMA_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff feb6 	bl	800242c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]
=======
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff feb6 	bl	8001e98 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e099      	b.n	8002800 <HAL_DMA_Init+0x150>
=======
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e099      	b.n	800226c <HAL_DMA_Init+0x150>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ec:	e00f      	b.n	800270e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ee:	f7ff fe9d 	bl	800242c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d908      	bls.n	800270e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e078      	b.n	8002800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e8      	bne.n	80026ee <HAL_DMA_Init+0x3e>
=======
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	e00f      	b.n	800217a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215a:	f7ff fe9d 	bl	8001e98 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b05      	cmp	r3, #5
 8002166:	d908      	bls.n	800217a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e078      	b.n	800226c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e8      	bne.n	800215a <HAL_DMA_Init+0x3e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <HAL_DMA_Init+0x158>)
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
=======
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_DMA_Init+0x158>)
 8002194:	4013      	ands	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b04      	cmp	r3, #4
 8002766:	d107      	bne.n	8002778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4313      	orrs	r3, r2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
=======
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d107      	bne.n	80021e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4313      	orrs	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0307 	bic.w	r3, r3, #7
 800278e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d117      	bne.n	80027d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
=======
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f023 0307 	bic.w	r3, r3, #7
 80021fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2b04      	cmp	r3, #4
 800220c:	d117      	bne.n	800223e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa0b 	bl	8002bd0 <DMA_CheckFifoParam>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ce:	2301      	movs	r3, #1
 80027d0:	e016      	b.n	8002800 <HAL_DMA_Init+0x150>
=======
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fa0b 	bl	800263c <DMA_CheckFifoParam>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2240      	movs	r2, #64	; 0x40
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800223a:	2301      	movs	r3, #1
 800223c:	e016      	b.n	800226c <HAL_DMA_Init+0x150>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	615a      	str	r2, [r3, #20]
=======
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9c2 	bl	8002b64 <DMA_CalcBaseAndBitshift>
 80027e0:	4603      	mov	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	223f      	movs	r2, #63	; 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	f010803f 	.word	0xf010803f

0800280c <HAL_DMA_Abort_IT>:
=======
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9c2 	bl	80025d0 <DMA_CalcBaseAndBitshift>
 800224c:	4603      	mov	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	223f      	movs	r2, #63	; 0x3f
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	f010803f 	.word	0xf010803f

08002278 <HAL_DMA_Abort_IT>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d004      	beq.n	800282a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00c      	b.n	8002844 <HAL_DMA_Abort_IT+0x38>
=======
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00c      	b.n	80022b0 <HAL_DMA_Abort_IT+0x38>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2205      	movs	r2, #5
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_DMA_IRQHandler>:
=======
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2205      	movs	r2, #5
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DMA_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800285c:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <HAL_DMA_IRQHandler+0x248>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <HAL_DMA_IRQHandler+0x24c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a9b      	lsrs	r3, r3, #10
 8002868:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	2208      	movs	r2, #8
 800287c:	409a      	lsls	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01a      	beq.n	80028bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0204 	bic.w	r2, r2, #4
 80028a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	2208      	movs	r2, #8
 80028aa:	409a      	lsls	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c8:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_DMA_IRQHandler+0x248>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8e      	ldr	r2, [pc, #568]	; (8002508 <HAL_DMA_IRQHandler+0x24c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	2208      	movs	r2, #8
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2208      	movs	r2, #8
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2201      	movs	r2, #1
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2204      	movs	r2, #4
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2204      	movs	r2, #4
 8002916:	409a      	lsls	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f043 0204 	orr.w	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2204      	movs	r2, #4
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2204      	movs	r2, #4
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2210      	movs	r2, #16
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d043      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d03c      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	2210      	movs	r2, #16
 800294c:	409a      	lsls	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d018      	beq.n	8002992 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d024      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
 800297e:	e01f      	b.n	80029c0 <HAL_DMA_IRQHandler+0x170>
=======
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2210      	movs	r2, #16
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d043      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03c      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2210      	movs	r2, #16
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d024      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e01f      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
 8002990:	e016      	b.n	80029c0 <HAL_DMA_IRQHandler+0x170>
=======
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e016      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0208 	bic.w	r2, r2, #8
 80029ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
=======
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0208 	bic.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	2220      	movs	r2, #32
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 808f 	beq.w	8002af0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8087 	beq.w	8002af0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2220      	movs	r2, #32
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d136      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0216 	bic.w	r2, r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_DMA_IRQHandler+0x1da>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
=======
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2220      	movs	r2, #32
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 808f 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8087 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2220      	movs	r2, #32
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d136      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_IRQHandler+0x1da>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	223f      	movs	r2, #63	; 0x3f
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d07e      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
        }
        return;
 8002a66:	e079      	b.n	8002b5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01d      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e02c      	b.n	8002af0 <HAL_DMA_IRQHandler+0x2a0>
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	1b4e81b5 	.word	0x1b4e81b5
=======
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	223f      	movs	r2, #63	; 0x3f
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07e      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
        }
        return;
 80024d2:	e079      	b.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d031      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e02c      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000
 8002508:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
 8002ab0:	e01e      	b.n	8002af0 <HAL_DMA_IRQHandler+0x2a0>
=======
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e01e      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10f      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0210 	bic.w	r2, r2, #16
 8002ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
=======
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d032      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d022      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2205      	movs	r2, #5
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
=======
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d032      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d307      	bcc.n	8002b38 <HAL_DMA_IRQHandler+0x2e8>
=======
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d307      	bcc.n	80025a4 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f2      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x2cc>
 8002b36:	e000      	b.n	8002b3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b5c:	bf00      	nop
    }
  }
}
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <DMA_CalcBaseAndBitshift>:
=======
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f2      	bne.n	8002588 <HAL_DMA_IRQHandler+0x2cc>
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c8:	bf00      	nop
    }
  }
}
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_CalcBaseAndBitshift>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b10      	subs	r3, #16
 8002b74:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
=======
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3b10      	subs	r3, #16
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <DMA_CalcBaseAndBitshift+0x64>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <DMA_CalcBaseAndBitshift+0x68>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d909      	bls.n	8002ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba4:	e007      	b.n	8002bb6 <DMA_CalcBaseAndBitshift+0x52>
=======
 80025ea:	4a13      	ldr	r2, [pc, #76]	; (8002638 <DMA_CalcBaseAndBitshift+0x68>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d909      	bls.n	8002612 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	1d1a      	adds	r2, r3, #4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	659a      	str	r2, [r3, #88]	; 0x58
 8002610:	e007      	b.n	8002622 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	aaaaaaab 	.word	0xaaaaaaab
 8002bcc:	0800b3cc 	.word	0x0800b3cc

08002bd0 <DMA_CheckFifoParam>:
=======
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	aaaaaaab 	.word	0xaaaaaaab
 8002638:	0800ae24 	.word	0x0800ae24

0800263c <DMA_CheckFifoParam>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11f      	bne.n	8002c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d856      	bhi.n	8002c9e <DMA_CheckFifoParam+0xce>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x28>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c1b 	.word	0x08002c1b
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c9f 	.word	0x08002c9f
=======
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d11f      	bne.n	8002696 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d856      	bhi.n	800270a <DMA_CheckFifoParam+0xce>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <DMA_CheckFifoParam+0x28>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	08002675 	.word	0x08002675
 8002668:	08002687 	.word	0x08002687
 800266c:	08002675 	.word	0x08002675
 8002670:	0800270b 	.word	0x0800270b
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d046      	beq.n	8002ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e043      	b.n	8002ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c22:	d140      	bne.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e03d      	b.n	8002ca6 <DMA_CheckFifoParam+0xd6>
=======
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d046      	beq.n	800270e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002684:	e043      	b.n	800270e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800268e:	d140      	bne.n	8002712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002694:	e03d      	b.n	8002712 <DMA_CheckFifoParam+0xd6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	d121      	bne.n	8002c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d837      	bhi.n	8002caa <DMA_CheckFifoParam+0xda>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <DMA_CheckFifoParam+0x70>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c57 	.word	0x08002c57
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002c69 	.word	0x08002c69
=======
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269e:	d121      	bne.n	80026e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d837      	bhi.n	8002716 <DMA_CheckFifoParam+0xda>
 80026a6:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <DMA_CheckFifoParam+0x70>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026c3 	.word	0x080026c3
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	080026d5 	.word	0x080026d5
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e030      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d025      	beq.n	8002cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c66:	e022      	b.n	8002cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c70:	d11f      	bne.n	8002cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c76:	e01c      	b.n	8002cb2 <DMA_CheckFifoParam+0xe2>
=======
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	e030      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d025      	beq.n	800271a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d2:	e022      	b.n	800271a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026dc:	d11f      	bne.n	800271e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026e2:	e01c      	b.n	800271e <DMA_CheckFifoParam+0xe2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d903      	bls.n	8002c86 <DMA_CheckFifoParam+0xb6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <DMA_CheckFifoParam+0xbc>
=======
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d903      	bls.n	80026f2 <DMA_CheckFifoParam+0xb6>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d003      	beq.n	80026f8 <DMA_CheckFifoParam+0xbc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8002c84:	e018      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8a:	e015      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e00b      	b.n	8002cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e00a      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e008      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e006      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e004      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
=======
 80026f0:	e018      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      break;
 80026f6:	e015      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00e      	beq.n	8002722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e00b      	b.n	8002722 <DMA_CheckFifoParam+0xe6>
      break;
 800270a:	bf00      	nop
 800270c:	e00a      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e008      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e006      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e004      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e002      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      break;   
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <DMA_CheckFifoParam+0xe8>
      break;
 8002722:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <HAL_GPIO_Init>:
=======
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <HAL_GPIO_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
=======
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e159      	b.n	8002f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 8148 	bne.w	8002f92 <HAL_GPIO_Init+0x2ca>
=======
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e159      	b.n	8002a04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 8148 	bne.w	80029fe <HAL_GPIO_Init+0x2ca>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d005      	beq.n	8002d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d130      	bne.n	8002d7c <HAL_GPIO_Init+0xb4>
=======
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d005      	beq.n	8002786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	2b02      	cmp	r3, #2
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xb4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d017      	beq.n	8002db8 <HAL_GPIO_Init+0xf0>
=======
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d017      	beq.n	8002824 <HAL_GPIO_Init+0xf0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	60da      	str	r2, [r3, #12]
=======
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x144>
=======
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]
=======
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a2 	beq.w	8002f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_GPIO_Init+0x2e8>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_GPIO_Init+0x2e8>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_GPIO_Init+0x2e8>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6a:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_GPIO_Init+0x2ec>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a49      	ldr	r2, [pc, #292]	; (8002fb8 <HAL_GPIO_Init+0x2f0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d019      	beq.n	8002eca <HAL_GPIO_Init+0x202>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a48      	ldr	r2, [pc, #288]	; (8002fbc <HAL_GPIO_Init+0x2f4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0x1fe>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a47      	ldr	r2, [pc, #284]	; (8002fc0 <HAL_GPIO_Init+0x2f8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_GPIO_Init+0x1fa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_GPIO_Init+0x2fc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <HAL_GPIO_Init+0x1f6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <HAL_GPIO_Init+0x300>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_GPIO_Init+0x1f2>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e008      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002eba:	2307      	movs	r3, #7
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e004      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f002 0203 	and.w	r2, r2, #3
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	4093      	lsls	r3, r2
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002edc:	4935      	ldr	r1, [pc, #212]	; (8002fb4 <HAL_GPIO_Init+0x2ec>)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f3e:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3301      	adds	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	f67f aea2 	bls.w	8002ce4 <HAL_GPIO_Init+0x1c>
=======
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a2 	beq.w	80029fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_GPIO_Init+0x2e8>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a56      	ldr	r2, [pc, #344]	; (8002a1c <HAL_GPIO_Init+0x2e8>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <HAL_GPIO_Init+0x2e8>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_GPIO_Init+0x2ec>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <HAL_GPIO_Init+0x2f0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d019      	beq.n	8002936 <HAL_GPIO_Init+0x202>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a48      	ldr	r2, [pc, #288]	; (8002a28 <HAL_GPIO_Init+0x2f4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0x1fe>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_GPIO_Init+0x2f8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00d      	beq.n	800292e <HAL_GPIO_Init+0x1fa>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a46      	ldr	r2, [pc, #280]	; (8002a30 <HAL_GPIO_Init+0x2fc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <HAL_GPIO_Init+0x1f6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <HAL_GPIO_Init+0x300>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_GPIO_Init+0x1f2>
 8002922:	2304      	movs	r3, #4
 8002924:	e008      	b.n	8002938 <HAL_GPIO_Init+0x204>
 8002926:	2307      	movs	r3, #7
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x204>
 800292a:	2303      	movs	r3, #3
 800292c:	e004      	b.n	8002938 <HAL_GPIO_Init+0x204>
 800292e:	2302      	movs	r3, #2
 8002930:	e002      	b.n	8002938 <HAL_GPIO_Init+0x204>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_GPIO_Init+0x204>
 8002936:	2300      	movs	r3, #0
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f002 0203 	and.w	r2, r2, #3
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	4093      	lsls	r3, r2
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002948:	4935      	ldr	r1, [pc, #212]	; (8002a20 <HAL_GPIO_Init+0x2ec>)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_GPIO_Init+0x304>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297a:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <HAL_GPIO_Init+0x304>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_GPIO_Init+0x304>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_GPIO_Init+0x304>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_GPIO_Init+0x304>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_GPIO_Init+0x304>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_GPIO_Init+0x304>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f8:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_GPIO_Init+0x304>)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3301      	adds	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	f67f aea2 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }
}
<<<<<<< HEAD
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40020400 	.word	0x40020400
 8002fc0:	40020800 	.word	0x40020800
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_WritePin>:
=======
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40013800 	.word	0x40013800
 8002a24:	40020000 	.word	0x40020000
 8002a28:	40020400 	.word	0x40020400
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40020c00 	.word	0x40020c00
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40013c00 	.word	0x40013c00

08002a3c <HAL_GPIO_WritePin>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
=======
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
=======
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002fec:	e003      	b.n	8002ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	041a      	lsls	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_PCD_Init>:
=======
 8002a58:	e003      	b.n	8002a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	619a      	str	r2, [r3, #24]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_PCD_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af02      	add	r7, sp, #8
 8003008:	6078      	str	r0, [r7, #4]
=======
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af02      	add	r7, sp, #8
 8002a74:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e101      	b.n	8003218 <HAL_PCD_Init+0x216>
=======
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e101      	b.n	8002c84 <HAL_PCD_Init+0x216>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
<<<<<<< HEAD
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
=======
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f007 f9bc 	bl	800a3ac <HAL_PCD_MspInit>
=======
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f007 f9bc 	bl	8009e18 <HAL_PCD_MspInit>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2203      	movs	r2, #3
 8003038:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
=======
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
<<<<<<< HEAD
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003042:	d102      	bne.n	800304a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	719a      	strb	r2, [r3, #6]
=======
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aae:	d102      	bne.n	8002ab6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	719a      	strb	r2, [r3, #6]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fdb3 	bl	8006bba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7c1a      	ldrb	r2, [r3, #16]
 800305c:	f88d 2000 	strb.w	r2, [sp]
 8003060:	3304      	adds	r3, #4
 8003062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003064:	f003 fc92 	bl	800698c <USB_CoreInit>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0ce      	b.n	8003218 <HAL_PCD_Init+0x216>
=======
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fdb3 	bl	8006626 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7c1a      	ldrb	r2, [r3, #16]
 8002ac8:	f88d 2000 	strb.w	r2, [sp]
 8002acc:	3304      	adds	r3, #4
 8002ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad0:	f003 fc92 	bl	80063f8 <USB_CoreInit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0ce      	b.n	8002c84 <HAL_PCD_Init+0x216>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
<<<<<<< HEAD
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f003 fdab 	bl	8006bdc <USB_SetCurrentMode>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0bf      	b.n	8003218 <HAL_PCD_Init+0x216>
=======
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fdab 	bl	8006648 <USB_SetCurrentMode>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0bf      	b.n	8002c84 <HAL_PCD_Init+0x216>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
<<<<<<< HEAD
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e04a      	b.n	8003134 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3315      	adds	r3, #21
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3314      	adds	r3, #20
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	b298      	uxth	r0, r3
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	332e      	adds	r3, #46	; 0x2e
 80030da:	4602      	mov	r2, r0
 80030dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3318      	adds	r3, #24
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	331c      	adds	r3, #28
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3320      	adds	r3, #32
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3324      	adds	r3, #36	; 0x24
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	3301      	adds	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	791b      	ldrb	r3, [r3, #4]
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3af      	bcc.n	800309e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e044      	b.n	80031ce <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	3301      	adds	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3b5      	bcc.n	8003144 <HAL_PCD_Init+0x142>
=======
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e04a      	b.n	8002ba0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3315      	adds	r3, #21
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3314      	adds	r3, #20
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	b298      	uxth	r0, r3
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	332e      	adds	r3, #46	; 0x2e
 8002b46:	4602      	mov	r2, r0
 8002b48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3318      	adds	r3, #24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	331c      	adds	r3, #28
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3320      	adds	r3, #32
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3324      	adds	r3, #36	; 0x24
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3af      	bcc.n	8002b0a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e044      	b.n	8002c3a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	3301      	adds	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3b5      	bcc.n	8002bb0 <HAL_PCD_Init+0x142>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7c1a      	ldrb	r2, [r3, #16]
 80031e0:	f88d 2000 	strb.w	r2, [sp]
 80031e4:	3304      	adds	r3, #4
 80031e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e8:	f003 fd44 	bl	8006c74 <USB_DevInit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00c      	b.n	8003218 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
=======
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7c1a      	ldrb	r2, [r3, #16]
 8002c4c:	f88d 2000 	strb.w	r2, [sp]
 8002c50:	3304      	adds	r3, #4
 8002c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c54:	f003 fd44 	bl	80066e0 <USB_DevInit>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
<<<<<<< HEAD
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f004 fd88 	bl	8007d26 <USB_DevDisconnect>

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_Start>:
=======
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fd88 	bl	8007792 <USB_DevDisconnect>

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_Start>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_PCD_Start+0x1c>
 8003238:	2302      	movs	r3, #2
 800323a:	e022      	b.n	8003282 <HAL_PCD_Start+0x62>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f003 fc95 	bl	8006b98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fd36 	bl	8007ce4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_IRQHandler>:
=======
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_PCD_Start+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e022      	b.n	8002cee <HAL_PCD_Start+0x62>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fc95 	bl	8006604 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 fd36 	bl	8007750 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800328a:	b590      	push	{r4, r7, lr}
 800328c:	b08d      	sub	sp, #52	; 0x34
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	61fb      	str	r3, [r7, #28]
=======
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b08d      	sub	sp, #52	; 0x34
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	61fb      	str	r3, [r7, #28]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
<<<<<<< HEAD
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fdf4 	bl	8007e8e <USB_GetMode>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 848c 	bne.w	8003bc6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fd58 	bl	8007d68 <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8482 	beq.w	8003bc4 <HAL_PCD_IRQHandler+0x93a>
=======
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fdf4 	bl	80078fa <USB_GetMode>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f040 848c 	bne.w	8003632 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fd58 	bl	80077d4 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8482 	beq.w	8003630 <HAL_PCD_IRQHandler+0x93a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
<<<<<<< HEAD
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f004 fd45 	bl	8007d68 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d107      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f002 0202 	and.w	r2, r2, #2
 80032f6:	615a      	str	r2, [r3, #20]
=======
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fd45 	bl	80077d4 <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d107      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 0202 	and.w	r2, r2, #2
 8002d62:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
<<<<<<< HEAD
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 fd33 	bl	8007d68 <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b10      	cmp	r3, #16
 800330a:	d161      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0210 	bic.w	r2, r2, #16
 800331a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	0c5b      	lsrs	r3, r3, #17
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2b02      	cmp	r3, #2
 8003346:	d124      	bne.n	8003392 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d035      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800335e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	6a38      	ldr	r0, [r7, #32]
 8003368:	f004 fb6a 	bl	8007a40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003378:	441a      	add	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800338a:	441a      	add	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	615a      	str	r2, [r3, #20]
 8003390:	e016      	b.n	80033c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	0c5b      	lsrs	r3, r3, #17
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	2b06      	cmp	r3, #6
 800339c:	d110      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80033a4:	2208      	movs	r2, #8
 80033a6:	4619      	mov	r1, r3
 80033a8:	6a38      	ldr	r0, [r7, #32]
 80033aa:	f004 fb49 	bl	8007a40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ba:	441a      	add	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	615a      	str	r2, [r3, #20]
=======
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 fd33 	bl	80077d4 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d161      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0210 	bic.w	r2, r2, #16
 8002d86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	0c5b      	lsrs	r3, r3, #17
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d124      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d035      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a38      	ldr	r0, [r7, #32]
 8002dd4:	f004 fb6a 	bl	80074ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de4:	441a      	add	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df6:	441a      	add	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	e016      	b.n	8002e2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	0c5b      	lsrs	r3, r3, #17
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d110      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e10:	2208      	movs	r2, #8
 8002e12:	4619      	mov	r1, r3
 8002e14:	6a38      	ldr	r0, [r7, #32]
 8002e16:	f004 fb49 	bl	80074ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e26:	441a      	add	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
<<<<<<< HEAD
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0210 	orr.w	r2, r2, #16
 80033ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 fcc7 	bl	8007d68 <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033e4:	f040 80a7 	bne.w	8003536 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fccc 	bl	8007d8e <USB_ReadDevAllOutEpInterrupt>
 80033f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033f8:	e099      	b.n	800352e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 808e 	beq.w	8003522 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fcf0 	bl	8007df6 <USB_ReadDevOutEPInterrupt>
 8003416:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342e:	461a      	mov	r2, r3
 8003430:	2301      	movs	r3, #1
 8003432:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fea2 	bl	8004180 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	2308      	movs	r3, #8
 8003456:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 ff78 	bl	8004350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003476:	461a      	mov	r2, r3
 8003478:	2310      	movs	r3, #16
 800347a:	6093      	str	r3, [r2, #8]
=======
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0210 	orr.w	r2, r2, #16
 8002e3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 fcc7 	bl	80077d4 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e50:	f040 80a7 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 fccc 	bl	80077fa <USB_ReadDevAllOutEpInterrupt>
 8002e62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e64:	e099      	b.n	8002f9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 808e 	beq.w	8002f8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 fcf0 	bl	8007862 <USB_ReadDevOutEPInterrupt>
 8002e82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fea2 	bl	8003bec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ff78 	bl	8003dbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	6093      	str	r3, [r2, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
<<<<<<< HEAD
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d030      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d109      	bne.n	80034a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d108      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2200      	movs	r2, #0
 80034c8:	70da      	strb	r2, [r3, #3]
=======
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d030      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d109      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	78db      	ldrb	r3, [r3, #3]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d108      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	70da      	strb	r2, [r3, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f007 f867 	bl	800a5a4 <HAL_PCD_ISOOUTIncompleteCallback>
=======
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f007 f867 	bl	800a010 <HAL_PCD_ISOOUTIncompleteCallback>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
<<<<<<< HEAD
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e2:	461a      	mov	r2, r3
 80034e4:	2302      	movs	r3, #2
 80034e6:	6093      	str	r3, [r2, #8]
=======
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2302      	movs	r3, #2
 8002f52:	6093      	str	r3, [r2, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
<<<<<<< HEAD
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	2320      	movs	r3, #32
 8003502:	6093      	str	r3, [r2, #8]
=======
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	6093      	str	r3, [r2, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
<<<<<<< HEAD
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351a:	461a      	mov	r2, r3
 800351c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003520:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	3301      	adds	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f af62 	bne.w	80033fa <HAL_PCD_IRQHandler+0x170>
=======
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af62 	bne.w	8002e66 <HAL_PCD_IRQHandler+0x170>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
<<<<<<< HEAD
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fc14 	bl	8007d68 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800354a:	f040 80db 	bne.w	8003704 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f004 fc35 	bl	8007dc2 <USB_ReadDevAllInEpInterrupt>
 8003558:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800355e:	e0cd      	b.n	80036fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80c2 	beq.w	80036f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fc5b 	bl	8007e32 <USB_ReadDevInEPInterrupt>
 800357c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d057      	beq.n	8003638 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	2201      	movs	r2, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69f9      	ldr	r1, [r7, #28]
 80035a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a8:	4013      	ands	r3, r2
 80035aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	461a      	mov	r2, r3
 80035ba:	2301      	movs	r3, #1
 80035bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	799b      	ldrb	r3, [r3, #6]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d132      	bne.n	800362c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	3320      	adds	r3, #32
 80035d6:	6819      	ldr	r1, [r3, #0]
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4403      	add	r3, r0
 80035e6:	331c      	adds	r3, #28
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4419      	add	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4403      	add	r3, r0
 80035fa:	3320      	adds	r3, #32
 80035fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d113      	bne.n	800362c <HAL_PCD_IRQHandler+0x3a2>
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3324      	adds	r3, #36	; 0x24
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d108      	bne.n	800362c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003624:	461a      	mov	r2, r3
 8003626:	2101      	movs	r1, #1
 8003628:	f004 fc62 	bl	8007ef0 <USB_EP0_OutStart>
=======
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 fc14 	bl	80077d4 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb6:	f040 80db 	bne.w	8003170 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fc35 	bl	800782e <USB_ReadDevAllInEpInterrupt>
 8002fc4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fca:	e0cd      	b.n	8003168 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80c2 	beq.w	800315c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 fc5b 	bl	800789e <USB_ReadDevInEPInterrupt>
 8002fe8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d057      	beq.n	80030a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43db      	mvns	r3, r3
 800300e:	69f9      	ldr	r1, [r7, #28]
 8003010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003014:	4013      	ands	r3, r2
 8003016:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003024:	461a      	mov	r2, r3
 8003026:	2301      	movs	r3, #1
 8003028:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	799b      	ldrb	r3, [r3, #6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d132      	bne.n	8003098 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3320      	adds	r3, #32
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4403      	add	r3, r0
 8003052:	331c      	adds	r3, #28
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4419      	add	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4403      	add	r3, r0
 8003066:	3320      	adds	r3, #32
 8003068:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d113      	bne.n	8003098 <HAL_PCD_IRQHandler+0x3a2>
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003090:	461a      	mov	r2, r3
 8003092:	2101      	movs	r1, #1
 8003094:	f004 fc62 	bl	800795c <USB_EP0_OutStart>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f006 ff3b 	bl	800a4ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364e:	461a      	mov	r2, r3
 8003650:	2308      	movs	r3, #8
 8003652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	461a      	mov	r2, r3
 800366c:	2310      	movs	r3, #16
 800366e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	461a      	mov	r2, r3
 8003688:	2340      	movs	r3, #64	; 0x40
 800368a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003698:	6a38      	ldr	r0, [r7, #32]
 800369a:	f003 fc4f 	bl	8006f3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800369e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	3310      	adds	r3, #16
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	3304      	adds	r3, #4
 80036b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	78db      	ldrb	r3, [r3, #3]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d108      	bne.n	80036cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	70da      	strb	r2, [r3, #3]
=======
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f006 ff3b 	bl	8009f1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ba:	461a      	mov	r2, r3
 80030bc:	2308      	movs	r3, #8
 80030be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d6:	461a      	mov	r2, r3
 80030d8:	2310      	movs	r3, #16
 80030da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	461a      	mov	r2, r3
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d023      	beq.n	800314a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003104:	6a38      	ldr	r0, [r7, #32]
 8003106:	f003 fc4f 	bl	80069a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3310      	adds	r3, #16
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	78db      	ldrb	r3, [r3, #3]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d108      	bne.n	8003138 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	70da      	strb	r2, [r3, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f006 ff7e 	bl	800a5c8 <HAL_PCD_ISOINIncompleteCallback>
=======
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f006 ff7e 	bl	800a034 <HAL_PCD_ISOINIncompleteCallback>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
<<<<<<< HEAD
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	461a      	mov	r2, r3
 80036da:	2302      	movs	r3, #2
 80036dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fcbb 	bl	8004066 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	3301      	adds	r3, #1
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f47f af2e 	bne.w	8003560 <HAL_PCD_IRQHandler+0x2d6>
=======
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003144:	461a      	mov	r2, r3
 8003146:	2302      	movs	r3, #2
 8003148:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fcbb 	bl	8003ad2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	3301      	adds	r3, #1
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	f47f af2e 	bne.w	8002fcc <HAL_PCD_IRQHandler+0x2d6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
<<<<<<< HEAD
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f004 fb2d 	bl	8007d68 <USB_ReadInterrupts>
 800370e:	4603      	mov	r3, r0
 8003710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003718:	d122      	bne.n	8003760 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
=======
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fb2d 	bl	80077d4 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003184:	d122      	bne.n	80031cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d108      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
<<<<<<< HEAD
 8003740:	2100      	movs	r1, #0
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fea2 	bl	800448c <HAL_PCDEx_LPM_Callback>
 8003748:	e002      	b.n	8003750 <HAL_PCD_IRQHandler+0x4c6>
=======
 80031ac:	2100      	movs	r1, #0
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fea2 	bl	8003ef8 <HAL_PCDEx_LPM_Callback>
 80031b4:	e002      	b.n	80031bc <HAL_PCD_IRQHandler+0x4c6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f006 ff1c 	bl	800a588 <HAL_PCD_ResumeCallback>
=======
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f006 ff1c 	bl	8009ff4 <HAL_PCD_ResumeCallback>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
<<<<<<< HEAD
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800375e:	615a      	str	r2, [r3, #20]
=======
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031ca:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
<<<<<<< HEAD
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f004 faff 	bl	8007d68 <USB_ReadInterrupts>
 800376a:	4603      	mov	r3, r0
 800376c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003774:	d112      	bne.n	800379c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_PCD_IRQHandler+0x502>
=======
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 faff 	bl	80077d4 <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e0:	d112      	bne.n	8003208 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x502>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f006 fed8 	bl	800a53c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800379a:	615a      	str	r2, [r3, #20]
=======
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f006 fed8 	bl	8009fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003206:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
<<<<<<< HEAD
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 fae1 	bl	8007d68 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	f040 80b7 	bne.w	8003922 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2110      	movs	r1, #16
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 fbb4 	bl	8006f3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d8:	e046      	b.n	8003868 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e6:	461a      	mov	r2, r3
 80037e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	440a      	add	r2, r1
 8003804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800380c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003820:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	440a      	add	r2, r1
 8003838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800383c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003840:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	440a      	add	r2, r1
 8003858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800385c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003860:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	3301      	adds	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	461a      	mov	r2, r3
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	4293      	cmp	r3, r2
 8003872:	d3b2      	bcc.n	80037da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003882:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003886:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7bdb      	ldrb	r3, [r3, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a0:	f043 030b 	orr.w	r3, r3, #11
 80038a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
=======
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 fae1 	bl	80077d4 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	f040 80b7 	bne.w	800338e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2110      	movs	r1, #16
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fbb4 	bl	80069a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003244:	e046      	b.n	80032d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003252:	461a      	mov	r2, r3
 8003254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003258:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	440a      	add	r2, r1
 8003270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	461a      	mov	r2, r3
 8003288:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800328c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800329e:	0151      	lsls	r1, r2, #5
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	440a      	add	r2, r1
 80032a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	3301      	adds	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	461a      	mov	r2, r3
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	4293      	cmp	r3, r2
 80032de:	d3b2      	bcc.n	8003246 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7bdb      	ldrb	r3, [r3, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330c:	f043 030b 	orr.w	r3, r3, #11
 8003310:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
<<<<<<< HEAD
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b6:	f043 030b 	orr.w	r3, r3, #11
 80038ba:	6453      	str	r3, [r2, #68]	; 0x44
 80038bc:	e015      	b.n	80038ea <HAL_PCD_IRQHandler+0x660>
=======
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003322:	f043 030b 	orr.w	r3, r3, #11
 8003326:	6453      	str	r3, [r2, #68]	; 0x44
 8003328:	e015      	b.n	8003356 <HAL_PCD_IRQHandler+0x660>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
<<<<<<< HEAD
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038d0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038d4:	6153      	str	r3, [r2, #20]
=======
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800333c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003340:	6153      	str	r3, [r2, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
<<<<<<< HEAD
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e4:	f043 030b 	orr.w	r3, r3, #11
 80038e8:	6113      	str	r3, [r2, #16]
=======
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003350:	f043 030b 	orr.w	r3, r3, #11
 8003354:	6113      	str	r3, [r2, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
<<<<<<< HEAD
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800390c:	461a      	mov	r2, r3
 800390e:	f004 faef 	bl	8007ef0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003920:	615a      	str	r2, [r3, #20]
=======
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003364:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003368:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003378:	461a      	mov	r2, r3
 800337a:	f004 faef 	bl	800795c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800338c:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
<<<<<<< HEAD
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f004 fa1e 	bl	8007d68 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d123      	bne.n	8003980 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f004 fab4 	bl	8007eaa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fb71 	bl	800702e <USB_GetDevSpeed>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681c      	ldr	r4, [r3, #0]
 8003958:	f001 f9c8 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 800395c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003962:	461a      	mov	r2, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f003 f875 	bl	8006a54 <USB_SetTurnaroundTime>
=======
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f004 fa1e 	bl	80077d4 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a2:	d123      	bne.n	80033ec <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fab4 	bl	8007916 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 fb71 	bl	8006a9a <USB_GetDevSpeed>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681c      	ldr	r4, [r3, #0]
 80033c4:	f001 f9c8 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ce:	461a      	mov	r2, r3
 80033d0:	4620      	mov	r0, r4
 80033d2:	f003 f875 	bl	80064c0 <USB_SetTurnaroundTime>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f006 fdc7 	bl	800a4fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800397e:	615a      	str	r2, [r3, #20]
=======
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f006 fdc7 	bl	8009f6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033ea:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
<<<<<<< HEAD
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f004 f9ef 	bl	8007d68 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d10a      	bne.n	80039aa <HAL_PCD_IRQHandler+0x720>
=======
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 f9ef 	bl	80077d4 <USB_ReadInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d10a      	bne.n	8003416 <HAL_PCD_IRQHandler+0x720>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f006 fda4 	bl	800a4e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f002 0208 	and.w	r2, r2, #8
 80039a8:	615a      	str	r2, [r3, #20]
=======
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f006 fda4 	bl	8009f4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 0208 	and.w	r2, r2, #8
 8003414:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
<<<<<<< HEAD
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 f9da 	bl	8007d68 <USB_ReadInterrupts>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d123      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ca:	2301      	movs	r3, #1
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e014      	b.n	80039fa <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	f203 2357 	addw	r3, r3, #599	; 0x257
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fb08 	bl	8004004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	3301      	adds	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	791b      	ldrb	r3, [r3, #4]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d3e4      	bcc.n	80039d0 <HAL_PCD_IRQHandler+0x746>
=======
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f004 f9da 	bl	80077d4 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d123      	bne.n	8003472 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003436:	2301      	movs	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	e014      	b.n	8003466 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	b2db      	uxtb	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb08 	bl	8003a70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	3301      	adds	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	791b      	ldrb	r3, [r3, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	4293      	cmp	r3, r2
 8003470:	d3e4      	bcc.n	800343c <HAL_PCD_IRQHandler+0x746>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
<<<<<<< HEAD
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 f9ac 	bl	8007d68 <USB_ReadInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1a:	d13c      	bne.n	8003a96 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	e02b      	b.n	8003a7a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3318      	adds	r3, #24
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d115      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da12      	bge.n	8003a74 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3317      	adds	r3, #23
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fac8 	bl	8004004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	3301      	adds	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d3cd      	bcc.n	8003a22 <HAL_PCD_IRQHandler+0x798>
=======
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f004 f9ac 	bl	80077d4 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003486:	d13c      	bne.n	8003502 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e02b      	b.n	80034e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3318      	adds	r3, #24
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d115      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da12      	bge.n	80034e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3317      	adds	r3, #23
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fac8 	bl	8003a70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	3301      	adds	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	791b      	ldrb	r3, [r3, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d3cd      	bcc.n	800348e <HAL_PCD_IRQHandler+0x798>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
<<<<<<< HEAD
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a94:	615a      	str	r2, [r3, #20]
=======
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003500:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
<<<<<<< HEAD
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 f964 	bl	8007d68 <USB_ReadInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aaa:	d156      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aac:	2301      	movs	r3, #1
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab0:	e045      	b.n	8003b3e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12e      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ada:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da2b      	bge.n	8003b38 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003aec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d121      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b34:	6053      	str	r3, [r2, #4]
            break;
 8003b36:	e008      	b.n	8003b4a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	791b      	ldrb	r3, [r3, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d3b3      	bcc.n	8003ab2 <HAL_PCD_IRQHandler+0x828>
=======
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 f964 	bl	80077d4 <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003516:	d156      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	e045      	b.n	80035aa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12e      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003546:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	da2b      	bge.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003558:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800355c:	429a      	cmp	r2, r3
 800355e:	d121      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a0:	6053      	str	r3, [r2, #4]
            break;
 80035a2:	e008      	b.n	80035b6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	3301      	adds	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	791b      	ldrb	r3, [r3, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d3b3      	bcc.n	800351e <HAL_PCD_IRQHandler+0x828>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
<<<<<<< HEAD
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b58:	615a      	str	r2, [r3, #20]
=======
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035c4:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
<<<<<<< HEAD
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 f902 	bl	8007d68 <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d10a      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x8fc>
=======
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f004 f902 	bl	80077d4 <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d10a      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x8fc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
<<<<<<< HEAD
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f006 fd3b 	bl	800a5ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b84:	615a      	str	r2, [r3, #20]
=======
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f006 fd3b 	bl	800a058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035f0:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
<<<<<<< HEAD
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 f8ec 	bl	8007d68 <USB_ReadInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d115      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x928>
=======
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f8ec 	bl	80077d4 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d115      	bne.n	8003632 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_PCD_IRQHandler+0x928>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
<<<<<<< HEAD
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f006 fd2b 	bl	800a608 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	e000      	b.n	8003bc6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003bc4:	bf00      	nop
    }
  }
}
 8003bc6:	3734      	adds	r7, #52	; 0x34
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd90      	pop	{r4, r7, pc}

08003bcc <HAL_PCD_SetAddress>:
=======
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f006 fd2b 	bl	800a074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e000      	b.n	8003632 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003630:	bf00      	nop
    }
  }
}
 8003632:	3734      	adds	r7, #52	; 0x34
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <HAL_PCD_SetAddress>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_PCD_SetAddress+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e012      	b.n	8003c0c <HAL_PCD_SetAddress+0x40>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 f84b 	bl	8007c98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_PCD_EP_Open>:
=======
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_PCD_SetAddress+0x1a>
 800364e:	2302      	movs	r3, #2
 8003650:	e012      	b.n	8003678 <HAL_PCD_SetAddress+0x40>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f004 f84b 	bl	8007704 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_PCD_EP_Open>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	70fb      	strb	r3, [r7, #3]
 8003c26:	460b      	mov	r3, r1
 8003c28:	803b      	strh	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da0f      	bge.n	8003c5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 020f 	and.w	r2, r3, #15
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3310      	adds	r3, #16
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	705a      	strb	r2, [r3, #1]
 8003c58:	e00f      	b.n	8003c7a <HAL_PCD_EP_Open+0x66>
=======
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	70fb      	strb	r3, [r7, #3]
 8003692:	460b      	mov	r3, r1
 8003694:	803b      	strh	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800369e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da0f      	bge.n	80036c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3310      	adds	r3, #16
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	705a      	strb	r2, [r3, #1]
 80036c4:	e00f      	b.n	80036e6 <HAL_PCD_EP_Open+0x66>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c86:	883a      	ldrh	r2, [r7, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	78ba      	ldrb	r2, [r7, #2]
 8003c90:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	835a      	strh	r2, [r3, #26]
=======
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036f2:	883a      	ldrh	r2, [r7, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	78ba      	ldrb	r2, [r7, #2]
 80036fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	835a      	strh	r2, [r3, #26]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
<<<<<<< HEAD
 8003ca4:	78bb      	ldrb	r3, [r7, #2]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d102      	bne.n	8003cb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_PCD_EP_Open+0xaa>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e00e      	b.n	8003cdc <HAL_PCD_EP_Open+0xc8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 f9d3 	bl	8007078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_PCD_EP_Close>:
=======
 8003710:	78bb      	ldrb	r3, [r7, #2]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d102      	bne.n	800371c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_PCD_EP_Open+0xaa>
 8003726:	2302      	movs	r3, #2
 8003728:	e00e      	b.n	8003748 <HAL_PCD_EP_Open+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	4618      	mov	r0, r3
 800373a:	f003 f9d3 	bl	8006ae4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003746:	7afb      	ldrb	r3, [r7, #11]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_PCD_EP_Close>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da0f      	bge.n	8003d18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	3310      	adds	r3, #16
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	705a      	strb	r2, [r3, #1]
 8003d16:	e00f      	b.n	8003d38 <HAL_PCD_EP_Close+0x54>
=======
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da0f      	bge.n	8003784 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3310      	adds	r3, #16
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	705a      	strb	r2, [r3, #1]
 8003782:	e00f      	b.n	80037a4 <HAL_PCD_EP_Close+0x54>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 020f 	and.w	r2, r3, #15
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3304      	adds	r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_EP_Close+0x6e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e00e      	b.n	8003d70 <HAL_PCD_EP_Close+0x8c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f003 fa11 	bl	8007188 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_Receive>:
=======
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_Close+0x6e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e00e      	b.n	80037dc <HAL_PCD_EP_Close+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 fa11 	bl	8006bf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_Receive>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	460b      	mov	r3, r1
 8003d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d88:	7afb      	ldrb	r3, [r7, #11]
 8003d8a:	f003 020f 	and.w	r2, r3, #15
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3304      	adds	r3, #4
 8003da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	799b      	ldrb	r3, [r3, #6]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	799b      	ldrb	r3, [r3, #6]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	f003 faae 	bl	8007340 <USB_EPStartXfer>

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_PCD_EP_GetRxCount>:
=======
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	460b      	mov	r3, r1
 80037f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f4:	7afb      	ldrb	r3, [r7, #11]
 80037f6:	f003 020f 	and.w	r2, r3, #15
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	b2da      	uxtb	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	799b      	ldrb	r3, [r3, #6]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	461a      	mov	r2, r3
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	f003 faae 	bl	8006dac <USB_EPStartXfer>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_EP_GetRxCount>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003e10:	681b      	ldr	r3, [r3, #0]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_PCD_EP_Transmit>:
=======
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800387c:	681b      	ldr	r3, [r3, #0]
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_PCD_EP_Transmit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	f003 020f 	and.w	r2, r3, #15
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	3304      	adds	r3, #4
 8003e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	799b      	ldrb	r3, [r3, #6]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	799b      	ldrb	r3, [r3, #6]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	f003 fa5c 	bl	8007340 <USB_EPStartXfer>

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_EP_SetStall>:
=======
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	460b      	mov	r3, r1
 8003898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3310      	adds	r3, #16
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2201      	movs	r2, #1
 80038c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	799b      	ldrb	r3, [r3, #6]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	799b      	ldrb	r3, [r3, #6]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6979      	ldr	r1, [r7, #20]
 80038f0:	f003 fa5c 	bl	8006dac <USB_EPStartXfer>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_PCD_EP_SetStall>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	7912      	ldrb	r2, [r2, #4]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e04f      	b.n	8003f50 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	da0f      	bge.n	8003ed8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	705a      	strb	r2, [r3, #1]
 8003ed6:	e00d      	b.n	8003ef4 <HAL_PCD_EP_SetStall+0x62>
=======
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	7912      	ldrb	r2, [r2, #4]
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e04f      	b.n	80039bc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800391c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003920:	2b00      	cmp	r3, #0
 8003922:	da0f      	bge.n	8003944 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	f003 020f 	and.w	r2, r3, #15
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	3310      	adds	r3, #16
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	705a      	strb	r2, [r3, #1]
 8003942:	e00d      	b.n	8003960 <HAL_PCD_EP_SetStall+0x62>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_PCD_EP_SetStall+0x82>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e01d      	b.n	8003f50 <HAL_PCD_EP_SetStall+0xbe>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 fde4 	bl	8007af0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7999      	ldrb	r1, [r3, #6]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f40:	461a      	mov	r2, r3
 8003f42:	f003 ffd5 	bl	8007ef0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_PCD_EP_ClrStall>:
=======
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_PCD_EP_SetStall+0x82>
 800397c:	2302      	movs	r3, #2
 800397e:	e01d      	b.n	80039bc <HAL_PCD_EP_SetStall+0xbe>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	4618      	mov	r0, r3
 8003990:	f003 fde4 	bl	800755c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7999      	ldrb	r1, [r3, #6]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80039ac:	461a      	mov	r2, r3
 80039ae:	f003 ffd5 	bl	800795c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_PCD_EP_ClrStall>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	7912      	ldrb	r2, [r2, #4]
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e042      	b.n	8003ffc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da0f      	bge.n	8003f9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	705a      	strb	r2, [r3, #1]
 8003f9c:	e00f      	b.n	8003fbe <HAL_PCD_EP_ClrStall+0x66>
=======
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	7912      	ldrb	r2, [r2, #4]
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e042      	b.n	8003a68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	da0f      	bge.n	8003a0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 020f 	and.w	r2, r3, #15
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	3310      	adds	r3, #16
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	3304      	adds	r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	705a      	strb	r2, [r3, #1]
 8003a08:	e00f      	b.n	8003a2a <HAL_PCD_EP_ClrStall+0x66>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_PCD_EP_ClrStall+0x86>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e00e      	b.n	8003ffc <HAL_PCD_EP_ClrStall+0xa4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f003 fded 	bl	8007bcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_Abort>:
=======
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_PCD_EP_ClrStall+0x86>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e00e      	b.n	8003a68 <HAL_PCD_EP_ClrStall+0xa4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fded 	bl	8007638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_PCD_EP_Abort>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
=======
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
 8004010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da0c      	bge.n	8004032 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	3310      	adds	r3, #16
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e00c      	b.n	800404c <HAL_PCD_EP_Abort+0x48>
=======
 8003a7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da0c      	bge.n	8003a9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3310      	adds	r3, #16
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e00c      	b.n	8003ab8 <HAL_PCD_EP_Abort+0x48>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
=======
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	f003 020f 	and.w	r2, r3, #15
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	4618      	mov	r0, r3
 8004054:	f003 fc0c 	bl	8007870 <USB_EPStopXfer>
 8004058:	4603      	mov	r3, r0
 800405a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800405c:	7afb      	ldrb	r3, [r7, #11]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <PCD_WriteEmptyTxFifo>:
=======
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fc0c 	bl	80072dc <USB_EPStopXfer>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <PCD_WriteEmptyTxFifo>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8004066:	b580      	push	{r7, lr}
 8004068:	b08a      	sub	sp, #40	; 0x28
 800406a:	af02      	add	r7, sp, #8
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	613b      	str	r3, [r7, #16]
=======
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b08a      	sub	sp, #40	; 0x28
 8003ad6:	af02      	add	r7, sp, #8
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	613b      	str	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
<<<<<<< HEAD
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3310      	adds	r3, #16
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	429a      	cmp	r2, r3
 8004098:	d901      	bls.n	800409e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d902      	bls.n	80040ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3303      	adds	r3, #3
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c2:	e02a      	b.n	800411a <PCD_WriteEmptyTxFifo+0xb4>
=======
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	3310      	adds	r3, #16
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d901      	bls.n	8003b0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06b      	b.n	8003be2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d902      	bls.n	8003b26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3303      	adds	r3, #3
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b2e:	e02a      	b.n	8003b86 <PCD_WriteEmptyTxFifo+0xb4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
<<<<<<< HEAD
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d902      	bls.n	80040e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3303      	adds	r3, #3
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4603      	mov	r3, r0
 80040fc:	6978      	ldr	r0, [r7, #20]
 80040fe:	f003 fc61 	bl	80079c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	441a      	add	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	429a      	cmp	r2, r3
 800412e:	d809      	bhi.n	8004144 <PCD_WriteEmptyTxFifo+0xde>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004138:	429a      	cmp	r2, r3
 800413a:	d203      	bcs.n	8004144 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1bf      	bne.n	80040c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	429a      	cmp	r2, r3
 800414e:	d811      	bhi.n	8004174 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	2201      	movs	r2, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	43db      	mvns	r3, r3
 800416a:	6939      	ldr	r1, [r7, #16]
 800416c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004170:	4013      	ands	r3, r2
 8004172:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <PCD_EP_OutXfrComplete_int>:
=======
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d902      	bls.n	8003b4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68d9      	ldr	r1, [r3, #12]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4603      	mov	r3, r0
 8003b68:	6978      	ldr	r0, [r7, #20]
 8003b6a:	f003 fc61 	bl	8007430 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	441a      	add	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d809      	bhi.n	8003bb0 <PCD_WriteEmptyTxFifo+0xde>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d203      	bcs.n	8003bb0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1bf      	bne.n	8003b30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d811      	bhi.n	8003be0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	6939      	ldr	r1, [r7, #16]
 8003bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bdc:	4013      	ands	r3, r2
 8003bde:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <PCD_EP_OutXfrComplete_int>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	333c      	adds	r3, #60	; 0x3c
 8004198:	3304      	adds	r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	799b      	ldrb	r3, [r3, #6]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d17b      	bne.n	80042ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4a61      	ldr	r2, [pc, #388]	; (8004348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	f240 80b9 	bls.w	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80b3 	beq.w	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e8:	6093      	str	r3, [r2, #8]
 80041ea:	e0a7      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	2320      	movs	r3, #32
 8004206:	6093      	str	r3, [r2, #8]
 8004208:	e098      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 8093 	bne.w	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4a4b      	ldr	r2, [pc, #300]	; (8004348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d90f      	bls.n	800423e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	e07e      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
=======
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	333c      	adds	r3, #60	; 0x3c
 8003c04:	3304      	adds	r3, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	799b      	ldrb	r3, [r3, #6]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d17b      	bne.n	8003d1a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4a61      	ldr	r2, [pc, #388]	; (8003db4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	f240 80b9 	bls.w	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80b3 	beq.w	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c54:	6093      	str	r3, [r2, #8]
 8003c56:	e0a7      	b.n	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2320      	movs	r3, #32
 8003c72:	6093      	str	r3, [r2, #8]
 8003c74:	e098      	b.n	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f040 8093 	bne.w	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4a4b      	ldr	r2, [pc, #300]	; (8003db4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d90f      	bls.n	8003caa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	6093      	str	r3, [r2, #8]
 8003ca8:	e07e      	b.n	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
<<<<<<< HEAD
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	440b      	add	r3, r1
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d114      	bne.n	80042a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004288:	461a      	mov	r2, r3
 800428a:	2101      	movs	r1, #1
 800428c:	f003 fe30 	bl	8007ef0 <USB_EP0_OutStart>
 8004290:	e006      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x120>
=======
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	0159      	lsls	r1, r3, #5
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	440b      	add	r3, r1
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d114      	bne.n	8003d0c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	f003 fe30 	bl	800795c <USB_EP0_OutStart>
 8003cfc:	e006      	b.n	8003d0c <PCD_EP_OutXfrComplete_int+0x120>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
<<<<<<< HEAD
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	441a      	add	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	60da      	str	r2, [r3, #12]
=======
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	60da      	str	r2, [r3, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f006 f8e6 	bl	800a478 <HAL_PCD_DataOutStageCallback>
 80042ac:	e046      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
=======
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f006 f8e6 	bl	8009ee4 <HAL_PCD_DataOutStageCallback>
 8003d18:	e046      	b.n	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
<<<<<<< HEAD
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4a26      	ldr	r2, [pc, #152]	; (800434c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d124      	bne.n	8004300 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	6093      	str	r3, [r2, #8]
 80042d4:	e032      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
=======
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d124      	bne.n	8003d6c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	6093      	str	r3, [r2, #8]
 8003d40:	e032      	b.n	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
<<<<<<< HEAD
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	2320      	movs	r3, #32
 80042f0:	6093      	str	r3, [r2, #8]
=======
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	6093      	str	r3, [r2, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f006 f8bd 	bl	800a478 <HAL_PCD_DataOutStageCallback>
 80042fe:	e01d      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
=======
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f006 f8bd 	bl	8009ee4 <HAL_PCD_DataOutStageCallback>
 8003d6a:	e01d      	b.n	8003da8 <PCD_EP_OutXfrComplete_int+0x1bc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
<<<<<<< HEAD
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d114      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004328:	461a      	mov	r2, r3
 800432a:	2100      	movs	r1, #0
 800432c:	f003 fde0 	bl	8007ef0 <USB_EP0_OutStart>
=======
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d114      	bne.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d94:	461a      	mov	r2, r3
 8003d96:	2100      	movs	r1, #0
 8003d98:	f003 fde0 	bl	800795c <USB_EP0_OutStart>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f006 f89e 	bl	800a478 <HAL_PCD_DataOutStageCallback>
=======
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f006 f89e 	bl	8009ee4 <HAL_PCD_DataOutStageCallback>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	4f54300a 	.word	0x4f54300a
 800434c:	4f54310a 	.word	0x4f54310a

08004350 <PCD_EP_OutSetupPacket_int>:
=======
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	4f54300a 	.word	0x4f54300a
 8003db8:	4f54310a 	.word	0x4f54310a

08003dbc <PCD_EP_OutSetupPacket_int>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	333c      	adds	r3, #60	; 0x3c
 8004368:	3304      	adds	r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d90e      	bls.n	80043a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	6093      	str	r3, [r2, #8]
=======
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	333c      	adds	r3, #60	; 0x3c
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d90e      	bls.n	8003e10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0e:	6093      	str	r3, [r2, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 f855 	bl	800a454 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d90c      	bls.n	80043cc <PCD_EP_OutSetupPacket_int+0x7c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	799b      	ldrb	r3, [r3, #6]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80043c4:	461a      	mov	r2, r3
 80043c6:	2101      	movs	r1, #1
 80043c8:	f003 fd92 	bl	8007ef0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	4f54300a 	.word	0x4f54300a

080043dc <HAL_PCDEx_SetTxFiFo>:
=======
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f006 f855 	bl	8009ec0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d90c      	bls.n	8003e38 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	799b      	ldrb	r3, [r3, #6]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e30:	461a      	mov	r2, r3
 8003e32:	2101      	movs	r1, #1
 8003e34:	f003 fd92 	bl	800795c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	4f54300a 	.word	0x4f54300a

08003e48 <HAL_PCDEx_SetTxFiFo>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
<<<<<<< HEAD
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
 80043e8:	4613      	mov	r3, r2
 80043ea:	803b      	strh	r3, [r7, #0]
=======
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
 8003e54:	4613      	mov	r3, r2
 8003e56:	803b      	strh	r3, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
<<<<<<< HEAD
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043fa:	883b      	ldrh	r3, [r7, #0]
 80043fc:	0419      	lsls	r1, r3, #16
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	430a      	orrs	r2, r1
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
 8004408:	e028      	b.n	800445c <HAL_PCDEx_SetTxFiFo+0x80>
=======
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e66:	883b      	ldrh	r3, [r7, #0]
 8003e68:	0419      	lsls	r1, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
 8003e74:	e028      	b.n	8003ec8 <HAL_PCDEx_SetTxFiFo+0x80>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
<<<<<<< HEAD
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e00d      	b.n	800443a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4413      	add	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	3301      	adds	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	3b01      	subs	r3, #1
 8004440:	429a      	cmp	r2, r3
 8004442:	d3ec      	bcc.n	800441e <HAL_PCDEx_SetTxFiFo+0x42>
=======
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e00d      	b.n	8003ea6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3340      	adds	r3, #64	; 0x40
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d3ec      	bcc.n	8003e8a <HAL_PCDEx_SetTxFiFo+0x42>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
<<<<<<< HEAD
 8004444:	883b      	ldrh	r3, [r7, #0]
 8004446:	0418      	lsls	r0, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	3b01      	subs	r3, #1
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4302      	orrs	r2, r0
 8004454:	3340      	adds	r3, #64	; 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_PCDEx_SetRxFiFo>:
=======
 8003eb0:	883b      	ldrh	r3, [r7, #0]
 8003eb2:	0418      	lsls	r0, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	4302      	orrs	r2, r0
 8003ec0:	3340      	adds	r3, #64	; 0x40
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_PCDEx_SetRxFiFo>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
<<<<<<< HEAD
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_PCDEx_LPM_Callback>:
=======
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_PCDEx_LPM_Callback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
<<<<<<< HEAD
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
=======
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_RCC_OscConfig>:
=======
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_RCC_OscConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
=======
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e267      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
=======
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e267      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d075      	beq.n	80045ae <HAL_RCC_OscConfig+0x10a>
=======
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d075      	beq.n	800401a <HAL_RCC_OscConfig+0x10a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 80044c2:	4b88      	ldr	r3, [pc, #544]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d00c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d112      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b82      	ldr	r3, [pc, #520]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e6:	d10b      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b7e      	ldr	r3, [pc, #504]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05b      	beq.n	80045ac <HAL_RCC_OscConfig+0x108>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d157      	bne.n	80045ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e242      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
=======
 8003f2e:	4b88      	ldr	r3, [pc, #544]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d00c      	beq.n	8003f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3a:	4b85      	ldr	r3, [pc, #532]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d112      	bne.n	8003f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f46:	4b82      	ldr	r3, [pc, #520]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	4b7e      	ldr	r3, [pc, #504]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d05b      	beq.n	8004018 <HAL_RCC_OscConfig+0x108>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d157      	bne.n	8004018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e242      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x74>
 800450a:	4b76      	ldr	r3, [pc, #472]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a75      	ldr	r2, [pc, #468]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e01d      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x98>
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6f      	ldr	r2, [pc, #444]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6c      	ldr	r2, [pc, #432]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 800453c:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a68      	ldr	r2, [pc, #416]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b66      	ldr	r3, [pc, #408]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a65      	ldr	r2, [pc, #404]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800454e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd ff66 	bl	800242c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004564:	f7fd ff62 	bl	800242c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e207      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	4b5b      	ldr	r3, [pc, #364]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0xc0>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
=======
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d106      	bne.n	8003f84 <HAL_RCC_OscConfig+0x74>
 8003f76:	4b76      	ldr	r3, [pc, #472]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a75      	ldr	r2, [pc, #468]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e01d      	b.n	8003fc0 <HAL_RCC_OscConfig+0xb0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x98>
 8003f8e:	4b70      	ldr	r3, [pc, #448]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6f      	ldr	r2, [pc, #444]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b6d      	ldr	r3, [pc, #436]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6c      	ldr	r2, [pc, #432]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xb0>
 8003fa8:	4b69      	ldr	r3, [pc, #420]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a68      	ldr	r2, [pc, #416]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b66      	ldr	r3, [pc, #408]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a65      	ldr	r2, [pc, #404]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd ff66 	bl	8001e98 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fd ff62 	bl	8001e98 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e207      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xc0>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x10a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004584:	f7fd ff52 	bl	800242c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458c:	f7fd ff4e 	bl	800242c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1f3      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0xe8>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	bf00      	nop
=======
 8003ff0:	f7fd ff52 	bl	8001e98 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd ff4e 	bl	8001e98 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1f3      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400a:	4b51      	ldr	r3, [pc, #324]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xe8>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d063      	beq.n	8004682 <HAL_RCC_OscConfig+0x1de>
=======
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d063      	beq.n	80040ee <HAL_RCC_OscConfig+0x1de>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 80045ba:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11c      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b44      	ldr	r3, [pc, #272]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045de:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e1c7      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
=======
 8004026:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403a:	2b08      	cmp	r3, #8
 800403c:	d11c      	bne.n	8004078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403e:	4b44      	ldr	r3, [pc, #272]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d116      	bne.n	8004078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404a:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_RCC_OscConfig+0x152>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e1c7      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4937      	ldr	r1, [pc, #220]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	e03a      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
=======
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4937      	ldr	r1, [pc, #220]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	e03a      	b.n	80040ee <HAL_RCC_OscConfig+0x1de>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCC_OscConfig+0x244>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd ff07 	bl	800242c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7fd ff03 	bl	800242c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e1a8      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x17e>
=======
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d020      	beq.n	80040c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004080:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_RCC_OscConfig+0x244>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fd ff07 	bl	8001e98 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408e:	f7fd ff03 	bl	8001e98 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1a8      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a0:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x17e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4925      	ldr	r1, [pc, #148]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e015      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
=======
 80040ac:	4b28      	ldr	r3, [pc, #160]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4925      	ldr	r1, [pc, #148]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	600b      	str	r3, [r1, #0]
 80040c0:	e015      	b.n	80040ee <HAL_RCC_OscConfig+0x1de>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x244>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fee6 	bl	800242c <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004664:	f7fd fee2 	bl	800242c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e187      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x1c0>
=======
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCC_OscConfig+0x244>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd fee6 	bl	8001e98 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fd fee2 	bl	8001e98 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e187      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d036      	beq.n	80046fc <HAL_RCC_OscConfig+0x258>
=======
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d036      	beq.n	8004168 <HAL_RCC_OscConfig+0x258>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_RCC_OscConfig+0x248>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fd fec6 	bl	800242c <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fec2 	bl	800242c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e167      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x200>
 80046c2:	e01b      	b.n	80046fc <HAL_RCC_OscConfig+0x258>
=======
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <HAL_RCC_OscConfig+0x248>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fd fec6 	bl	8001e98 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004110:	f7fd fec2 	bl	8001e98 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e167      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_OscConfig+0x240>)
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x200>
 800412e:	e01b      	b.n	8004168 <HAL_RCC_OscConfig+0x258>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_OscConfig+0x248>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fd feaf 	bl	800242c <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	e00e      	b.n	80046f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d2:	f7fd feab 	bl	800242c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d907      	bls.n	80046f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e150      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470000 	.word	0x42470000
 80046ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	4b88      	ldr	r3, [pc, #544]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ea      	bne.n	80046d2 <HAL_RCC_OscConfig+0x22e>
=======
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_OscConfig+0x248>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fd feaf 	bl	8001e98 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	e00e      	b.n	800415c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413e:	f7fd feab 	bl	8001e98 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d907      	bls.n	800415c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e150      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
 8004150:	40023800 	.word	0x40023800
 8004154:	42470000 	.word	0x42470000
 8004158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ea      	bne.n	800413e <HAL_RCC_OscConfig+0x22e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8097 	beq.w	8004838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
=======
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8097 	beq.w	80042a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	75fb      	strb	r3, [r7, #23]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800470e:	4b81      	ldr	r3, [pc, #516]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	4b7d      	ldr	r3, [pc, #500]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a7c      	ldr	r2, [pc, #496]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b7a      	ldr	r3, [pc, #488]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473a:	4b77      	ldr	r3, [pc, #476]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d118      	bne.n	8004778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004746:	4b74      	ldr	r3, [pc, #464]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a73      	ldr	r2, [pc, #460]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004752:	f7fd fe6b 	bl	800242c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fd fe67 	bl	800242c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e10c      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x2b6>
=======
 800417a:	4b81      	ldr	r3, [pc, #516]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10f      	bne.n	80041a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	4b7d      	ldr	r3, [pc, #500]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a7c      	ldr	r2, [pc, #496]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6413      	str	r3, [r2, #64]	; 0x40
 8004196:	4b7a      	ldr	r3, [pc, #488]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	4b77      	ldr	r3, [pc, #476]	; (8004384 <HAL_RCC_OscConfig+0x474>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d118      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b2:	4b74      	ldr	r3, [pc, #464]	; (8004384 <HAL_RCC_OscConfig+0x474>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a73      	ldr	r2, [pc, #460]	; (8004384 <HAL_RCC_OscConfig+0x474>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7fd fe6b 	bl	8001e98 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fd fe67 	bl	8001e98 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e10c      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_OscConfig+0x474>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x2ea>
 8004780:	4b64      	ldr	r3, [pc, #400]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a63      	ldr	r2, [pc, #396]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	e01c      	b.n	80047c8 <HAL_RCC_OscConfig+0x324>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b05      	cmp	r3, #5
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x30c>
 8004796:	4b5f      	ldr	r3, [pc, #380]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a5e      	ldr	r2, [pc, #376]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	4b5c      	ldr	r3, [pc, #368]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a5b      	ldr	r2, [pc, #364]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0x324>
 80047b0:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a57      	ldr	r2, [pc, #348]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	4b55      	ldr	r3, [pc, #340]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a54      	ldr	r2, [pc, #336]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f023 0304 	bic.w	r3, r3, #4
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fd fe2c 	bl	800242c <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fd fe28 	bl	800242c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0cb      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ee:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ee      	beq.n	80047d8 <HAL_RCC_OscConfig+0x334>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x382>
=======
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x2ea>
 80041ec:	4b64      	ldr	r3, [pc, #400]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a63      	ldr	r2, [pc, #396]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
 80041f8:	e01c      	b.n	8004234 <HAL_RCC_OscConfig+0x324>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x30c>
 8004202:	4b5f      	ldr	r3, [pc, #380]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a5e      	ldr	r2, [pc, #376]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004208:	f043 0304 	orr.w	r3, r3, #4
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	4b5c      	ldr	r3, [pc, #368]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a5b      	ldr	r2, [pc, #364]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0x324>
 800421c:	4b58      	ldr	r3, [pc, #352]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a57      	ldr	r2, [pc, #348]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
 8004228:	4b55      	ldr	r3, [pc, #340]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a54      	ldr	r2, [pc, #336]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800422e:	f023 0304 	bic.w	r3, r3, #4
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd fe2c 	bl	8001e98 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004242:	e00a      	b.n	800425a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fd fe28 	bl	8001e98 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e0cb      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425a:	4b49      	ldr	r3, [pc, #292]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0ee      	beq.n	8004244 <HAL_RCC_OscConfig+0x334>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x382>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80047fc:	f7fd fe16 	bl	800242c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd fe12 	bl	800242c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0b5      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ee      	bne.n	8004804 <HAL_RCC_OscConfig+0x360>
=======
 8004268:	f7fd fe16 	bl	8001e98 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426e:	e00a      	b.n	8004286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd fe12 	bl	8001e98 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0b5      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004286:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1ee      	bne.n	8004270 <HAL_RCC_OscConfig+0x360>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	4a38      	ldr	r2, [pc, #224]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004298:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	4a38      	ldr	r2, [pc, #224]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800429e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a1 	beq.w	8004984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b08      	cmp	r3, #8
 800484c:	d05c      	beq.n	8004908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d141      	bne.n	80048da <HAL_RCC_OscConfig+0x436>
=======
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80a1 	beq.w	80043f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ae:	4b34      	ldr	r3, [pc, #208]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d05c      	beq.n	8004374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d141      	bne.n	8004346 <HAL_RCC_OscConfig+0x436>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004856:	4b31      	ldr	r3, [pc, #196]	; (800491c <HAL_RCC_OscConfig+0x478>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd fde6 	bl	800242c <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd fde2 	bl	800242c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e087      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x3c0>
=======
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_RCC_OscConfig+0x478>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd fde6 	bl	8001e98 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fde2 	bl	8001e98 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e087      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	491b      	ldr	r1, [pc, #108]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
=======
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	3b01      	subs	r3, #1
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	491b      	ldr	r1, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_RCC_OscConfig+0x478>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fd fdbb 	bl	800242c <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fd fdb7 	bl	800242c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e05c      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x416>
 80048d8:	e054      	b.n	8004984 <HAL_RCC_OscConfig+0x4e0>
=======
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCC_OscConfig+0x478>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd fdbb 	bl	8001e98 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004326:	f7fd fdb7 	bl	8001e98 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e05c      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x416>
 8004344:	e054      	b.n	80043f0 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd fda4 	bl	800242c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd fda0 	bl	800242c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e045      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x444>
 8004906:	e03d      	b.n	8004984 <HAL_RCC_OscConfig+0x4e0>
=======
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <HAL_RCC_OscConfig+0x478>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fd fda4 	bl	8001e98 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7fd fda0 	bl	8001e98 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e045      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_OscConfig+0x470>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x444>
 8004372:	e03d      	b.n	80043f0 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e038      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
 8004914:	40023800 	.word	0x40023800
 8004918:	40007000 	.word	0x40007000
 800491c:	42470060 	.word	0x42470060
=======
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e038      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
 8004380:	40023800 	.word	0x40023800
 8004384:	40007000 	.word	0x40007000
 8004388:	42470060 	.word	0x42470060
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x4ec>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
=======
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x4ec>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d028      	beq.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d121      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11a      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
=======
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d028      	beq.n	80043ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d121      	bne.n	80043ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d11a      	bne.n	80043ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043bc:	4013      	ands	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d111      	bne.n	80043ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	3b01      	subs	r3, #1
 80043d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d8:	429a      	cmp	r2, r3
 80043da:	d107      	bne.n	80043ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800

08004994 <HAL_RCC_ClockConfig>:
=======
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800

08004400 <HAL_RCC_ClockConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
=======
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0cc      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
=======
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0cc      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80049a8:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90c      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
=======
 8004414:	4b68      	ldr	r3, [pc, #416]	; (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d90c      	bls.n	800443c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80049be:	4b63      	ldr	r3, [pc, #396]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
=======
 800442a:	4b63      	ldr	r3, [pc, #396]	; (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0b8      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x8a>
=======
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0a:	6093      	str	r3, [r2, #8]
=======
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004454:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4a58      	ldr	r2, [pc, #352]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800445e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800446c:	4b53      	ldr	r3, [pc, #332]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004476:	6093      	str	r3, [r2, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8004a0c:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
=======
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	494d      	ldr	r1, [pc, #308]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d044      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x120>
=======
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d044      	beq.n	8004520 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d119      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
=======
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b47      	ldr	r3, [pc, #284]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d119      	bne.n	80044de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e07f      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a52:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e06f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
=======
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d003      	beq.n	80044be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e06f      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8004a62:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e067      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
=======
 80044ce:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e067      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4934      	ldr	r1, [pc, #208]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a84:	f7fd fcd2 	bl	800242c <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8c:	f7fd fcce 	bl	800242c <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e04f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 020c 	and.w	r2, r3, #12
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1eb      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xf8>
=======
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0203 	bic.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4934      	ldr	r1, [pc, #208]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f0:	f7fd fcd2 	bl	8001e98 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	e00a      	b.n	800450e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f8:	f7fd fcce 	bl	8001e98 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e04f      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 020c 	and.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	429a      	cmp	r2, r3
 800451e:	d1eb      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8004ab4:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d20c      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
=======
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d20c      	bcs.n	8004548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
=======
 8004536:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e032      	b.n	80045ae <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
=======
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4916      	ldr	r1, [pc, #88]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
=======
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	490e      	ldr	r1, [pc, #56]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	490a      	ldr	r1, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fc32 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023c00 	.word	0x40023c00
 8004b50:	40023800 	.word	0x40023800
 8004b54:	0800b3bc 	.word	0x0800b3bc
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	20000004 	.word	0x20000004

08004b60 <HAL_RCC_GetSysClockFreq>:
=======
 8004586:	f000 f821 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 800458a:	4602      	mov	r2, r0
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	490a      	ldr	r1, [pc, #40]	; (80045c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fc32 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023c00 	.word	0x40023c00
 80045bc:	40023800 	.word	0x40023800
 80045c0:	0800ae14 	.word	0x0800ae14
 80045c4:	20000000 	.word	0x20000000
 80045c8:	20000004 	.word	0x20000004

080045cc <HAL_RCC_GetSysClockFreq>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b090      	sub	sp, #64	; 0x40
 8004b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	2300      	movs	r3, #0
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b78:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	f200 80a1 	bhi.w	8004ccc <HAL_RCC_GetSysClockFreq+0x16c>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b92:	e09b      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x16c>
=======
 80045cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d0:	b090      	sub	sp, #64	; 0x40
 80045d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
 80045d8:	2300      	movs	r3, #0
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045dc:	2300      	movs	r3, #0
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_GetSysClockFreq+0x180>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d00d      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x40>
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	f200 80a1 	bhi.w	8004738 <HAL_RCC_GetSysClockFreq+0x16c>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x34>
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x3a>
 80045fe:	e09b      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8004b94:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b98:	e09b      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x172>
=======
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_RCC_GetSysClockFreq+0x184>)
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004604:	e09b      	b.n	800473e <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8004b9a:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b9e:	e098      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x172>
=======
 8004606:	4b53      	ldr	r3, [pc, #332]	; (8004754 <HAL_RCC_GetSysClockFreq+0x188>)
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800460a:	e098      	b.n	800473e <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8004ba0:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004baa:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bcc:	fb03 f201 	mul.w	r2, r3, r1
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a43      	ldr	r2, [pc, #268]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bda:	fba0 1202 	umull	r1, r2, r0, r2
 8004bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be0:	460a      	mov	r2, r1
 8004be2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be6:	4413      	add	r3, r2
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2200      	movs	r2, #0
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	61fa      	str	r2, [r7, #28]
 8004bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bfa:	f7fb ff5f 	bl	8000abc <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4613      	mov	r3, r2
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c06:	e053      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x150>
=======
 800460c:	4b4f      	ldr	r3, [pc, #316]	; (800474c <HAL_RCC_GetSysClockFreq+0x180>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004616:	4b4d      	ldr	r3, [pc, #308]	; (800474c <HAL_RCC_GetSysClockFreq+0x180>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d028      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_GetSysClockFreq+0x180>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	2200      	movs	r2, #0
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	627a      	str	r2, [r7, #36]	; 0x24
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004634:	2100      	movs	r1, #0
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_GetSysClockFreq+0x188>)
 8004638:	fb03 f201 	mul.w	r2, r3, r1
 800463c:	2300      	movs	r3, #0
 800463e:	fb00 f303 	mul.w	r3, r0, r3
 8004642:	4413      	add	r3, r2
 8004644:	4a43      	ldr	r2, [pc, #268]	; (8004754 <HAL_RCC_GetSysClockFreq+0x188>)
 8004646:	fba0 1202 	umull	r1, r2, r0, r2
 800464a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800464c:	460a      	mov	r2, r1
 800464e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004652:	4413      	add	r3, r2
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	2200      	movs	r2, #0
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	61fa      	str	r2, [r7, #28]
 800465e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004666:	f7fc fa29 	bl	8000abc <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4613      	mov	r3, r2
 8004670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004672:	e053      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	2200      	movs	r2, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	617a      	str	r2, [r7, #20]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c1a:	f04f 0b00 	mov.w	fp, #0
 8004c1e:	4652      	mov	r2, sl
 8004c20:	465b      	mov	r3, fp
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	0159      	lsls	r1, r3, #5
 8004c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c30:	0150      	lsls	r0, r2, #5
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	ebb2 080a 	subs.w	r8, r2, sl
 8004c3a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c52:	ebb2 0408 	subs.w	r4, r2, r8
 8004c56:	eb63 0509 	sbc.w	r5, r3, r9
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	00eb      	lsls	r3, r5, #3
 8004c64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c68:	00e2      	lsls	r2, r4, #3
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	461d      	mov	r5, r3
 8004c6e:	eb14 030a 	adds.w	r3, r4, sl
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	eb45 030b 	adc.w	r3, r5, fp
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c86:	4629      	mov	r1, r5
 8004c88:	028b      	lsls	r3, r1, #10
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c90:	4621      	mov	r1, r4
 8004c92:	028a      	lsls	r2, r1, #10
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	60fa      	str	r2, [r7, #12]
 8004ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca4:	f7fb ff0a 	bl	8000abc <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x172>
=======
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <HAL_RCC_GetSysClockFreq+0x180>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	2200      	movs	r2, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	617a      	str	r2, [r7, #20]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004686:	f04f 0b00 	mov.w	fp, #0
 800468a:	4652      	mov	r2, sl
 800468c:	465b      	mov	r3, fp
 800468e:	f04f 0000 	mov.w	r0, #0
 8004692:	f04f 0100 	mov.w	r1, #0
 8004696:	0159      	lsls	r1, r3, #5
 8004698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800469c:	0150      	lsls	r0, r2, #5
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	ebb2 080a 	subs.w	r8, r2, sl
 80046a6:	eb63 090b 	sbc.w	r9, r3, fp
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046be:	ebb2 0408 	subs.w	r4, r2, r8
 80046c2:	eb63 0509 	sbc.w	r5, r3, r9
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	00eb      	lsls	r3, r5, #3
 80046d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d4:	00e2      	lsls	r2, r4, #3
 80046d6:	4614      	mov	r4, r2
 80046d8:	461d      	mov	r5, r3
 80046da:	eb14 030a 	adds.w	r3, r4, sl
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	eb45 030b 	adc.w	r3, r5, fp
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046f2:	4629      	mov	r1, r5
 80046f4:	028b      	lsls	r3, r1, #10
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046fc:	4621      	mov	r1, r4
 80046fe:	028a      	lsls	r2, r1, #10
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	2200      	movs	r2, #0
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	60fa      	str	r2, [r7, #12]
 800470c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004710:	f7fc f9d4 	bl	8000abc <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4613      	mov	r3, r2
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_GetSysClockFreq+0x180>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	3301      	adds	r3, #1
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800472c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004736:	e002      	b.n	800473e <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3740      	adds	r7, #64	; 0x40
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	017d7840 	.word	0x017d7840

08004cec <HAL_RCC_GetHCLKFreq>:
=======
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_GetSysClockFreq+0x184>)
 800473a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800473c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004740:	4618      	mov	r0, r3
 8004742:	3740      	adds	r7, #64	; 0x40
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	00f42400 	.word	0x00f42400
 8004754:	017d7840 	.word	0x017d7840

08004758 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000000 	.word	0x20000000

08004d04 <HAL_SPI_Init>:
=======
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <HAL_RCC_GetHCLKFreq+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000000 	.word	0x20000000

08004770 <HAL_SPI_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07b      	b.n	8004e0e <HAL_SPI_Init+0x10a>
=======
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07b      	b.n	800487a <HAL_SPI_Init+0x10a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_SPI_Init+0x2c>
=======
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <HAL_SPI_Init+0x2c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d009      	beq.n	8004d3c <HAL_SPI_Init+0x38>
=======
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004792:	d009      	beq.n	80047a8 <HAL_SPI_Init+0x38>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	61da      	str	r2, [r3, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_SPI_Init+0x38>
=======
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	61da      	str	r2, [r3, #28]
 800479a:	e005      	b.n	80047a8 <HAL_SPI_Init+0x38>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
=======
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fd f842 	bl	8001de0 <HAL_SPI_MspInit>
=======
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fd f876 	bl	80018b4 <HAL_SPI_MspInit>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	601a      	str	r2, [r3, #0]
=======
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047de:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	ea42 0103 	orr.w	r1, r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
=======
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	ea42 0103 	orr.w	r1, r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	f003 0104 	and.w	r1, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0210 	and.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
=======
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	f003 0104 	and.w	r1, r3, #4
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0210 	and.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_SPI_Transmit>:
=======
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004868:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_SPI_Transmit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	77fb      	strb	r3, [r7, #31]
=======
 8004882:	b580      	push	{r7, lr}
 8004884:	b088      	sub	sp, #32
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	77fb      	strb	r3, [r7, #31]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_SPI_Transmit+0x22>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e12d      	b.n	8005094 <HAL_SPI_Transmit+0x27e>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e40:	f7fd faf4 	bl	800242c <HAL_GetTick>
 8004e44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e5a:	e116      	b.n	800508a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Transmit+0x52>
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e6c:	e10d      	b.n	800508a <HAL_SPI_Transmit+0x274>
=======
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_SPI_Transmit+0x22>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e12d      	b.n	8004b00 <HAL_SPI_Transmit+0x27e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ac:	f7fd faf4 	bl	8001e98 <HAL_GetTick>
 80048b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
 80048c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c6:	e116      	b.n	8004af6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_Transmit+0x52>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048d8:	e10d      	b.n	8004af6 <HAL_SPI_Transmit+0x274>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2203      	movs	r2, #3
 8004e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb4:	d10f      	bne.n	8004ed6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed4:	601a      	str	r2, [r3, #0]
=======
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2203      	movs	r2, #3
 80048de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004920:	d10f      	bne.n	8004942 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004940:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d007      	beq.n	8004ef4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef2:	601a      	str	r2, [r3, #0]
=======
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d007      	beq.n	8004960 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efc:	d14f      	bne.n	8004f9e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_Transmit+0xf6>
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d142      	bne.n	8004f92 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f30:	e02f      	b.n	8004f92 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d112      	bne.n	8004f66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	881a      	ldrh	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f64:	e015      	b.n	8004f92 <HAL_SPI_Transmit+0x17c>
=======
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004968:	d14f      	bne.n	8004a0a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0xf6>
 8004972:	8afb      	ldrh	r3, [r7, #22]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d142      	bne.n	80049fe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	1c9a      	adds	r2, r3, #2
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800499c:	e02f      	b.n	80049fe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d112      	bne.n	80049d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80049d0:	e015      	b.n	80049fe <HAL_SPI_Transmit+0x17c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8004f66:	f7fd fa61 	bl	800242c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d803      	bhi.n	8004f7e <HAL_SPI_Transmit+0x168>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7c:	d102      	bne.n	8004f84 <HAL_SPI_Transmit+0x16e>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f90:	e07b      	b.n	800508a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ca      	bne.n	8004f32 <HAL_SPI_Transmit+0x11c>
 8004f9c:	e050      	b.n	8005040 <HAL_SPI_Transmit+0x22a>
=======
 80049d2:	f7fd fa61 	bl	8001e98 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d803      	bhi.n	80049ea <HAL_SPI_Transmit+0x168>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d102      	bne.n	80049f0 <HAL_SPI_Transmit+0x16e>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049fc:	e07b      	b.n	8004af6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ca      	bne.n	800499e <HAL_SPI_Transmit+0x11c>
 8004a08:	e050      	b.n	8004aac <HAL_SPI_Transmit+0x22a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit+0x196>
 8004fa6:	8afb      	ldrh	r3, [r7, #22]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d144      	bne.n	8005036 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	7812      	ldrb	r2, [r2, #0]
 8004fb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fd2:	e030      	b.n	8005036 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d113      	bne.n	800500a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	7812      	ldrb	r2, [r2, #0]
 8004fee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	86da      	strh	r2, [r3, #54]	; 0x36
 8005008:	e015      	b.n	8005036 <HAL_SPI_Transmit+0x220>
=======
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Transmit+0x196>
 8004a12:	8afb      	ldrh	r3, [r7, #22]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d144      	bne.n	8004aa2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a3e:	e030      	b.n	8004aa2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d113      	bne.n	8004a76 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	7812      	ldrb	r2, [r2, #0]
 8004a5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a74:	e015      	b.n	8004aa2 <HAL_SPI_Transmit+0x220>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 800500a:	f7fd fa0f 	bl	800242c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d803      	bhi.n	8005022 <HAL_SPI_Transmit+0x20c>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005020:	d102      	bne.n	8005028 <HAL_SPI_Transmit+0x212>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005034:	e029      	b.n	800508a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1c9      	bne.n	8004fd4 <HAL_SPI_Transmit+0x1be>
=======
 8004a76:	f7fd fa0f 	bl	8001e98 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d803      	bhi.n	8004a8e <HAL_SPI_Transmit+0x20c>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d102      	bne.n	8004a94 <HAL_SPI_Transmit+0x212>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004aa0:	e029      	b.n	8004af6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1c9      	bne.n	8004a40 <HAL_SPI_Transmit+0x1be>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fcf1 	bl	8005a2c <SPI_EndRxTxTransaction>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fcf1 	bl	8005498 <SPI_EndRxTxTransaction>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e003      	b.n	800508a <HAL_SPI_Transmit+0x274>
=======
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e003      	b.n	8004af6 <HAL_SPI_Transmit+0x274>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005092:	7ffb      	ldrb	r3, [r7, #31]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_SPI_Receive>:
=======
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_SPI_Receive>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
=======
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80fb      	strh	r3, [r7, #6]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
<<<<<<< HEAD
 80050ac:	2300      	movs	r3, #0
 80050ae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050c0:	e0fb      	b.n	80052ba <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ca:	d112      	bne.n	80050f2 <HAL_SPI_Receive+0x56>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10e      	bne.n	80050f2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2204      	movs	r2, #4
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4613      	mov	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f8ef 	bl	80052cc <HAL_SPI_TransmitReceive>
 80050ee:	4603      	mov	r3, r0
 80050f0:	e0e8      	b.n	80052c4 <HAL_SPI_Receive+0x228>
=======
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d002      	beq.n	8004b2e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b2c:	e0fb      	b.n	8004d26 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b36:	d112      	bne.n	8004b5e <HAL_SPI_Receive+0x56>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10e      	bne.n	8004b5e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f8ef 	bl	8004d38 <HAL_SPI_TransmitReceive>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	e0e8      	b.n	8004d30 <HAL_SPI_Receive+0x228>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_SPI_Receive+0x64>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0e1      	b.n	80052c4 <HAL_SPI_Receive+0x228>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005108:	f7fd f990 	bl	800242c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_SPI_Receive+0x7e>
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800511e:	e0cc      	b.n	80052ba <HAL_SPI_Receive+0x21e>
=======
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_Receive+0x64>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0e1      	b.n	8004d30 <HAL_SPI_Receive+0x228>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b74:	f7fd f990 	bl	8001e98 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_Receive+0x7e>
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b8a:	e0cc      	b.n	8004d26 <HAL_SPI_Receive+0x21e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2204      	movs	r2, #4
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	d10f      	bne.n	8005188 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005176:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005186:	601a      	str	r2, [r3, #0]
=======
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bf2:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d007      	beq.n	80051a6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a4:	601a      	str	r2, [r3, #0]
=======
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d007      	beq.n	8004c12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c10:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d16a      	bne.n	8005284 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051ae:	e032      	b.n	8005216 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d115      	bne.n	80051ea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f103 020c 	add.w	r2, r3, #12
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051e8:	e015      	b.n	8005216 <HAL_SPI_Receive+0x17a>
=======
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d16a      	bne.n	8004cf0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c1a:	e032      	b.n	8004c82 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d115      	bne.n	8004c56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f103 020c 	add.w	r2, r3, #12
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c54:	e015      	b.n	8004c82 <HAL_SPI_Receive+0x17a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80051ea:	f7fd f91f 	bl	800242c <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d803      	bhi.n	8005202 <HAL_SPI_Receive+0x166>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005200:	d102      	bne.n	8005208 <HAL_SPI_Receive+0x16c>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005214:	e051      	b.n	80052ba <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1c7      	bne.n	80051b0 <HAL_SPI_Receive+0x114>
 8005220:	e035      	b.n	800528e <HAL_SPI_Receive+0x1f2>
=======
 8004c56:	f7fd f91f 	bl	8001e98 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d803      	bhi.n	8004c6e <HAL_SPI_Receive+0x166>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d102      	bne.n	8004c74 <HAL_SPI_Receive+0x16c>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c80:	e051      	b.n	8004d26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1c7      	bne.n	8004c1c <HAL_SPI_Receive+0x114>
 8004c8c:	e035      	b.n	8004cfa <HAL_SPI_Receive+0x1f2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d113      	bne.n	8005258 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	b292      	uxth	r2, r2
 800523c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	1c9a      	adds	r2, r3, #2
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005256:	e015      	b.n	8005284 <HAL_SPI_Receive+0x1e8>
=======
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d113      	bne.n	8004cc4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc2:	e015      	b.n	8004cf0 <HAL_SPI_Receive+0x1e8>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8005258:	f7fd f8e8 	bl	800242c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d803      	bhi.n	8005270 <HAL_SPI_Receive+0x1d4>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800526e:	d102      	bne.n	8005276 <HAL_SPI_Receive+0x1da>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005282:	e01a      	b.n	80052ba <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1c9      	bne.n	8005222 <HAL_SPI_Receive+0x186>
=======
 8004cc4:	f7fd f8e8 	bl	8001e98 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d803      	bhi.n	8004cdc <HAL_SPI_Receive+0x1d4>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Receive+0x1da>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cee:	e01a      	b.n	8004d26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1c9      	bne.n	8004c8e <HAL_SPI_Receive+0x186>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fb64 	bl	8005960 <SPI_EndRxTransaction>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fb64 	bl	80053cc <SPI_EndRxTransaction>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
 80052b0:	e003      	b.n	80052ba <HAL_SPI_Receive+0x21e>
=======
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
 8004d1c:	e003      	b.n	8004d26 <HAL_SPI_Receive+0x21e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

error :
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_SPI_TransmitReceive>:
=======
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_SPI_TransmitReceive>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	; 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	807b      	strh	r3, [r7, #2]
=======
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	; 0x30
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	807b      	strh	r3, [r7, #2]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 80052da:	2301      	movs	r3, #1
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8004d46:	2301      	movs	r3, #1
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x26>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e198      	b.n	8005624 <HAL_SPI_TransmitReceive+0x358>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052fa:	f7fd f897 	bl	800242c <HAL_GetTick>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005318:	2b01      	cmp	r3, #1
 800531a:	d00f      	beq.n	800533c <HAL_SPI_TransmitReceive+0x70>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005322:	d107      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d103      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x68>
 800532c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005330:	2b04      	cmp	r3, #4
 8005332:	d003      	beq.n	800533c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005334:	2302      	movs	r3, #2
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800533a:	e16d      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_SPI_TransmitReceive+0x82>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_SPI_TransmitReceive+0x82>
 8005348:	887b      	ldrh	r3, [r7, #2]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005354:	e160      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
=======
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x26>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e198      	b.n	8005090 <HAL_SPI_TransmitReceive+0x358>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d66:	f7fd f897 	bl	8001e98 <HAL_GetTick>
 8004d6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d00f      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x70>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8e:	d107      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x68>
 8004d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d003      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004da6:	e16d      	b.n	8005084 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x82>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x82>
 8004db4:	887b      	ldrh	r3, [r7, #2]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dc0:	e160      	b.n	8005084 <HAL_SPI_TransmitReceive+0x34c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b04      	cmp	r3, #4
 8005360:	d003      	beq.n	800536a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2205      	movs	r2, #5
 8005366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d003      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	887a      	ldrh	r2, [r7, #2]
 800537a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	887a      	ldrh	r2, [r7, #2]
 8005392:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d007      	beq.n	80053be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053bc:	601a      	str	r2, [r3, #0]
=======
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d007      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e28:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c6:	d17c      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x10a>
 80053d0:	8b7b      	ldrh	r3, [r7, #26]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d16a      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	d17c      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x10a>
 8004e3c:	8b7b      	ldrh	r3, [r7, #26]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d16a      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80053fa:	e057      	b.n	80054ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d11b      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x176>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d016      	beq.n	8005442 <HAL_SPI_TransmitReceive+0x176>
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d113      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	1c9a      	adds	r2, r3, #2
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8004e66:	e057      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d11b      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x176>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d016      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x176>
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d113      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d119      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x1b8>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d014      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	b292      	uxth	r2, r2
 8005466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005480:	2301      	movs	r3, #1
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005484:	f7fc ffd2 	bl	800242c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005490:	429a      	cmp	r2, r3
 8005492:	d80b      	bhi.n	80054ac <HAL_SPI_TransmitReceive+0x1e0>
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549a:	d007      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80054aa:	e0b5      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1a2      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x130>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d19d      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x130>
 80054c0:	e080      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x2f8>
=======
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d119      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x1b8>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eec:	2301      	movs	r3, #1
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ef0:	f7fc ffd2 	bl	8001e98 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d80b      	bhi.n	8004f18 <HAL_SPI_TransmitReceive+0x1e0>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d007      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f16:	e0b5      	b.n	8005084 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1a2      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x130>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d19d      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x130>
 8004f2c:	e080      	b.n	8005030 <HAL_SPI_TransmitReceive+0x2f8>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_SPI_TransmitReceive+0x204>
 80054ca:	8b7b      	ldrh	r3, [r7, #26]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d16f      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x204>
 8004f36:	8b7b      	ldrh	r3, [r7, #26]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d16f      	bne.n	800501c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80054f6:	e05b      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b02      	cmp	r3, #2
 8005504:	d11c      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x274>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d017      	beq.n	8005540 <HAL_SPI_TransmitReceive+0x274>
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d114      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	330c      	adds	r3, #12
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8004f62:	e05b      	b.n	800501c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d11c      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x274>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d017      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x274>
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d114      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d119      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x2b6>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d014      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800557e:	2301      	movs	r3, #1
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005582:	f7fc ff53 	bl	800242c <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800558e:	429a      	cmp	r2, r3
 8005590:	d803      	bhi.n	800559a <HAL_SPI_TransmitReceive+0x2ce>
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005598:	d102      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x2d4>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80055ae:	e033      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d19e      	bne.n	80054f8 <HAL_SPI_TransmitReceive+0x22c>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d199      	bne.n	80054f8 <HAL_SPI_TransmitReceive+0x22c>
=======
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d119      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x2b6>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d014      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fea:	2301      	movs	r3, #1
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fee:	f7fc ff53 	bl	8001e98 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d803      	bhi.n	8005006 <HAL_SPI_TransmitReceive+0x2ce>
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d102      	bne.n	800500c <HAL_SPI_TransmitReceive+0x2d4>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800501a:	e033      	b.n	8005084 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d19e      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x22c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d199      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x22c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fa2f 	bl	8005a2c <SPI_EndRxTxTransaction>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d006      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055e0:	e01a      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
=======
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fa2f 	bl	8005498 <SPI_EndRxTxTransaction>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d006      	beq.n	800504e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800504c:	e01a      	b.n	8005084 <HAL_SPI_TransmitReceive+0x34c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560e:	e003      	b.n	8005618 <HAL_SPI_TransmitReceive+0x34c>
=======
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507a:	e003      	b.n	8005084 <HAL_SPI_TransmitReceive+0x34c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
<<<<<<< HEAD
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  
error :
  __HAL_UNLOCK(hspi);
<<<<<<< HEAD
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005624:	4618      	mov	r0, r3
 8005626:	3730      	adds	r7, #48	; 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_SPI_IRQHandler>:
=======
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800508c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005090:	4618      	mov	r0, r3
 8005092:	3730      	adds	r7, #48	; 0x30
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_SPI_IRQHandler>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
    return;
 800566a:	e0ce      	b.n	800580a <HAL_SPI_IRQHandler+0x1de>
=======
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
    return;
 80050d6:	e0ce      	b.n	8005276 <HAL_SPI_IRQHandler+0x1de>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
<<<<<<< HEAD
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_SPI_IRQHandler+0x5e>
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
    return;
 8005688:	e0bf      	b.n	800580a <HAL_SPI_IRQHandler+0x1de>
=======
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_SPI_IRQHandler+0x5e>
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
    return;
 80050f4:	e0bf      	b.n	8005276 <HAL_SPI_IRQHandler+0x1de>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
<<<<<<< HEAD
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_SPI_IRQHandler+0x7e>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80b0 	beq.w	800580a <HAL_SPI_IRQHandler+0x1de>
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80aa 	beq.w	800580a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d023      	beq.n	8005708 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d011      	beq.n	80056f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	f043 0204 	orr.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	e00b      	b.n	8005708 <HAL_SPI_IRQHandler+0xdc>
=======
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <HAL_SPI_IRQHandler+0x7e>
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80b0 	beq.w	8005276 <HAL_SPI_IRQHandler+0x1de>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80aa 	beq.w	8005276 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d023      	beq.n	8005174 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b03      	cmp	r3, #3
 8005136:	d011      	beq.n	800515c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	e00b      	b.n	8005174 <HAL_SPI_IRQHandler+0xdc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< HEAD
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]
        return;
 8005706:	e080      	b.n	800580a <HAL_SPI_IRQHandler+0x1de>
=======
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]
        return;
 8005172:	e080      	b.n	8005276 <HAL_SPI_IRQHandler+0x1de>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
<<<<<<< HEAD
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f043 0201 	orr.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
=======
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d014      	beq.n	80051a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
<<<<<<< HEAD
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00c      	beq.n	8005760 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	f043 0208 	orr.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d04f      	beq.n	8005808 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005776:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <HAL_SPI_IRQHandler+0x168>
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d034      	beq.n	80057fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0203 	bic.w	r2, r2, #3
 80057a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d011      	beq.n	80057d0 <HAL_SPI_IRQHandler+0x1a4>
=======
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f043 0208 	orr.w	r2, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d04f      	beq.n	8005274 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <HAL_SPI_IRQHandler+0x168>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d034      	beq.n	800526a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0203 	bic.w	r2, r2, #3
 800520e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d011      	beq.n	800523c <HAL_SPI_IRQHandler+0x1a4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b0:	4a17      	ldr	r2, [pc, #92]	; (8005810 <HAL_SPI_IRQHandler+0x1e4>)
 80057b2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fd f827 	bl	800280c <HAL_DMA_Abort_IT>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	4a17      	ldr	r2, [pc, #92]	; (800527c <HAL_SPI_IRQHandler+0x1e4>)
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd f827 	bl	8002278 <HAL_DMA_Abort_IT>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
<<<<<<< HEAD
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d016      	beq.n	8005806 <HAL_SPI_IRQHandler+0x1da>
=======
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	2b00      	cmp	r3, #0
 8005242:	d016      	beq.n	8005272 <HAL_SPI_IRQHandler+0x1da>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <HAL_SPI_IRQHandler+0x1e4>)
 80057de:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd f811 	bl	800280c <HAL_DMA_Abort_IT>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80057fc:	e003      	b.n	8005806 <HAL_SPI_IRQHandler+0x1da>
=======
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005248:	4a0c      	ldr	r2, [pc, #48]	; (800527c <HAL_SPI_IRQHandler+0x1e4>)
 800524a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd f811 	bl	8002278 <HAL_DMA_Abort_IT>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005268:	e003      	b.n	8005272 <HAL_SPI_IRQHandler+0x1da>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f808 	bl	8005814 <HAL_SPI_ErrorCallback>
=======
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f808 	bl	8005280 <HAL_SPI_ErrorCallback>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
<<<<<<< HEAD
 8005804:	e000      	b.n	8005808 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005806:	bf00      	nop
    return;
 8005808:	bf00      	nop
  }
}
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	08005829 	.word	0x08005829

08005814 <HAL_SPI_ErrorCallback>:
=======
 8005270:	e000      	b.n	8005274 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005272:	bf00      	nop
    return;
 8005274:	bf00      	nop
  }
}
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08005295 	.word	0x08005295

08005280 <HAL_SPI_ErrorCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
=======
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <SPI_DMAAbortOnError>:
=======
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <SPI_DMAAbortOnError>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff ffe6 	bl	8005814 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <SPI_WaitFlagStateUntilTimeout>:
=======
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff ffe6 	bl	8005280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4613      	mov	r3, r2
 800585e:	71fb      	strb	r3, [r7, #7]
=======
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	71fb      	strb	r3, [r7, #7]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8005860:	f7fc fde4 	bl	800242c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005870:	f7fc fddc 	bl	800242c <HAL_GetTick>
 8005874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005876:	4b39      	ldr	r3, [pc, #228]	; (800595c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	015b      	lsls	r3, r3, #5
 800587c:	0d1b      	lsrs	r3, r3, #20
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005886:	e054      	b.n	8005932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588e:	d050      	beq.n	8005932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005890:	f7fc fdcc 	bl	800242c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	429a      	cmp	r2, r3
 800589e:	d902      	bls.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d13d      	bne.n	8005922 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 80052cc:	f7fc fde4 	bl	8001e98 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052dc:	f7fc fddc 	bl	8001e98 <HAL_GetTick>
 80052e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052e2:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	015b      	lsls	r3, r3, #5
 80052e8:	0d1b      	lsrs	r3, r3, #20
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f2:	e054      	b.n	800539e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d050      	beq.n	800539e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052fc:	f7fc fdcc 	bl	8001e98 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	429a      	cmp	r2, r3
 800530a:	d902      	bls.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d13d      	bne.n	800538e <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058be:	d111      	bne.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c8:	d004      	beq.n	80058d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d2:	d107      	bne.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e2:	601a      	str	r2, [r3, #0]
=======
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532a:	d111      	bne.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005334:	d004      	beq.n	8005340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d107      	bne.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534e:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ec:	d10f      	bne.n	800590e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800590c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e017      	b.n	8005952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3b01      	subs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4013      	ands	r3, r2
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	429a      	cmp	r2, r3
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	429a      	cmp	r2, r3
 800594e:	d19b      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005358:	d10f      	bne.n	800537a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e017      	b.n	80053be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3b01      	subs	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4013      	ands	r3, r2
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d19b      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000000 	.word	0x20000000

08005960 <SPI_EndRxTransaction>:
=======
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000000 	.word	0x20000000

080053cc <SPI_EndRxTransaction>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005974:	d111      	bne.n	800599a <SPI_EndRxTransaction+0x3a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597e:	d004      	beq.n	800598a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005988:	d107      	bne.n	800599a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005998:	601a      	str	r2, [r3, #0]
=======
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e0:	d111      	bne.n	8005406 <SPI_EndRxTransaction+0x3a>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d004      	beq.n	80053f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f4:	d107      	bne.n	8005406 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005404:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a2:	d12a      	bne.n	80059fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d012      	beq.n	80059d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ff49 	bl	8005850 <SPI_WaitFlagStateUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02d      	beq.n	8005a20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e026      	b.n	8005a22 <SPI_EndRxTransaction+0xc2>
=======
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540e:	d12a      	bne.n	8005466 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d012      	beq.n	8005440 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2200      	movs	r2, #0
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff ff49 	bl	80052bc <SPI_WaitFlagStateUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02d      	beq.n	800548c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e026      	b.n	800548e <SPI_EndRxTransaction+0xc2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	2101      	movs	r1, #1
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff ff36 	bl	8005850 <SPI_WaitFlagStateUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01a      	beq.n	8005a20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e013      	b.n	8005a22 <SPI_EndRxTransaction+0xc2>
=======
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	2101      	movs	r1, #1
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff ff36 	bl	80052bc <SPI_WaitFlagStateUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01a      	beq.n	800548c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f043 0220 	orr.w	r2, r3, #32
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e013      	b.n	800548e <SPI_EndRxTransaction+0xc2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	2101      	movs	r1, #1
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff ff23 	bl	8005850 <SPI_WaitFlagStateUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e000      	b.n	8005a22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	2102      	movs	r1, #2
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff ff04 	bl	8005850 <SPI_WaitFlagStateUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e032      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <SPI_EndRxTxTransaction+0xa0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <SPI_EndRxTxTransaction+0xa4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	0d5b      	lsrs	r3, r3, #21
 8005a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7c:	d112      	bne.n	8005aa4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff fee1 	bl	8005850 <SPI_WaitFlagStateUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d016      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x96>
=======
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	2101      	movs	r1, #1
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff ff23 	bl	80052bc <SPI_WaitFlagStateUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <SPI_EndRxTransaction+0xc0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
<<<<<<< HEAD
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e00f      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x98>
=======
 8005488:	2303      	movs	r3, #3
 800548a:	e000      	b.n	800548e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2201      	movs	r2, #1
 80054ac:	2102      	movs	r1, #2
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ff04 	bl	80052bc <SPI_WaitFlagStateUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e032      	b.n	8005530 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <SPI_EndRxTxTransaction+0xa0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <SPI_EndRxTxTransaction+0xa4>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	0d5b      	lsrs	r3, r3, #21
 80054d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e8:	d112      	bne.n	8005510 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff fee1 	bl	80052bc <SPI_WaitFlagStateUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d016      	beq.n	800552e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e00f      	b.n	8005530 <SPI_EndRxTxTransaction+0x98>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< HEAD
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <SPI_EndRxTxTransaction+0x94>
=======
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <SPI_EndRxTxTransaction+0x94>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        break;
      }
      count--;
<<<<<<< HEAD
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d0f2      	beq.n	8005aa4 <SPI_EndRxTxTransaction+0x78>
 8005abe:	e000      	b.n	8005ac2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ac0:	bf00      	nop
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000000 	.word	0x20000000
 8005ad0:	165e9f81 	.word	0x165e9f81

08005ad4 <HAL_TIM_Base_Init>:
=======
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	3b01      	subs	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d0f2      	beq.n	8005510 <SPI_EndRxTxTransaction+0x78>
 800552a:	e000      	b.n	800552e <SPI_EndRxTxTransaction+0x96>
        break;
 800552c:	bf00      	nop
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20000000 	.word	0x20000000
 800553c:	165e9f81 	.word	0x165e9f81

08005540 <HAL_TIM_Base_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e041      	b.n	8005b6a <HAL_TIM_Base_Init+0x96>
=======
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e041      	b.n	80055d6 <HAL_TIM_Base_Init+0x96>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc fac0 	bl	8002080 <HAL_TIM_Base_MspInit>
=======
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc fa78 	bl	8001a5c <HAL_TIM_Base_MspInit>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f000 fbf4 	bl	8006300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_TIM_PWM_Init>:
=======
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fbf4 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_PWM_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e041      	b.n	8005c08 <HAL_TIM_PWM_Init+0x96>
=======
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e041      	b.n	8005674 <HAL_TIM_PWM_Init+0x96>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f839 	bl	8005c10 <HAL_TIM_PWM_MspInit>
=======
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f839 	bl	800567c <HAL_TIM_PWM_MspInit>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f000 fba5 	bl	8006300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_PWM_MspInit>:
=======
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3304      	adds	r3, #4
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f000 fba5 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_PWM_MspInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
=======
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_PWM_Start>:
=======
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIM_PWM_Start>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
=======
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_TIM_PWM_Start+0x24>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e022      	b.n	8005c8e <HAL_TIM_PWM_Start+0x6a>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d109      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x3e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	bf14      	ite	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	2300      	moveq	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e015      	b.n	8005c8e <HAL_TIM_PWM_Start+0x6a>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d109      	bne.n	8005c7c <HAL_TIM_PWM_Start+0x58>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e008      	b.n	8005c8e <HAL_TIM_PWM_Start+0x6a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e068      	b.n	8005d68 <HAL_TIM_PWM_Start+0x144>
=======
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_TIM_PWM_Start+0x24>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e022      	b.n	80056fa <HAL_TIM_PWM_Start+0x6a>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d109      	bne.n	80056ce <HAL_TIM_PWM_Start+0x3e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e015      	b.n	80056fa <HAL_TIM_PWM_Start+0x6a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d109      	bne.n	80056e8 <HAL_TIM_PWM_Start+0x58>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e008      	b.n	80056fa <HAL_TIM_PWM_Start+0x6a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e068      	b.n	80057d4 <HAL_TIM_PWM_Start+0x144>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0x82>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca4:	e013      	b.n	8005cce <HAL_TIM_PWM_Start+0xaa>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x92>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	e00b      	b.n	8005cce <HAL_TIM_PWM_Start+0xaa>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0xa2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	e003      	b.n	8005cce <HAL_TIM_PWM_Start+0xaa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fdc4 	bl	8006864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a23      	ldr	r2, [pc, #140]	; (8005d70 <HAL_TIM_PWM_Start+0x14c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d107      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Start+0x82>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005710:	e013      	b.n	800573a <HAL_TIM_PWM_Start+0xaa>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Start+0x92>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005720:	e00b      	b.n	800573a <HAL_TIM_PWM_Start+0xaa>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d104      	bne.n	8005732 <HAL_TIM_PWM_Start+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005730:	e003      	b.n	800573a <HAL_TIM_PWM_Start+0xaa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fdc4 	bl	80062d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_TIM_PWM_Start+0x14c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d107      	bne.n	8005762 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_TIM_PWM_Start+0x14c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x10e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d08:	d013      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x10e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <HAL_TIM_PWM_Start+0x150>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x10e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_TIM_PWM_Start+0x154>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x10e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <HAL_TIM_PWM_Start+0x158>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x10e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <HAL_TIM_PWM_Start+0x15c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d111      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d010      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	e007      	b.n	8005d66 <HAL_TIM_PWM_Start+0x142>
=======
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <HAL_TIM_PWM_Start+0x14c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d018      	beq.n	800579e <HAL_TIM_PWM_Start+0x10e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d013      	beq.n	800579e <HAL_TIM_PWM_Start+0x10e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <HAL_TIM_PWM_Start+0x150>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00e      	beq.n	800579e <HAL_TIM_PWM_Start+0x10e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <HAL_TIM_PWM_Start+0x154>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIM_PWM_Start+0x10e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <HAL_TIM_PWM_Start+0x158>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIM_PWM_Start+0x10e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a14      	ldr	r2, [pc, #80]	; (80057ec <HAL_TIM_PWM_Start+0x15c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d111      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d010      	beq.n	80057d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c0:	e007      	b.n	80057d2 <HAL_TIM_PWM_Start+0x142>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
=======
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40014000 	.word	0x40014000

08005d84 <HAL_TIM_Encoder_Init>:
=======
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40014000 	.word	0x40014000

080057f0 <HAL_TIM_Encoder_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
=======
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e097      	b.n	8005ec8 <HAL_TIM_Encoder_Init+0x144>
=======
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e097      	b.n	8005934 <HAL_TIM_Encoder_Init+0x144>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc f8eb 	bl	8001f88 <HAL_TIM_Encoder_MspInit>
=======
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fc f96b 	bl	8001af4 <HAL_TIM_Encoder_MspInit>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc8:	f023 0307 	bic.w	r3, r3, #7
 8005dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 fa91 	bl	8006300 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	4313      	orrs	r3, r2
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e24:	f023 030c 	bic.w	r3, r3, #12
 8005e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	4313      	orrs	r3, r2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	031b      	lsls	r3, r3, #12
 8005e54:	4313      	orrs	r3, r2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	4313      	orrs	r3, r2
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_Encoder_Start>:
=======
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005834:	f023 0307 	bic.w	r3, r3, #7
 8005838:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f000 fa91 	bl	8005d6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	4313      	orrs	r3, r2
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005890:	f023 030c 	bic.w	r3, r3, #12
 8005894:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800589c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	4313      	orrs	r3, r2
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	031b      	lsls	r3, r3, #12
 80058c0:	4313      	orrs	r3, r2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	4313      	orrs	r3, r2
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_Encoder_Start>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ee0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ee8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ef0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ef8:	733b      	strb	r3, [r7, #12]
=======
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005954:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800595c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005964:	733b      	strb	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
<<<<<<< HEAD
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d110      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d102      	bne.n	8005f0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d001      	beq.n	8005f10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e069      	b.n	8005fe4 <HAL_TIM_Encoder_Start+0x114>
=======
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d110      	bne.n	800598e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d102      	bne.n	8005978 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005972:	7b7b      	ldrb	r3, [r7, #13]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d001      	beq.n	800597c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e069      	b.n	8005a50 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f20:	e031      	b.n	8005f86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d110      	bne.n	8005f4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d102      	bne.n	8005f34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f2e:	7b3b      	ldrb	r3, [r7, #12]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d001      	beq.n	8005f38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e055      	b.n	8005fe4 <HAL_TIM_Encoder_Start+0x114>
=======
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800598c:	e031      	b.n	80059f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b04      	cmp	r3, #4
 8005992:	d110      	bne.n	80059b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800599a:	7b3b      	ldrb	r3, [r7, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d001      	beq.n	80059a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e055      	b.n	8005a50 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f48:	e01d      	b.n	8005f86 <HAL_TIM_Encoder_Start+0xb6>
=======
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b4:	e01d      	b.n	80059f2 <HAL_TIM_Encoder_Start+0xb6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d108      	bne.n	8005f62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f56:	7b7b      	ldrb	r3, [r7, #13]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d102      	bne.n	8005f62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f5c:	7b3b      	ldrb	r3, [r7, #12]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e03e      	b.n	8005fe4 <HAL_TIM_Encoder_Start+0x114>
=======
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d108      	bne.n	80059ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c2:	7b7b      	ldrb	r3, [r7, #13]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d102      	bne.n	80059ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059c8:	7b3b      	ldrb	r3, [r7, #12]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d001      	beq.n	80059d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e03e      	b.n	8005a50 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
=======
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_TIM_Encoder_Start+0xc4>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d008      	beq.n	8005fa4 <HAL_TIM_Encoder_Start+0xd4>
 8005f92:	e00f      	b.n	8005fb4 <HAL_TIM_Encoder_Start+0xe4>
=======
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_TIM_Encoder_Start+0xc4>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d008      	beq.n	8005a10 <HAL_TIM_Encoder_Start+0xd4>
 80059fe:	e00f      	b.n	8005a20 <HAL_TIM_Encoder_Start+0xe4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fc61 	bl	8006864 <TIM_CCxChannelCmd>
      break;
 8005fa2:	e016      	b.n	8005fd2 <HAL_TIM_Encoder_Start+0x102>
=======
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2201      	movs	r2, #1
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fc61 	bl	80062d0 <TIM_CCxChannelCmd>
      break;
 8005a0e:	e016      	b.n	8005a3e <HAL_TIM_Encoder_Start+0x102>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	2104      	movs	r1, #4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fc59 	bl	8006864 <TIM_CCxChannelCmd>
      break;
 8005fb2:	e00e      	b.n	8005fd2 <HAL_TIM_Encoder_Start+0x102>
=======
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	2104      	movs	r1, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fc59 	bl	80062d0 <TIM_CCxChannelCmd>
      break;
 8005a1e:	e00e      	b.n	8005a3e <HAL_TIM_Encoder_Start+0x102>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	2100      	movs	r1, #0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fc51 	bl	8006864 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2104      	movs	r1, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fc4a 	bl	8006864 <TIM_CCxChannelCmd>
      break;
 8005fd0:	bf00      	nop
=======
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2201      	movs	r2, #1
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fc51 	bl	80062d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2201      	movs	r2, #1
 8005a34:	2104      	movs	r1, #4
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fc4a 	bl	80062d0 <TIM_CCxChannelCmd>
      break;
 8005a3c:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_PWM_ConfigChannel>:
=======
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	75fb      	strb	r3, [r7, #23]
=======
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006006:	2302      	movs	r3, #2
 8006008:	e0ae      	b.n	8006168 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b0c      	cmp	r3, #12
 8006016:	f200 809f 	bhi.w	8006158 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006055 	.word	0x08006055
 8006024:	08006159 	.word	0x08006159
 8006028:	08006159 	.word	0x08006159
 800602c:	08006159 	.word	0x08006159
 8006030:	08006095 	.word	0x08006095
 8006034:	08006159 	.word	0x08006159
 8006038:	08006159 	.word	0x08006159
 800603c:	08006159 	.word	0x08006159
 8006040:	080060d7 	.word	0x080060d7
 8006044:	08006159 	.word	0x08006159
 8006048:	08006159 	.word	0x08006159
 800604c:	08006159 	.word	0x08006159
 8006050:	08006117 	.word	0x08006117
=======
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0ae      	b.n	8005bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b0c      	cmp	r3, #12
 8005a82:	f200 809f 	bhi.w	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005bc5 	.word	0x08005bc5
 8005a94:	08005bc5 	.word	0x08005bc5
 8005a98:	08005bc5 	.word	0x08005bc5
 8005a9c:	08005b01 	.word	0x08005b01
 8005aa0:	08005bc5 	.word	0x08005bc5
 8005aa4:	08005bc5 	.word	0x08005bc5
 8005aa8:	08005bc5 	.word	0x08005bc5
 8005aac:	08005b43 	.word	0x08005b43
 8005ab0:	08005bc5 	.word	0x08005bc5
 8005ab4:	08005bc5 	.word	0x08005bc5
 8005ab8:	08005bc5 	.word	0x08005bc5
 8005abc:	08005b83 	.word	0x08005b83
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f9dc 	bl	8006418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0204 	bic.w	r2, r2, #4
 800607e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6999      	ldr	r1, [r3, #24]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	619a      	str	r2, [r3, #24]
      break;
 8006092:	e064      	b.n	800615e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f9dc 	bl	8005e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0204 	bic.w	r2, r2, #4
 8005aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6999      	ldr	r1, [r3, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	619a      	str	r2, [r3, #24]
      break;
 8005afe:	e064      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fa22 	bl	80064e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6999      	ldr	r1, [r3, #24]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	021a      	lsls	r2, r3, #8
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	619a      	str	r2, [r3, #24]
      break;
 80060d4:	e043      	b.n	800615e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fa22 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6999      	ldr	r1, [r3, #24]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	619a      	str	r2, [r3, #24]
      break;
 8005b40:	e043      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fa6d 	bl	80065bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0208 	orr.w	r2, r2, #8
 80060f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0204 	bic.w	r2, r2, #4
 8006100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	61da      	str	r2, [r3, #28]
      break;
 8006114:	e023      	b.n	800615e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fa6d 	bl	8006028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0208 	orr.w	r2, r2, #8
 8005b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0204 	bic.w	r2, r2, #4
 8005b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	61da      	str	r2, [r3, #28]
      break;
 8005b80:	e023      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fab7 	bl	8006690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69d9      	ldr	r1, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	021a      	lsls	r2, r3, #8
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	61da      	str	r2, [r3, #28]
      break;
 8006156:	e002      	b.n	800615e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fab7 	bl	80060fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	021a      	lsls	r2, r3, #8
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	61da      	str	r2, [r3, #28]
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8006158:	2301      	movs	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
      break;
 800615c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_TIM_ConfigClockSource>:
=======
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_ConfigClockSource>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
=======
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_TIM_ConfigClockSource+0x1c>
 8006188:	2302      	movs	r3, #2
 800618a:	e0b4      	b.n	80062f6 <HAL_TIM_ConfigClockSource+0x186>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b4      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x186>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c4:	d03e      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0xd4>
 80061c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ca:	f200 8087 	bhi.w	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d2:	f000 8086 	beq.w	80062e2 <HAL_TIM_ConfigClockSource+0x172>
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d87f      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 80061dc:	2b70      	cmp	r3, #112	; 0x70
 80061de:	d01a      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0xa6>
 80061e0:	2b70      	cmp	r3, #112	; 0x70
 80061e2:	d87b      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 80061e4:	2b60      	cmp	r3, #96	; 0x60
 80061e6:	d050      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x11a>
 80061e8:	2b60      	cmp	r3, #96	; 0x60
 80061ea:	d877      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 80061ec:	2b50      	cmp	r3, #80	; 0x50
 80061ee:	d03c      	beq.n	800626a <HAL_TIM_ConfigClockSource+0xfa>
 80061f0:	2b50      	cmp	r3, #80	; 0x50
 80061f2:	d873      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d058      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x13a>
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d86f      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 80061fc:	2b30      	cmp	r3, #48	; 0x30
 80061fe:	d064      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x15a>
 8006200:	2b30      	cmp	r3, #48	; 0x30
 8006202:	d86b      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 8006204:	2b20      	cmp	r3, #32
 8006206:	d060      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x15a>
 8006208:	2b20      	cmp	r3, #32
 800620a:	d867      	bhi.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d05c      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x15a>
 8006210:	2b10      	cmp	r3, #16
 8006212:	d05a      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x15a>
 8006214:	e062      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x16c>
=======
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x172>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xa6>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b60      	cmp	r3, #96	; 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b50      	cmp	r3, #80	; 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x13a>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006226:	f000 fafd 	bl	8006824 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	609a      	str	r2, [r3, #8]
      break;
 8006242:	e04f      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	f000 fafd 	bl	8006290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006254:	f000 fae6 	bl	8006824 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006266:	609a      	str	r2, [r3, #8]
      break;
 8006268:	e03c      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	f000 fae6 	bl	8006290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006276:	461a      	mov	r2, r3
 8006278:	f000 fa5a 	bl	8006730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2150      	movs	r1, #80	; 0x50
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fab3 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 8006288:	e02c      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fa5a 	bl	800619c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fab3 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006296:	461a      	mov	r2, r3
 8006298:	f000 fa79 	bl	800678e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2160      	movs	r1, #96	; 0x60
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 faa3 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 80062a8:	e01c      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fa79 	bl	80061fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 faa3 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 fa3a 	bl	8006730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2140      	movs	r1, #64	; 0x40
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fa93 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 80062c8:	e00c      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fa3a 	bl	800619c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fa93 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f000 fa8a 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 80062da:	e003      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fa8a 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
      break;
 80062e0:	e000      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <TIM_Base_SetConfig>:
=======
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <TIM_Base_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3a      	ldr	r2, [pc, #232]	; (80063fc <TIM_Base_SetConfig+0xfc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00f      	beq.n	8006338 <TIM_Base_SetConfig+0x38>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d00b      	beq.n	8006338 <TIM_Base_SetConfig+0x38>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a37      	ldr	r2, [pc, #220]	; (8006400 <TIM_Base_SetConfig+0x100>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d007      	beq.n	8006338 <TIM_Base_SetConfig+0x38>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a36      	ldr	r2, [pc, #216]	; (8006404 <TIM_Base_SetConfig+0x104>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_Base_SetConfig+0x38>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a35      	ldr	r2, [pc, #212]	; (8006408 <TIM_Base_SetConfig+0x108>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d108      	bne.n	800634a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <TIM_Base_SetConfig+0xfc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01b      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d017      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a28      	ldr	r2, [pc, #160]	; (8006400 <TIM_Base_SetConfig+0x100>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <TIM_Base_SetConfig+0x104>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00f      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <TIM_Base_SetConfig+0x108>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a25      	ldr	r2, [pc, #148]	; (800640c <TIM_Base_SetConfig+0x10c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a24      	ldr	r2, [pc, #144]	; (8006410 <TIM_Base_SetConfig+0x110>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_Base_SetConfig+0x8a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a23      	ldr	r2, [pc, #140]	; (8006414 <TIM_Base_SetConfig+0x114>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d108      	bne.n	800639c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
=======
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3a      	ldr	r2, [pc, #232]	; (8005e68 <TIM_Base_SetConfig+0xfc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a37      	ldr	r2, [pc, #220]	; (8005e6c <TIM_Base_SetConfig+0x100>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a36      	ldr	r2, [pc, #216]	; (8005e70 <TIM_Base_SetConfig+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a35      	ldr	r2, [pc, #212]	; (8005e74 <TIM_Base_SetConfig+0x108>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2b      	ldr	r2, [pc, #172]	; (8005e68 <TIM_Base_SetConfig+0xfc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d017      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a28      	ldr	r2, [pc, #160]	; (8005e6c <TIM_Base_SetConfig+0x100>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <TIM_Base_SetConfig+0x104>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00f      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a26      	ldr	r2, [pc, #152]	; (8005e74 <TIM_Base_SetConfig+0x108>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a25      	ldr	r2, [pc, #148]	; (8005e78 <TIM_Base_SetConfig+0x10c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <TIM_Base_SetConfig+0x110>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <TIM_Base_SetConfig+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d108      	bne.n	8005e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <TIM_Base_SetConfig+0xfc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d103      	bne.n	80063d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <TIM_Base_SetConfig+0xfc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d103      	bne.n	8005e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d105      	bne.n	80063ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]
  }
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800

08006418 <TIM_OC1_SetConfig>:
=======
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800

08005e84 <TIM_OC1_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
=======
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	f023 0201 	bic.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f023 0302 	bic.w	r3, r3, #2
 8006460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <TIM_OC1_SetConfig+0xc8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d10c      	bne.n	800648e <TIM_OC1_SetConfig+0x76>
=======
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f023 0201 	bic.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 0302 	bic.w	r3, r3, #2
 8005ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <TIM_OC1_SetConfig+0xc8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10c      	bne.n	8005efa <TIM_OC1_SetConfig+0x76>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0308 	bic.w	r3, r3, #8
 800647a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 0304 	bic.w	r3, r3, #4
 800648c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <TIM_OC1_SetConfig+0xc8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d111      	bne.n	80064ba <TIM_OC1_SetConfig+0xa2>
=======
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0308 	bic.w	r3, r3, #8
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <TIM_OC1_SetConfig+0xc8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d111      	bne.n	8005f26 <TIM_OC1_SetConfig+0xa2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800649c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
=======
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40010000 	.word	0x40010000

080064e4 <TIM_OC2_SetConfig>:
=======
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40010000 	.word	0x40010000

08005f50 <TIM_OC2_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
=======
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f023 0210 	bic.w	r2, r3, #16
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0320 	bic.w	r3, r3, #32
 800652e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <TIM_OC2_SetConfig+0xd4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d10d      	bne.n	8006560 <TIM_OC2_SetConfig+0x7c>
=======
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f023 0210 	bic.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <TIM_OC2_SetConfig+0xd4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10d      	bne.n	8005fcc <TIM_OC2_SetConfig+0x7c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800654a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <TIM_OC2_SetConfig+0xd4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d113      	bne.n	8006590 <TIM_OC2_SetConfig+0xac>
=======
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <TIM_OC2_SetConfig+0xd4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d113      	bne.n	8005ffc <TIM_OC2_SetConfig+0xac>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800656e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
=======
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000

080065bc <TIM_OC3_SetConfig>:
=======
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000

08006028 <TIM_OC3_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
=======
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <TIM_OC3_SetConfig+0xd0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10d      	bne.n	8006636 <TIM_OC3_SetConfig+0x7a>
=======
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <TIM_OC3_SetConfig+0xd0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10d      	bne.n	80060a2 <TIM_OC3_SetConfig+0x7a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a14      	ldr	r2, [pc, #80]	; (800668c <TIM_OC3_SetConfig+0xd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d113      	bne.n	8006666 <TIM_OC3_SetConfig+0xaa>
=======
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <TIM_OC3_SetConfig+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d113      	bne.n	80060d2 <TIM_OC3_SetConfig+0xaa>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
=======
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40010000 	.word	0x40010000

08006690 <TIM_OC4_SetConfig>:
=======
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40010000 	.word	0x40010000

080060fc <TIM_OC4_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
=======
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	031b      	lsls	r3, r3, #12
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a10      	ldr	r2, [pc, #64]	; (800672c <TIM_OC4_SetConfig+0x9c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d109      	bne.n	8006704 <TIM_OC4_SetConfig+0x74>
=======
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <TIM_OC4_SetConfig+0x9c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC4_SetConfig+0x74>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	019b      	lsls	r3, r3, #6
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
=======
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40010000 	.word	0x40010000

08006730 <TIM_TI1_ConfigInputStage>:
=======
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000

0800619c <TIM_TI1_ConfigInputStage>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
=======
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f023 0201 	bic.w	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800675a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f023 030a 	bic.w	r3, r3, #10
 800676c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <TIM_TI2_ConfigInputStage>:
=======
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 030a 	bic.w	r3, r3, #10
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_TI2_ConfigInputStage>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800678e:	b480      	push	{r7}
 8006790:	b087      	sub	sp, #28
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
=======
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f023 0210 	bic.w	r2, r3, #16
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <TIM_ITRx_SetConfig>:
=======
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f023 0210 	bic.w	r2, r3, #16
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	031b      	lsls	r3, r3, #12
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <TIM_ITRx_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
=======
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	f043 0307 	orr.w	r3, r3, #7
 8006810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <TIM_ETR_SetConfig>:
=======
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	f043 0307 	orr.w	r3, r3, #7
 800627c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <TIM_ETR_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800683e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	021a      	lsls	r2, r3, #8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	431a      	orrs	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4313      	orrs	r3, r2
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	609a      	str	r2, [r3, #8]
}
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <TIM_CCxChannelCmd>:
=======
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_CCxChannelCmd>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
=======
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2201      	movs	r2, #1
 8006878:	fa02 f303 	lsl.w	r3, r2, r3
 800687c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1a      	ldr	r2, [r3, #32]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	43db      	mvns	r3, r3
 8006886:	401a      	ands	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1a      	ldr	r2, [r3, #32]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	fa01 f303 	lsl.w	r3, r1, r3
 800689c:	431a      	orrs	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2201      	movs	r2, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
=======
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e050      	b.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d018      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006914:	d013      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a18      	ldr	r2, [pc, #96]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a16      	ldr	r2, [pc, #88]	; (8006980 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a15      	ldr	r2, [pc, #84]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a13      	ldr	r2, [pc, #76]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d10c      	bne.n	8006958 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4313      	orrs	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	609a      	str	r2, [r3, #8]
=======
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006330:	2302      	movs	r3, #2
 8006332:	e050      	b.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d013      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10c      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40010000 	.word	0x40010000
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40014000 	.word	0x40014000

0800698c <USB_CoreInit>:
=======
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40014000 	.word	0x40014000

080063f8 <USB_CoreInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800698c:	b084      	sub	sp, #16
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	f107 001c 	add.w	r0, r7, #28
 800699a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800699e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d123      	bne.n	80069ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d105      	bne.n	80069e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60da      	str	r2, [r3, #12]
=======
 80063f8:	b084      	sub	sp, #16
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	f107 001c 	add.w	r0, r7, #28
 8006406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800640a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800640e:	2b01      	cmp	r3, #1
 8006410:	d123      	bne.n	800645a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800643a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60da      	str	r2, [r3, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
<<<<<<< HEAD
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fae2 	bl	8007fac <USB_CoreReset>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e01b      	b.n	8006a26 <USB_CoreInit+0x9a>
=======
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fae2 	bl	8007a18 <USB_CoreReset>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	e01b      	b.n	8006492 <USB_CoreInit+0x9a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< HEAD
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fad6 	bl	8007fac <USB_CoreReset>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38
 8006a18:	e005      	b.n	8006a26 <USB_CoreInit+0x9a>
=======
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fad6 	bl	8007a18 <USB_CoreReset>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006470:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
 8006484:	e005      	b.n	8006492 <USB_CoreInit+0x9a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
<<<<<<< HEAD
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  if (cfg.dma_enable == 1U)
<<<<<<< HEAD
 8006a26:	7fbb      	ldrb	r3, [r7, #30]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10b      	bne.n	8006a44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f043 0206 	orr.w	r2, r3, #6
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a50:	b004      	add	sp, #16
 8006a52:	4770      	bx	lr

08006a54 <USB_SetTurnaroundTime>:
=======
 8006492:	7fbb      	ldrb	r3, [r7, #30]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10b      	bne.n	80064b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f043 0206 	orr.w	r2, r3, #6
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064bc:	b004      	add	sp, #16
 80064be:	4770      	bx	lr

080064c0 <USB_SetTurnaroundTime>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
<<<<<<< HEAD
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	71fb      	strb	r3, [r7, #7]
=======
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
<<<<<<< HEAD
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d165      	bne.n	8006b34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4a41      	ldr	r2, [pc, #260]	; (8006b70 <USB_SetTurnaroundTime+0x11c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d906      	bls.n	8006a7e <USB_SetTurnaroundTime+0x2a>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4a40      	ldr	r2, [pc, #256]	; (8006b74 <USB_SetTurnaroundTime+0x120>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d202      	bcs.n	8006a7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a78:	230f      	movs	r3, #15
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e062      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4a3c      	ldr	r2, [pc, #240]	; (8006b74 <USB_SetTurnaroundTime+0x120>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d306      	bcc.n	8006a94 <USB_SetTurnaroundTime+0x40>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4a3b      	ldr	r2, [pc, #236]	; (8006b78 <USB_SetTurnaroundTime+0x124>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d202      	bcs.n	8006a94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a8e:	230e      	movs	r3, #14
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e057      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4a38      	ldr	r2, [pc, #224]	; (8006b78 <USB_SetTurnaroundTime+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d306      	bcc.n	8006aaa <USB_SetTurnaroundTime+0x56>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4a37      	ldr	r2, [pc, #220]	; (8006b7c <USB_SetTurnaroundTime+0x128>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d202      	bcs.n	8006aaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006aa4:	230d      	movs	r3, #13
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e04c      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4a33      	ldr	r2, [pc, #204]	; (8006b7c <USB_SetTurnaroundTime+0x128>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d306      	bcc.n	8006ac0 <USB_SetTurnaroundTime+0x6c>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4a32      	ldr	r2, [pc, #200]	; (8006b80 <USB_SetTurnaroundTime+0x12c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d802      	bhi.n	8006ac0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006aba:	230c      	movs	r3, #12
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e041      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a2f      	ldr	r2, [pc, #188]	; (8006b80 <USB_SetTurnaroundTime+0x12c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d906      	bls.n	8006ad6 <USB_SetTurnaroundTime+0x82>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4a2e      	ldr	r2, [pc, #184]	; (8006b84 <USB_SetTurnaroundTime+0x130>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d802      	bhi.n	8006ad6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ad0:	230b      	movs	r3, #11
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e036      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <USB_SetTurnaroundTime+0x130>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d906      	bls.n	8006aec <USB_SetTurnaroundTime+0x98>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <USB_SetTurnaroundTime+0x134>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d802      	bhi.n	8006aec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ae6:	230a      	movs	r3, #10
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e02b      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a26      	ldr	r2, [pc, #152]	; (8006b88 <USB_SetTurnaroundTime+0x134>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d906      	bls.n	8006b02 <USB_SetTurnaroundTime+0xae>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <USB_SetTurnaroundTime+0x138>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d202      	bcs.n	8006b02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006afc:	2309      	movs	r3, #9
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e020      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4a21      	ldr	r2, [pc, #132]	; (8006b8c <USB_SetTurnaroundTime+0x138>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d306      	bcc.n	8006b18 <USB_SetTurnaroundTime+0xc4>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <USB_SetTurnaroundTime+0x13c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d802      	bhi.n	8006b18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b12:	2308      	movs	r3, #8
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e015      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <USB_SetTurnaroundTime+0x13c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d906      	bls.n	8006b2e <USB_SetTurnaroundTime+0xda>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <USB_SetTurnaroundTime+0x140>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d202      	bcs.n	8006b2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b28:	2307      	movs	r3, #7
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e00a      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
=======
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d165      	bne.n	80065a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a41      	ldr	r2, [pc, #260]	; (80065dc <USB_SetTurnaroundTime+0x11c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d906      	bls.n	80064ea <USB_SetTurnaroundTime+0x2a>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a40      	ldr	r2, [pc, #256]	; (80065e0 <USB_SetTurnaroundTime+0x120>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d202      	bcs.n	80064ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064e4:	230f      	movs	r3, #15
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e062      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <USB_SetTurnaroundTime+0x120>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d306      	bcc.n	8006500 <USB_SetTurnaroundTime+0x40>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4a3b      	ldr	r2, [pc, #236]	; (80065e4 <USB_SetTurnaroundTime+0x124>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d202      	bcs.n	8006500 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064fa:	230e      	movs	r3, #14
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e057      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a38      	ldr	r2, [pc, #224]	; (80065e4 <USB_SetTurnaroundTime+0x124>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d306      	bcc.n	8006516 <USB_SetTurnaroundTime+0x56>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a37      	ldr	r2, [pc, #220]	; (80065e8 <USB_SetTurnaroundTime+0x128>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d202      	bcs.n	8006516 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006510:	230d      	movs	r3, #13
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e04c      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <USB_SetTurnaroundTime+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d306      	bcc.n	800652c <USB_SetTurnaroundTime+0x6c>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a32      	ldr	r2, [pc, #200]	; (80065ec <USB_SetTurnaroundTime+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d802      	bhi.n	800652c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006526:	230c      	movs	r3, #12
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e041      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a2f      	ldr	r2, [pc, #188]	; (80065ec <USB_SetTurnaroundTime+0x12c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d906      	bls.n	8006542 <USB_SetTurnaroundTime+0x82>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4a2e      	ldr	r2, [pc, #184]	; (80065f0 <USB_SetTurnaroundTime+0x130>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d802      	bhi.n	8006542 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800653c:	230b      	movs	r3, #11
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e036      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <USB_SetTurnaroundTime+0x130>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d906      	bls.n	8006558 <USB_SetTurnaroundTime+0x98>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4a29      	ldr	r2, [pc, #164]	; (80065f4 <USB_SetTurnaroundTime+0x134>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d802      	bhi.n	8006558 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006552:	230a      	movs	r3, #10
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e02b      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <USB_SetTurnaroundTime+0x134>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d906      	bls.n	800656e <USB_SetTurnaroundTime+0xae>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <USB_SetTurnaroundTime+0x138>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d202      	bcs.n	800656e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006568:	2309      	movs	r3, #9
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e020      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <USB_SetTurnaroundTime+0x138>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d306      	bcc.n	8006584 <USB_SetTurnaroundTime+0xc4>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <USB_SetTurnaroundTime+0x13c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d802      	bhi.n	8006584 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800657e:	2308      	movs	r3, #8
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	e015      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <USB_SetTurnaroundTime+0x13c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d906      	bls.n	800659a <USB_SetTurnaroundTime+0xda>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <USB_SetTurnaroundTime+0x140>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d202      	bcs.n	800659a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006594:	2307      	movs	r3, #7
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e00a      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
<<<<<<< HEAD
 8006b2e:	2306      	movs	r3, #6
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e007      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b3a:	2309      	movs	r3, #9
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e001      	b.n	8006b44 <USB_SetTurnaroundTime+0xf0>
=======
 800659a:	2306      	movs	r3, #6
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e007      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065a6:	2309      	movs	r3, #9
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e001      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
<<<<<<< HEAD
 8006b40:	2309      	movs	r3, #9
 8006b42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	029b      	lsls	r3, r3, #10
 8006b58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	00d8acbf 	.word	0x00d8acbf
 8006b74:	00e4e1c0 	.word	0x00e4e1c0
 8006b78:	00f42400 	.word	0x00f42400
 8006b7c:	01067380 	.word	0x01067380
 8006b80:	011a499f 	.word	0x011a499f
 8006b84:	01312cff 	.word	0x01312cff
 8006b88:	014ca43f 	.word	0x014ca43f
 8006b8c:	016e3600 	.word	0x016e3600
 8006b90:	01a6ab1f 	.word	0x01a6ab1f
 8006b94:	01e84800 	.word	0x01e84800

08006b98 <USB_EnableGlobalInt>:
=======
 80065ac:	2309      	movs	r3, #9
 80065ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	00d8acbf 	.word	0x00d8acbf
 80065e0:	00e4e1c0 	.word	0x00e4e1c0
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	01067380 	.word	0x01067380
 80065ec:	011a499f 	.word	0x011a499f
 80065f0:	01312cff 	.word	0x01312cff
 80065f4:	014ca43f 	.word	0x014ca43f
 80065f8:	016e3600 	.word	0x016e3600
 80065fc:	01a6ab1f 	.word	0x01a6ab1f
 8006600:	01e84800 	.word	0x01e84800

08006604 <USB_EnableGlobalInt>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f043 0201 	orr.w	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_DisableGlobalInt>:
=======
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f043 0201 	orr.w	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_DisableGlobalInt>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USB_SetCurrentMode>:
=======
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_SetCurrentMode>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
<<<<<<< HEAD
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d115      	bne.n	8006c2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60da      	str	r2, [r3, #12]
=======
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d115      	bne.n	8006696 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    do
    {
      HAL_Delay(10U);
<<<<<<< HEAD
 8006c0a:	200a      	movs	r0, #10
 8006c0c:	f7fb fc1a 	bl	8002444 <HAL_Delay>
      ms += 10U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	330a      	adds	r3, #10
 8006c14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 f939 	bl	8007e8e <USB_GetMode>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d01e      	beq.n	8006c60 <USB_SetCurrentMode+0x84>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2bc7      	cmp	r3, #199	; 0xc7
 8006c26:	d9f0      	bls.n	8006c0a <USB_SetCurrentMode+0x2e>
 8006c28:	e01a      	b.n	8006c60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d115      	bne.n	8006c5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
=======
 8006676:	200a      	movs	r0, #10
 8006678:	f7fb fc1a 	bl	8001eb0 <HAL_Delay>
      ms += 10U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	330a      	adds	r3, #10
 8006680:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 f939 	bl	80078fa <USB_GetMode>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d01e      	beq.n	80066cc <USB_SetCurrentMode+0x84>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2bc7      	cmp	r3, #199	; 0xc7
 8006692:	d9f0      	bls.n	8006676 <USB_SetCurrentMode+0x2e>
 8006694:	e01a      	b.n	80066cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d115      	bne.n	80066c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    do
    {
      HAL_Delay(10U);
<<<<<<< HEAD
 8006c3c:	200a      	movs	r0, #10
 8006c3e:	f7fb fc01 	bl	8002444 <HAL_Delay>
      ms += 10U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	330a      	adds	r3, #10
 8006c46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f920 	bl	8007e8e <USB_GetMode>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <USB_SetCurrentMode+0x84>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2bc7      	cmp	r3, #199	; 0xc7
 8006c58:	d9f0      	bls.n	8006c3c <USB_SetCurrentMode+0x60>
 8006c5a:	e001      	b.n	8006c60 <USB_SetCurrentMode+0x84>
=======
 80066a8:	200a      	movs	r0, #10
 80066aa:	f7fb fc01 	bl	8001eb0 <HAL_Delay>
      ms += 10U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	330a      	adds	r3, #10
 80066b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f920 	bl	80078fa <USB_GetMode>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <USB_SetCurrentMode+0x84>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2bc7      	cmp	r3, #199	; 0xc7
 80066c4:	d9f0      	bls.n	80066a8 <USB_SetCurrentMode+0x60>
 80066c6:	e001      	b.n	80066cc <USB_SetCurrentMode+0x84>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e005      	b.n	8006c6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2bc8      	cmp	r3, #200	; 0xc8
 8006c64:	d101      	bne.n	8006c6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USB_DevInit>:
=======
 80066c8:	2301      	movs	r3, #1
 80066ca:	e005      	b.n	80066d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2bc8      	cmp	r3, #200	; 0xc8
 80066d0:	d101      	bne.n	80066d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USB_DevInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8006c74:	b084      	sub	sp, #16
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b086      	sub	sp, #24
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e009      	b.n	8006ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b0e      	cmp	r3, #14
 8006cac:	d9f2      	bls.n	8006c94 <USB_DevInit+0x20>
=======
 80066e0:	b084      	sub	sp, #16
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e009      	b.n	8006714 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3340      	adds	r3, #64	; 0x40
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b0e      	cmp	r3, #14
 8006718:	d9f2      	bls.n	8006700 <USB_DevInit+0x20>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< HEAD
 8006cae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11c      	bne.n	8006cf0 <USB_DevInit+0x7c>
=======
 800671a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11c      	bne.n	800675c <USB_DevInit+0x7c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
<<<<<<< HEAD
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
 8006cee:	e00b      	b.n	8006d08 <USB_DevInit+0x94>
=======
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
 800675a:	e00b      	b.n	8006774 <USB_DevInit+0x94>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
<<<<<<< HEAD
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< HEAD
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d10d      	bne.n	8006d38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d24:	2100      	movs	r1, #0
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f968 	bl	8006ffc <USB_SetDevSpeed>
 8006d2c:	e008      	b.n	8006d40 <USB_DevInit+0xcc>
=======
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800677a:	461a      	mov	r2, r3
 800677c:	2300      	movs	r3, #0
 800677e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006780:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10d      	bne.n	80067a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006790:	2100      	movs	r1, #0
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f968 	bl	8006a68 <USB_SetDevSpeed>
 8006798:	e008      	b.n	80067ac <USB_DevInit+0xcc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< HEAD
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f963 	bl	8006ffc <USB_SetDevSpeed>
 8006d36:	e003      	b.n	8006d40 <USB_DevInit+0xcc>
=======
 800679a:	2101      	movs	r1, #1
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f963 	bl	8006a68 <USB_SetDevSpeed>
 80067a2:	e003      	b.n	80067ac <USB_DevInit+0xcc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
<<<<<<< HEAD
 8006d38:	2103      	movs	r1, #3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f95e 	bl	8006ffc <USB_SetDevSpeed>
=======
 80067a4:	2103      	movs	r1, #3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f95e 	bl	8006a68 <USB_SetDevSpeed>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
<<<<<<< HEAD
 8006d40:	2110      	movs	r1, #16
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8fa 	bl	8006f3c <USB_FlushTxFifo>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f924 	bl	8006fa0 <USB_FlushRxFifo>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
=======
 80067ac:	2110      	movs	r1, #16
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8fa 	bl	80069a8 <USB_FlushTxFifo>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f924 	bl	8006a0c <USB_FlushRxFifo>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< HEAD
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	461a      	mov	r2, r3
 8006d76:	2300      	movs	r3, #0
 8006d78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d80:	461a      	mov	r2, r3
 8006d82:	2300      	movs	r3, #0
 8006d84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e043      	b.n	8006e14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da2:	d118      	bne.n	8006dd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	461a      	mov	r2, r3
 8006db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e013      	b.n	8006de8 <USB_DevInit+0x174>
=======
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	461a      	mov	r2, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e043      	b.n	8006880 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800680a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800680e:	d118      	bne.n	8006842 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	461a      	mov	r2, r3
 8006824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e013      	b.n	8006854 <USB_DevInit+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< HEAD
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e008      	b.n	8006de8 <USB_DevInit+0x174>
=======
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e008      	b.n	8006854 <USB_DevInit+0x174>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< HEAD
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	461a      	mov	r2, r3
 8006df6:	2300      	movs	r3, #0
 8006df8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	461a      	mov	r2, r3
 8006e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e18:	461a      	mov	r2, r3
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d3b5      	bcc.n	8006d8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	e043      	b.n	8006eae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3c:	d118      	bne.n	8006e70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e50:	461a      	mov	r2, r3
 8006e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	e013      	b.n	8006e82 <USB_DevInit+0x20e>
=======
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	461a      	mov	r2, r3
 8006850:	2300      	movs	r3, #0
 8006852:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	461a      	mov	r2, r3
 8006862:	2300      	movs	r3, #0
 8006864:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006872:	461a      	mov	r2, r3
 8006874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	3301      	adds	r3, #1
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006884:	461a      	mov	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4293      	cmp	r3, r2
 800688a:	d3b5      	bcc.n	80067f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	e043      	b.n	800691a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a8:	d118      	bne.n	80068dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	461a      	mov	r2, r3
 80068be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e013      	b.n	80068ee <USB_DevInit+0x20e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< HEAD
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	461a      	mov	r2, r3
 8006e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e008      	b.n	8006e82 <USB_DevInit+0x20e>
=======
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e008      	b.n	80068ee <USB_DevInit+0x20e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< HEAD
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2300      	movs	r3, #0
 8006e80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2300      	movs	r3, #0
 8006e92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d3b5      	bcc.n	8006e26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ecc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006eda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006edc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	f043 0210 	orr.w	r2, r3, #16
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	619a      	str	r2, [r3, #24]
=======
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	461a      	mov	r2, r3
 80068ea:	2300      	movs	r3, #0
 80068ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	461a      	mov	r2, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3301      	adds	r3, #1
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800691e:	461a      	mov	r2, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4293      	cmp	r3, r2
 8006924:	d3b5      	bcc.n	8006892 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006938:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006946:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f043 0210 	orr.w	r2, r3, #16
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
<<<<<<< HEAD
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <USB_DevInit+0x2c4>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6193      	str	r3, [r2, #24]
=======
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <USB_DevInit+0x2c4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6193      	str	r3, [r2, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< HEAD
 8006efc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f043 0208 	orr.w	r2, r3, #8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d107      	bne.n	8006f28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f20:	f043 0304 	orr.w	r3, r3, #4
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f34:	b004      	add	sp, #16
 8006f36:	4770      	bx	lr
 8006f38:	803c3800 	.word	0x803c3800

08006f3c <USB_FlushTxFifo>:
=======
 8006968:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	f043 0208 	orr.w	r2, r3, #8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800697c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006980:	2b01      	cmp	r3, #1
 8006982:	d107      	bne.n	8006994 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698c:	f043 0304 	orr.w	r3, r3, #4
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a0:	b004      	add	sp, #16
 80069a2:	4770      	bx	lr
 80069a4:	803c3800 	.word	0x803c3800

080069a8 <USB_FlushTxFifo>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< HEAD
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
=======
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f56:	d901      	bls.n	8006f5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e01b      	b.n	8006f94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	daf2      	bge.n	8006f4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	019b      	lsls	r3, r3, #6
 8006f6c:	f043 0220 	orr.w	r2, r3, #32
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	611a      	str	r2, [r3, #16]
=======
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069c2:	d901      	bls.n	80069c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e01b      	b.n	8006a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	daf2      	bge.n	80069b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	019b      	lsls	r3, r3, #6
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  do
  {
    count++;
<<<<<<< HEAD
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f80:	d901      	bls.n	8006f86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e006      	b.n	8006f94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d0f0      	beq.n	8006f74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USB_FlushRxFifo>:
=======
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069ec:	d901      	bls.n	80069f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e006      	b.n	8006a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d0f0      	beq.n	80069e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_FlushRxFifo>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
=======
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006fb8:	d901      	bls.n	8006fbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e018      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	daf2      	bge.n	8006fac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	611a      	str	r2, [r3, #16]
=======
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a24:	d901      	bls.n	8006a2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e018      	b.n	8006a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	daf2      	bge.n	8006a18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2210      	movs	r2, #16
 8006a3a:	611a      	str	r2, [r3, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  do
  {
    count++;
<<<<<<< HEAD
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006fdc:	d901      	bls.n	8006fe2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e006      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d0f0      	beq.n	8006fd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_SetDevSpeed>:
=======
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a48:	d901      	bls.n	8006a4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e006      	b.n	8006a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d0f0      	beq.n	8006a3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_SetDevSpeed>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< HEAD
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_GetDevSpeed>:
=======
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_GetDevSpeed>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 800702e:	b480      	push	{r7}
 8007030:	b087      	sub	sp, #28
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0306 	and.w	r3, r3, #6
 8007046:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800704e:	2300      	movs	r3, #0
 8007050:	75fb      	strb	r3, [r7, #23]
 8007052:	e00a      	b.n	800706a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b02      	cmp	r3, #2
 8007058:	d002      	beq.n	8007060 <USB_GetDevSpeed+0x32>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b06      	cmp	r3, #6
 800705e:	d102      	bne.n	8007066 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007060:	2302      	movs	r3, #2
 8007062:	75fb      	strb	r3, [r7, #23]
 8007064:	e001      	b.n	800706a <USB_GetDevSpeed+0x3c>
=======
 8006a9a:	b480      	push	{r7}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0306 	and.w	r3, r3, #6
 8006ab2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
 8006abe:	e00a      	b.n	8006ad6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d002      	beq.n	8006acc <USB_GetDevSpeed+0x32>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d102      	bne.n	8006ad2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
 8006ad0:	e001      	b.n	8006ad6 <USB_GetDevSpeed+0x3c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    speed = 0xFU;
<<<<<<< HEAD
 8007066:	230f      	movs	r3, #15
 8007068:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
}
 800706c:	4618      	mov	r0, r3
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USB_ActivateEndpoint>:
=======
 8006ad2:	230f      	movs	r3, #15
 8006ad4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_ActivateEndpoint>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d13a      	bne.n	800710a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	2101      	movs	r1, #1
 80070a6:	fa01 f303 	lsl.w	r3, r1, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	68f9      	ldr	r1, [r7, #12]
 80070ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d155      	bne.n	8007178 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	059b      	lsls	r3, r3, #22
 80070ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070f0:	4313      	orrs	r3, r2
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e036      	b.n	8007178 <USB_ActivateEndpoint+0x100>
=======
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d13a      	bne.n	8006b76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	2101      	movs	r1, #1
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d155      	bne.n	8006be4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	059b      	lsls	r3, r3, #22
 8006b5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	e036      	b.n	8006be4 <USB_ActivateEndpoint+0x100>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
<<<<<<< HEAD
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007110:	69da      	ldr	r2, [r3, #28]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	2101      	movs	r1, #1
 800711c:	fa01 f303 	lsl.w	r3, r1, r3
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007128:	4313      	orrs	r3, r2
 800712a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d11a      	bne.n	8007178 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	791b      	ldrb	r3, [r3, #4]
 800715c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800715e:	430b      	orrs	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007176:	6013      	str	r3, [r2, #0]
=======
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	69da      	ldr	r2, [r3, #28]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	2101      	movs	r1, #1
 8006b88:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8c:	041b      	lsls	r3, r3, #16
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11a      	bne.n	8006be4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	791b      	ldrb	r3, [r3, #4]
 8006bc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be2:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <USB_DeactivateEndpoint>:
=======
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <USB_DeactivateEndpoint>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d161      	bne.n	8007268 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ba:	d11f      	bne.n	80071fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800721c:	4013      	ands	r3, r2
 800721e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	2101      	movs	r1, #1
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	43db      	mvns	r3, r3
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007240:	4013      	ands	r3, r2
 8007242:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	0159      	lsls	r1, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	440b      	add	r3, r1
 800725a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725e:	4619      	mov	r1, r3
 8007260:	4b35      	ldr	r3, [pc, #212]	; (8007338 <USB_DeactivateEndpoint+0x1b0>)
 8007262:	4013      	ands	r3, r2
 8007264:	600b      	str	r3, [r1, #0]
 8007266:	e060      	b.n	800732a <USB_DeactivateEndpoint+0x1a2>
=======
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d161      	bne.n	8006cd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c26:	d11f      	bne.n	8006c68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	2101      	movs	r1, #1
 8006c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	43db      	mvns	r3, r3
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c88:	4013      	ands	r3, r2
 8006c8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cac:	4013      	ands	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	0159      	lsls	r1, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <USB_DeactivateEndpoint+0x1b0>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]
 8006cd2:	e060      	b.n	8006d96 <USB_DeactivateEndpoint+0x1a2>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
<<<<<<< HEAD
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800727a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727e:	d11f      	bne.n	80072c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800729a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800729e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
 80072d6:	041b      	lsls	r3, r3, #16
 80072d8:	43db      	mvns	r3, r3
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072e0:	4013      	ands	r3, r2
 80072e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	2101      	movs	r1, #1
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	43db      	mvns	r3, r3
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007304:	4013      	ands	r3, r2
 8007306:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	0159      	lsls	r1, r3, #5
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	440b      	add	r3, r1
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	4619      	mov	r1, r3
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <USB_DeactivateEndpoint+0x1b4>)
 8007326:	4013      	ands	r3, r2
 8007328:	600b      	str	r3, [r1, #0]
=======
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cea:	d11f      	bne.n	8006d2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	43db      	mvns	r3, r3
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	2101      	movs	r1, #1
 8006d62:	fa01 f303 	lsl.w	r3, r1, r3
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d70:	4013      	ands	r3, r2
 8006d72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	0159      	lsls	r1, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	440b      	add	r3, r1
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <USB_DeactivateEndpoint+0x1b4>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
<<<<<<< HEAD
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	ec337800 	.word	0xec337800
 800733c:	eff37800 	.word	0xeff37800

08007340 <USB_EPStartXfer>:
=======
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	ec337800 	.word	0xec337800
 8006da8:	eff37800 	.word	0xeff37800

08006dac <USB_EPStartXfer>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
<<<<<<< HEAD
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	61bb      	str	r3, [r7, #24]
=======
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	61bb      	str	r3, [r7, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 817a 	bne.w	8007656 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800738c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	0cdb      	lsrs	r3, r3, #19
 80073ca:	04db      	lsls	r3, r3, #19
 80073cc:	6113      	str	r3, [r2, #16]
 80073ce:	e092      	b.n	80074f6 <USB_EPStartXfer+0x1b6>
=======
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f040 817a 	bne.w	80070c2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d132      	bne.n	8006e3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e34:	0cdb      	lsrs	r3, r3, #19
 8006e36:	04db      	lsls	r3, r3, #19
 8006e38:	6113      	str	r3, [r2, #16]
 8006e3a:	e092      	b.n	8006f62 <USB_EPStartXfer+0x1b6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
<<<<<<< HEAD
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	0cdb      	lsrs	r3, r3, #19
 80073ec:	04db      	lsls	r3, r3, #19
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800740e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007412:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d11a      	bne.n	8007450 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	d903      	bls.n	800742e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800744c:	6113      	str	r3, [r2, #16]
 800744e:	e01b      	b.n	8007488 <USB_EPStartXfer+0x148>
=======
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	0cdb      	lsrs	r3, r3, #19
 8006e58:	04db      	lsls	r3, r3, #19
 8006e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d11a      	bne.n	8006ebc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d903      	bls.n	8006e9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eb8:	6113      	str	r3, [r2, #16]
 8006eba:	e01b      	b.n	8006ef4 <USB_EPStartXfer+0x148>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
<<<<<<< HEAD
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6919      	ldr	r1, [r3, #16]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	440b      	add	r3, r1
 8007468:	1e59      	subs	r1, r3, #1
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007472:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007474:	4ba2      	ldr	r3, [pc, #648]	; (8007700 <USB_EPStartXfer+0x3c0>)
 8007476:	400b      	ands	r3, r1
 8007478:	69b9      	ldr	r1, [r7, #24]
 800747a:	0148      	lsls	r0, r1, #5
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	4401      	add	r1, r0
 8007480:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007484:	4313      	orrs	r3, r2
 8007486:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800749e:	69b9      	ldr	r1, [r7, #24]
 80074a0:	0148      	lsls	r0, r1, #5
 80074a2:	69f9      	ldr	r1, [r7, #28]
 80074a4:	4401      	add	r1, r0
 80074a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074aa:	4313      	orrs	r3, r2
 80074ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	791b      	ldrb	r3, [r3, #4]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d11f      	bne.n	80074f6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	0151      	lsls	r1, r2, #5
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	440a      	add	r2, r1
 80074cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074f4:	6113      	str	r3, [r2, #16]
=======
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6919      	ldr	r1, [r3, #16]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	440b      	add	r3, r1
 8006ed4:	1e59      	subs	r1, r3, #1
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ede:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ee0:	4ba2      	ldr	r3, [pc, #648]	; (800716c <USB_EPStartXfer+0x3c0>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	0148      	lsls	r0, r1, #5
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	4401      	add	r1, r0
 8006eec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	0148      	lsls	r0, r1, #5
 8006f0e:	69f9      	ldr	r1, [r7, #28]
 8006f10:	4401      	add	r1, r0
 8006f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f16:	4313      	orrs	r3, r2
 8006f18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d11f      	bne.n	8006f62 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f60:	6113      	str	r3, [r2, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    if (dma == 1U)
<<<<<<< HEAD
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d14b      	bne.n	8007594 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	461a      	mov	r2, r3
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d128      	bne.n	8007572 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752c:	2b00      	cmp	r3, #0
 800752e:	d110      	bne.n	8007552 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e00f      	b.n	8007572 <USB_EPStartXfer+0x232>
=======
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d14b      	bne.n	8007000 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	791b      	ldrb	r3, [r3, #4]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d128      	bne.n	8006fde <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d110      	bne.n	8006fbe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	e00f      	b.n	8006fde <USB_EPStartXfer+0x232>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	6013      	str	r3, [r2, #0]
=======
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800758c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	e165      	b.n	8007860 <USB_EPStartXfer+0x520>
=======
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e165      	b.n	80072cc <USB_EPStartXfer+0x520>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d015      	beq.n	80075e8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 814d 	beq.w	8007860 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	2101      	movs	r1, #1
 80075d8:	fa01 f303 	lsl.w	r3, r1, r3
 80075dc:	69f9      	ldr	r1, [r7, #28]
 80075de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e2:	4313      	orrs	r3, r2
 80075e4:	634b      	str	r3, [r1, #52]	; 0x34
 80075e6:	e13b      	b.n	8007860 <USB_EPStartXfer+0x520>
=======
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800701e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	791b      	ldrb	r3, [r3, #4]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d015      	beq.n	8007054 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 814d 	beq.w	80072cc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	2101      	movs	r1, #1
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	69f9      	ldr	r1, [r7, #28]
 800704a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704e:	4313      	orrs	r3, r2
 8007050:	634b      	str	r3, [r1, #52]	; 0x34
 8007052:	e13b      	b.n	80072cc <USB_EPStartXfer+0x520>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
<<<<<<< HEAD
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d110      	bne.n	800761a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007612:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	e00f      	b.n	800763a <USB_EPStartXfer+0x2fa>
=======
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e00f      	b.n	80070a6 <USB_EPStartXfer+0x2fa>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007638:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	68d9      	ldr	r1, [r3, #12]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	b298      	uxth	r0, r3
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 f9b8 	bl	80079c4 <USB_WritePacket>
 8007654:	e104      	b.n	8007860 <USB_EPStartXfer+0x520>
=======
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	68d9      	ldr	r1, [r3, #12]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	b298      	uxth	r0, r3
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4603      	mov	r3, r0
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f9b8 	bl	8007430 <USB_WritePacket>
 80070c0:	e104      	b.n	80072cc <USB_EPStartXfer+0x520>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
<<<<<<< HEAD
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007670:	0cdb      	lsrs	r3, r3, #19
 8007672:	04db      	lsls	r3, r3, #19
 8007674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007690:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007694:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007698:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d131      	bne.n	8007704 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	611a      	str	r2, [r3, #16]
=======
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070dc:	0cdb      	lsrs	r3, r3, #19
 80070de:	04db      	lsls	r3, r3, #19
 80070e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007104:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d131      	bne.n	8007170 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	611a      	str	r2, [r3, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
<<<<<<< HEAD
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ce:	69b9      	ldr	r1, [r7, #24]
 80076d0:	0148      	lsls	r0, r1, #5
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	4401      	add	r1, r0
 80076d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076da:	4313      	orrs	r3, r2
 80076dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fc:	6113      	str	r3, [r2, #16]
 80076fe:	e061      	b.n	80077c4 <USB_EPStartXfer+0x484>
 8007700:	1ff80000 	.word	0x1ff80000
=======
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	691a      	ldr	r2, [r3, #16]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713a:	69b9      	ldr	r1, [r7, #24]
 800713c:	0148      	lsls	r0, r1, #5
 800713e:	69f9      	ldr	r1, [r7, #28]
 8007140:	4401      	add	r1, r0
 8007142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007146:	4313      	orrs	r3, r2
 8007148:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007168:	6113      	str	r3, [r2, #16]
 800716a:	e061      	b.n	8007230 <USB_EPStartXfer+0x484>
 800716c:	1ff80000 	.word	0x1ff80000
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d123      	bne.n	8007754 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007722:	69b9      	ldr	r1, [r7, #24]
 8007724:	0148      	lsls	r0, r1, #5
 8007726:	69f9      	ldr	r1, [r7, #28]
 8007728:	4401      	add	r1, r0
 800772a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800772e:	4313      	orrs	r3, r2
 8007730:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007750:	6113      	str	r3, [r2, #16]
 8007752:	e037      	b.n	80077c4 <USB_EPStartXfer+0x484>
=======
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d123      	bne.n	80071c0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718e:	69b9      	ldr	r1, [r7, #24]
 8007190:	0148      	lsls	r0, r1, #5
 8007192:	69f9      	ldr	r1, [r7, #28]
 8007194:	4401      	add	r1, r0
 8007196:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800719a:	4313      	orrs	r3, r2
 800719c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071bc:	6113      	str	r3, [r2, #16]
 80071be:	e037      	b.n	8007230 <USB_EPStartXfer+0x484>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
<<<<<<< HEAD
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4413      	add	r3, r2
 800775e:	1e5a      	subs	r2, r3, #1
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	8afa      	ldrh	r2, [r7, #22]
 8007770:	fb03 f202 	mul.w	r2, r3, r2
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	8afb      	ldrh	r3, [r7, #22]
 8007788:	04d9      	lsls	r1, r3, #19
 800778a:	4b38      	ldr	r3, [pc, #224]	; (800786c <USB_EPStartXfer+0x52c>)
 800778c:	400b      	ands	r3, r1
 800778e:	69b9      	ldr	r1, [r7, #24]
 8007790:	0148      	lsls	r0, r1, #5
 8007792:	69f9      	ldr	r1, [r7, #28]
 8007794:	4401      	add	r1, r0
 8007796:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800779a:	4313      	orrs	r3, r2
 800779c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b4:	69b9      	ldr	r1, [r7, #24]
 80077b6:	0148      	lsls	r0, r1, #5
 80077b8:	69f9      	ldr	r1, [r7, #28]
 80077ba:	4401      	add	r1, r0
 80077bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077c0:	4313      	orrs	r3, r2
 80077c2:	610b      	str	r3, [r1, #16]
=======
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	4413      	add	r3, r2
 80071ca:	1e5a      	subs	r2, r3, #1
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	8afa      	ldrh	r2, [r7, #22]
 80071dc:	fb03 f202 	mul.w	r2, r3, r2
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	8afb      	ldrh	r3, [r7, #22]
 80071f4:	04d9      	lsls	r1, r3, #19
 80071f6:	4b38      	ldr	r3, [pc, #224]	; (80072d8 <USB_EPStartXfer+0x52c>)
 80071f8:	400b      	ands	r3, r1
 80071fa:	69b9      	ldr	r1, [r7, #24]
 80071fc:	0148      	lsls	r0, r1, #5
 80071fe:	69f9      	ldr	r1, [r7, #28]
 8007200:	4401      	add	r1, r0
 8007202:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007206:	4313      	orrs	r3, r2
 8007208:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	0148      	lsls	r0, r1, #5
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	4401      	add	r1, r0
 8007228:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800722c:	4313      	orrs	r3, r2
 800722e:	610b      	str	r3, [r1, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    if (dma == 1U)
<<<<<<< HEAD
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d10d      	bne.n	80077e6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	68d9      	ldr	r1, [r3, #12]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	460a      	mov	r2, r1
 80077e4:	615a      	str	r2, [r3, #20]
=======
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10d      	bne.n	8007252 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	68d9      	ldr	r1, [r3, #12]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	460a      	mov	r2, r1
 8007250:	615a      	str	r2, [r3, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }

    if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d128      	bne.n	8007840 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d110      	bne.n	8007820 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e00f      	b.n	8007840 <USB_EPStartXfer+0x500>
=======
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	791b      	ldrb	r3, [r3, #4]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d128      	bne.n	80072ac <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d110      	bne.n	800728c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	440a      	add	r2, r1
 8007280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	e00f      	b.n	80072ac <USB_EPStartXfer+0x500>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783e:	6013      	str	r3, [r2, #0]
=======
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072aa:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
<<<<<<< HEAD
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800785e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	1ff80000 	.word	0x1ff80000

08007870 <USB_EPStopXfer>:
=======
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3720      	adds	r7, #32
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	1ff80000 	.word	0x1ff80000

080072dc <USB_EPStopXfer>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d14a      	bne.n	8007924 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a6:	f040 8086 	bne.w	80079b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	7812      	ldrb	r2, [r2, #0]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f0:	6013      	str	r3, [r2, #0]
=======
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d14a      	bne.n	8007390 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800730e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007312:	f040 8086 	bne.w	8007422 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007334:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007338:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	7812      	ldrb	r2, [r2, #0]
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800735c:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      do
      {
        count++;
<<<<<<< HEAD
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80078fe:	4293      	cmp	r3, r2
 8007900:	d902      	bls.n	8007908 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
          break;
 8007906:	e056      	b.n	80079b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800791c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007920:	d0e7      	beq.n	80078f2 <USB_EPStopXfer+0x82>
 8007922:	e048      	b.n	80079b6 <USB_EPStopXfer+0x146>
=======
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3301      	adds	r3, #1
 8007362:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f242 7210 	movw	r2, #10000	; 0x2710
 800736a:	4293      	cmp	r3, r2
 800736c:	d902      	bls.n	8007374 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	75fb      	strb	r3, [r7, #23]
          break;
 8007372:	e056      	b.n	8007422 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800738c:	d0e7      	beq.n	800735e <USB_EPStopXfer+0x82>
 800738e:	e048      	b.n	8007422 <USB_EPStopXfer+0x146>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
<<<<<<< HEAD
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800793c:	d13b      	bne.n	80079b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	7812      	ldrb	r2, [r2, #0]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007960:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	0151      	lsls	r1, r2, #5
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	440a      	add	r2, r1
 800797c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007984:	6013      	str	r3, [r2, #0]
=======
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a8:	d13b      	bne.n	8007422 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	7812      	ldrb	r2, [r2, #0]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f0:	6013      	str	r3, [r2, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

      do
      {
        count++;
<<<<<<< HEAD
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007992:	4293      	cmp	r3, r2
 8007994:	d902      	bls.n	800799c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
          break;
 800799a:	e00c      	b.n	80079b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b4:	d0e7      	beq.n	8007986 <USB_EPStopXfer+0x116>
=======
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80073fe:	4293      	cmp	r3, r2
 8007400:	d902      	bls.n	8007408 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
          break;
 8007406:	e00c      	b.n	8007422 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800741c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007420:	d0e7      	beq.n	80073f2 <USB_EPStopXfer+0x116>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  return ret;
<<<<<<< HEAD
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USB_WritePacket>:
=======
 8007422:	7dfb      	ldrb	r3, [r7, #23]
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_WritePacket>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
<<<<<<< HEAD
 80079c4:	b480      	push	{r7}
 80079c6:	b089      	sub	sp, #36	; 0x24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4611      	mov	r1, r2
 80079d0:	461a      	mov	r2, r3
 80079d2:	460b      	mov	r3, r1
 80079d4:	71fb      	strb	r3, [r7, #7]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	61fb      	str	r3, [r7, #28]
=======
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	460b      	mov	r3, r1
 8007440:	71fb      	strb	r3, [r7, #7]
 8007442:	4613      	mov	r3, r2
 8007444:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	61fb      	str	r3, [r7, #28]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
<<<<<<< HEAD
 80079e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d123      	bne.n	8007a32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079ea:	88bb      	ldrh	r3, [r7, #4]
 80079ec:	3303      	adds	r3, #3
 80079ee:	089b      	lsrs	r3, r3, #2
 80079f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079f2:	2300      	movs	r3, #0
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e018      	b.n	8007a2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	031a      	lsls	r2, r3, #12
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a04:	461a      	mov	r2, r3
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	3301      	adds	r3, #1
 8007a16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	3301      	adds	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3e2      	bcc.n	80079f8 <USB_WritePacket+0x34>
=======
 800744e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d123      	bne.n	800749e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007456:	88bb      	ldrh	r3, [r7, #4]
 8007458:	3303      	adds	r3, #3
 800745a:	089b      	lsrs	r3, r3, #2
 800745c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800745e:	2300      	movs	r3, #0
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e018      	b.n	8007496 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	031a      	lsls	r2, r3, #12
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	4413      	add	r3, r2
 800746c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007470:	461a      	mov	r2, r3
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3301      	adds	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	3301      	adds	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	3301      	adds	r3, #1
 800748e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	3301      	adds	r3, #1
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	429a      	cmp	r2, r3
 800749c:	d3e2      	bcc.n	8007464 <USB_WritePacket+0x34>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3724      	adds	r7, #36	; 0x24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_ReadPacket>:
=======
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3724      	adds	r7, #36	; 0x24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_ReadPacket>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
<<<<<<< HEAD
 8007a40:	b480      	push	{r7}
 8007a42:	b08b      	sub	sp, #44	; 0x2c
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a5e:	88fb      	ldrh	r3, [r7, #6]
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a66:	2300      	movs	r3, #0
 8007a68:	623b      	str	r3, [r7, #32]
 8007a6a:	e014      	b.n	8007a96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	3301      	adds	r3, #1
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	3301      	adds	r3, #1
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	3301      	adds	r3, #1
 8007a94:	623b      	str	r3, [r7, #32]
 8007a96:	6a3a      	ldr	r2, [r7, #32]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d3e6      	bcc.n	8007a6c <USB_ReadPacket+0x2c>
=======
 80074ac:	b480      	push	{r7}
 80074ae:	b08b      	sub	sp, #44	; 0x2c
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	089b      	lsrs	r3, r3, #2
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	f003 0303 	and.w	r3, r3, #3
 80074d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	e014      	b.n	8007502 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	3301      	adds	r3, #1
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	3301      	adds	r3, #1
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	3301      	adds	r3, #1
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	3301      	adds	r3, #1
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	3301      	adds	r3, #1
 8007500:	623b      	str	r3, [r7, #32]
 8007502:	6a3a      	ldr	r2, [r7, #32]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	429a      	cmp	r2, r3
 8007508:	d3e6      	bcc.n	80074d8 <USB_ReadPacket+0x2c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
<<<<<<< HEAD
 8007a9e:	8bfb      	ldrh	r3, [r7, #30]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01e      	beq.n	8007ae2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f107 0310 	add.w	r3, r7, #16
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	601a      	str	r2, [r3, #0]
=======
 800750a:	8bfb      	ldrh	r3, [r7, #30]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01e      	beq.n	800754e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751a:	461a      	mov	r2, r3
 800751c:	f107 0310 	add.w	r3, r7, #16
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	601a      	str	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
<<<<<<< HEAD
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	701a      	strb	r2, [r3, #0]
      i++;
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	3301      	adds	r3, #1
 8007ace:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007ad6:	8bfb      	ldrh	r3, [r7, #30]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007adc:	8bfb      	ldrh	r3, [r7, #30]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1ea      	bne.n	8007ab8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	372c      	adds	r7, #44	; 0x2c
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_EPSetStall>:
=======
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
 8007530:	b2da      	uxtb	r2, r3
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	701a      	strb	r2, [r3, #0]
      i++;
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	3301      	adds	r3, #1
 800753a:	623b      	str	r3, [r7, #32]
      pDest++;
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	3301      	adds	r3, #1
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007542:	8bfb      	ldrh	r3, [r7, #30]
 8007544:	3b01      	subs	r3, #1
 8007546:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007548:	8bfb      	ldrh	r3, [r7, #30]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1ea      	bne.n	8007524 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007550:	4618      	mov	r0, r3
 8007552:	372c      	adds	r7, #44	; 0x2c
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_EPSetStall>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d12c      	bne.n	8007b66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	db12      	blt.n	8007b44 <USB_EPSetStall+0x54>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00f      	beq.n	8007b44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e02b      	b.n	8007bbe <USB_EPSetStall+0xce>
=======
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	785b      	ldrb	r3, [r3, #1]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d12c      	bne.n	80075d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	db12      	blt.n	80075b0 <USB_EPSetStall+0x54>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00f      	beq.n	80075b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	e02b      	b.n	800762a <USB_EPSetStall+0xce>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
<<<<<<< HEAD
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	db12      	blt.n	8007b9e <USB_EPSetStall+0xae>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00f      	beq.n	8007b9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_EPClearStall>:
=======
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db12      	blt.n	800760a <USB_EPSetStall+0xae>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00f      	beq.n	800760a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007608:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007628:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_EPClearStall>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	785b      	ldrb	r3, [r3, #1]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d128      	bne.n	8007c3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d003      	beq.n	8007c18 <USB_EPClearStall+0x4c>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	791b      	ldrb	r3, [r3, #4]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d138      	bne.n	8007c8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e027      	b.n	8007c8a <USB_EPClearStall+0xbe>
=======
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d128      	bne.n	80076a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007672:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	791b      	ldrb	r3, [r3, #4]
 8007678:	2b03      	cmp	r3, #3
 800767a:	d003      	beq.n	8007684 <USB_EPClearStall+0x4c>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d138      	bne.n	80076f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	e027      	b.n	80076f6 <USB_EPClearStall+0xbe>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
<<<<<<< HEAD
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	0151      	lsls	r1, r2, #5
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	440a      	add	r2, r1
 8007c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d003      	beq.n	8007c6a <USB_EPClearStall+0x9e>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	791b      	ldrb	r3, [r3, #4]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d10f      	bne.n	8007c8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_SetDevAddress>:
=======
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	791b      	ldrb	r3, [r3, #4]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d003      	beq.n	80076d6 <USB_EPClearStall+0x9e>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d10f      	bne.n	80076f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_SetDevAddress>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ccc:	68f9      	ldr	r1, [r7, #12]
 8007cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d12:	f023 0302 	bic.w	r3, r3, #2
 8007d16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d40:	f023 0303 	bic.w	r3, r3, #3
 8007d44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d54:	f043 0302 	orr.w	r3, r3, #2
 8007d58:	6053      	str	r3, [r2, #4]
=======
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007726:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800773e:	4313      	orrs	r3, r2
 8007740:	600b      	str	r3, [r1, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

<<<<<<< HEAD
08007d68 <USB_ReadInterrupts>:
=======
08007750 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800776a:	f023 0303 	bic.w	r3, r3, #3
 800776e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777e:	f023 0302 	bic.w	r3, r3, #2
 8007782:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ac:	f023 0303 	bic.w	r3, r3, #3
 80077b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c0:	f043 0302 	orr.w	r3, r3, #2
 80077c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_ReadInterrupts>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
<<<<<<< HEAD
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d80:	68fb      	ldr	r3, [r7, #12]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USB_ReadDevAllOutEpInterrupt>:
=======
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4013      	ands	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077ec:	68fb      	ldr	r3, [r7, #12]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USB_ReadDevAllOutEpInterrupt>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	4013      	ands	r3, r2
 8007db0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	0c1b      	lsrs	r3, r3, #16
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USB_ReadDevAllInEpInterrupt>:
=======
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4013      	ands	r3, r2
 800781c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	0c1b      	lsrs	r3, r3, #16
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_ReadDevAllInEpInterrupt>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	4013      	ands	r3, r2
 8007de4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	b29b      	uxth	r3, r3
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USB_ReadDevOutEPInterrupt>:
=======
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	4013      	ands	r3, r2
 8007850:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	b29b      	uxth	r3, r3
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_ReadDevOutEPInterrupt>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
<<<<<<< HEAD
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	4013      	ands	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e24:	68bb      	ldr	r3, [r7, #8]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USB_ReadDevInEPInterrupt>:
=======
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007890:	68bb      	ldr	r3, [r7, #8]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <USB_ReadDevInEPInterrupt>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
<<<<<<< HEAD
 8007e32:	b480      	push	{r7}
 8007e34:	b087      	sub	sp, #28
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	617b      	str	r3, [r7, #20]
=======
 800789e:	b480      	push	{r7}
 80078a0:	b087      	sub	sp, #28
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	617b      	str	r3, [r7, #20]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
<<<<<<< HEAD
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	01db      	lsls	r3, r3, #7
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e80:	68bb      	ldr	r3, [r7, #8]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USB_GetMode>:
=======
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	fa22 f303 	lsr.w	r3, r2, r3
 80078ce:	01db      	lsls	r3, r3, #7
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4013      	ands	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078ec:	68bb      	ldr	r3, [r7, #8]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_GetMode>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USB_ActivateSetup>:
=======
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0301 	and.w	r3, r3, #1
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USB_ActivateSetup>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ec8:	f023 0307 	bic.w	r3, r3, #7
 8007ecc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_EP0_OutStart>:
=======
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007930:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007934:	f023 0307 	bic.w	r3, r3, #7
 8007938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USB_EP0_OutStart>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
<<<<<<< HEAD
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	333c      	adds	r3, #60	; 0x3c
 8007f06:	3304      	adds	r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <USB_EP0_OutStart+0xb8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d90a      	bls.n	8007f2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f24:	d101      	bne.n	8007f2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e037      	b.n	8007f9a <USB_EP0_OutStart+0xaa>
=======
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	460b      	mov	r3, r1
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	333c      	adds	r3, #60	; 0x3c
 8007972:	3304      	adds	r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <USB_EP0_OutStart+0xb8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d90a      	bls.n	8007996 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800798c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007990:	d101      	bne.n	8007996 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	e037      	b.n	8007a06 <USB_EP0_OutStart+0xaa>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
<<<<<<< HEAD
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	461a      	mov	r2, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f58:	f043 0318 	orr.w	r3, r3, #24
 8007f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d10f      	bne.n	8007f98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	4f54300a 	.word	0x4f54300a

08007fac <USB_CoreReset>:
=======
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799c:	461a      	mov	r2, r3
 800799e:	2300      	movs	r3, #0
 80079a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c4:	f043 0318 	orr.w	r3, r3, #24
 80079c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d10f      	bne.n	8007a04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	4f54300a 	.word	0x4f54300a

08007a18 <USB_CoreReset>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]
=======
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fc4:	d901      	bls.n	8007fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e01b      	b.n	8008002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	daf2      	bge.n	8007fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f043 0201 	orr.w	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	611a      	str	r2, [r3, #16]
=======
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a30:	d901      	bls.n	8007a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e01b      	b.n	8007a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	daf2      	bge.n	8007a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f043 0201 	orr.w	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	611a      	str	r2, [r3, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  do
  {
    count++;
<<<<<<< HEAD
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fee:	d901      	bls.n	8007ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e006      	b.n	8008002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d0f0      	beq.n	8007fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <USBD_CDC_Init>:
=======
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a5a:	d901      	bls.n	8007a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e006      	b.n	8007a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d0f0      	beq.n	8007a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <USBD_CDC_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
=======
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
<<<<<<< HEAD
 800801c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008020:	f002 fc8a 	bl	800a938 <USBD_static_malloc>
 8008024:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	32b0      	adds	r2, #176	; 0xb0
 8008036:	2100      	movs	r1, #0
 8008038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800803c:	2302      	movs	r3, #2
 800803e:	e0d4      	b.n	80081ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008040:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008044:	2100      	movs	r1, #0
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f002 fcda 	bl	800aa00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32b0      	adds	r2, #176	; 0xb0
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	32b0      	adds	r2, #176	; 0xb0
 8008066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
=======
 8007a88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a8c:	f002 fc8a 	bl	800a3a4 <USBD_static_malloc>
 8007a90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32b0      	adds	r2, #176	; 0xb0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e0d4      	b.n	8007c56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007aac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f002 fcda 	bl	800a46c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32b0      	adds	r2, #176	; 0xb0
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32b0      	adds	r2, #176	; 0xb0
 8007ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
<<<<<<< HEAD
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7c1b      	ldrb	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d138      	bne.n	80080ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008078:	4b5e      	ldr	r3, [pc, #376]	; (80081f4 <USBD_CDC_Init+0x1e4>)
 800807a:	7819      	ldrb	r1, [r3, #0]
 800807c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008080:	2202      	movs	r2, #2
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f002 fb35 	bl	800a6f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008088:	4b5a      	ldr	r3, [pc, #360]	; (80081f4 <USBD_CDC_Init+0x1e4>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f003 020f 	and.w	r2, r3, #15
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	3324      	adds	r3, #36	; 0x24
 800809e:	2201      	movs	r2, #1
 80080a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080a2:	4b55      	ldr	r3, [pc, #340]	; (80081f8 <USBD_CDC_Init+0x1e8>)
 80080a4:	7819      	ldrb	r1, [r3, #0]
 80080a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080aa:	2202      	movs	r2, #2
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f002 fb20 	bl	800a6f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080b2:	4b51      	ldr	r3, [pc, #324]	; (80081f8 <USBD_CDC_Init+0x1e8>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 020f 	and.w	r2, r3, #15
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080ca:	2201      	movs	r2, #1
 80080cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080ce:	4b4b      	ldr	r3, [pc, #300]	; (80081fc <USBD_CDC_Init+0x1ec>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f003 020f 	and.w	r2, r3, #15
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	3326      	adds	r3, #38	; 0x26
 80080e4:	2210      	movs	r2, #16
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	e035      	b.n	8008156 <USBD_CDC_Init+0x146>
=======
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7c1b      	ldrb	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d138      	bne.n	8007b56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ae4:	4b5e      	ldr	r3, [pc, #376]	; (8007c60 <USBD_CDC_Init+0x1e4>)
 8007ae6:	7819      	ldrb	r1, [r3, #0]
 8007ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aec:	2202      	movs	r2, #2
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f002 fb35 	bl	800a15e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007af4:	4b5a      	ldr	r3, [pc, #360]	; (8007c60 <USBD_CDC_Init+0x1e4>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	f003 020f 	and.w	r2, r3, #15
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	3324      	adds	r3, #36	; 0x24
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b0e:	4b55      	ldr	r3, [pc, #340]	; (8007c64 <USBD_CDC_Init+0x1e8>)
 8007b10:	7819      	ldrb	r1, [r3, #0]
 8007b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b16:	2202      	movs	r2, #2
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 fb20 	bl	800a15e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b1e:	4b51      	ldr	r3, [pc, #324]	; (8007c64 <USBD_CDC_Init+0x1e8>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 020f 	and.w	r2, r3, #15
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b36:	2201      	movs	r2, #1
 8007b38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b3a:	4b4b      	ldr	r3, [pc, #300]	; (8007c68 <USBD_CDC_Init+0x1ec>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 020f 	and.w	r2, r3, #15
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	3326      	adds	r3, #38	; 0x26
 8007b50:	2210      	movs	r2, #16
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e035      	b.n	8007bc2 <USBD_CDC_Init+0x146>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
<<<<<<< HEAD
 80080ea:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <USBD_CDC_Init+0x1e4>)
 80080ec:	7819      	ldrb	r1, [r3, #0]
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	2202      	movs	r2, #2
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f002 fafd 	bl	800a6f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080f8:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <USBD_CDC_Init+0x1e4>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	2201      	movs	r2, #1
 8008110:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008112:	4b39      	ldr	r3, [pc, #228]	; (80081f8 <USBD_CDC_Init+0x1e8>)
 8008114:	7819      	ldrb	r1, [r3, #0]
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	2202      	movs	r2, #2
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f002 fae9 	bl	800a6f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008120:	4b35      	ldr	r3, [pc, #212]	; (80081f8 <USBD_CDC_Init+0x1e8>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	f003 020f 	and.w	r2, r3, #15
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008138:	2201      	movs	r2, #1
 800813a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800813c:	4b2f      	ldr	r3, [pc, #188]	; (80081fc <USBD_CDC_Init+0x1ec>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 020f 	and.w	r2, r3, #15
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	3326      	adds	r3, #38	; 0x26
 8008152:	2210      	movs	r2, #16
 8008154:	801a      	strh	r2, [r3, #0]
=======
 8007b56:	4b42      	ldr	r3, [pc, #264]	; (8007c60 <USBD_CDC_Init+0x1e4>)
 8007b58:	7819      	ldrb	r1, [r3, #0]
 8007b5a:	2340      	movs	r3, #64	; 0x40
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f002 fafd 	bl	800a15e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b64:	4b3e      	ldr	r3, [pc, #248]	; (8007c60 <USBD_CDC_Init+0x1e4>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	f003 020f 	and.w	r2, r3, #15
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	3324      	adds	r3, #36	; 0x24
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b7e:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <USBD_CDC_Init+0x1e8>)
 8007b80:	7819      	ldrb	r1, [r3, #0]
 8007b82:	2340      	movs	r3, #64	; 0x40
 8007b84:	2202      	movs	r2, #2
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f002 fae9 	bl	800a15e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b8c:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <USBD_CDC_Init+0x1e8>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ba8:	4b2f      	ldr	r3, [pc, #188]	; (8007c68 <USBD_CDC_Init+0x1ec>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	3326      	adds	r3, #38	; 0x26
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	801a      	strh	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
<<<<<<< HEAD
 8008156:	4b29      	ldr	r3, [pc, #164]	; (80081fc <USBD_CDC_Init+0x1ec>)
 8008158:	7819      	ldrb	r1, [r3, #0]
 800815a:	2308      	movs	r3, #8
 800815c:	2203      	movs	r2, #3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f002 fac7 	bl	800a6f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008164:	4b25      	ldr	r3, [pc, #148]	; (80081fc <USBD_CDC_Init+0x1ec>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	f003 020f 	and.w	r2, r3, #15
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	440b      	add	r3, r1
 8008178:	3324      	adds	r3, #36	; 0x24
 800817a:	2201      	movs	r2, #1
 800817c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	33b0      	adds	r3, #176	; 0xb0
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80081b4:	2302      	movs	r3, #2
 80081b6:	e018      	b.n	80081ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7c1b      	ldrb	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081c0:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <USBD_CDC_Init+0x1e8>)
 80081c2:	7819      	ldrb	r1, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f002 fb7e 	bl	800a8d0 <USBD_LL_PrepareReceive>
 80081d4:	e008      	b.n	80081e8 <USBD_CDC_Init+0x1d8>
=======
 8007bc2:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <USBD_CDC_Init+0x1ec>)
 8007bc4:	7819      	ldrb	r1, [r3, #0]
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	2203      	movs	r2, #3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f002 fac7 	bl	800a15e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007bd0:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <USBD_CDC_Init+0x1ec>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	3324      	adds	r3, #36	; 0x24
 8007be6:	2201      	movs	r2, #1
 8007be8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	33b0      	adds	r3, #176	; 0xb0
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c20:	2302      	movs	r3, #2
 8007c22:	e018      	b.n	8007c56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7c1b      	ldrb	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <USBD_CDC_Init+0x1e8>)
 8007c2e:	7819      	ldrb	r1, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f002 fb7e 	bl	800a33c <USBD_LL_PrepareReceive>
 8007c40:	e008      	b.n	8007c54 <USBD_CDC_Init+0x1d8>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
<<<<<<< HEAD
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <USBD_CDC_Init+0x1e8>)
 80081d8:	7819      	ldrb	r1, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f002 fb74 	bl	800a8d0 <USBD_LL_PrepareReceive>
=======
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <USBD_CDC_Init+0x1e8>)
 8007c44:	7819      	ldrb	r1, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c4c:	2340      	movs	r3, #64	; 0x40
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fb74 	bl	800a33c <USBD_LL_PrepareReceive>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000093 	.word	0x20000093
 80081f8:	20000094 	.word	0x20000094
 80081fc:	20000095 	.word	0x20000095

08008200 <USBD_CDC_DeInit>:
=======
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000093 	.word	0x20000093
 8007c64:	20000094 	.word	0x20000094
 8007c68:	20000095 	.word	0x20000095

08007c6c <USBD_CDC_DeInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
=======
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
<<<<<<< HEAD
 800820c:	4b3a      	ldr	r3, [pc, #232]	; (80082f8 <USBD_CDC_DeInit+0xf8>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f002 fa93 	bl	800a73e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008218:	4b37      	ldr	r3, [pc, #220]	; (80082f8 <USBD_CDC_DeInit+0xf8>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	f003 020f 	and.w	r2, r3, #15
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	3324      	adds	r3, #36	; 0x24
 800822e:	2200      	movs	r2, #0
 8008230:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008232:	4b32      	ldr	r3, [pc, #200]	; (80082fc <USBD_CDC_DeInit+0xfc>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 fa80 	bl	800a73e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800823e:	4b2f      	ldr	r3, [pc, #188]	; (80082fc <USBD_CDC_DeInit+0xfc>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	f003 020f 	and.w	r2, r3, #15
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008256:	2200      	movs	r2, #0
 8008258:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800825a:	4b29      	ldr	r3, [pc, #164]	; (8008300 <USBD_CDC_DeInit+0x100>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f002 fa6c 	bl	800a73e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008266:	4b26      	ldr	r3, [pc, #152]	; (8008300 <USBD_CDC_DeInit+0x100>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	f003 020f 	and.w	r2, r3, #15
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	3324      	adds	r3, #36	; 0x24
 800827c:	2200      	movs	r2, #0
 800827e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008280:	4b1f      	ldr	r3, [pc, #124]	; (8008300 <USBD_CDC_DeInit+0x100>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 020f 	and.w	r2, r3, #15
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	3326      	adds	r3, #38	; 0x26
 8008296:	2200      	movs	r2, #0
 8008298:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	32b0      	adds	r2, #176	; 0xb0
 80082a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01f      	beq.n	80082ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	33b0      	adds	r3, #176	; 0xb0
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32b0      	adds	r2, #176	; 0xb0
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f002 fb40 	bl	800a954 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	32b0      	adds	r2, #176	; 0xb0
 80082de:	2100      	movs	r1, #0
 80082e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000093 	.word	0x20000093
 80082fc:	20000094 	.word	0x20000094
 8008300:	20000095 	.word	0x20000095

08008304 <USBD_CDC_Setup>:
=======
 8007c78:	4b3a      	ldr	r3, [pc, #232]	; (8007d64 <USBD_CDC_DeInit+0xf8>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f002 fa93 	bl	800a1aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c84:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <USBD_CDC_DeInit+0xf8>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 020f 	and.w	r2, r3, #15
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	3324      	adds	r3, #36	; 0x24
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c9e:	4b32      	ldr	r3, [pc, #200]	; (8007d68 <USBD_CDC_DeInit+0xfc>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 fa80 	bl	800a1aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007caa:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <USBD_CDC_DeInit+0xfc>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f003 020f 	and.w	r2, r3, #15
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007cc6:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <USBD_CDC_DeInit+0x100>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f002 fa6c 	bl	800a1aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007cd2:	4b26      	ldr	r3, [pc, #152]	; (8007d6c <USBD_CDC_DeInit+0x100>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 020f 	and.w	r2, r3, #15
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	2200      	movs	r2, #0
 8007cea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cec:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <USBD_CDC_DeInit+0x100>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	f003 020f 	and.w	r2, r3, #15
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	3326      	adds	r3, #38	; 0x26
 8007d02:	2200      	movs	r2, #0
 8007d04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	32b0      	adds	r2, #176	; 0xb0
 8007d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01f      	beq.n	8007d58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	33b0      	adds	r3, #176	; 0xb0
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	32b0      	adds	r2, #176	; 0xb0
 8007d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f002 fb40 	bl	800a3c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	32b0      	adds	r2, #176	; 0xb0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000093 	.word	0x20000093
 8007d68:	20000094 	.word	0x20000094
 8007d6c:	20000095 	.word	0x20000095

08007d70 <USBD_CDC_Setup>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	32b0      	adds	r2, #176	; 0xb0
 8008318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008330:	2303      	movs	r3, #3
 8008332:	e0bf      	b.n	80084b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800833c:	2b00      	cmp	r3, #0
 800833e:	d050      	beq.n	80083e2 <USBD_CDC_Setup+0xde>
 8008340:	2b20      	cmp	r3, #32
 8008342:	f040 80af 	bne.w	80084a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	88db      	ldrh	r3, [r3, #6]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d03a      	beq.n	80083c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b25b      	sxtb	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	da1b      	bge.n	8008390 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	33b0      	adds	r3, #176	; 0xb0
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800836e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	88d2      	ldrh	r2, [r2, #6]
 8008374:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	88db      	ldrh	r3, [r3, #6]
 800837a:	2b07      	cmp	r3, #7
 800837c:	bf28      	it	cs
 800837e:	2307      	movcs	r3, #7
 8008380:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	89fa      	ldrh	r2, [r7, #14]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 fd89 	bl	8009ea0 <USBD_CtlSendData>
=======
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	32b0      	adds	r2, #176	; 0xb0
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e0bf      	b.n	8007f20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d050      	beq.n	8007e4e <USBD_CDC_Setup+0xde>
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	f040 80af 	bne.w	8007f10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d03a      	beq.n	8007e30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b25b      	sxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da1b      	bge.n	8007dfc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	33b0      	adds	r3, #176	; 0xb0
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007dda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	88d2      	ldrh	r2, [r2, #6]
 8007de0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b07      	cmp	r3, #7
 8007de8:	bf28      	it	cs
 8007dea:	2307      	movcs	r3, #7
 8007dec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	89fa      	ldrh	r2, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 fd89 	bl	800990c <USBD_CtlSendData>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
<<<<<<< HEAD
 800838e:	e090      	b.n	80084b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785a      	ldrb	r2, [r3, #1]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	88db      	ldrh	r3, [r3, #6]
 800839e:	2b3f      	cmp	r3, #63	; 0x3f
 80083a0:	d803      	bhi.n	80083aa <USBD_CDC_Setup+0xa6>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	88db      	ldrh	r3, [r3, #6]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	e000      	b.n	80083ac <USBD_CDC_Setup+0xa8>
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083b2:	6939      	ldr	r1, [r7, #16]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80083ba:	461a      	mov	r2, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 fd9b 	bl	8009ef8 <USBD_CtlPrepareRx>
      break;
 80083c2:	e076      	b.n	80084b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	33b0      	adds	r3, #176	; 0xb0
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	7850      	ldrb	r0, [r2, #1]
 80083da:	2200      	movs	r2, #0
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	4798      	blx	r3
      break;
 80083e0:	e067      	b.n	80084b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b0b      	cmp	r3, #11
 80083e8:	d851      	bhi.n	800848e <USBD_CDC_Setup+0x18a>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <USBD_CDC_Setup+0xec>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008421 	.word	0x08008421
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800848f 	.word	0x0800848f
 80083fc:	0800848f 	.word	0x0800848f
 8008400:	0800848f 	.word	0x0800848f
 8008404:	0800848f 	.word	0x0800848f
 8008408:	0800848f 	.word	0x0800848f
 800840c:	0800848f 	.word	0x0800848f
 8008410:	0800848f 	.word	0x0800848f
 8008414:	0800848f 	.word	0x0800848f
 8008418:	0800844b 	.word	0x0800844b
 800841c:	08008475 	.word	0x08008475
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b03      	cmp	r3, #3
 800842a:	d107      	bne.n	800843c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800842c:	f107 030a 	add.w	r3, r7, #10
 8008430:	2202      	movs	r2, #2
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fd33 	bl	8009ea0 <USBD_CtlSendData>
=======
 8007dfa:	e090      	b.n	8007f1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	785a      	ldrb	r2, [r3, #1]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8007e0c:	d803      	bhi.n	8007e16 <USBD_CDC_Setup+0xa6>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	e000      	b.n	8007e18 <USBD_CDC_Setup+0xa8>
 8007e16:	2240      	movs	r2, #64	; 0x40
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e1e:	6939      	ldr	r1, [r7, #16]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e26:	461a      	mov	r2, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fd9b 	bl	8009964 <USBD_CtlPrepareRx>
      break;
 8007e2e:	e076      	b.n	8007f1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	33b0      	adds	r3, #176	; 0xb0
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	7850      	ldrb	r0, [r2, #1]
 8007e46:	2200      	movs	r2, #0
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	4798      	blx	r3
      break;
 8007e4c:	e067      	b.n	8007f1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	2b0b      	cmp	r3, #11
 8007e54:	d851      	bhi.n	8007efa <USBD_CDC_Setup+0x18a>
 8007e56:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBD_CDC_Setup+0xec>)
 8007e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5c:	08007e8d 	.word	0x08007e8d
 8007e60:	08007f09 	.word	0x08007f09
 8007e64:	08007efb 	.word	0x08007efb
 8007e68:	08007efb 	.word	0x08007efb
 8007e6c:	08007efb 	.word	0x08007efb
 8007e70:	08007efb 	.word	0x08007efb
 8007e74:	08007efb 	.word	0x08007efb
 8007e78:	08007efb 	.word	0x08007efb
 8007e7c:	08007efb 	.word	0x08007efb
 8007e80:	08007efb 	.word	0x08007efb
 8007e84:	08007eb7 	.word	0x08007eb7
 8007e88:	08007ee1 	.word	0x08007ee1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d107      	bne.n	8007ea8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e98:	f107 030a 	add.w	r3, r7, #10
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 fd33 	bl	800990c <USBD_CtlSendData>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 800843a:	e032      	b.n	80084a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fcbd 	bl	8009dbe <USBD_CtlError>
            ret = USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	75fb      	strb	r3, [r7, #23]
          break;
 8008448:	e02b      	b.n	80084a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d107      	bne.n	8008466 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008456:	f107 030d 	add.w	r3, r7, #13
 800845a:	2201      	movs	r2, #1
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fd1e 	bl	8009ea0 <USBD_CtlSendData>
=======
 8007ea6:	e032      	b.n	8007f0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fcbd 	bl	800982a <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb4:	e02b      	b.n	8007f0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d107      	bne.n	8007ed2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ec2:	f107 030d 	add.w	r3, r7, #13
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 fd1e 	bl	800990c <USBD_CtlSendData>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 8008464:	e01d      	b.n	80084a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 fca8 	bl	8009dbe <USBD_CtlError>
            ret = USBD_FAIL;
 800846e:	2303      	movs	r3, #3
 8008470:	75fb      	strb	r3, [r7, #23]
          break;
 8008472:	e016      	b.n	80084a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b03      	cmp	r3, #3
 800847e:	d00f      	beq.n	80084a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 fc9b 	bl	8009dbe <USBD_CtlError>
            ret = USBD_FAIL;
 8008488:	2303      	movs	r3, #3
 800848a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800848c:	e008      	b.n	80084a0 <USBD_CDC_Setup+0x19c>
=======
 8007ed0:	e01d      	b.n	8007f0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fca8 	bl	800982a <USBD_CtlError>
            ret = USBD_FAIL;
 8007eda:	2303      	movs	r3, #3
 8007edc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ede:	e016      	b.n	8007f0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d00f      	beq.n	8007f0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fc9b 	bl	800982a <USBD_CtlError>
            ret = USBD_FAIL;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ef8:	e008      	b.n	8007f0c <USBD_CDC_Setup+0x19c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fc94 	bl	8009dbe <USBD_CtlError>
          ret = USBD_FAIL;
 8008496:	2303      	movs	r3, #3
 8008498:	75fb      	strb	r3, [r7, #23]
          break;
 800849a:	e002      	b.n	80084a2 <USBD_CDC_Setup+0x19e>
          break;
 800849c:	bf00      	nop
 800849e:	e008      	b.n	80084b2 <USBD_CDC_Setup+0x1ae>
          break;
 80084a0:	bf00      	nop
      }
      break;
 80084a2:	e006      	b.n	80084b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fc89 	bl	8009dbe <USBD_CtlError>
      ret = USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	75fb      	strb	r3, [r7, #23]
      break;
 80084b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_CDC_DataIn>:
=======
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fc94 	bl	800982a <USBD_CtlError>
          ret = USBD_FAIL;
 8007f02:	2303      	movs	r3, #3
 8007f04:	75fb      	strb	r3, [r7, #23]
          break;
 8007f06:	e002      	b.n	8007f0e <USBD_CDC_Setup+0x19e>
          break;
 8007f08:	bf00      	nop
 8007f0a:	e008      	b.n	8007f1e <USBD_CDC_Setup+0x1ae>
          break;
 8007f0c:	bf00      	nop
      }
      break;
 8007f0e:	e006      	b.n	8007f1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fc89 	bl	800982a <USBD_CtlError>
      ret = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_CDC_DataIn>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	32b0      	adds	r2, #176	; 0xb0
 80084da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e065      	b.n	80085b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32b0      	adds	r2, #176	; 0xb0
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	3318      	adds	r3, #24
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02f      	beq.n	8008570 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	f003 020f 	and.w	r2, r3, #15
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	3318      	adds	r3, #24
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 010f 	and.w	r1, r3, #15
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	460b      	mov	r3, r1
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	440b      	add	r3, r1
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4403      	add	r3, r0
 8008538:	331c      	adds	r3, #28
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008546:	2b00      	cmp	r3, #0
 8008548:	d112      	bne.n	8008570 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	f003 020f 	and.w	r2, r3, #15
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	3318      	adds	r3, #24
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008562:	78f9      	ldrb	r1, [r7, #3]
 8008564:	2300      	movs	r3, #0
 8008566:	2200      	movs	r2, #0
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f002 f990 	bl	800a88e <USBD_LL_Transmit>
 800856e:	e01f      	b.n	80085b0 <USBD_CDC_DataIn+0xf4>
=======
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32b0      	adds	r2, #176	; 0xb0
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e065      	b.n	800801e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	32b0      	adds	r2, #176	; 0xb0
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	f003 020f 	and.w	r2, r3, #15
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	3318      	adds	r3, #24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02f      	beq.n	8007fdc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	f003 020f 	and.w	r2, r3, #15
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	3318      	adds	r3, #24
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	f003 010f 	and.w	r1, r3, #15
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	440b      	add	r3, r1
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4403      	add	r3, r0
 8007fa4:	331c      	adds	r3, #28
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d112      	bne.n	8007fdc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	f003 020f 	and.w	r2, r3, #15
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3318      	adds	r3, #24
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fce:	78f9      	ldrb	r1, [r7, #3]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f002 f990 	bl	800a2fa <USBD_LL_Transmit>
 8007fda:	e01f      	b.n	800801c <USBD_CDC_DataIn+0xf4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    hcdc->TxState = 0U;
<<<<<<< HEAD
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	33b0      	adds	r3, #176	; 0xb0
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d010      	beq.n	80085b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	33b0      	adds	r3, #176	; 0xb0
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	4798      	blx	r3
=======
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	33b0      	adds	r3, #176	; 0xb0
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d010      	beq.n	800801c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	33b0      	adds	r3, #176	; 0xb0
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_CDC_DataOut>:
=======
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_CDC_DataOut>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	32b0      	adds	r2, #176	; 0xb0
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	32b0      	adds	r2, #176	; 0xb0
 80085e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e01a      	b.n	8008622 <USBD_CDC_DataOut+0x68>
=======
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	32b0      	adds	r2, #176	; 0xb0
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	32b0      	adds	r2, #176	; 0xb0
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008054:	2303      	movs	r3, #3
 8008056:	e01a      	b.n	800808e <USBD_CDC_DataOut+0x68>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
<<<<<<< HEAD
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f002 f98e 	bl	800a912 <USBD_LL_GetRxDataSize>
 80085f6:	4602      	mov	r2, r0
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 f98e 	bl	800a37e <USBD_LL_GetRxDataSize>
 8008062:	4602      	mov	r2, r0
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
<<<<<<< HEAD
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	33b0      	adds	r3, #176	; 0xb0
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800861c:	4611      	mov	r1, r2
 800861e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_CDC_EP0_RxReady>:
=======
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	33b0      	adds	r3, #176	; 0xb0
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008088:	4611      	mov	r1, r2
 800808a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_CDC_EP0_RxReady>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	32b0      	adds	r2, #176	; 0xb0
 800863c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008640:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	e025      	b.n	8008698 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	33b0      	adds	r3, #176	; 0xb0
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01a      	beq.n	8008696 <USBD_CDC_EP0_RxReady+0x6c>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008666:	2bff      	cmp	r3, #255	; 0xff
 8008668:	d015      	beq.n	8008696 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	33b0      	adds	r3, #176	; 0xb0
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008682:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800868a:	b292      	uxth	r2, r2
 800868c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	22ff      	movs	r2, #255	; 0xff
 8008692:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_CDC_GetFSCfgDesc>:
=======
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	32b0      	adds	r2, #176	; 0xb0
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e025      	b.n	8008104 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	33b0      	adds	r3, #176	; 0xb0
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01a      	beq.n	8008102 <USBD_CDC_EP0_RxReady+0x6c>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080d2:	2bff      	cmp	r3, #255	; 0xff
 80080d4:	d015      	beq.n	8008102 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	33b0      	adds	r3, #176	; 0xb0
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80080ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080f6:	b292      	uxth	r2, r2
 80080f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_CDC_GetFSCfgDesc>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086a8:	2182      	movs	r1, #130	; 0x82
 80086aa:	4818      	ldr	r0, [pc, #96]	; (800870c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086ac:	f000 fd4f 	bl	800914e <USBD_GetEpDesc>
 80086b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086b2:	2101      	movs	r1, #1
 80086b4:	4815      	ldr	r0, [pc, #84]	; (800870c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086b6:	f000 fd4a 	bl	800914e <USBD_GetEpDesc>
 80086ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086bc:	2181      	movs	r1, #129	; 0x81
 80086be:	4813      	ldr	r0, [pc, #76]	; (800870c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086c0:	f000 fd45 	bl	800914e <USBD_GetEpDesc>
 80086c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2210      	movs	r2, #16
 80086d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d006      	beq.n	80086e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2200      	movs	r2, #0
 80086dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086e0:	711a      	strb	r2, [r3, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d006      	beq.n	80086fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086f4:	711a      	strb	r2, [r3, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2243      	movs	r2, #67	; 0x43
 80086fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000050 	.word	0x20000050

08008710 <USBD_CDC_GetHSCfgDesc>:
=======
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008114:	2182      	movs	r1, #130	; 0x82
 8008116:	4818      	ldr	r0, [pc, #96]	; (8008178 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008118:	f000 fd4f 	bl	8008bba <USBD_GetEpDesc>
 800811c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800811e:	2101      	movs	r1, #1
 8008120:	4815      	ldr	r0, [pc, #84]	; (8008178 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008122:	f000 fd4a 	bl	8008bba <USBD_GetEpDesc>
 8008126:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008128:	2181      	movs	r1, #129	; 0x81
 800812a:	4813      	ldr	r0, [pc, #76]	; (8008178 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800812c:	f000 fd45 	bl	8008bba <USBD_GetEpDesc>
 8008130:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2210      	movs	r2, #16
 800813c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d006      	beq.n	8008152 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2200      	movs	r2, #0
 8008148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800814c:	711a      	strb	r2, [r3, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d006      	beq.n	8008166 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008160:	711a      	strb	r2, [r3, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2243      	movs	r2, #67	; 0x43
 800816a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000050 	.word	0x20000050

0800817c <USBD_CDC_GetHSCfgDesc>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008718:	2182      	movs	r1, #130	; 0x82
 800871a:	4818      	ldr	r0, [pc, #96]	; (800877c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800871c:	f000 fd17 	bl	800914e <USBD_GetEpDesc>
 8008720:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008722:	2101      	movs	r1, #1
 8008724:	4815      	ldr	r0, [pc, #84]	; (800877c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008726:	f000 fd12 	bl	800914e <USBD_GetEpDesc>
 800872a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800872c:	2181      	movs	r1, #129	; 0x81
 800872e:	4813      	ldr	r0, [pc, #76]	; (800877c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008730:	f000 fd0d 	bl	800914e <USBD_GetEpDesc>
 8008734:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2210      	movs	r2, #16
 8008740:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d006      	beq.n	8008756 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2200      	movs	r2, #0
 800874c:	711a      	strb	r2, [r3, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f042 0202 	orr.w	r2, r2, #2
 8008754:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d006      	beq.n	800876a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	711a      	strb	r2, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f042 0202 	orr.w	r2, r2, #2
 8008768:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2243      	movs	r2, #67	; 0x43
 800876e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000050 	.word	0x20000050

08008780 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008184:	2182      	movs	r1, #130	; 0x82
 8008186:	4818      	ldr	r0, [pc, #96]	; (80081e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008188:	f000 fd17 	bl	8008bba <USBD_GetEpDesc>
 800818c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800818e:	2101      	movs	r1, #1
 8008190:	4815      	ldr	r0, [pc, #84]	; (80081e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008192:	f000 fd12 	bl	8008bba <USBD_GetEpDesc>
 8008196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008198:	2181      	movs	r1, #129	; 0x81
 800819a:	4813      	ldr	r0, [pc, #76]	; (80081e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800819c:	f000 fd0d 	bl	8008bba <USBD_GetEpDesc>
 80081a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2210      	movs	r2, #16
 80081ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d006      	beq.n	80081c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2200      	movs	r2, #0
 80081b8:	711a      	strb	r2, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f042 0202 	orr.w	r2, r2, #2
 80081c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d006      	beq.n	80081d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	711a      	strb	r2, [r3, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f042 0202 	orr.w	r2, r2, #2
 80081d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2243      	movs	r2, #67	; 0x43
 80081da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081dc:	4b02      	ldr	r3, [pc, #8]	; (80081e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000050 	.word	0x20000050

080081ec <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008788:	2182      	movs	r1, #130	; 0x82
 800878a:	4818      	ldr	r0, [pc, #96]	; (80087ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800878c:	f000 fcdf 	bl	800914e <USBD_GetEpDesc>
 8008790:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008792:	2101      	movs	r1, #1
 8008794:	4815      	ldr	r0, [pc, #84]	; (80087ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008796:	f000 fcda 	bl	800914e <USBD_GetEpDesc>
 800879a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800879c:	2181      	movs	r1, #129	; 0x81
 800879e:	4813      	ldr	r0, [pc, #76]	; (80087ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087a0:	f000 fcd5 	bl	800914e <USBD_GetEpDesc>
 80087a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2210      	movs	r2, #16
 80087b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d006      	beq.n	80087c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c0:	711a      	strb	r2, [r3, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d006      	beq.n	80087da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d4:	711a      	strb	r2, [r3, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2243      	movs	r2, #67	; 0x43
 80087de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000050 	.word	0x20000050

080087f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081f4:	2182      	movs	r1, #130	; 0x82
 80081f6:	4818      	ldr	r0, [pc, #96]	; (8008258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081f8:	f000 fcdf 	bl	8008bba <USBD_GetEpDesc>
 80081fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081fe:	2101      	movs	r1, #1
 8008200:	4815      	ldr	r0, [pc, #84]	; (8008258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008202:	f000 fcda 	bl	8008bba <USBD_GetEpDesc>
 8008206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008208:	2181      	movs	r1, #129	; 0x81
 800820a:	4813      	ldr	r0, [pc, #76]	; (8008258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800820c:	f000 fcd5 	bl	8008bba <USBD_GetEpDesc>
 8008210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2210      	movs	r2, #16
 800821c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d006      	beq.n	8008232 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2200      	movs	r2, #0
 8008228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800822c:	711a      	strb	r2, [r3, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008240:	711a      	strb	r2, [r3, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2243      	movs	r2, #67	; 0x43
 800824a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000050 	.word	0x20000050

0800825c <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< HEAD
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	220a      	movs	r2, #10
 80087fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000000c 	.word	0x2000000c

08008810 <USBD_CDC_RegisterInterface>:
=======
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	220a      	movs	r2, #10
 8008268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800826a:	4b03      	ldr	r3, [pc, #12]	; (8008278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	2000000c 	.word	0x2000000c

0800827c <USBD_CDC_RegisterInterface>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	e009      	b.n	8008838 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	33b0      	adds	r3, #176	; 0xb0
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <USBD_CDC_SetTxBuffer>:
=======
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	e009      	b.n	80082a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	33b0      	adds	r3, #176	; 0xb0
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USBD_CDC_SetTxBuffer>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
<<<<<<< HEAD
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	32b0      	adds	r2, #176	; 0xb0
 800885a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008866:	2303      	movs	r3, #3
 8008868:	e008      	b.n	800887c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_CDC_SetRxBuffer>:
=======
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	32b0      	adds	r2, #176	; 0xb0
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e008      	b.n	80082e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USBD_CDC_SetRxBuffer>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
<<<<<<< HEAD
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	32b0      	adds	r2, #176	; 0xb0
 800889c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e004      	b.n	80088b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
	...

080088c4 <USBD_CDC_TransmitPacket>:
=======
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32b0      	adds	r2, #176	; 0xb0
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	e004      	b.n	8008322 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
	...

08008330 <USBD_CDC_TransmitPacket>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	32b0      	adds	r2, #176	; 0xb0
 80088d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
=======
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32b0      	adds	r2, #176	; 0xb0
 8008342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008346:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
<<<<<<< HEAD
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e025      	b.n	8008936 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d11f      	bne.n	8008934 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <USBD_CDC_TransmitPacket+0x7c>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 020f 	and.w	r2, r3, #15
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4403      	add	r3, r0
 8008916:	3318      	adds	r3, #24
 8008918:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <USBD_CDC_TransmitPacket+0x7c>)
 800891c:	7819      	ldrb	r1, [r3, #0]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 ffaf 	bl	800a88e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000093 	.word	0x20000093

08008944 <USBD_CDC_ReceivePacket>:
=======
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008352:	2303      	movs	r3, #3
 8008354:	e025      	b.n	80083a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800835c:	2b00      	cmp	r3, #0
 800835e:	d11f      	bne.n	80083a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2201      	movs	r2, #1
 8008364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <USBD_CDC_TransmitPacket+0x7c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	f003 020f 	and.w	r2, r3, #15
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4403      	add	r3, r0
 8008382:	3318      	adds	r3, #24
 8008384:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008386:	4b09      	ldr	r3, [pc, #36]	; (80083ac <USBD_CDC_TransmitPacket+0x7c>)
 8008388:	7819      	ldrb	r1, [r3, #0]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 ffaf 	bl	800a2fa <USBD_LL_Transmit>

    ret = USBD_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000093 	.word	0x20000093

080083b0 <USBD_CDC_ReceivePacket>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32b0      	adds	r2, #176	; 0xb0
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	60fb      	str	r3, [r7, #12]
=======
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	32b0      	adds	r2, #176	; 0xb0
 80083c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c6:	60fb      	str	r3, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
<<<<<<< HEAD
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	32b0      	adds	r2, #176	; 0xb0
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800896e:	2303      	movs	r3, #3
 8008970:	e018      	b.n	80089a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7c1b      	ldrb	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10a      	bne.n	8008990 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800897a:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <USBD_CDC_ReceivePacket+0x68>)
 800897c:	7819      	ldrb	r1, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 ffa1 	bl	800a8d0 <USBD_LL_PrepareReceive>
 800898e:	e008      	b.n	80089a2 <USBD_CDC_ReceivePacket+0x5e>
=======
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	32b0      	adds	r2, #176	; 0xb0
 80083d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80083da:	2303      	movs	r3, #3
 80083dc:	e018      	b.n	8008410 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7c1b      	ldrb	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <USBD_CDC_ReceivePacket+0x68>)
 80083e8:	7819      	ldrb	r1, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 ffa1 	bl	800a33c <USBD_LL_PrepareReceive>
 80083fa:	e008      	b.n	800840e <USBD_CDC_ReceivePacket+0x5e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
<<<<<<< HEAD
 8008990:	4b06      	ldr	r3, [pc, #24]	; (80089ac <USBD_CDC_ReceivePacket+0x68>)
 8008992:	7819      	ldrb	r1, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 ff97 	bl	800a8d0 <USBD_LL_PrepareReceive>
=======
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <USBD_CDC_ReceivePacket+0x68>)
 80083fe:	7819      	ldrb	r1, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008406:	2340      	movs	r3, #64	; 0x40
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 ff97 	bl	800a33c <USBD_LL_PrepareReceive>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000094 	.word	0x20000094

080089b0 <USBD_Init>:
=======
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20000094 	.word	0x20000094

0800841c <USBD_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	71fb      	strb	r3, [r7, #7]
=======
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< HEAD
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <USBD_Init+0x18>
=======
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <USBD_Init+0x18>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
<<<<<<< HEAD
 80089c4:	2303      	movs	r3, #3
 80089c6:	e01f      	b.n	8008a08 <USBD_Init+0x58>
=======
 8008430:	2303      	movs	r3, #3
 8008432:	e01f      	b.n	8008474 <USBD_Init+0x58>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
<<<<<<< HEAD
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
=======
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	79fa      	ldrb	r2, [r7, #7]
 80089fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f001 fe11 	bl	800a624 <USBD_LL_Init>
 8008a02:	4603      	mov	r3, r0
 8008a04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_RegisterClass>:
=======
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	79fa      	ldrb	r2, [r7, #7]
 8008466:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f001 fe11 	bl	800a090 <USBD_LL_Init>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008472:	7dfb      	ldrb	r3, [r7, #23]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_RegisterClass>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_RegisterClass+0x18>
=======
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <USBD_RegisterClass+0x18>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
<<<<<<< HEAD
 8008a24:	2303      	movs	r3, #3
 8008a26:	e025      	b.n	8008a74 <USBD_RegisterClass+0x64>
=======
 8008490:	2303      	movs	r3, #3
 8008492:	e025      	b.n	80084e0 <USBD_RegisterClass+0x64>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
<<<<<<< HEAD
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
=======
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
<<<<<<< HEAD
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32ae      	adds	r2, #174	; 0xae
 8008a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00f      	beq.n	8008a64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	32ae      	adds	r2, #174	; 0xae
 8008a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	f107 020e 	add.w	r2, r7, #14
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
=======
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32ae      	adds	r2, #174	; 0xae
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00f      	beq.n	80084d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32ae      	adds	r2, #174	; 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	f107 020e 	add.w	r2, r7, #14
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	4602      	mov	r2, r0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
<<<<<<< HEAD
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_Start>:
=======
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_Start>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
=======
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
<<<<<<< HEAD
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 fe19 	bl	800a6bc <USBD_LL_Start>
 8008a8a:	4603      	mov	r3, r0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_RunTestMode>:
=======
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 fe19 	bl	800a128 <USBD_LL_Start>
 80084f6:	4603      	mov	r3, r0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_RunTestMode>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
=======
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 8008a9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USBD_SetClassConfig>:
=======
 8008508:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USBD_SetClassConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]
=======
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]
=======
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	78fa      	ldrb	r2, [r7, #3]
 800853a:	4611      	mov	r1, r2
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< HEAD
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_ClrClassConfig>:
=======
 8008544:	7bfb      	ldrb	r3, [r7, #15]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_ClrClassConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
=======
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
<<<<<<< HEAD
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	4611      	mov	r1, r2
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	73fb      	strb	r3, [r7, #15]
=======
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< HEAD
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBD_LL_SetupStage>:
=======
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_LL_SetupStage>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 f90e 	bl	8009d4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b4a:	f003 031f 	and.w	r3, r3, #31
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d01a      	beq.n	8008b88 <USBD_LL_SetupStage+0x72>
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d822      	bhi.n	8008b9c <USBD_LL_SetupStage+0x86>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <USBD_LL_SetupStage+0x4a>
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d00a      	beq.n	8008b74 <USBD_LL_SetupStage+0x5e>
 8008b5e:	e01d      	b.n	8008b9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fb65 	bl	8009238 <USBD_StdDevReq>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
      break;
 8008b72:	e020      	b.n	8008bb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fbcd 	bl	800931c <USBD_StdItfReq>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]
      break;
 8008b86:	e016      	b.n	8008bb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc2f 	bl	80093f4 <USBD_StdEPReq>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
      break;
 8008b9a:	e00c      	b.n	8008bb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 fde6 	bl	800a77c <USBD_LL_StallEP>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb4:	bf00      	nop
  }

  return ret;
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_LL_DataOutStage>:
=======
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f001 f90e 	bl	80097b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085b6:	f003 031f 	and.w	r3, r3, #31
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d01a      	beq.n	80085f4 <USBD_LL_SetupStage+0x72>
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d822      	bhi.n	8008608 <USBD_LL_SetupStage+0x86>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <USBD_LL_SetupStage+0x4a>
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d00a      	beq.n	80085e0 <USBD_LL_SetupStage+0x5e>
 80085ca:	e01d      	b.n	8008608 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fb65 	bl	8008ca4 <USBD_StdDevReq>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
      break;
 80085de:	e020      	b.n	8008622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fbcd 	bl	8008d88 <USBD_StdItfReq>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73fb      	strb	r3, [r7, #15]
      break;
 80085f2:	e016      	b.n	8008622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fc2f 	bl	8008e60 <USBD_StdEPReq>
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]
      break;
 8008606:	e00c      	b.n	8008622 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800860e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008612:	b2db      	uxtb	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fde6 	bl	800a1e8 <USBD_LL_StallEP>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
      break;
 8008620:	bf00      	nop
  }

  return ret;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_DataOutStage>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d16e      	bne.n	8008cb6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008bde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	f040 8098 	bne.w	8008d1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d913      	bls.n	8008c20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bf28      	it	cs
 8008c12:	4613      	movcs	r3, r2
 8008c14:	461a      	mov	r2, r3
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 f98a 	bl	8009f32 <USBD_CtlContinueRx>
 8008c1e:	e07d      	b.n	8008d1c <USBD_LL_DataOutStage+0x15c>
=======
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	460b      	mov	r3, r1
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d16e      	bne.n	8008722 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800864a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008652:	2b03      	cmp	r3, #3
 8008654:	f040 8098 	bne.w	8008788 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	429a      	cmp	r2, r3
 8008662:	d913      	bls.n	800868c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	1ad2      	subs	r2, r2, r3
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4293      	cmp	r3, r2
 800867c:	bf28      	it	cs
 800867e:	4613      	movcs	r3, r2
 8008680:	461a      	mov	r2, r3
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f001 f98a 	bl	800999e <USBD_CtlContinueRx>
 800868a:	e07d      	b.n	8008788 <USBD_LL_DataOutStage+0x15c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
<<<<<<< HEAD
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c26:	f003 031f 	and.w	r3, r3, #31
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d014      	beq.n	8008c58 <USBD_LL_DataOutStage+0x98>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d81d      	bhi.n	8008c6e <USBD_LL_DataOutStage+0xae>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <USBD_LL_DataOutStage+0x7c>
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d003      	beq.n	8008c42 <USBD_LL_DataOutStage+0x82>
 8008c3a:	e018      	b.n	8008c6e <USBD_LL_DataOutStage+0xae>
=======
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	2b02      	cmp	r3, #2
 8008698:	d014      	beq.n	80086c4 <USBD_LL_DataOutStage+0x98>
 800869a:	2b02      	cmp	r3, #2
 800869c:	d81d      	bhi.n	80086da <USBD_LL_DataOutStage+0xae>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <USBD_LL_DataOutStage+0x7c>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d003      	beq.n	80086ae <USBD_LL_DataOutStage+0x82>
 80086a6:	e018      	b.n	80086da <USBD_LL_DataOutStage+0xae>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
<<<<<<< HEAD
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	75bb      	strb	r3, [r7, #22]
            break;
 8008c40:	e018      	b.n	8008c74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fa64 	bl	800911a <USBD_CoreFindIF>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75bb      	strb	r3, [r7, #22]
            break;
 8008c56:	e00d      	b.n	8008c74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	4619      	mov	r1, r3
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 fa66 	bl	8009134 <USBD_CoreFindEP>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75bb      	strb	r3, [r7, #22]
            break;
 8008c6c:	e002      	b.n	8008c74 <USBD_LL_DataOutStage+0xb4>
=======
 80086a8:	2300      	movs	r3, #0
 80086aa:	75bb      	strb	r3, [r7, #22]
            break;
 80086ac:	e018      	b.n	80086e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	4619      	mov	r1, r3
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fa64 	bl	8008b86 <USBD_CoreFindIF>
 80086be:	4603      	mov	r3, r0
 80086c0:	75bb      	strb	r3, [r7, #22]
            break;
 80086c2:	e00d      	b.n	80086e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	4619      	mov	r1, r3
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 fa66 	bl	8008ba0 <USBD_CoreFindEP>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75bb      	strb	r3, [r7, #22]
            break;
 80086d8:	e002      	b.n	80086e0 <USBD_LL_DataOutStage+0xb4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
<<<<<<< HEAD
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75bb      	strb	r3, [r7, #22]
            break;
 8008c72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c74:	7dbb      	ldrb	r3, [r7, #22]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d119      	bne.n	8008cae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d113      	bne.n	8008cae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c86:	7dba      	ldrb	r2, [r7, #22]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	32ae      	adds	r2, #174	; 0xae
 8008c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c96:	7dba      	ldrb	r2, [r7, #22]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c9e:	7dba      	ldrb	r2, [r7, #22]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	32ae      	adds	r2, #174	; 0xae
 8008ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	4798      	blx	r3
=======
 80086da:	2300      	movs	r3, #0
 80086dc:	75bb      	strb	r3, [r7, #22]
            break;
 80086de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80086e0:	7dbb      	ldrb	r3, [r7, #22]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d119      	bne.n	800871a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d113      	bne.n	800871a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80086f2:	7dba      	ldrb	r2, [r7, #22]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	32ae      	adds	r2, #174	; 0xae
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008702:	7dba      	ldrb	r2, [r7, #22]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800870a:	7dba      	ldrb	r2, [r7, #22]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	32ae      	adds	r2, #174	; 0xae
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f001 f950 	bl	8009f54 <USBD_CtlSendStatus>
 8008cb4:	e032      	b.n	8008d1c <USBD_LL_DataOutStage+0x15c>
=======
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f001 f950 	bl	80099c0 <USBD_CtlSendStatus>
 8008720:	e032      	b.n	8008788 <USBD_LL_DataOutStage+0x15c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
<<<<<<< HEAD
 8008cb6:	7afb      	ldrb	r3, [r7, #11]
 8008cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fa37 	bl	8009134 <USBD_CoreFindEP>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cca:	7dbb      	ldrb	r3, [r7, #22]
 8008ccc:	2bff      	cmp	r3, #255	; 0xff
 8008cce:	d025      	beq.n	8008d1c <USBD_LL_DataOutStage+0x15c>
 8008cd0:	7dbb      	ldrb	r3, [r7, #22]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d122      	bne.n	8008d1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d117      	bne.n	8008d12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ce2:	7dba      	ldrb	r2, [r7, #22]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	32ae      	adds	r2, #174	; 0xae
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00f      	beq.n	8008d12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008cf2:	7dba      	ldrb	r2, [r7, #22]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008cfa:	7dba      	ldrb	r2, [r7, #22]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	32ae      	adds	r2, #174	; 0xae
 8008d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	7afa      	ldrb	r2, [r7, #11]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	4798      	blx	r3
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	e000      	b.n	8008d1e <USBD_LL_DataOutStage+0x15e>
=======
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008728:	b2db      	uxtb	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fa37 	bl	8008ba0 <USBD_CoreFindEP>
 8008732:	4603      	mov	r3, r0
 8008734:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008736:	7dbb      	ldrb	r3, [r7, #22]
 8008738:	2bff      	cmp	r3, #255	; 0xff
 800873a:	d025      	beq.n	8008788 <USBD_LL_DataOutStage+0x15c>
 800873c:	7dbb      	ldrb	r3, [r7, #22]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d122      	bne.n	8008788 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b03      	cmp	r3, #3
 800874c:	d117      	bne.n	800877e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800874e:	7dba      	ldrb	r2, [r7, #22]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	32ae      	adds	r2, #174	; 0xae
 8008754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800875e:	7dba      	ldrb	r2, [r7, #22]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008766:	7dba      	ldrb	r2, [r7, #22]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	32ae      	adds	r2, #174	; 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	7afa      	ldrb	r2, [r7, #11]
 8008774:	4611      	mov	r1, r2
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	4798      	blx	r3
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	e000      	b.n	800878a <USBD_LL_DataOutStage+0x15e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_DataInStage>:
=======
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_LL_DataInStage>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	72fb      	strb	r3, [r7, #11]
=======
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	460b      	mov	r3, r1
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	72fb      	strb	r3, [r7, #11]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
<<<<<<< HEAD
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d16f      	bne.n	8008e1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d15a      	bne.n	8008e00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d914      	bls.n	8008d80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f001 f8b2 	bl	8009ed6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d72:	2300      	movs	r3, #0
 8008d74:	2200      	movs	r2, #0
 8008d76:	2100      	movs	r1, #0
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f001 fda9 	bl	800a8d0 <USBD_LL_PrepareReceive>
 8008d7e:	e03f      	b.n	8008e00 <USBD_LL_DataInStage+0xda>
=======
 80087a0:	7afb      	ldrb	r3, [r7, #11]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d16f      	bne.n	8008886 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3314      	adds	r3, #20
 80087aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d15a      	bne.n	800886c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d914      	bls.n	80087ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f001 f8b2 	bl	8009942 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087de:	2300      	movs	r3, #0
 80087e0:	2200      	movs	r2, #0
 80087e2:	2100      	movs	r1, #0
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f001 fda9 	bl	800a33c <USBD_LL_PrepareReceive>
 80087ea:	e03f      	b.n	800886c <USBD_LL_DataInStage+0xda>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
<<<<<<< HEAD
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d11c      	bne.n	8008dc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d316      	bcc.n	8008dc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d20f      	bcs.n	8008dc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f001 f893 	bl	8009ed6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008db8:	2300      	movs	r3, #0
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f001 fd86 	bl	800a8d0 <USBD_LL_PrepareReceive>
 8008dc4:	e01c      	b.n	8008e00 <USBD_LL_DataInStage+0xda>
=======
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d11c      	bne.n	8008832 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008800:	429a      	cmp	r2, r3
 8008802:	d316      	bcc.n	8008832 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800880e:	429a      	cmp	r2, r3
 8008810:	d20f      	bcs.n	8008832 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008812:	2200      	movs	r2, #0
 8008814:	2100      	movs	r1, #0
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f001 f893 	bl	8009942 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008824:	2300      	movs	r3, #0
 8008826:	2200      	movs	r2, #0
 8008828:	2100      	movs	r1, #0
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f001 fd86 	bl	800a33c <USBD_LL_PrepareReceive>
 8008830:	e01c      	b.n	800886c <USBD_LL_DataInStage+0xda>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d10f      	bne.n	8008df2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008df2:	2180      	movs	r1, #128	; 0x80
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f001 fcc1 	bl	800a77c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f001 f8bd 	bl	8009f7a <USBD_CtlReceiveStatus>
=======
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b03      	cmp	r3, #3
 800883c:	d10f      	bne.n	800885e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800885e:	2180      	movs	r1, #128	; 0x80
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f001 fcc1 	bl	800a1e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f001 f8bd 	bl	80099e6 <USBD_CtlReceiveStatus>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
<<<<<<< HEAD
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03a      	beq.n	8008e80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff fe42 	bl	8008a94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e18:	e032      	b.n	8008e80 <USBD_LL_DataInStage+0x15a>
=======
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d03a      	beq.n	80088ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fe42 	bl	8008500 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008884:	e032      	b.n	80088ec <USBD_LL_DataInStage+0x15a>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
<<<<<<< HEAD
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	4619      	mov	r1, r3
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f985 	bl	8009134 <USBD_CoreFindEP>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	2bff      	cmp	r3, #255	; 0xff
 8008e32:	d025      	beq.n	8008e80 <USBD_LL_DataInStage+0x15a>
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d122      	bne.n	8008e80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d11c      	bne.n	8008e80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e46:	7dfa      	ldrb	r2, [r7, #23]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	32ae      	adds	r2, #174	; 0xae
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d014      	beq.n	8008e80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e56:	7dfa      	ldrb	r2, [r7, #23]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e5e:	7dfa      	ldrb	r2, [r7, #23]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	32ae      	adds	r2, #174	; 0xae
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	7afa      	ldrb	r2, [r7, #11]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	4798      	blx	r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e76:	7dbb      	ldrb	r3, [r7, #22]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e7c:	7dbb      	ldrb	r3, [r7, #22]
 8008e7e:	e000      	b.n	8008e82 <USBD_LL_DataInStage+0x15c>
=======
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800888c:	b2db      	uxtb	r3, r3
 800888e:	4619      	mov	r1, r3
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 f985 	bl	8008ba0 <USBD_CoreFindEP>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	2bff      	cmp	r3, #255	; 0xff
 800889e:	d025      	beq.n	80088ec <USBD_LL_DataInStage+0x15a>
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d122      	bne.n	80088ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d11c      	bne.n	80088ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088b2:	7dfa      	ldrb	r2, [r7, #23]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	32ae      	adds	r2, #174	; 0xae
 80088b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d014      	beq.n	80088ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80088c2:	7dfa      	ldrb	r2, [r7, #23]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80088ca:	7dfa      	ldrb	r2, [r7, #23]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	32ae      	adds	r2, #174	; 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	7afa      	ldrb	r2, [r7, #11]
 80088d8:	4611      	mov	r1, r2
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80088e2:	7dbb      	ldrb	r3, [r7, #22]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80088e8:	7dbb      	ldrb	r3, [r7, #22]
 80088ea:	e000      	b.n	80088ee <USBD_LL_DataInStage+0x15c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_Reset>:
=======
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_Reset>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
=======
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d014      	beq.n	8008ef0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00e      	beq.n	8008ef0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6852      	ldr	r2, [r2, #4]
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	73fb      	strb	r3, [r7, #15]
=======
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d014      	beq.n	800895c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00e      	beq.n	800895c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6852      	ldr	r2, [r2, #4]
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	4611      	mov	r1, r2
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008958:	2303      	movs	r3, #3
 800895a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< HEAD
 8008ef0:	2340      	movs	r3, #64	; 0x40
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 fbfb 	bl	800a6f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2240      	movs	r2, #64	; 0x40
 8008f08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2180      	movs	r1, #128	; 0x80
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fbed 	bl	800a6f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2240      	movs	r2, #64	; 0x40
 8008f22:	621a      	str	r2, [r3, #32]

  return ret;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_LL_SetSpeed>:
=======
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 fbfb 	bl	800a15e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2240      	movs	r2, #64	; 0x40
 8008974:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008978:	2340      	movs	r3, #64	; 0x40
 800897a:	2200      	movs	r2, #0
 800897c:	2180      	movs	r1, #128	; 0x80
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fbed 	bl	800a15e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2240      	movs	r2, #64	; 0x40
 800898e:	621a      	str	r2, [r3, #32]

  return ret;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_SetSpeed>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USBD_LL_Suspend>:
=======
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <USBD_LL_Suspend>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d006      	beq.n	8008f70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2204      	movs	r2, #4
 8008f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USBD_LL_Resume>:
=======
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d006      	beq.n	80089dc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2204      	movs	r2, #4
 80089e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USBD_LL_Resume>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d106      	bne.n	8008fa8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <USBD_LL_SOF>:
=======
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d106      	bne.n	8008a14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USBD_LL_SOF>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d110      	bne.n	8008fec <USBD_LL_SOF+0x36>
=======
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d110      	bne.n	8008a58 <USBD_LL_SOF+0x36>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
=======
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
<<<<<<< HEAD
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_LL_IsoINIncomplete>:
=======
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_LL_IsoINIncomplete>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
<<<<<<< HEAD
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	32ae      	adds	r2, #174	; 0xae
 800900c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009014:	2303      	movs	r3, #3
 8009016:	e01c      	b.n	8009052 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b03      	cmp	r3, #3
 8009022:	d115      	bne.n	8009050 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	; 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32ae      	adds	r2, #174	; 0xae
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
=======
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	32ae      	adds	r2, #174	; 0xae
 8008a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e01c      	b.n	8008abe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d115      	bne.n	8008abc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	32ae      	adds	r2, #174	; 0xae
 8008a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00b      	beq.n	8008abc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32ae      	adds	r2, #174	; 0xae
 8008aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_IsoOUTIncomplete>:
=======
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_IsoOUTIncomplete>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
<<<<<<< HEAD
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	32ae      	adds	r2, #174	; 0xae
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	e01c      	b.n	80090b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b03      	cmp	r3, #3
 8009086:	d115      	bne.n	80090b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	32ae      	adds	r2, #174	; 0xae
 8009092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	32ae      	adds	r2, #174	; 0xae
 80090a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	4611      	mov	r1, r2
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
=======
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	32ae      	adds	r2, #174	; 0xae
 8008adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e01c      	b.n	8008b22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d115      	bne.n	8008b20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	32ae      	adds	r2, #174	; 0xae
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32ae      	adds	r2, #174	; 0xae
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_LL_DevConnected>:
=======
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_LL_DevConnected>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
=======
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBD_LL_DevDisconnected>:
=======
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBD_LL_DevDisconnected>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
=======
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
<<<<<<< HEAD
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00e      	beq.n	8009110 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	6852      	ldr	r2, [r2, #4]
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	4611      	mov	r1, r2
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4798      	blx	r3
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800910c:	2303      	movs	r3, #3
 800910e:	73fb      	strb	r3, [r7, #15]
=======
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6852      	ldr	r2, [r2, #4]
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
<<<<<<< HEAD
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CoreFindIF>:
=======
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_CoreFindIF>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
<<<<<<< HEAD
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
=======
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	70fb      	strb	r3, [r7, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
<<<<<<< HEAD
 8009126:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBD_CoreFindEP>:
=======
 8008b92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USBD_CoreFindEP>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
<<<<<<< HEAD
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
=======
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
<<<<<<< HEAD
 8009140:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <USBD_GetEpDesc>:
=======
 8008bac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBD_GetEpDesc>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
<<<<<<< HEAD
 800914e:	b580      	push	{r7, lr}
 8009150:	b086      	sub	sp, #24
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	885b      	ldrh	r3, [r3, #2]
 800916a:	b29a      	uxth	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	429a      	cmp	r2, r3
 8009174:	d920      	bls.n	80091b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800917e:	e013      	b.n	80091a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009180:	f107 030a 	add.w	r3, r7, #10
 8009184:	4619      	mov	r1, r3
 8009186:	6978      	ldr	r0, [r7, #20]
 8009188:	f000 f81b 	bl	80091c2 <USBD_GetNextDesc>
 800918c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b05      	cmp	r3, #5
 8009194:	d108      	bne.n	80091a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	789b      	ldrb	r3, [r3, #2]
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d008      	beq.n	80091b6 <USBD_GetEpDesc+0x68>
=======
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	885b      	ldrh	r3, [r3, #2]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d920      	bls.n	8008c24 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008bea:	e013      	b.n	8008c14 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008bec:	f107 030a 	add.w	r3, r7, #10
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6978      	ldr	r0, [r7, #20]
 8008bf4:	f000 f81b 	bl	8008c2e <USBD_GetNextDesc>
 8008bf8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d108      	bne.n	8008c14 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	789b      	ldrb	r3, [r3, #2]
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d008      	beq.n	8008c22 <USBD_GetEpDesc+0x68>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
<<<<<<< HEAD
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	885b      	ldrh	r3, [r3, #2]
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	897b      	ldrh	r3, [r7, #10]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d8e5      	bhi.n	8009180 <USBD_GetEpDesc+0x32>
 80091b4:	e000      	b.n	80091b8 <USBD_GetEpDesc+0x6a>
          break;
 80091b6:	bf00      	nop
=======
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	885b      	ldrh	r3, [r3, #2]
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	897b      	ldrh	r3, [r7, #10]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d8e5      	bhi.n	8008bec <USBD_GetEpDesc+0x32>
 8008c20:	e000      	b.n	8008c24 <USBD_GetEpDesc+0x6a>
          break;
 8008c22:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        }
      }
    }
  }

  return (void *)pEpDesc;
<<<<<<< HEAD
 80091b8:	693b      	ldr	r3, [r7, #16]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_GetNextDesc>:
=======
 8008c24:	693b      	ldr	r3, [r7, #16]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_GetNextDesc>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
<<<<<<< HEAD
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4413      	add	r3, r2
 80091dc:	b29a      	uxth	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4413      	add	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091ee:	68fb      	ldr	r3, [r7, #12]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <SWAPBYTE>:
=======
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	881a      	ldrh	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <SWAPBYTE>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
<<<<<<< HEAD
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
=======
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
<<<<<<< HEAD
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	3301      	adds	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800921a:	8a3b      	ldrh	r3, [r7, #16]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	b21a      	sxth	r2, r3
 8009220:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009224:	4313      	orrs	r3, r2
 8009226:	b21b      	sxth	r3, r3
 8009228:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800922a:	89fb      	ldrh	r3, [r7, #14]
}
 800922c:	4618      	mov	r0, r3
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_StdDevReq>:
=======
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c86:	8a3b      	ldrh	r3, [r7, #16]
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	b21a      	sxth	r2, r3
 8008c8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	b21b      	sxth	r3, r3
 8008c94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c96:	89fb      	ldrh	r3, [r7, #14]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_StdDevReq>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800924e:	2b40      	cmp	r3, #64	; 0x40
 8009250:	d005      	beq.n	800925e <USBD_StdDevReq+0x26>
 8009252:	2b40      	cmp	r3, #64	; 0x40
 8009254:	d857      	bhi.n	8009306 <USBD_StdDevReq+0xce>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00f      	beq.n	800927a <USBD_StdDevReq+0x42>
 800925a:	2b20      	cmp	r3, #32
 800925c:	d153      	bne.n	8009306 <USBD_StdDevReq+0xce>
=======
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cba:	2b40      	cmp	r3, #64	; 0x40
 8008cbc:	d005      	beq.n	8008cca <USBD_StdDevReq+0x26>
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d857      	bhi.n	8008d72 <USBD_StdDevReq+0xce>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00f      	beq.n	8008ce6 <USBD_StdDevReq+0x42>
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d153      	bne.n	8008d72 <USBD_StdDevReq+0xce>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
<<<<<<< HEAD
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	32ae      	adds	r2, #174	; 0xae
 8009268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]
      break;
 8009278:	e04a      	b.n	8009310 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b09      	cmp	r3, #9
 8009280:	d83b      	bhi.n	80092fa <USBD_StdDevReq+0xc2>
 8009282:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <USBD_StdDevReq+0x50>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	080092dd 	.word	0x080092dd
 800928c:	080092f1 	.word	0x080092f1
 8009290:	080092fb 	.word	0x080092fb
 8009294:	080092e7 	.word	0x080092e7
 8009298:	080092fb 	.word	0x080092fb
 800929c:	080092bb 	.word	0x080092bb
 80092a0:	080092b1 	.word	0x080092b1
 80092a4:	080092fb 	.word	0x080092fb
 80092a8:	080092d3 	.word	0x080092d3
 80092ac:	080092c5 	.word	0x080092c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fa3c 	bl	8009730 <USBD_GetDescriptor>
          break;
 80092b8:	e024      	b.n	8009304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fba1 	bl	8009a04 <USBD_SetAddress>
          break;
 80092c2:	e01f      	b.n	8009304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fbe0 	bl	8009a8c <USBD_SetConfig>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
          break;
 80092d0:	e018      	b.n	8009304 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc83 	bl	8009be0 <USBD_GetConfig>
          break;
 80092da:	e013      	b.n	8009304 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fcb4 	bl	8009c4c <USBD_GetStatus>
          break;
 80092e4:	e00e      	b.n	8009304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fce3 	bl	8009cb4 <USBD_SetFeature>
          break;
 80092ee:	e009      	b.n	8009304 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fd07 	bl	8009d06 <USBD_ClrFeature>
          break;
 80092f8:	e004      	b.n	8009304 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fd5e 	bl	8009dbe <USBD_CtlError>
          break;
 8009302:	bf00      	nop
      }
      break;
 8009304:	e004      	b.n	8009310 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fd58 	bl	8009dbe <USBD_CtlError>
      break;
 800930e:	bf00      	nop
  }

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop

0800931c <USBD_StdItfReq>:
=======
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	32ae      	adds	r2, #174	; 0xae
 8008cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4798      	blx	r3
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce4:	e04a      	b.n	8008d7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	785b      	ldrb	r3, [r3, #1]
 8008cea:	2b09      	cmp	r3, #9
 8008cec:	d83b      	bhi.n	8008d66 <USBD_StdDevReq+0xc2>
 8008cee:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <USBD_StdDevReq+0x50>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008d5d 	.word	0x08008d5d
 8008cfc:	08008d67 	.word	0x08008d67
 8008d00:	08008d53 	.word	0x08008d53
 8008d04:	08008d67 	.word	0x08008d67
 8008d08:	08008d27 	.word	0x08008d27
 8008d0c:	08008d1d 	.word	0x08008d1d
 8008d10:	08008d67 	.word	0x08008d67
 8008d14:	08008d3f 	.word	0x08008d3f
 8008d18:	08008d31 	.word	0x08008d31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa3c 	bl	800919c <USBD_GetDescriptor>
          break;
 8008d24:	e024      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fba1 	bl	8009470 <USBD_SetAddress>
          break;
 8008d2e:	e01f      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fbe0 	bl	80094f8 <USBD_SetConfig>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d3c:	e018      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fc83 	bl	800964c <USBD_GetConfig>
          break;
 8008d46:	e013      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fcb4 	bl	80096b8 <USBD_GetStatus>
          break;
 8008d50:	e00e      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fce3 	bl	8009720 <USBD_SetFeature>
          break;
 8008d5a:	e009      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fd07 	bl	8009772 <USBD_ClrFeature>
          break;
 8008d64:	e004      	b.n	8008d70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fd5e 	bl	800982a <USBD_CtlError>
          break;
 8008d6e:	bf00      	nop
      }
      break;
 8008d70:	e004      	b.n	8008d7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fd58 	bl	800982a <USBD_CtlError>
      break;
 8008d7a:	bf00      	nop
  }

  return ret;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop

08008d88 <USBD_StdItfReq>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009332:	2b40      	cmp	r3, #64	; 0x40
 8009334:	d005      	beq.n	8009342 <USBD_StdItfReq+0x26>
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d852      	bhi.n	80093e0 <USBD_StdItfReq+0xc4>
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <USBD_StdItfReq+0x26>
 800933e:	2b20      	cmp	r3, #32
 8009340:	d14e      	bne.n	80093e0 <USBD_StdItfReq+0xc4>
=======
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d005      	beq.n	8008dae <USBD_StdItfReq+0x26>
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d852      	bhi.n	8008e4c <USBD_StdItfReq+0xc4>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <USBD_StdItfReq+0x26>
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d14e      	bne.n	8008e4c <USBD_StdItfReq+0xc4>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	2b02      	cmp	r3, #2
 800934e:	d840      	bhi.n	80093d2 <USBD_StdItfReq+0xb6>
=======
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d840      	bhi.n	8008e3e <USBD_StdItfReq+0xb6>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	889b      	ldrh	r3, [r3, #4]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b01      	cmp	r3, #1
 8009358:	d836      	bhi.n	80093c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	889b      	ldrh	r3, [r3, #4]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff fed9 	bl	800911a <USBD_CoreFindIF>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2bff      	cmp	r3, #255	; 0xff
 8009370:	d01d      	beq.n	80093ae <USBD_StdItfReq+0x92>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11a      	bne.n	80093ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009378:	7bba      	ldrb	r2, [r7, #14]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32ae      	adds	r2, #174	; 0xae
 800937e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00f      	beq.n	80093a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009388:	7bba      	ldrb	r2, [r7, #14]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009390:	7bba      	ldrb	r2, [r7, #14]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32ae      	adds	r2, #174	; 0xae
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	4798      	blx	r3
 80093a2:	4603      	mov	r3, r0
 80093a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093a6:	e004      	b.n	80093b2 <USBD_StdItfReq+0x96>
=======
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	889b      	ldrh	r3, [r3, #4]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d836      	bhi.n	8008e34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	889b      	ldrh	r3, [r3, #4]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fed9 	bl	8008b86 <USBD_CoreFindIF>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2bff      	cmp	r3, #255	; 0xff
 8008ddc:	d01d      	beq.n	8008e1a <USBD_StdItfReq+0x92>
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d11a      	bne.n	8008e1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008de4:	7bba      	ldrb	r2, [r7, #14]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32ae      	adds	r2, #174	; 0xae
 8008dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00f      	beq.n	8008e14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008df4:	7bba      	ldrb	r2, [r7, #14]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dfc:	7bba      	ldrb	r2, [r7, #14]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	32ae      	adds	r2, #174	; 0xae
 8008e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e12:	e004      	b.n	8008e1e <USBD_StdItfReq+0x96>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
<<<<<<< HEAD
 80093a8:	2303      	movs	r3, #3
 80093aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093ac:	e001      	b.n	80093b2 <USBD_StdItfReq+0x96>
=======
 8008e14:	2303      	movs	r3, #3
 8008e16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e18:	e001      	b.n	8008e1e <USBD_StdItfReq+0x96>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
<<<<<<< HEAD
 80093ae:	2303      	movs	r3, #3
 80093b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88db      	ldrh	r3, [r3, #6]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d110      	bne.n	80093dc <USBD_StdItfReq+0xc0>
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10d      	bne.n	80093dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fdc7 	bl	8009f54 <USBD_CtlSendStatus>
=======
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88db      	ldrh	r3, [r3, #6]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d110      	bne.n	8008e48 <USBD_StdItfReq+0xc0>
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10d      	bne.n	8008e48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fdc7 	bl	80099c0 <USBD_CtlSendStatus>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
 80093c6:	e009      	b.n	80093dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fcf7 	bl	8009dbe <USBD_CtlError>
          break;
 80093d0:	e004      	b.n	80093dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fcf2 	bl	8009dbe <USBD_CtlError>
          break;
 80093da:	e000      	b.n	80093de <USBD_StdItfReq+0xc2>
          break;
 80093dc:	bf00      	nop
      }
      break;
 80093de:	e004      	b.n	80093ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fceb 	bl	8009dbe <USBD_CtlError>
      break;
 80093e8:	bf00      	nop
  }

  return ret;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_StdEPReq>:
=======
 8008e32:	e009      	b.n	8008e48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fcf7 	bl	800982a <USBD_CtlError>
          break;
 8008e3c:	e004      	b.n	8008e48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fcf2 	bl	800982a <USBD_CtlError>
          break;
 8008e46:	e000      	b.n	8008e4a <USBD_StdItfReq+0xc2>
          break;
 8008e48:	bf00      	nop
      }
      break;
 8008e4a:	e004      	b.n	8008e56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fceb 	bl	800982a <USBD_CtlError>
      break;
 8008e54:	bf00      	nop
  }

  return ret;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_StdEPReq>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
=======
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
<<<<<<< HEAD
 80093fe:	2300      	movs	r3, #0
 8009400:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	889b      	ldrh	r3, [r3, #4]
 8009406:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	d007      	beq.n	8009424 <USBD_StdEPReq+0x30>
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	f200 817f 	bhi.w	8009718 <USBD_StdEPReq+0x324>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d02a      	beq.n	8009474 <USBD_StdEPReq+0x80>
 800941e:	2b20      	cmp	r3, #32
 8009420:	f040 817a 	bne.w	8009718 <USBD_StdEPReq+0x324>
=======
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	889b      	ldrh	r3, [r3, #4]
 8008e72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d007      	beq.n	8008e90 <USBD_StdEPReq+0x30>
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	f200 817f 	bhi.w	8009184 <USBD_StdEPReq+0x324>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d02a      	beq.n	8008ee0 <USBD_StdEPReq+0x80>
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	f040 817a 	bne.w	8009184 <USBD_StdEPReq+0x324>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
<<<<<<< HEAD
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff fe83 	bl	8009134 <USBD_CoreFindEP>
 800942e:	4603      	mov	r3, r0
 8009430:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009432:	7b7b      	ldrb	r3, [r7, #13]
 8009434:	2bff      	cmp	r3, #255	; 0xff
 8009436:	f000 8174 	beq.w	8009722 <USBD_StdEPReq+0x32e>
 800943a:	7b7b      	ldrb	r3, [r7, #13]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 8170 	bne.w	8009722 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009442:	7b7a      	ldrb	r2, [r7, #13]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800944a:	7b7a      	ldrb	r2, [r7, #13]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	32ae      	adds	r2, #174	; 0xae
 8009450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 8163 	beq.w	8009722 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800945c:	7b7a      	ldrb	r2, [r7, #13]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	32ae      	adds	r2, #174	; 0xae
 8009462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009472:	e156      	b.n	8009722 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d008      	beq.n	800948e <USBD_StdEPReq+0x9a>
 800947c:	2b03      	cmp	r3, #3
 800947e:	f300 8145 	bgt.w	800970c <USBD_StdEPReq+0x318>
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 809b 	beq.w	80095be <USBD_StdEPReq+0x1ca>
 8009488:	2b01      	cmp	r3, #1
 800948a:	d03c      	beq.n	8009506 <USBD_StdEPReq+0x112>
 800948c:	e13e      	b.n	800970c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b02      	cmp	r3, #2
 8009498:	d002      	beq.n	80094a0 <USBD_StdEPReq+0xac>
 800949a:	2b03      	cmp	r3, #3
 800949c:	d016      	beq.n	80094cc <USBD_StdEPReq+0xd8>
 800949e:	e02c      	b.n	80094fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <USBD_StdEPReq+0xce>
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	2b80      	cmp	r3, #128	; 0x80
 80094aa:	d00a      	beq.n	80094c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 f963 	bl	800a77c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094b6:	2180      	movs	r1, #128	; 0x80
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 f95f 	bl	800a77c <USBD_LL_StallEP>
 80094be:	bf00      	nop
=======
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff fe83 	bl	8008ba0 <USBD_CoreFindEP>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ea0:	2bff      	cmp	r3, #255	; 0xff
 8008ea2:	f000 8174 	beq.w	800918e <USBD_StdEPReq+0x32e>
 8008ea6:	7b7b      	ldrb	r3, [r7, #13]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f040 8170 	bne.w	800918e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008eae:	7b7a      	ldrb	r2, [r7, #13]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008eb6:	7b7a      	ldrb	r2, [r7, #13]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	32ae      	adds	r2, #174	; 0xae
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 8163 	beq.w	800918e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ec8:	7b7a      	ldrb	r2, [r7, #13]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32ae      	adds	r2, #174	; 0xae
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ede:	e156      	b.n	800918e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d008      	beq.n	8008efa <USBD_StdEPReq+0x9a>
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	f300 8145 	bgt.w	8009178 <USBD_StdEPReq+0x318>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 809b 	beq.w	800902a <USBD_StdEPReq+0x1ca>
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d03c      	beq.n	8008f72 <USBD_StdEPReq+0x112>
 8008ef8:	e13e      	b.n	8009178 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d002      	beq.n	8008f0c <USBD_StdEPReq+0xac>
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d016      	beq.n	8008f38 <USBD_StdEPReq+0xd8>
 8008f0a:	e02c      	b.n	8008f66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00d      	beq.n	8008f2e <USBD_StdEPReq+0xce>
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b80      	cmp	r3, #128	; 0x80
 8008f16:	d00a      	beq.n	8008f2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f963 	bl	800a1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f22:	2180      	movs	r1, #128	; 0x80
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 f95f 	bl	800a1e8 <USBD_LL_StallEP>
 8008f2a:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 80094c0:	e020      	b.n	8009504 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fc7a 	bl	8009dbe <USBD_CtlError>
              break;
 80094ca:	e01b      	b.n	8009504 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	885b      	ldrh	r3, [r3, #2]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10e      	bne.n	80094f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <USBD_StdEPReq+0xfe>
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b80      	cmp	r3, #128	; 0x80
 80094de:	d008      	beq.n	80094f2 <USBD_StdEPReq+0xfe>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	88db      	ldrh	r3, [r3, #6]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f945 	bl	800a77c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fd2e 	bl	8009f54 <USBD_CtlSendStatus>

              break;
 80094f8:	e004      	b.n	8009504 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fc5e 	bl	8009dbe <USBD_CtlError>
              break;
 8009502:	bf00      	nop
          }
          break;
 8009504:	e107      	b.n	8009716 <USBD_StdEPReq+0x322>
=======
 8008f2c:	e020      	b.n	8008f70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fc7a 	bl	800982a <USBD_CtlError>
              break;
 8008f36:	e01b      	b.n	8008f70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	885b      	ldrh	r3, [r3, #2]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10e      	bne.n	8008f5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00b      	beq.n	8008f5e <USBD_StdEPReq+0xfe>
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b80      	cmp	r3, #128	; 0x80
 8008f4a:	d008      	beq.n	8008f5e <USBD_StdEPReq+0xfe>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	88db      	ldrh	r3, [r3, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f945 	bl	800a1e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fd2e 	bl	80099c0 <USBD_CtlSendStatus>

              break;
 8008f64:	e004      	b.n	8008f70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc5e 	bl	800982a <USBD_CtlError>
              break;
 8008f6e:	bf00      	nop
          }
          break;
 8008f70:	e107      	b.n	8009182 <USBD_StdEPReq+0x322>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< HEAD
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b02      	cmp	r3, #2
 8009510:	d002      	beq.n	8009518 <USBD_StdEPReq+0x124>
 8009512:	2b03      	cmp	r3, #3
 8009514:	d016      	beq.n	8009544 <USBD_StdEPReq+0x150>
 8009516:	e04b      	b.n	80095b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00d      	beq.n	800953a <USBD_StdEPReq+0x146>
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b80      	cmp	r3, #128	; 0x80
 8009522:	d00a      	beq.n	800953a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f927 	bl	800a77c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800952e:	2180      	movs	r1, #128	; 0x80
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f001 f923 	bl	800a77c <USBD_LL_StallEP>
 8009536:	bf00      	nop
=======
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d002      	beq.n	8008f84 <USBD_StdEPReq+0x124>
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d016      	beq.n	8008fb0 <USBD_StdEPReq+0x150>
 8008f82:	e04b      	b.n	800901c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00d      	beq.n	8008fa6 <USBD_StdEPReq+0x146>
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b80      	cmp	r3, #128	; 0x80
 8008f8e:	d00a      	beq.n	8008fa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 f927 	bl	800a1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f9a:	2180      	movs	r1, #128	; 0x80
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 f923 	bl	800a1e8 <USBD_LL_StallEP>
 8008fa2:	bf00      	nop
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 8009538:	e040      	b.n	80095bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc3e 	bl	8009dbe <USBD_CtlError>
              break;
 8009542:	e03b      	b.n	80095bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	885b      	ldrh	r3, [r3, #2]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d136      	bne.n	80095ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 f92d 	bl	800a7ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fcf7 	bl	8009f54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fde2 	bl	8009134 <USBD_CoreFindEP>
 8009570:	4603      	mov	r3, r0
 8009572:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009574:	7b7b      	ldrb	r3, [r7, #13]
 8009576:	2bff      	cmp	r3, #255	; 0xff
 8009578:	d01f      	beq.n	80095ba <USBD_StdEPReq+0x1c6>
 800957a:	7b7b      	ldrb	r3, [r7, #13]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d11c      	bne.n	80095ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009580:	7b7a      	ldrb	r2, [r7, #13]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009588:	7b7a      	ldrb	r2, [r7, #13]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	32ae      	adds	r2, #174	; 0xae
 800958e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d010      	beq.n	80095ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009598:	7b7a      	ldrb	r2, [r7, #13]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	32ae      	adds	r2, #174	; 0xae
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]
=======
 8008fa4:	e040      	b.n	8009028 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc3e 	bl	800982a <USBD_CtlError>
              break;
 8008fae:	e03b      	b.n	8009028 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	885b      	ldrh	r3, [r3, #2]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d136      	bne.n	8009026 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d004      	beq.n	8008fcc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f001 f92d 	bl	800a226 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fcf7 	bl	80099c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fde2 	bl	8008ba0 <USBD_CoreFindEP>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fe0:	7b7b      	ldrb	r3, [r7, #13]
 8008fe2:	2bff      	cmp	r3, #255	; 0xff
 8008fe4:	d01f      	beq.n	8009026 <USBD_StdEPReq+0x1c6>
 8008fe6:	7b7b      	ldrb	r3, [r7, #13]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d11c      	bne.n	8009026 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008fec:	7b7a      	ldrb	r2, [r7, #13]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ff4:	7b7a      	ldrb	r2, [r7, #13]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	; 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009004:	7b7a      	ldrb	r2, [r7, #13]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32ae      	adds	r2, #174	; 0xae
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                  }
                }
              }
              break;
<<<<<<< HEAD
 80095ae:	e004      	b.n	80095ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fc03 	bl	8009dbe <USBD_CtlError>
              break;
 80095b8:	e000      	b.n	80095bc <USBD_StdEPReq+0x1c8>
              break;
 80095ba:	bf00      	nop
          }
          break;
 80095bc:	e0ab      	b.n	8009716 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d002      	beq.n	80095d0 <USBD_StdEPReq+0x1dc>
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d032      	beq.n	8009634 <USBD_StdEPReq+0x240>
 80095ce:	e097      	b.n	8009700 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <USBD_StdEPReq+0x1f2>
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b80      	cmp	r3, #128	; 0x80
 80095da:	d004      	beq.n	80095e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fbed 	bl	8009dbe <USBD_CtlError>
                break;
 80095e4:	e091      	b.n	800970a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	da0b      	bge.n	8009606 <USBD_StdEPReq+0x212>
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	3310      	adds	r3, #16
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	4413      	add	r3, r2
 8009602:	3304      	adds	r3, #4
 8009604:	e00b      	b.n	800961e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	4413      	add	r3, r2
 800961c:	3304      	adds	r3, #4
 800961e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2202      	movs	r2, #2
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fc37 	bl	8009ea0 <USBD_CtlSendData>
              break;
 8009632:	e06a      	b.n	800970a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da11      	bge.n	8009660 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	f003 020f 	and.w	r2, r3, #15
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	3324      	adds	r3, #36	; 0x24
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d117      	bne.n	8009686 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fbb0 	bl	8009dbe <USBD_CtlError>
                  break;
 800965e:	e054      	b.n	800970a <USBD_StdEPReq+0x316>
=======
 800901a:	e004      	b.n	8009026 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fc03 	bl	800982a <USBD_CtlError>
              break;
 8009024:	e000      	b.n	8009028 <USBD_StdEPReq+0x1c8>
              break;
 8009026:	bf00      	nop
          }
          break;
 8009028:	e0ab      	b.n	8009182 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b02      	cmp	r3, #2
 8009034:	d002      	beq.n	800903c <USBD_StdEPReq+0x1dc>
 8009036:	2b03      	cmp	r3, #3
 8009038:	d032      	beq.n	80090a0 <USBD_StdEPReq+0x240>
 800903a:	e097      	b.n	800916c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <USBD_StdEPReq+0x1f2>
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	2b80      	cmp	r3, #128	; 0x80
 8009046:	d004      	beq.n	8009052 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fbed 	bl	800982a <USBD_CtlError>
                break;
 8009050:	e091      	b.n	8009176 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009056:	2b00      	cmp	r3, #0
 8009058:	da0b      	bge.n	8009072 <USBD_StdEPReq+0x212>
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	3310      	adds	r3, #16
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	3304      	adds	r3, #4
 8009070:	e00b      	b.n	800908a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009078:	4613      	mov	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	4413      	add	r3, r2
 8009088:	3304      	adds	r3, #4
 800908a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2202      	movs	r2, #2
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc37 	bl	800990c <USBD_CtlSendData>
              break;
 800909e:	e06a      	b.n	8009176 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	da11      	bge.n	80090cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	f003 020f 	and.w	r2, r3, #15
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	440b      	add	r3, r1
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d117      	bne.n	80090f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fbb0 	bl	800982a <USBD_CtlError>
                  break;
 80090ca:	e054      	b.n	8009176 <USBD_StdEPReq+0x316>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	f003 020f 	and.w	r2, r3, #15
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fb9d 	bl	8009dbe <USBD_CtlError>
                  break;
 8009684:	e041      	b.n	800970a <USBD_StdEPReq+0x316>
=======
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	f003 020f 	and.w	r2, r3, #15
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb9d 	bl	800982a <USBD_CtlError>
                  break;
 80090f0:	e041      	b.n	8009176 <USBD_StdEPReq+0x316>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
 8009686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800968a:	2b00      	cmp	r3, #0
 800968c:	da0b      	bge.n	80096a6 <USBD_StdEPReq+0x2b2>
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	3310      	adds	r3, #16
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	3304      	adds	r3, #4
 80096a4:	e00b      	b.n	80096be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4413      	add	r3, r2
 80096bc:	3304      	adds	r3, #4
 80096be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <USBD_StdEPReq+0x2d8>
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b80      	cmp	r3, #128	; 0x80
 80096ca:	d103      	bne.n	80096d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	e00e      	b.n	80096f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 f88d 	bl	800a7f8 <USBD_LL_IsStallEP>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2201      	movs	r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	e002      	b.n	80096f2 <USBD_StdEPReq+0x2fe>
=======
 80090f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da0b      	bge.n	8009112 <USBD_StdEPReq+0x2b2>
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	3310      	adds	r3, #16
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	3304      	adds	r3, #4
 8009110:	e00b      	b.n	800912a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	3304      	adds	r3, #4
 800912a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <USBD_StdEPReq+0x2d8>
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d103      	bne.n	8009140 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e00e      	b.n	800915e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 f88d 	bl	800a264 <USBD_LL_IsStallEP>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2201      	movs	r2, #1
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	e002      	b.n	800915e <USBD_StdEPReq+0x2fe>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2202      	movs	r2, #2
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fbd1 	bl	8009ea0 <USBD_CtlSendData>
              break;
 80096fe:	e004      	b.n	800970a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fb5b 	bl	8009dbe <USBD_CtlError>
              break;
 8009708:	bf00      	nop
          }
          break;
 800970a:	e004      	b.n	8009716 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fb55 	bl	8009dbe <USBD_CtlError>
          break;
 8009714:	bf00      	nop
      }
      break;
 8009716:	e005      	b.n	8009724 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fb4f 	bl	8009dbe <USBD_CtlError>
      break;
 8009720:	e000      	b.n	8009724 <USBD_StdEPReq+0x330>
      break;
 8009722:	bf00      	nop
  }

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <USBD_GetDescriptor>:
=======
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2202      	movs	r2, #2
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fbd1 	bl	800990c <USBD_CtlSendData>
              break;
 800916a:	e004      	b.n	8009176 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fb5b 	bl	800982a <USBD_CtlError>
              break;
 8009174:	bf00      	nop
          }
          break;
 8009176:	e004      	b.n	8009182 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fb55 	bl	800982a <USBD_CtlError>
          break;
 8009180:	bf00      	nop
      }
      break;
 8009182:	e005      	b.n	8009190 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fb4f 	bl	800982a <USBD_CtlError>
      break;
 800918c:	e000      	b.n	8009190 <USBD_StdEPReq+0x330>
      break;
 800918e:	bf00      	nop
  }

  return ret;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_GetDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	2b06      	cmp	r3, #6
 8009752:	f200 8128 	bhi.w	80099a6 <USBD_GetDescriptor+0x276>
 8009756:	a201      	add	r2, pc, #4	; (adr r2, 800975c <USBD_GetDescriptor+0x2c>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	08009779 	.word	0x08009779
 8009760:	08009791 	.word	0x08009791
 8009764:	080097d1 	.word	0x080097d1
 8009768:	080099a7 	.word	0x080099a7
 800976c:	080099a7 	.word	0x080099a7
 8009770:	08009947 	.word	0x08009947
 8009774:	08009973 	.word	0x08009973
=======
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b06      	cmp	r3, #6
 80091be:	f200 8128 	bhi.w	8009412 <USBD_GetDescriptor+0x276>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <USBD_GetDescriptor+0x2c>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091e5 	.word	0x080091e5
 80091cc:	080091fd 	.word	0x080091fd
 80091d0:	0800923d 	.word	0x0800923d
 80091d4:	08009413 	.word	0x08009413
 80091d8:	08009413 	.word	0x08009413
 80091dc:	080093b3 	.word	0x080093b3
 80091e0:	080093df 	.word	0x080093df
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
<<<<<<< HEAD
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7c12      	ldrb	r2, [r2, #16]
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	60f8      	str	r0, [r7, #12]
      break;
 800978e:	e112      	b.n	80099b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7c1b      	ldrb	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10d      	bne.n	80097b4 <USBD_GetDescriptor+0x84>
=======
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
      break;
 80091fa:	e112      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7c1b      	ldrb	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10d      	bne.n	8009220 <USBD_GetDescriptor+0x84>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
<<<<<<< HEAD
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f107 0208 	add.w	r2, r7, #8
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
 80097a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3301      	adds	r3, #1
 80097ae:	2202      	movs	r2, #2
 80097b0:	701a      	strb	r2, [r3, #0]
=======
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	f107 0208 	add.w	r2, r7, #8
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3301      	adds	r3, #1
 800921a:	2202      	movs	r2, #2
 800921c:	701a      	strb	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
 80097b2:	e100      	b.n	80099b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	f107 0208 	add.w	r2, r7, #8
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	2202      	movs	r2, #2
 80097cc:	701a      	strb	r2, [r3, #0]
      break;
 80097ce:	e0f2      	b.n	80099b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	885b      	ldrh	r3, [r3, #2]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	f200 80ac 	bhi.w	8009934 <USBD_GetDescriptor+0x204>
 80097dc:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <USBD_GetDescriptor+0xb4>)
 80097de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e2:	bf00      	nop
 80097e4:	080097fd 	.word	0x080097fd
 80097e8:	08009831 	.word	0x08009831
 80097ec:	08009865 	.word	0x08009865
 80097f0:	08009899 	.word	0x08009899
 80097f4:	080098cd 	.word	0x080098cd
 80097f8:	08009901 	.word	0x08009901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	7c12      	ldrb	r2, [r2, #16]
 8009814:	f107 0108 	add.w	r1, r7, #8
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	60f8      	str	r0, [r7, #12]
=======
 800921e:	e100      	b.n	8009422 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	f107 0208 	add.w	r2, r7, #8
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
 8009230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	2202      	movs	r2, #2
 8009238:	701a      	strb	r2, [r3, #0]
      break;
 800923a:	e0f2      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	885b      	ldrh	r3, [r3, #2]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b05      	cmp	r3, #5
 8009244:	f200 80ac 	bhi.w	80093a0 <USBD_GetDescriptor+0x204>
 8009248:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <USBD_GetDescriptor+0xb4>)
 800924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924e:	bf00      	nop
 8009250:	08009269 	.word	0x08009269
 8009254:	0800929d 	.word	0x0800929d
 8009258:	080092d1 	.word	0x080092d1
 800925c:	08009305 	.word	0x08009305
 8009260:	08009339 	.word	0x08009339
 8009264:	0800936d 	.word	0x0800936d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800981e:	e091      	b.n	8009944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 facb 	bl	8009dbe <USBD_CtlError>
            err++;
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	3301      	adds	r3, #1
 800982c:	72fb      	strb	r3, [r7, #11]
          break;
 800982e:	e089      	b.n	8009944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7c12      	ldrb	r2, [r2, #16]
 8009848:	f107 0108 	add.w	r1, r7, #8
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	60f8      	str	r0, [r7, #12]
=======
 800928a:	e091      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 facb 	bl	800982a <USBD_CtlError>
            err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
          break;
 800929a:	e089      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009852:	e077      	b.n	8009944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fab1 	bl	8009dbe <USBD_CtlError>
            err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
          break;
 8009862:	e06f      	b.n	8009944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	7c12      	ldrb	r2, [r2, #16]
 800987c:	f107 0108 	add.w	r1, r7, #8
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	60f8      	str	r0, [r7, #12]
=======
 80092be:	e077      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fab1 	bl	800982a <USBD_CtlError>
            err++;
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	3301      	adds	r3, #1
 80092cc:	72fb      	strb	r3, [r7, #11]
          break;
 80092ce:	e06f      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 0108 	add.w	r1, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009886:	e05d      	b.n	8009944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa97 	bl	8009dbe <USBD_CtlError>
            err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
          break;
 8009896:	e055      	b.n	8009944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
=======
 80092f2:	e05d      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa97 	bl	800982a <USBD_CtlError>
            err++;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	3301      	adds	r3, #1
 8009300:	72fb      	strb	r3, [r7, #11]
          break;
 8009302:	e055      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 80098ba:	e043      	b.n	8009944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa7d 	bl	8009dbe <USBD_CtlError>
            err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ca:	e03b      	b.n	8009944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7c12      	ldrb	r2, [r2, #16]
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	60f8      	str	r0, [r7, #12]
=======
 8009326:	e043      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa7d 	bl	800982a <USBD_CtlError>
            err++;
 8009330:	7afb      	ldrb	r3, [r7, #11]
 8009332:	3301      	adds	r3, #1
 8009334:	72fb      	strb	r3, [r7, #11]
          break;
 8009336:	e03b      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 80098ee:	e029      	b.n	8009944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa63 	bl	8009dbe <USBD_CtlError>
            err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
          break;
 80098fe:	e021      	b.n	8009944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7c12      	ldrb	r2, [r2, #16]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	60f8      	str	r0, [r7, #12]
=======
 800935a:	e029      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa63 	bl	800982a <USBD_CtlError>
            err++;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	3301      	adds	r3, #1
 8009368:	72fb      	strb	r3, [r7, #11]
          break;
 800936a:	e021      	b.n	80093b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009922:	e00f      	b.n	8009944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa49 	bl	8009dbe <USBD_CtlError>
            err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
          break;
 8009932:	e007      	b.n	8009944 <USBD_GetDescriptor+0x214>
=======
 800938e:	e00f      	b.n	80093b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa49 	bl	800982a <USBD_CtlError>
            err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
          break;
 800939e:	e007      	b.n	80093b0 <USBD_GetDescriptor+0x214>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa41 	bl	8009dbe <USBD_CtlError>
          err++;
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	3301      	adds	r3, #1
 8009940:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009942:	bf00      	nop
      }
      break;
 8009944:	e037      	b.n	80099b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	7c1b      	ldrb	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <USBD_GetDescriptor+0x232>
=======
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa41 	bl	800982a <USBD_CtlError>
          err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093ae:	bf00      	nop
      }
      break;
 80093b0:	e037      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <USBD_GetDescriptor+0x232>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
<<<<<<< HEAD
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009956:	f107 0208 	add.w	r2, r7, #8
 800995a:	4610      	mov	r0, r2
 800995c:	4798      	blx	r3
 800995e:	60f8      	str	r0, [r7, #12]
=======
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	f107 0208 	add.w	r2, r7, #8
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 8009960:	e029      	b.n	80099b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa2a 	bl	8009dbe <USBD_CtlError>
        err++;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	3301      	adds	r3, #1
 800996e:	72fb      	strb	r3, [r7, #11]
      break;
 8009970:	e021      	b.n	80099b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7c1b      	ldrb	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10d      	bne.n	8009996 <USBD_GetDescriptor+0x266>
=======
 80093cc:	e029      	b.n	8009422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fa2a 	bl	800982a <USBD_CtlError>
        err++;
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	3301      	adds	r3, #1
 80093da:	72fb      	strb	r3, [r7, #11]
      break;
 80093dc:	e021      	b.n	8009422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7c1b      	ldrb	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10d      	bne.n	8009402 <USBD_GetDescriptor+0x266>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
<<<<<<< HEAD
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	f107 0208 	add.w	r2, r7, #8
 8009986:	4610      	mov	r0, r2
 8009988:	4798      	blx	r3
 800998a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	2207      	movs	r2, #7
 8009992:	701a      	strb	r2, [r3, #0]
=======
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	f107 0208 	add.w	r2, r7, #8
 80093f2:	4610      	mov	r0, r2
 80093f4:	4798      	blx	r3
 80093f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3301      	adds	r3, #1
 80093fc:	2207      	movs	r2, #7
 80093fe:	701a      	strb	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 8009994:	e00f      	b.n	80099b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa10 	bl	8009dbe <USBD_CtlError>
        err++;
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	3301      	adds	r3, #1
 80099a2:	72fb      	strb	r3, [r7, #11]
      break;
 80099a4:	e007      	b.n	80099b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fa08 	bl	8009dbe <USBD_CtlError>
      err++;
 80099ae:	7afb      	ldrb	r3, [r7, #11]
 80099b0:	3301      	adds	r3, #1
 80099b2:	72fb      	strb	r3, [r7, #11]
      break;
 80099b4:	bf00      	nop
  }

  if (err != 0U)
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d11e      	bne.n	80099fa <USBD_GetDescriptor+0x2ca>
=======
 8009400:	e00f      	b.n	8009422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fa10 	bl	800982a <USBD_CtlError>
        err++;
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	3301      	adds	r3, #1
 800940e:	72fb      	strb	r3, [r7, #11]
      break;
 8009410:	e007      	b.n	8009422 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa08 	bl	800982a <USBD_CtlError>
      err++;
 800941a:	7afb      	ldrb	r3, [r7, #11]
 800941c:	3301      	adds	r3, #1
 800941e:	72fb      	strb	r3, [r7, #11]
      break;
 8009420:	bf00      	nop
  }

  if (err != 0U)
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d11e      	bne.n	8009466 <USBD_GetDescriptor+0x2ca>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    return;
  }

  if (req->wLength != 0U)
<<<<<<< HEAD
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	88db      	ldrh	r3, [r3, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d016      	beq.n	80099f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80099c4:	893b      	ldrh	r3, [r7, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00e      	beq.n	80099e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88da      	ldrh	r2, [r3, #6]
 80099ce:	893b      	ldrh	r3, [r7, #8]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bf28      	it	cs
 80099d4:	4613      	movcs	r3, r2
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099da:	893b      	ldrh	r3, [r7, #8]
 80099dc:	461a      	mov	r2, r3
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fa5d 	bl	8009ea0 <USBD_CtlSendData>
 80099e6:	e009      	b.n	80099fc <USBD_GetDescriptor+0x2cc>
=======
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	88db      	ldrh	r3, [r3, #6]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d016      	beq.n	800945e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009430:	893b      	ldrh	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00e      	beq.n	8009454 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	88da      	ldrh	r2, [r3, #6]
 800943a:	893b      	ldrh	r3, [r7, #8]
 800943c:	4293      	cmp	r3, r2
 800943e:	bf28      	it	cs
 8009440:	4613      	movcs	r3, r2
 8009442:	b29b      	uxth	r3, r3
 8009444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009446:	893b      	ldrh	r3, [r7, #8]
 8009448:	461a      	mov	r2, r3
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa5d 	bl	800990c <USBD_CtlSendData>
 8009452:	e009      	b.n	8009468 <USBD_GetDescriptor+0x2cc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      USBD_CtlError(pdev, req);
<<<<<<< HEAD
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9e7 	bl	8009dbe <USBD_CtlError>
 80099f0:	e004      	b.n	80099fc <USBD_GetDescriptor+0x2cc>
=======
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9e7 	bl	800982a <USBD_CtlError>
 800945c:	e004      	b.n	8009468 <USBD_GetDescriptor+0x2cc>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 faae 	bl	8009f54 <USBD_CtlSendStatus>
 80099f8:	e000      	b.n	80099fc <USBD_GetDescriptor+0x2cc>
    return;
 80099fa:	bf00      	nop
  }
}
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop

08009a04 <USBD_SetAddress>:
=======
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 faae 	bl	80099c0 <USBD_CtlSendStatus>
 8009464:	e000      	b.n	8009468 <USBD_GetDescriptor+0x2cc>
    return;
 8009466:	bf00      	nop
  }
}
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop

08009470 <USBD_SetAddress>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	889b      	ldrh	r3, [r3, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d131      	bne.n	8009a7a <USBD_SetAddress+0x76>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88db      	ldrh	r3, [r3, #6]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d12d      	bne.n	8009a7a <USBD_SetAddress+0x76>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	2b7f      	cmp	r3, #127	; 0x7f
 8009a24:	d829      	bhi.n	8009a7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	885b      	ldrh	r3, [r3, #2]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d104      	bne.n	8009a48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f9bc 	bl	8009dbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a46:	e01d      	b.n	8009a84 <USBD_SetAddress+0x80>
=======
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	889b      	ldrh	r3, [r3, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d131      	bne.n	80094e6 <USBD_SetAddress+0x76>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	88db      	ldrh	r3, [r3, #6]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d12d      	bne.n	80094e6 <USBD_SetAddress+0x76>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	885b      	ldrh	r3, [r3, #2]
 800948e:	2b7f      	cmp	r3, #127	; 0x7f
 8009490:	d829      	bhi.n	80094e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	885b      	ldrh	r3, [r3, #2]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d104      	bne.n	80094b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f9bc 	bl	800982a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	e01d      	b.n	80094f0 <USBD_SetAddress+0x80>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7bfa      	ldrb	r2, [r7, #15]
 8009a4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fefb 	bl	800a850 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa7a 	bl	8009f54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6e:	e009      	b.n	8009a84 <USBD_SetAddress+0x80>
=======
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	7bfa      	ldrb	r2, [r7, #15]
 80094b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fefb 	bl	800a2bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fa7a 	bl	80099c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d004      	beq.n	80094dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2202      	movs	r2, #2
 80094d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094da:	e009      	b.n	80094f0 <USBD_SetAddress+0x80>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a78:	e004      	b.n	8009a84 <USBD_SetAddress+0x80>
=======
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e4:	e004      	b.n	80094f0 <USBD_SetAddress+0x80>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f99e 	bl	8009dbe <USBD_CtlError>
  }
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_SetConfig>:
=======
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f99e 	bl	800982a <USBD_CtlError>
  }
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_SetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	4b4e      	ldr	r3, [pc, #312]	; (8009bdc <USBD_SetConfig+0x150>)
 8009aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009aa4:	4b4d      	ldr	r3, [pc, #308]	; (8009bdc <USBD_SetConfig+0x150>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d905      	bls.n	8009ab8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f985 	bl	8009dbe <USBD_CtlError>
    return USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e08c      	b.n	8009bd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d002      	beq.n	8009aca <USBD_SetConfig+0x3e>
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d029      	beq.n	8009b1c <USBD_SetConfig+0x90>
 8009ac8:	e075      	b.n	8009bb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009aca:	4b44      	ldr	r3, [pc, #272]	; (8009bdc <USBD_SetConfig+0x150>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d020      	beq.n	8009b14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ad2:	4b42      	ldr	r3, [pc, #264]	; (8009bdc <USBD_SetConfig+0x150>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009adc:	4b3f      	ldr	r3, [pc, #252]	; (8009bdc <USBD_SetConfig+0x150>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fe ffe1 	bl	8008aaa <USBD_SetClassConfig>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f962 	bl	8009dbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2202      	movs	r2, #2
 8009afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
=======
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	885b      	ldrh	r3, [r3, #2]
 800950a:	b2da      	uxtb	r2, r3
 800950c:	4b4e      	ldr	r3, [pc, #312]	; (8009648 <USBD_SetConfig+0x150>)
 800950e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009510:	4b4d      	ldr	r3, [pc, #308]	; (8009648 <USBD_SetConfig+0x150>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d905      	bls.n	8009524 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f985 	bl	800982a <USBD_CtlError>
    return USBD_FAIL;
 8009520:	2303      	movs	r3, #3
 8009522:	e08c      	b.n	800963e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d002      	beq.n	8009536 <USBD_SetConfig+0x3e>
 8009530:	2b03      	cmp	r3, #3
 8009532:	d029      	beq.n	8009588 <USBD_SetConfig+0x90>
 8009534:	e075      	b.n	8009622 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009536:	4b44      	ldr	r3, [pc, #272]	; (8009648 <USBD_SetConfig+0x150>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d020      	beq.n	8009580 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800953e:	4b42      	ldr	r3, [pc, #264]	; (8009648 <USBD_SetConfig+0x150>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009548:	4b3f      	ldr	r3, [pc, #252]	; (8009648 <USBD_SetConfig+0x150>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7fe ffe1 	bl	8008516 <USBD_SetClassConfig>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f962 	bl	800982a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2202      	movs	r2, #2
 800956a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
 8009b02:	e065      	b.n	8009bd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fa25 	bl	8009f54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b12:	e05d      	b.n	8009bd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fa1d 	bl	8009f54 <USBD_CtlSendStatus>
      break;
 8009b1a:	e059      	b.n	8009bd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b1c:	4b2f      	ldr	r3, [pc, #188]	; (8009bdc <USBD_SetConfig+0x150>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d112      	bne.n	8009b4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b2c:	4b2b      	ldr	r3, [pc, #172]	; (8009bdc <USBD_SetConfig+0x150>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b36:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <USBD_SetConfig+0x150>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7fe ffd0 	bl	8008ae2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa06 	bl	8009f54 <USBD_CtlSendStatus>
=======
 800956e:	e065      	b.n	800963c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fa25 	bl	80099c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2203      	movs	r2, #3
 800957a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800957e:	e05d      	b.n	800963c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fa1d 	bl	80099c0 <USBD_CtlSendStatus>
      break;
 8009586:	e059      	b.n	800963c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009588:	4b2f      	ldr	r3, [pc, #188]	; (8009648 <USBD_SetConfig+0x150>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d112      	bne.n	80095b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009598:	4b2b      	ldr	r3, [pc, #172]	; (8009648 <USBD_SetConfig+0x150>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095a2:	4b29      	ldr	r3, [pc, #164]	; (8009648 <USBD_SetConfig+0x150>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7fe ffd0 	bl	800854e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa06 	bl	80099c0 <USBD_CtlSendStatus>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
 8009b48:	e042      	b.n	8009bd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <USBD_SetConfig+0x150>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d02a      	beq.n	8009bae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7fe ffbe 	bl	8008ae2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b66:	4b1d      	ldr	r3, [pc, #116]	; (8009bdc <USBD_SetConfig+0x150>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b70:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <USBD_SetConfig+0x150>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fe ff97 	bl	8008aaa <USBD_SetClassConfig>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00f      	beq.n	8009ba6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f918 	bl	8009dbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7fe ffa3 	bl	8008ae2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ba4:	e014      	b.n	8009bd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f9d4 	bl	8009f54 <USBD_CtlSendStatus>
      break;
 8009bac:	e010      	b.n	8009bd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f9d0 	bl	8009f54 <USBD_CtlSendStatus>
      break;
 8009bb4:	e00c      	b.n	8009bd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f900 	bl	8009dbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bbe:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <USBD_SetConfig+0x150>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe ff8c 	bl	8008ae2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bce:	bf00      	nop
  }

  return ret;
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000438 	.word	0x20000438

08009be0 <USBD_GetConfig>:
=======
 80095b4:	e042      	b.n	800963c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <USBD_SetConfig+0x150>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d02a      	beq.n	800961a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fe ffbe 	bl	800854e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095d2:	4b1d      	ldr	r3, [pc, #116]	; (8009648 <USBD_SetConfig+0x150>)
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095dc:	4b1a      	ldr	r3, [pc, #104]	; (8009648 <USBD_SetConfig+0x150>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fe ff97 	bl	8008516 <USBD_SetClassConfig>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00f      	beq.n	8009612 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f918 	bl	800982a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7fe ffa3 	bl	800854e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009610:	e014      	b.n	800963c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9d4 	bl	80099c0 <USBD_CtlSendStatus>
      break;
 8009618:	e010      	b.n	800963c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f9d0 	bl	80099c0 <USBD_CtlSendStatus>
      break;
 8009620:	e00c      	b.n	800963c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f900 	bl	800982a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800962a:	4b07      	ldr	r3, [pc, #28]	; (8009648 <USBD_SetConfig+0x150>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fe ff8c 	bl	800854e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	73fb      	strb	r3, [r7, #15]
      break;
 800963a:	bf00      	nop
  }

  return ret;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200003d4 	.word	0x200003d4

0800964c <USBD_GetConfig>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88db      	ldrh	r3, [r3, #6]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d004      	beq.n	8009bfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f8e2 	bl	8009dbe <USBD_CtlError>
=======
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	88db      	ldrh	r3, [r3, #6]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d004      	beq.n	8009668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f8e2 	bl	800982a <USBD_CtlError>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
 8009bfa:	e023      	b.n	8009c44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	dc02      	bgt.n	8009c0e <USBD_GetConfig+0x2e>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dc03      	bgt.n	8009c14 <USBD_GetConfig+0x34>
 8009c0c:	e015      	b.n	8009c3a <USBD_GetConfig+0x5a>
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d00b      	beq.n	8009c2a <USBD_GetConfig+0x4a>
 8009c12:	e012      	b.n	8009c3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f93c 	bl	8009ea0 <USBD_CtlSendData>
        break;
 8009c28:	e00c      	b.n	8009c44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f934 	bl	8009ea0 <USBD_CtlSendData>
        break;
 8009c38:	e004      	b.n	8009c44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f8be 	bl	8009dbe <USBD_CtlError>
        break;
 8009c42:	bf00      	nop
}
 8009c44:	bf00      	nop
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_GetStatus>:
=======
 8009666:	e023      	b.n	80096b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	dc02      	bgt.n	800967a <USBD_GetConfig+0x2e>
 8009674:	2b00      	cmp	r3, #0
 8009676:	dc03      	bgt.n	8009680 <USBD_GetConfig+0x34>
 8009678:	e015      	b.n	80096a6 <USBD_GetConfig+0x5a>
 800967a:	2b03      	cmp	r3, #3
 800967c:	d00b      	beq.n	8009696 <USBD_GetConfig+0x4a>
 800967e:	e012      	b.n	80096a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3308      	adds	r3, #8
 800968a:	2201      	movs	r2, #1
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f93c 	bl	800990c <USBD_CtlSendData>
        break;
 8009694:	e00c      	b.n	80096b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3304      	adds	r3, #4
 800969a:	2201      	movs	r2, #1
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f934 	bl	800990c <USBD_CtlSendData>
        break;
 80096a4:	e004      	b.n	80096b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f8be 	bl	800982a <USBD_CtlError>
        break;
 80096ae:	bf00      	nop
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_GetStatus>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d81e      	bhi.n	8009ca2 <USBD_GetStatus+0x56>
=======
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	3b01      	subs	r3, #1
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d81e      	bhi.n	800970e <USBD_GetStatus+0x56>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	88db      	ldrh	r3, [r3, #6]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d004      	beq.n	8009c76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f8a5 	bl	8009dbe <USBD_CtlError>
        break;
 8009c74:	e01a      	b.n	8009cac <USBD_GetStatus+0x60>
=======
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	88db      	ldrh	r3, [r3, #6]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d004      	beq.n	80096e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f8a5 	bl	800982a <USBD_CtlError>
        break;
 80096e0:	e01a      	b.n	8009718 <USBD_GetStatus+0x60>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	60da      	str	r2, [r3, #12]
=======
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	60da      	str	r2, [r3, #12]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
<<<<<<< HEAD
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f043 0202 	orr.w	r2, r3, #2
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	330c      	adds	r3, #12
 8009c96:	2202      	movs	r2, #2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f900 	bl	8009ea0 <USBD_CtlSendData>
      break;
 8009ca0:	e004      	b.n	8009cac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f88a 	bl	8009dbe <USBD_CtlError>
      break;
 8009caa:	bf00      	nop
  }
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_SetFeature>:
=======
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f043 0202 	orr.w	r2, r3, #2
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	330c      	adds	r3, #12
 8009702:	2202      	movs	r2, #2
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f900 	bl	800990c <USBD_CtlSendData>
      break;
 800970c:	e004      	b.n	8009718 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f88a 	bl	800982a <USBD_CtlError>
      break;
 8009716:	bf00      	nop
  }
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_SetFeature>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d107      	bne.n	8009cd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f940 	bl	8009f54 <USBD_CtlSendStatus>
=======
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	885b      	ldrh	r3, [r3, #2]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d107      	bne.n	8009742 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f940 	bl	80099c0 <USBD_CtlSendStatus>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
<<<<<<< HEAD
 8009cd4:	e013      	b.n	8009cfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	885b      	ldrh	r3, [r3, #2]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d10b      	bne.n	8009cf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	889b      	ldrh	r3, [r3, #4]
 8009ce2:	0a1b      	lsrs	r3, r3, #8
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f930 	bl	8009f54 <USBD_CtlSendStatus>
}
 8009cf4:	e003      	b.n	8009cfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f860 	bl	8009dbe <USBD_CtlError>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_ClrFeature>:
=======
 8009740:	e013      	b.n	800976a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	885b      	ldrh	r3, [r3, #2]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d10b      	bne.n	8009762 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	889b      	ldrh	r3, [r3, #4]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b29b      	uxth	r3, r3
 8009752:	b2da      	uxtb	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f930 	bl	80099c0 <USBD_CtlSendStatus>
}
 8009760:	e003      	b.n	800976a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f860 	bl	800982a <USBD_CtlError>
}
 800976a:	bf00      	nop
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_ClrFeature>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d80b      	bhi.n	8009d36 <USBD_ClrFeature+0x30>
=======
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009782:	b2db      	uxtb	r3, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	2b02      	cmp	r3, #2
 8009788:	d80b      	bhi.n	80097a2 <USBD_ClrFeature+0x30>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	885b      	ldrh	r3, [r3, #2]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d10c      	bne.n	8009d40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f910 	bl	8009f54 <USBD_CtlSendStatus>
      }
      break;
 8009d34:	e004      	b.n	8009d40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f840 	bl	8009dbe <USBD_CtlError>
      break;
 8009d3e:	e000      	b.n	8009d42 <USBD_ClrFeature+0x3c>
      break;
 8009d40:	bf00      	nop
  }
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_ParseSetupRequest>:
=======
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	885b      	ldrh	r3, [r3, #2]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d10c      	bne.n	80097ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f910 	bl	80099c0 <USBD_CtlSendStatus>
      }
      break;
 80097a0:	e004      	b.n	80097ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f840 	bl	800982a <USBD_CtlError>
      break;
 80097aa:	e000      	b.n	80097ae <USBD_ClrFeature+0x3c>
      break;
 80097ac:	bf00      	nop
  }
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_ParseSetupRequest>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3301      	adds	r3, #1
 8009d64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	781a      	ldrb	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3301      	adds	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff fa41 	bl	80091fc <SWAPBYTE>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff fa34 	bl	80091fc <SWAPBYTE>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461a      	mov	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3301      	adds	r3, #1
 8009da6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff fa27 	bl	80091fc <SWAPBYTE>
 8009dae:	4603      	mov	r3, r0
 8009db0:	461a      	mov	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	80da      	strh	r2, [r3, #6]
}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_CtlError>:
=======
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3301      	adds	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7ff fa41 	bl	8008c68 <SWAPBYTE>
 80097e6:	4603      	mov	r3, r0
 80097e8:	461a      	mov	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3301      	adds	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3301      	adds	r3, #1
 80097f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff fa34 	bl	8008c68 <SWAPBYTE>
 8009800:	4603      	mov	r3, r0
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3301      	adds	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f7ff fa27 	bl	8008c68 <SWAPBYTE>
 800981a:	4603      	mov	r3, r0
 800981c:	461a      	mov	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	80da      	strh	r2, [r3, #6]
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_CtlError>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dc8:	2180      	movs	r1, #128	; 0x80
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fcd6 	bl	800a77c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fcd2 	bl	800a77c <USBD_LL_StallEP>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_GetString>:
=======
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009834:	2180      	movs	r1, #128	; 0x80
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fcd6 	bl	800a1e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800983c:	2100      	movs	r1, #0
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fcd2 	bl	800a1e8 <USBD_LL_StallEP>
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_GetString>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d036      	beq.n	8009e64 <USBD_GetString+0x84>
=======
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d036      	beq.n	80098d0 <USBD_GetString+0x84>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
    return;
  }

  pdesc = desc;
<<<<<<< HEAD
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009dfa:	6938      	ldr	r0, [r7, #16]
 8009dfc:	f000 f836 	bl	8009e6c <USBD_GetLen>
 8009e00:	4603      	mov	r3, r0
 8009e02:	3301      	adds	r3, #1
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	4413      	add	r3, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	7812      	ldrb	r2, [r2, #0]
 8009e18:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	4413      	add	r3, r2
 8009e26:	2203      	movs	r2, #3
 8009e28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e30:	e013      	b.n	8009e5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	4413      	add	r3, r2
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3301      	adds	r3, #1
 8009e42:	613b      	str	r3, [r7, #16]
    idx++;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	3301      	adds	r3, #1
 8009e48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	3301      	adds	r3, #1
 8009e58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e7      	bne.n	8009e32 <USBD_GetString+0x52>
 8009e62:	e000      	b.n	8009e66 <USBD_GetString+0x86>
    return;
 8009e64:	bf00      	nop
  }
}
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_GetLen>:
=======
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009866:	6938      	ldr	r0, [r7, #16]
 8009868:	f000 f836 	bl	80098d8 <USBD_GetLen>
 800986c:	4603      	mov	r3, r0
 800986e:	3301      	adds	r3, #1
 8009870:	b29b      	uxth	r3, r3
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800987a:	7dfb      	ldrb	r3, [r7, #23]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	4413      	add	r3, r2
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
  idx++;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	3301      	adds	r3, #1
 800988a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	4413      	add	r3, r2
 8009892:	2203      	movs	r2, #3
 8009894:	701a      	strb	r2, [r3, #0]
  idx++;
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	3301      	adds	r3, #1
 800989a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800989c:	e013      	b.n	80098c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	4413      	add	r3, r2
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3301      	adds	r3, #1
 80098ae:	613b      	str	r3, [r7, #16]
    idx++;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	3301      	adds	r3, #1
 80098b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4413      	add	r3, r2
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
    idx++;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	3301      	adds	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e7      	bne.n	800989e <USBD_GetString+0x52>
 80098ce:	e000      	b.n	80098d2 <USBD_GetString+0x86>
    return;
 80098d0:	bf00      	nop
  }
}
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_GetLen>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e7c:	e005      	b.n	8009e8a <USBD_GetLen+0x1e>
  {
    len++;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	3301      	adds	r3, #1
 8009e82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f5      	bne.n	8009e7e <USBD_GetLen+0x12>
  }

  return len;
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBD_CtlSendData>:
=======
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098e8:	e005      	b.n	80098f6 <USBD_GetLen+0x1e>
  {
    len++;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	3301      	adds	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	3301      	adds	r3, #1
 80098f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f5      	bne.n	80098ea <USBD_GetLen+0x12>
  }

  return len;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USBD_CtlSendData>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	619a      	str	r2, [r3, #24]
=======
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2202      	movs	r2, #2
 800991c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	619a      	str	r2, [r3, #24]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< HEAD
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	61da      	str	r2, [r3, #28]
=======
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	61da      	str	r2, [r3, #28]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< HEAD
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fce1 	bl	800a88e <USBD_LL_Transmit>

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_CtlContinueSendData>:
=======
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	2100      	movs	r1, #0
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fce1 	bl	800a2fa <USBD_LL_Transmit>

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_CtlContinueSendData>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 fcd0 	bl	800a88e <USBD_LL_Transmit>

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_CtlPrepareRx>:
=======
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	60b9      	str	r1, [r7, #8]
 800994c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	2100      	movs	r1, #0
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fcd0 	bl	800a2fa <USBD_LL_Transmit>

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_CtlPrepareRx>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2203      	movs	r2, #3
 8009f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
=======
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2203      	movs	r2, #3
 8009974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< HEAD
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
=======
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< HEAD
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	2100      	movs	r1, #0
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fcd4 	bl	800a8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_CtlContinueRx>:
=======
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	2100      	movs	r1, #0
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fcd4 	bl	800a33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_CtlContinueRx>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	2100      	movs	r1, #0
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 fcc3 	bl	800a8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_CtlSendStatus>:
=======
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	2100      	movs	r1, #0
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fcc3 	bl	800a33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_CtlSendStatus>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2204      	movs	r2, #4
 8009f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f64:	2300      	movs	r3, #0
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fc8f 	bl	800a88e <USBD_LL_Transmit>

  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_CtlReceiveStatus>:
=======
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2204      	movs	r2, #4
 80099cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099d0:	2300      	movs	r3, #0
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fc8f 	bl	800a2fa <USBD_LL_Transmit>

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_CtlReceiveStatus>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2205      	movs	r2, #5
 8009f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fc9d 	bl	800a8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <MX_USB_DEVICE_Init>:
=======
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2205      	movs	r2, #5
 80099f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099f6:	2300      	movs	r3, #0
 80099f8:	2200      	movs	r2, #0
 80099fa:	2100      	movs	r1, #0
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fc9d 	bl	800a33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <MX_USB_DEVICE_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
=======
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	4912      	ldr	r1, [pc, #72]	; (8009ff0 <MX_USB_DEVICE_Init+0x50>)
 8009fa8:	4812      	ldr	r0, [pc, #72]	; (8009ff4 <MX_USB_DEVICE_Init+0x54>)
 8009faa:	f7fe fd01 	bl	80089b0 <USBD_Init>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fb4:	f7f7 fee6 	bl	8001d84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fb8:	490f      	ldr	r1, [pc, #60]	; (8009ff8 <MX_USB_DEVICE_Init+0x58>)
 8009fba:	480e      	ldr	r0, [pc, #56]	; (8009ff4 <MX_USB_DEVICE_Init+0x54>)
 8009fbc:	f7fe fd28 	bl	8008a10 <USBD_RegisterClass>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fc6:	f7f7 fedd 	bl	8001d84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fca:	490c      	ldr	r1, [pc, #48]	; (8009ffc <MX_USB_DEVICE_Init+0x5c>)
 8009fcc:	4809      	ldr	r0, [pc, #36]	; (8009ff4 <MX_USB_DEVICE_Init+0x54>)
 8009fce:	f7fe fc1f 	bl	8008810 <USBD_CDC_RegisterInterface>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fd8:	f7f7 fed4 	bl	8001d84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fdc:	4805      	ldr	r0, [pc, #20]	; (8009ff4 <MX_USB_DEVICE_Init+0x54>)
 8009fde:	f7fe fd4d 	bl	8008a7c <USBD_Start>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fe8:	f7f7 fecc 	bl	8001d84 <Error_Handler>
=======
 8009a10:	2200      	movs	r2, #0
 8009a12:	4912      	ldr	r1, [pc, #72]	; (8009a5c <MX_USB_DEVICE_Init+0x50>)
 8009a14:	4812      	ldr	r0, [pc, #72]	; (8009a60 <MX_USB_DEVICE_Init+0x54>)
 8009a16:	f7fe fd01 	bl	800841c <USBD_Init>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a20:	f7f7 ff1a 	bl	8001858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a24:	490f      	ldr	r1, [pc, #60]	; (8009a64 <MX_USB_DEVICE_Init+0x58>)
 8009a26:	480e      	ldr	r0, [pc, #56]	; (8009a60 <MX_USB_DEVICE_Init+0x54>)
 8009a28:	f7fe fd28 	bl	800847c <USBD_RegisterClass>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a32:	f7f7 ff11 	bl	8001858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a36:	490c      	ldr	r1, [pc, #48]	; (8009a68 <MX_USB_DEVICE_Init+0x5c>)
 8009a38:	4809      	ldr	r0, [pc, #36]	; (8009a60 <MX_USB_DEVICE_Init+0x54>)
 8009a3a:	f7fe fc1f 	bl	800827c <USBD_CDC_RegisterInterface>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a44:	f7f7 ff08 	bl	8001858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a48:	4805      	ldr	r0, [pc, #20]	; (8009a60 <MX_USB_DEVICE_Init+0x54>)
 8009a4a:	f7fe fd4d 	bl	80084e8 <USBD_Start>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a54:	f7f7 ff00 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 8009fec:	bf00      	nop
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	200000ac 	.word	0x200000ac
 8009ff4:	2000043c 	.word	0x2000043c
 8009ff8:	20000018 	.word	0x20000018
 8009ffc:	20000098 	.word	0x20000098

0800a000 <CDC_Init_FS>:
=======
 8009a58:	bf00      	nop
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	200000ac 	.word	0x200000ac
 8009a60:	200003d8 	.word	0x200003d8
 8009a64:	20000018 	.word	0x20000018
 8009a68:	20000098 	.word	0x20000098

08009a6c <CDC_Init_FS>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a004:	2200      	movs	r2, #0
 800a006:	4905      	ldr	r1, [pc, #20]	; (800a01c <CDC_Init_FS+0x1c>)
 800a008:	4805      	ldr	r0, [pc, #20]	; (800a020 <CDC_Init_FS+0x20>)
 800a00a:	f7fe fc1b 	bl	8008844 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a00e:	4905      	ldr	r1, [pc, #20]	; (800a024 <CDC_Init_FS+0x24>)
 800a010:	4803      	ldr	r0, [pc, #12]	; (800a020 <CDC_Init_FS+0x20>)
 800a012:	f7fe fc39 	bl	8008888 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a016:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a018:	4618      	mov	r0, r3
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000f18 	.word	0x20000f18
 800a020:	2000043c 	.word	0x2000043c
 800a024:	20000718 	.word	0x20000718

0800a028 <CDC_DeInit_FS>:
=======
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a70:	2200      	movs	r2, #0
 8009a72:	4905      	ldr	r1, [pc, #20]	; (8009a88 <CDC_Init_FS+0x1c>)
 8009a74:	4805      	ldr	r0, [pc, #20]	; (8009a8c <CDC_Init_FS+0x20>)
 8009a76:	f7fe fc1b 	bl	80082b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a7a:	4905      	ldr	r1, [pc, #20]	; (8009a90 <CDC_Init_FS+0x24>)
 8009a7c:	4803      	ldr	r0, [pc, #12]	; (8009a8c <CDC_Init_FS+0x20>)
 8009a7e:	f7fe fc39 	bl	80082f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20000eb4 	.word	0x20000eb4
 8009a8c:	200003d8 	.word	0x200003d8
 8009a90:	200006b4 	.word	0x200006b4

08009a94 <CDC_DeInit_FS>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a02c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a02e:	4618      	mov	r0, r3
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <CDC_Control_FS>:
=======
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <CDC_Control_FS>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< HEAD
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	6039      	str	r1, [r7, #0]
 800a042:	71fb      	strb	r3, [r7, #7]
 800a044:	4613      	mov	r3, r2
 800a046:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b23      	cmp	r3, #35	; 0x23
 800a04c:	d84a      	bhi.n	800a0e4 <CDC_Control_FS+0xac>
 800a04e:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <CDC_Control_FS+0x1c>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a0e5 	.word	0x0800a0e5
 800a058:	0800a0e5 	.word	0x0800a0e5
 800a05c:	0800a0e5 	.word	0x0800a0e5
 800a060:	0800a0e5 	.word	0x0800a0e5
 800a064:	0800a0e5 	.word	0x0800a0e5
 800a068:	0800a0e5 	.word	0x0800a0e5
 800a06c:	0800a0e5 	.word	0x0800a0e5
 800a070:	0800a0e5 	.word	0x0800a0e5
 800a074:	0800a0e5 	.word	0x0800a0e5
 800a078:	0800a0e5 	.word	0x0800a0e5
 800a07c:	0800a0e5 	.word	0x0800a0e5
 800a080:	0800a0e5 	.word	0x0800a0e5
 800a084:	0800a0e5 	.word	0x0800a0e5
 800a088:	0800a0e5 	.word	0x0800a0e5
 800a08c:	0800a0e5 	.word	0x0800a0e5
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a0e5 	.word	0x0800a0e5
 800a098:	0800a0e5 	.word	0x0800a0e5
 800a09c:	0800a0e5 	.word	0x0800a0e5
 800a0a0:	0800a0e5 	.word	0x0800a0e5
 800a0a4:	0800a0e5 	.word	0x0800a0e5
 800a0a8:	0800a0e5 	.word	0x0800a0e5
 800a0ac:	0800a0e5 	.word	0x0800a0e5
 800a0b0:	0800a0e5 	.word	0x0800a0e5
 800a0b4:	0800a0e5 	.word	0x0800a0e5
 800a0b8:	0800a0e5 	.word	0x0800a0e5
 800a0bc:	0800a0e5 	.word	0x0800a0e5
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a0e5 	.word	0x0800a0e5
 800a0c8:	0800a0e5 	.word	0x0800a0e5
 800a0cc:	0800a0e5 	.word	0x0800a0e5
 800a0d0:	0800a0e5 	.word	0x0800a0e5
 800a0d4:	0800a0e5 	.word	0x0800a0e5
 800a0d8:	0800a0e5 	.word	0x0800a0e5
 800a0dc:	0800a0e5 	.word	0x0800a0e5
 800a0e0:	0800a0e5 	.word	0x0800a0e5
=======
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b23      	cmp	r3, #35	; 0x23
 8009ab8:	d84a      	bhi.n	8009b50 <CDC_Control_FS+0xac>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <CDC_Control_FS+0x1c>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009b51 	.word	0x08009b51
 8009ac4:	08009b51 	.word	0x08009b51
 8009ac8:	08009b51 	.word	0x08009b51
 8009acc:	08009b51 	.word	0x08009b51
 8009ad0:	08009b51 	.word	0x08009b51
 8009ad4:	08009b51 	.word	0x08009b51
 8009ad8:	08009b51 	.word	0x08009b51
 8009adc:	08009b51 	.word	0x08009b51
 8009ae0:	08009b51 	.word	0x08009b51
 8009ae4:	08009b51 	.word	0x08009b51
 8009ae8:	08009b51 	.word	0x08009b51
 8009aec:	08009b51 	.word	0x08009b51
 8009af0:	08009b51 	.word	0x08009b51
 8009af4:	08009b51 	.word	0x08009b51
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b51 	.word	0x08009b51
 8009b00:	08009b51 	.word	0x08009b51
 8009b04:	08009b51 	.word	0x08009b51
 8009b08:	08009b51 	.word	0x08009b51
 8009b0c:	08009b51 	.word	0x08009b51
 8009b10:	08009b51 	.word	0x08009b51
 8009b14:	08009b51 	.word	0x08009b51
 8009b18:	08009b51 	.word	0x08009b51
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b51 	.word	0x08009b51
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	08009b51 	.word	0x08009b51
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b51 	.word	0x08009b51
 8009b44:	08009b51 	.word	0x08009b51
 8009b48:	08009b51 	.word	0x08009b51
 8009b4c:	08009b51 	.word	0x08009b51
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< HEAD
 800a0e4:	bf00      	nop
  }

  return (USBD_OK);
 800a0e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <CDC_Receive_FS>:
=======
 8009b50:	bf00      	nop
  }

  return (USBD_OK);
 8009b52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <CDC_Receive_FS>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< HEAD
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4805      	ldr	r0, [pc, #20]	; (800a118 <CDC_Receive_FS+0x24>)
 800a102:	f7fe fbc1 	bl	8008888 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a106:	4804      	ldr	r0, [pc, #16]	; (800a118 <CDC_Receive_FS+0x24>)
 800a108:	f7fe fc1c 	bl	8008944 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a10c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	2000043c 	.word	0x2000043c

0800a11c <CDC_Transmit_FS>:
=======
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	4805      	ldr	r0, [pc, #20]	; (8009b84 <CDC_Receive_FS+0x24>)
 8009b6e:	f7fe fbc1 	bl	80082f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b72:	4804      	ldr	r0, [pc, #16]	; (8009b84 <CDC_Receive_FS+0x24>)
 8009b74:	f7fe fc1c 	bl	80083b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200003d8 	.word	0x200003d8

08009b88 <CDC_Transmit_FS>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
<<<<<<< HEAD
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a12c:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <CDC_Transmit_FS+0x48>)
 800a12e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a132:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a13e:	2301      	movs	r3, #1
 800a140:	e00b      	b.n	800a15a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a142:	887b      	ldrh	r3, [r7, #2]
 800a144:	461a      	mov	r2, r3
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	4806      	ldr	r0, [pc, #24]	; (800a164 <CDC_Transmit_FS+0x48>)
 800a14a:	f7fe fb7b 	bl	8008844 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a14e:	4805      	ldr	r0, [pc, #20]	; (800a164 <CDC_Transmit_FS+0x48>)
 800a150:	f7fe fbb8 	bl	80088c4 <USBD_CDC_TransmitPacket>
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	2000043c 	.word	0x2000043c

0800a168 <CDC_TransmitCplt_FS>:
=======
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b98:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <CDC_Transmit_FS+0x48>)
 8009b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e00b      	b.n	8009bc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bae:	887b      	ldrh	r3, [r7, #2]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	4806      	ldr	r0, [pc, #24]	; (8009bd0 <CDC_Transmit_FS+0x48>)
 8009bb6:	f7fe fb7b 	bl	80082b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bba:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <CDC_Transmit_FS+0x48>)
 8009bbc:	f7fe fbb8 	bl	8008330 <USBD_CDC_TransmitPacket>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	200003d8 	.word	0x200003d8

08009bd4 <CDC_TransmitCplt_FS>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
<<<<<<< HEAD
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4613      	mov	r3, r2
 800a174:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	75fb      	strb	r3, [r7, #23]
=======
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
<<<<<<< HEAD
 800a17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <USBD_FS_DeviceDescriptor>:
=======
 8009be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
	...

08009bf8 <USBD_FS_DeviceDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2212      	movs	r2, #18
 800a19c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a19e:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	200000c8 	.word	0x200000c8

0800a1b0 <USBD_FS_LangIDStrDescriptor>:
=======
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2212      	movs	r2, #18
 8009c08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c0a:	4b03      	ldr	r3, [pc, #12]	; (8009c18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	200000c8 	.word	0x200000c8

08009c1c <USBD_FS_LangIDStrDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2204      	movs	r2, #4
 800a1c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1c2:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	200000dc 	.word	0x200000dc

0800a1d4 <USBD_FS_ProductStrDescriptor>:
=======
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c2e:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	200000dc 	.word	0x200000dc

08009c40 <USBD_FS_ProductStrDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	6039      	str	r1, [r7, #0]
 800a1de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d105      	bne.n	800a1f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	4907      	ldr	r1, [pc, #28]	; (800a208 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1ea:	4808      	ldr	r0, [pc, #32]	; (800a20c <USBD_FS_ProductStrDescriptor+0x38>)
 800a1ec:	f7ff fdf8 	bl	8009de0 <USBD_GetString>
 800a1f0:	e004      	b.n	800a1fc <USBD_FS_ProductStrDescriptor+0x28>
=======
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	4907      	ldr	r1, [pc, #28]	; (8009c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c56:	4808      	ldr	r0, [pc, #32]	; (8009c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c58:	f7ff fdf8 	bl	800984c <USBD_GetString>
 8009c5c:	e004      	b.n	8009c68 <USBD_FS_ProductStrDescriptor+0x28>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4904      	ldr	r1, [pc, #16]	; (800a208 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1f6:	4805      	ldr	r0, [pc, #20]	; (800a20c <USBD_FS_ProductStrDescriptor+0x38>)
 800a1f8:	f7ff fdf2 	bl	8009de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1fc:	4b02      	ldr	r3, [pc, #8]	; (800a208 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20001718 	.word	0x20001718
 800a20c:	0800b374 	.word	0x0800b374

0800a210 <USBD_FS_ManufacturerStrDescriptor>:
=======
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4904      	ldr	r1, [pc, #16]	; (8009c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c62:	4805      	ldr	r0, [pc, #20]	; (8009c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c64:	f7ff fdf2 	bl	800984c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c68:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	200016b4 	.word	0x200016b4
 8009c78:	0800adcc 	.word	0x0800adcc

08009c7c <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	4904      	ldr	r1, [pc, #16]	; (800a230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a220:	4804      	ldr	r0, [pc, #16]	; (800a234 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a222:	f7ff fddd 	bl	8009de0 <USBD_GetString>
  return USBD_StrDesc;
 800a226:	4b02      	ldr	r3, [pc, #8]	; (800a230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20001718 	.word	0x20001718
 800a234:	0800b38c 	.word	0x0800b38c

0800a238 <USBD_FS_SerialStrDescriptor>:
=======
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	4904      	ldr	r1, [pc, #16]	; (8009c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c8c:	4804      	ldr	r0, [pc, #16]	; (8009ca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c8e:	f7ff fddd 	bl	800984c <USBD_GetString>
  return USBD_StrDesc;
 8009c92:	4b02      	ldr	r3, [pc, #8]	; (8009c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200016b4 	.word	0x200016b4
 8009ca0:	0800ade4 	.word	0x0800ade4

08009ca4 <USBD_FS_SerialStrDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	221a      	movs	r2, #26
 800a248:	801a      	strh	r2, [r3, #0]
=======
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	6039      	str	r1, [r7, #0]
 8009cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	221a      	movs	r2, #26
 8009cb4:	801a      	strh	r2, [r3, #0]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 800a24a:	f000 f843 	bl	800a2d4 <Get_SerialNum>
=======
 8009cb6:	f000 f843 	bl	8009d40 <Get_SerialNum>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 800a24e:	4b02      	ldr	r3, [pc, #8]	; (800a258 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200000e0 	.word	0x200000e0

0800a25c <USBD_FS_ConfigStrDescriptor>:
=======
 8009cba:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	200000e0 	.word	0x200000e0

08009cc8 <USBD_FS_ConfigStrDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	4907      	ldr	r1, [pc, #28]	; (800a290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a272:	4808      	ldr	r0, [pc, #32]	; (800a294 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a274:	f7ff fdb4 	bl	8009de0 <USBD_GetString>
 800a278:	e004      	b.n	800a284 <USBD_FS_ConfigStrDescriptor+0x28>
=======
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	4907      	ldr	r1, [pc, #28]	; (8009cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cde:	4808      	ldr	r0, [pc, #32]	; (8009d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ce0:	f7ff fdb4 	bl	800984c <USBD_GetString>
 8009ce4:	e004      	b.n	8009cf0 <USBD_FS_ConfigStrDescriptor+0x28>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4904      	ldr	r1, [pc, #16]	; (800a290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a27e:	4805      	ldr	r0, [pc, #20]	; (800a294 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a280:	f7ff fdae 	bl	8009de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a284:	4b02      	ldr	r3, [pc, #8]	; (800a290 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20001718 	.word	0x20001718
 800a294:	0800b3a0 	.word	0x0800b3a0

0800a298 <USBD_FS_InterfaceStrDescriptor>:
=======
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4904      	ldr	r1, [pc, #16]	; (8009cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cea:	4805      	ldr	r0, [pc, #20]	; (8009d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cec:	f7ff fdae 	bl	800984c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf0:	4b02      	ldr	r3, [pc, #8]	; (8009cfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	200016b4 	.word	0x200016b4
 8009d00:	0800adf8 	.word	0x0800adf8

08009d04 <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4907      	ldr	r1, [pc, #28]	; (800a2cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ae:	4808      	ldr	r0, [pc, #32]	; (800a2d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2b0:	f7ff fd96 	bl	8009de0 <USBD_GetString>
 800a2b4:	e004      	b.n	800a2c0 <USBD_FS_InterfaceStrDescriptor+0x28>
=======
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	6039      	str	r1, [r7, #0]
 8009d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d105      	bne.n	8009d22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	4907      	ldr	r1, [pc, #28]	; (8009d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d1a:	4808      	ldr	r0, [pc, #32]	; (8009d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d1c:	f7ff fd96 	bl	800984c <USBD_GetString>
 8009d20:	e004      	b.n	8009d2c <USBD_FS_InterfaceStrDescriptor+0x28>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4904      	ldr	r1, [pc, #16]	; (800a2cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ba:	4805      	ldr	r0, [pc, #20]	; (800a2d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2bc:	f7ff fd90 	bl	8009de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2c0:	4b02      	ldr	r3, [pc, #8]	; (800a2cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20001718 	.word	0x20001718
 800a2d0:	0800b3ac 	.word	0x0800b3ac

0800a2d4 <Get_SerialNum>:
=======
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	4904      	ldr	r1, [pc, #16]	; (8009d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d26:	4805      	ldr	r0, [pc, #20]	; (8009d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d28:	f7ff fd90 	bl	800984c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d2c:	4b02      	ldr	r3, [pc, #8]	; (8009d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200016b4 	.word	0x200016b4
 8009d3c:	0800ae04 	.word	0x0800ae04

08009d40 <Get_SerialNum>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
=======
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
<<<<<<< HEAD
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <Get_SerialNum+0x44>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2e0:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <Get_SerialNum+0x48>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2e6:	4b0e      	ldr	r3, [pc, #56]	; (800a320 <Get_SerialNum+0x4c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d009      	beq.n	800a30e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	4909      	ldr	r1, [pc, #36]	; (800a324 <Get_SerialNum+0x50>)
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 f814 	bl	800a32c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a304:	2204      	movs	r2, #4
 800a306:	4908      	ldr	r1, [pc, #32]	; (800a328 <Get_SerialNum+0x54>)
 800a308:	68b8      	ldr	r0, [r7, #8]
 800a30a:	f000 f80f 	bl	800a32c <IntToUnicode>
  }
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	1fff7a10 	.word	0x1fff7a10
 800a31c:	1fff7a14 	.word	0x1fff7a14
 800a320:	1fff7a18 	.word	0x1fff7a18
 800a324:	200000e2 	.word	0x200000e2
 800a328:	200000f2 	.word	0x200000f2

0800a32c <IntToUnicode>:
=======
 8009d46:	4b0f      	ldr	r3, [pc, #60]	; (8009d84 <Get_SerialNum+0x44>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <Get_SerialNum+0x48>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <Get_SerialNum+0x4c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d66:	2208      	movs	r2, #8
 8009d68:	4909      	ldr	r1, [pc, #36]	; (8009d90 <Get_SerialNum+0x50>)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f814 	bl	8009d98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d70:	2204      	movs	r2, #4
 8009d72:	4908      	ldr	r1, [pc, #32]	; (8009d94 <Get_SerialNum+0x54>)
 8009d74:	68b8      	ldr	r0, [r7, #8]
 8009d76:	f000 f80f 	bl	8009d98 <IntToUnicode>
  }
}
 8009d7a:	bf00      	nop
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	1fff7a10 	.word	0x1fff7a10
 8009d88:	1fff7a14 	.word	0x1fff7a14
 8009d8c:	1fff7a18 	.word	0x1fff7a18
 8009d90:	200000e2 	.word	0x200000e2
 8009d94:	200000f2 	.word	0x200000f2

08009d98 <IntToUnicode>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
 800a342:	e027      	b.n	800a394 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	0f1b      	lsrs	r3, r3, #28
 800a348:	2b09      	cmp	r3, #9
 800a34a:	d80b      	bhi.n	800a364 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	0f1b      	lsrs	r3, r3, #28
 800a350:	b2da      	uxtb	r2, r3
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4619      	mov	r1, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	440b      	add	r3, r1
 800a35c:	3230      	adds	r2, #48	; 0x30
 800a35e:	b2d2      	uxtb	r2, r2
 800a360:	701a      	strb	r2, [r3, #0]
 800a362:	e00a      	b.n	800a37a <IntToUnicode+0x4e>
=======
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]
 8009dae:	e027      	b.n	8009e00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	0f1b      	lsrs	r3, r3, #28
 8009db4:	2b09      	cmp	r3, #9
 8009db6:	d80b      	bhi.n	8009dd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	0f1b      	lsrs	r3, r3, #28
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	440b      	add	r3, r1
 8009dc8:	3230      	adds	r2, #48	; 0x30
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	e00a      	b.n	8009de6 <IntToUnicode+0x4e>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	0f1b      	lsrs	r3, r3, #28
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	7dfb      	ldrb	r3, [r7, #23]
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	4619      	mov	r1, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	440b      	add	r3, r1
 800a374:	3237      	adds	r2, #55	; 0x37
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	3301      	adds	r3, #1
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	3301      	adds	r3, #1
 800a392:	75fb      	strb	r3, [r7, #23]
 800a394:	7dfa      	ldrb	r2, [r7, #23]
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d3d3      	bcc.n	800a344 <IntToUnicode+0x18>
  }
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <HAL_PCD_MspInit>:
=======
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	0f1b      	lsrs	r3, r3, #28
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	4619      	mov	r1, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	440b      	add	r3, r1
 8009de0:	3237      	adds	r2, #55	; 0x37
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	3301      	adds	r3, #1
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	4413      	add	r3, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
 8009e00:	7dfa      	ldrb	r2, [r7, #23]
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d3d3      	bcc.n	8009db0 <IntToUnicode+0x18>
  }
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <HAL_PCD_MspInit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08a      	sub	sp, #40	; 0x28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3b4:	f107 0314 	add.w	r3, r7, #20
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	605a      	str	r2, [r3, #4]
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	60da      	str	r2, [r3, #12]
 800a3c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3cc:	d13a      	bne.n	800a444 <HAL_PCD_MspInit+0x98>
=======
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	609a      	str	r2, [r3, #8]
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e38:	d13a      	bne.n	8009eb0 <HAL_PCD_MspInit+0x98>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	4b1e      	ldr	r3, [pc, #120]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	4a1d      	ldr	r2, [pc, #116]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a3de:	4b1b      	ldr	r3, [pc, #108]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	613b      	str	r3, [r7, #16]
 800a3e8:	693b      	ldr	r3, [r7, #16]
=======
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	4b1e      	ldr	r3, [pc, #120]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e42:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e44:	f043 0301 	orr.w	r3, r3, #1
 8009e48:	6313      	str	r3, [r2, #48]	; 0x30
 8009e4a:	4b1b      	ldr	r3, [pc, #108]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	613b      	str	r3, [r7, #16]
 8009e54:	693b      	ldr	r3, [r7, #16]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 800a3ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a3ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3fc:	230a      	movs	r3, #10
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a400:	f107 0314 	add.w	r3, r7, #20
 800a404:	4619      	mov	r1, r3
 800a406:	4812      	ldr	r0, [pc, #72]	; (800a450 <HAL_PCD_MspInit+0xa4>)
 800a408:	f7f8 fc5e 	bl	8002cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	4a0e      	ldr	r2, [pc, #56]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a416:	6353      	str	r3, [r2, #52]	; 0x34
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	4b0b      	ldr	r3, [pc, #44]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a420:	4a0a      	ldr	r2, [pc, #40]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a426:	6453      	str	r3, [r2, #68]	; 0x44
 800a428:	4b08      	ldr	r3, [pc, #32]	; (800a44c <HAL_PCD_MspInit+0xa0>)
 800a42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a434:	2200      	movs	r2, #0
 800a436:	2100      	movs	r1, #0
 800a438:	2043      	movs	r0, #67	; 0x43
 800a43a:	f7f8 f902 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a43e:	2043      	movs	r0, #67	; 0x43
 800a440:	f7f8 f91b 	bl	800267a <HAL_NVIC_EnableIRQ>
=======
 8009e56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e64:	2303      	movs	r3, #3
 8009e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e68:	230a      	movs	r3, #10
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e6c:	f107 0314 	add.w	r3, r7, #20
 8009e70:	4619      	mov	r1, r3
 8009e72:	4812      	ldr	r0, [pc, #72]	; (8009ebc <HAL_PCD_MspInit+0xa4>)
 8009e74:	f7f8 fc5e 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e78:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7c:	4a0e      	ldr	r2, [pc, #56]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e82:	6353      	str	r3, [r2, #52]	; 0x34
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	4b0b      	ldr	r3, [pc, #44]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8c:	4a0a      	ldr	r2, [pc, #40]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e92:	6453      	str	r3, [r2, #68]	; 0x44
 8009e94:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <HAL_PCD_MspInit+0xa0>)
 8009e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	2043      	movs	r0, #67	; 0x43
 8009ea6:	f7f8 f902 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009eaa:	2043      	movs	r0, #67	; 0x43
 8009eac:	f7f8 f91b 	bl	80020e6 <HAL_NVIC_EnableIRQ>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
<<<<<<< HEAD
 800a444:	bf00      	nop
 800a446:	3728      	adds	r7, #40	; 0x28
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40023800 	.word	0x40023800
 800a450:	40020000 	.word	0x40020000

0800a454 <HAL_PCD_SetupStageCallback>:
=======
 8009eb0:	bf00      	nop
 8009eb2:	3728      	adds	r7, #40	; 0x28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	40023800 	.word	0x40023800
 8009ebc:	40020000 	.word	0x40020000

08009ec0 <HAL_PCD_SetupStageCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f7fe fb53 	bl	8008b16 <USBD_LL_SetupStage>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_PCD_DataOutStageCallback>:
=======
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f7fe fb53 	bl	8008582 <USBD_LL_SetupStage>
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <HAL_PCD_DataOutStageCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a48a:	78fa      	ldrb	r2, [r7, #3]
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	440b      	add	r3, r1
 800a498:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f7fe fb8d 	bl	8008bc0 <USBD_LL_DataOutStage>
}
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_PCD_DataInStageCallback>:
=======
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	4613      	mov	r3, r2
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	f7fe fb8d 	bl	800862c <USBD_LL_DataOutStage>
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <HAL_PCD_DataInStageCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a4c0:	78fa      	ldrb	r2, [r7, #3]
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	440b      	add	r3, r1
 800a4ce:	3320      	adds	r3, #32
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f7fe fc26 	bl	8008d26 <USBD_LL_DataInStage>
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_PCD_SOFCallback>:
=======
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	3320      	adds	r3, #32
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	78fb      	ldrb	r3, [r7, #3]
 8009f40:	4619      	mov	r1, r3
 8009f42:	f7fe fc26 	bl	8008792 <USBD_LL_DataInStage>
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_PCD_SOFCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fe fd60 	bl	8008fb6 <USBD_LL_SOF>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <HAL_PCD_ResetCallback>:
=======
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fd60 	bl	8008a22 <USBD_LL_SOF>
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_PCD_ResetCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a506:	2301      	movs	r3, #1
 800a508:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	79db      	ldrb	r3, [r3, #7]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d001      	beq.n	800a516 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a512:	f7f7 fc37 	bl	8001d84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a51c:	7bfa      	ldrb	r2, [r7, #15]
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f7fe fd04 	bl	8008f2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fcac 	bl	8008e8a <USBD_LL_Reset>
}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <HAL_PCD_SuspendCallback>:
=======
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f72:	2301      	movs	r3, #1
 8009f74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	79db      	ldrb	r3, [r3, #7]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d001      	beq.n	8009f82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f7e:	f7f7 fc6b 	bl	8001858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f88:	7bfa      	ldrb	r2, [r7, #15]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe fd04 	bl	800899a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fcac 	bl	80088f6 <USBD_LL_Reset>
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <HAL_PCD_SuspendCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fcff 	bl	8008f4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7adb      	ldrb	r3, [r3, #11]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <HAL_PCD_SuspendCallback+0x48>)
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	4a03      	ldr	r2, [pc, #12]	; (800a584 <HAL_PCD_SuspendCallback+0x48>)
 800a576:	f043 0306 	orr.w	r3, r3, #6
 800a57a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	e000ed00 	.word	0xe000ed00

0800a588 <HAL_PCD_ResumeCallback>:
=======
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fcff 	bl	80089ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7adb      	ldrb	r3, [r3, #11]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fdc:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <HAL_PCD_SuspendCallback+0x48>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a03      	ldr	r2, [pc, #12]	; (8009ff0 <HAL_PCD_SuspendCallback+0x48>)
 8009fe2:	f043 0306 	orr.w	r3, r3, #6
 8009fe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	e000ed00 	.word	0xe000ed00

08009ff4 <HAL_PCD_ResumeCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
=======
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< HEAD
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fcf5 	bl	8008f86 <USBD_LL_Resume>
}
 800a59c:	bf00      	nop
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_PCD_ISOOUTIncompleteCallback>:
=======
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fcf5 	bl	80089f2 <USBD_LL_Resume>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_PCD_ISOOUTIncompleteCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5b6:	78fa      	ldrb	r2, [r7, #3]
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fd4d 	bl	800905a <USBD_LL_IsoOUTIncomplete>
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_PCD_ISOINIncompleteCallback>:
=======
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fd4d 	bl	8008ac6 <USBD_LL_IsoOUTIncomplete>
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_PCD_ISOINIncompleteCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fd09 	bl	8008ff6 <USBD_LL_IsoINIncomplete>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_PCD_ConnectCallback>:
=======
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fd09 	bl	8008a62 <USBD_LL_IsoINIncomplete>
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_PCD_ConnectCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fd5f 	bl	80090be <USBD_LL_DevConnected>
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <HAL_PCD_DisconnectCallback>:
=======
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fd5f 	bl	8008b2a <USBD_LL_DevConnected>
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_PCD_DisconnectCallback>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fd5c 	bl	80090d4 <USBD_LL_DevDisconnected>
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_LL_Init>:
=======
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fd5c 	bl	8008b40 <USBD_LL_DevDisconnected>
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_LL_Init>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d13c      	bne.n	800a6ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a634:	4a20      	ldr	r2, [pc, #128]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a1e      	ldr	r2, [pc, #120]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a640:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a644:	4b1c      	ldr	r3, [pc, #112]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a64a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a64c:	4b1a      	ldr	r3, [pc, #104]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a64e:	2204      	movs	r2, #4
 800a650:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a652:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a654:	2202      	movs	r2, #2
 800a656:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a658:	4b17      	ldr	r3, [pc, #92]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a65e:	4b16      	ldr	r3, [pc, #88]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a660:	2202      	movs	r2, #2
 800a662:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a664:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a666:	2201      	movs	r2, #1
 800a668:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a66a:	4b13      	ldr	r3, [pc, #76]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a670:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a672:	2200      	movs	r2, #0
 800a674:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a676:	4b10      	ldr	r3, [pc, #64]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a678:	2200      	movs	r2, #0
 800a67a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a67c:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a67e:	2200      	movs	r2, #0
 800a680:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a682:	480d      	ldr	r0, [pc, #52]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a684:	f7f8 fcbd 	bl	8003002 <HAL_PCD_Init>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a68e:	f7f7 fb79 	bl	8001d84 <Error_Handler>
=======
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d13c      	bne.n	800a11a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0a0:	4a20      	ldr	r2, [pc, #128]	; (800a124 <USBD_LL_Init+0x94>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a1e      	ldr	r2, [pc, #120]	; (800a124 <USBD_LL_Init+0x94>)
 800a0ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0b0:	4b1c      	ldr	r3, [pc, #112]	; (800a124 <USBD_LL_Init+0x94>)
 800a0b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <USBD_LL_Init+0x94>)
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0be:	4b19      	ldr	r3, [pc, #100]	; (800a124 <USBD_LL_Init+0x94>)
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0c4:	4b17      	ldr	r3, [pc, #92]	; (800a124 <USBD_LL_Init+0x94>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0ca:	4b16      	ldr	r3, [pc, #88]	; (800a124 <USBD_LL_Init+0x94>)
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a0d0:	4b14      	ldr	r3, [pc, #80]	; (800a124 <USBD_LL_Init+0x94>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a0d6:	4b13      	ldr	r3, [pc, #76]	; (800a124 <USBD_LL_Init+0x94>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <USBD_LL_Init+0x94>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a0e2:	4b10      	ldr	r3, [pc, #64]	; (800a124 <USBD_LL_Init+0x94>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0e8:	4b0e      	ldr	r3, [pc, #56]	; (800a124 <USBD_LL_Init+0x94>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0ee:	480d      	ldr	r0, [pc, #52]	; (800a124 <USBD_LL_Init+0x94>)
 800a0f0:	f7f8 fcbd 	bl	8002a6e <HAL_PCD_Init>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0fa:	f7f7 fbad 	bl	8001858 <Error_Handler>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
<<<<<<< HEAD
 800a692:	2180      	movs	r1, #128	; 0x80
 800a694:	4808      	ldr	r0, [pc, #32]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a696:	f7f9 fee8 	bl	800446a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a69a:	2240      	movs	r2, #64	; 0x40
 800a69c:	2100      	movs	r1, #0
 800a69e:	4806      	ldr	r0, [pc, #24]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a6a0:	f7f9 fe9c 	bl	80043dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6a4:	2280      	movs	r2, #128	; 0x80
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	4803      	ldr	r0, [pc, #12]	; (800a6b8 <USBD_LL_Init+0x94>)
 800a6aa:	f7f9 fe97 	bl	80043dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	20001918 	.word	0x20001918

0800a6bc <USBD_LL_Start>:
=======
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	4808      	ldr	r0, [pc, #32]	; (800a124 <USBD_LL_Init+0x94>)
 800a102:	f7f9 fee8 	bl	8003ed6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a106:	2240      	movs	r2, #64	; 0x40
 800a108:	2100      	movs	r1, #0
 800a10a:	4806      	ldr	r0, [pc, #24]	; (800a124 <USBD_LL_Init+0x94>)
 800a10c:	f7f9 fe9c 	bl	8003e48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a110:	2280      	movs	r2, #128	; 0x80
 800a112:	2101      	movs	r1, #1
 800a114:	4803      	ldr	r0, [pc, #12]	; (800a124 <USBD_LL_Init+0x94>)
 800a116:	f7f9 fe97 	bl	8003e48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200018b4 	.word	0x200018b4

0800a128 <USBD_LL_Start>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f8 fda4 	bl	8003220 <HAL_PCD_Start>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f942 	bl	800a968 <USBD_Get_USB_Status>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_LL_OpenEP>:
=======
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f8 fda4 	bl	8002c8c <HAL_PCD_Start>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f942 	bl	800a3d4 <USBD_Get_USB_Status>
 800a150:	4603      	mov	r3, r0
 800a152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a154:	7bbb      	ldrb	r3, [r7, #14]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_LL_OpenEP>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	461a      	mov	r2, r3
 800a700:	4603      	mov	r3, r0
 800a702:	70fb      	strb	r3, [r7, #3]
 800a704:	460b      	mov	r3, r1
 800a706:	70bb      	strb	r3, [r7, #2]
 800a708:	4613      	mov	r3, r2
 800a70a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a71a:	78bb      	ldrb	r3, [r7, #2]
 800a71c:	883a      	ldrh	r2, [r7, #0]
 800a71e:	78f9      	ldrb	r1, [r7, #3]
 800a720:	f7f9 fa78 	bl	8003c14 <HAL_PCD_EP_Open>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f91c 	bl	800a968 <USBD_Get_USB_Status>
 800a730:	4603      	mov	r3, r0
 800a732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a734:	7bbb      	ldrb	r3, [r7, #14]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_LL_CloseEP>:
=======
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	4608      	mov	r0, r1
 800a168:	4611      	mov	r1, r2
 800a16a:	461a      	mov	r2, r3
 800a16c:	4603      	mov	r3, r0
 800a16e:	70fb      	strb	r3, [r7, #3]
 800a170:	460b      	mov	r3, r1
 800a172:	70bb      	strb	r3, [r7, #2]
 800a174:	4613      	mov	r3, r2
 800a176:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a186:	78bb      	ldrb	r3, [r7, #2]
 800a188:	883a      	ldrh	r2, [r7, #0]
 800a18a:	78f9      	ldrb	r1, [r7, #3]
 800a18c:	f7f9 fa78 	bl	8003680 <HAL_PCD_EP_Open>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f91c 	bl	800a3d4 <USBD_Get_USB_Status>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_LL_CloseEP>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7f9 fac1 	bl	8003ce4 <HAL_PCD_EP_Close>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f8fd 	bl	800a968 <USBD_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a772:	7bbb      	ldrb	r3, [r7, #14]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_LL_StallEP>:
=======
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f9 fac1 	bl	8003750 <HAL_PCD_EP_Close>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f8fd 	bl	800a3d4 <USBD_Get_USB_Status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_LL_StallEP>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f9 fb79 	bl	8003e92 <HAL_PCD_EP_SetStall>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f8de 	bl	800a968 <USBD_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_LL_ClearStallEP>:
=======
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	4611      	mov	r1, r2
 800a206:	4618      	mov	r0, r3
 800a208:	f7f9 fb79 	bl	80038fe <HAL_PCD_EP_SetStall>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4618      	mov	r0, r3
 800a214:	f000 f8de 	bl	800a3d4 <USBD_Get_USB_Status>
 800a218:	4603      	mov	r3, r0
 800a21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_LL_ClearStallEP>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7d4:	78fa      	ldrb	r2, [r7, #3]
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f9 fbbd 	bl	8003f58 <HAL_PCD_EP_ClrStall>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 f8bf 	bl	800a968 <USBD_Get_USB_Status>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBD_LL_IsStallEP>:
=======
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7f9 fbbd 	bl	80039c4 <HAL_PCD_EP_ClrStall>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f8bf 	bl	800a3d4 <USBD_Get_USB_Status>
 800a256:	4603      	mov	r3, r0
 800a258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_LL_IsStallEP>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a80a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a80c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a810:	2b00      	cmp	r3, #0
 800a812:	da0b      	bge.n	800a82c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a81a:	68f9      	ldr	r1, [r7, #12]
 800a81c:	4613      	mov	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	440b      	add	r3, r1
 800a826:	3316      	adds	r3, #22
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	e00b      	b.n	800a844 <USBD_LL_IsStallEP+0x4c>
=======
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da0b      	bge.n	800a298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a286:	68f9      	ldr	r1, [r7, #12]
 800a288:	4613      	mov	r3, r2
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	4413      	add	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	440b      	add	r3, r1
 800a292:	3316      	adds	r3, #22
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	e00b      	b.n	800a2b0 <USBD_LL_IsStallEP+0x4c>
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a832:	68f9      	ldr	r1, [r7, #12]
 800a834:	4613      	mov	r3, r2
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a842:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USBD_LL_SetUSBAddress>:
=======
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a2ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBD_LL_SetUSBAddress>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a86a:	78fa      	ldrb	r2, [r7, #3]
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f9 f9ac 	bl	8003bcc <HAL_PCD_SetAddress>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f874 	bl	800a968 <USBD_Get_USB_Status>
 800a880:	4603      	mov	r3, r0
 800a882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a884:	7bbb      	ldrb	r3, [r7, #14]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBD_LL_Transmit>:
=======
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f9 f9ac 	bl	8003638 <HAL_PCD_SetAddress>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f874 	bl	800a3d4 <USBD_Get_USB_Status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_Transmit>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
 800a88e:	b580      	push	{r7, lr}
 800a890:	b086      	sub	sp, #24
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
 800a89a:	460b      	mov	r3, r1
 800a89c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8ac:	7af9      	ldrb	r1, [r7, #11]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	f7f9 fab4 	bl	8003e1e <HAL_PCD_EP_Transmit>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 f853 	bl	800a968 <USBD_Get_USB_Status>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_LL_PrepareReceive>:
=======
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
 800a306:	460b      	mov	r3, r1
 800a308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a318:	7af9      	ldrb	r1, [r7, #11]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	f7f9 fab4 	bl	800388a <HAL_PCD_EP_Transmit>
 800a322:	4603      	mov	r3, r0
 800a324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f853 	bl	800a3d4 <USBD_Get_USB_Status>
 800a32e:	4603      	mov	r3, r0
 800a330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a332:	7dbb      	ldrb	r3, [r7, #22]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_LL_PrepareReceive>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	607a      	str	r2, [r7, #4]
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8ee:	7af9      	ldrb	r1, [r7, #11]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	f7f9 fa40 	bl	8003d78 <HAL_PCD_EP_Receive>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f832 	bl	800a968 <USBD_Get_USB_Status>
 800a904:	4603      	mov	r3, r0
 800a906:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a908:	7dbb      	ldrb	r3, [r7, #22]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_LL_GetRxDataSize>:
=======
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	607a      	str	r2, [r7, #4]
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	460b      	mov	r3, r1
 800a34a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a35a:	7af9      	ldrb	r1, [r7, #11]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f7f9 fa40 	bl	80037e4 <HAL_PCD_EP_Receive>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f832 	bl	800a3d4 <USBD_Get_USB_Status>
 800a370:	4603      	mov	r3, r0
 800a372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a374:	7dbb      	ldrb	r3, [r7, #22]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_LL_GetRxDataSize>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f7f9 fa60 	bl	8003dee <HAL_PCD_EP_GetRxCount>
 800a92e:	4603      	mov	r3, r0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_static_malloc>:
=======
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f7f9 fa60 	bl	800385a <HAL_PCD_EP_GetRxCount>
 800a39a:	4603      	mov	r3, r0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_static_malloc>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <USBD_static_malloc+0x18>)
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20001dfc 	.word	0x20001dfc

0800a954 <USBD_static_free>:
=======
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <USBD_static_malloc+0x18>)
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	20001d98 	.word	0x20001d98

0800a3c0 <USBD_static_free>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <USBD_Get_USB_Status>:
=======
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]

}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USBD_Get_USB_Status>:
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	4603      	mov	r3, r0
 800a970:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d817      	bhi.n	800a9ac <USBD_Get_USB_Status+0x44>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <USBD_Get_USB_Status+0x1c>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800a995 	.word	0x0800a995
 800a988:	0800a99b 	.word	0x0800a99b
 800a98c:	0800a9a1 	.word	0x0800a9a1
 800a990:	0800a9a7 	.word	0x0800a9a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73fb      	strb	r3, [r7, #15]
    break;
 800a998:	e00b      	b.n	800a9b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a99a:	2303      	movs	r3, #3
 800a99c:	73fb      	strb	r3, [r7, #15]
    break;
 800a99e:	e008      	b.n	800a9b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a4:	e005      	b.n	800a9b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9aa:	e002      	b.n	800a9b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b0:	bf00      	nop
  }
  return usb_status;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <_vsiprintf_r>:
 800a9c0:	b500      	push	{lr}
 800a9c2:	b09b      	sub	sp, #108	; 0x6c
 800a9c4:	9100      	str	r1, [sp, #0]
 800a9c6:	9104      	str	r1, [sp, #16]
 800a9c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9cc:	9105      	str	r1, [sp, #20]
 800a9ce:	9102      	str	r1, [sp, #8]
 800a9d0:	4905      	ldr	r1, [pc, #20]	; (800a9e8 <_vsiprintf_r+0x28>)
 800a9d2:	9103      	str	r1, [sp, #12]
 800a9d4:	4669      	mov	r1, sp
 800a9d6:	f000 f999 	bl	800ad0c <_svfiprintf_r>
 800a9da:	9b00      	ldr	r3, [sp, #0]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	b01b      	add	sp, #108	; 0x6c
 800a9e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9e6:	bf00      	nop
 800a9e8:	ffff0208 	.word	0xffff0208

0800a9ec <vsiprintf>:
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	460a      	mov	r2, r1
 800a9f0:	4601      	mov	r1, r0
 800a9f2:	4802      	ldr	r0, [pc, #8]	; (800a9fc <vsiprintf+0x10>)
 800a9f4:	6800      	ldr	r0, [r0, #0]
 800a9f6:	f7ff bfe3 	b.w	800a9c0 <_vsiprintf_r>
 800a9fa:	bf00      	nop
 800a9fc:	20000148 	.word	0x20000148

0800aa00 <memset>:
 800aa00:	4402      	add	r2, r0
 800aa02:	4603      	mov	r3, r0
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d100      	bne.n	800aa0a <memset+0xa>
 800aa08:	4770      	bx	lr
 800aa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0e:	e7f9      	b.n	800aa04 <memset+0x4>

0800aa10 <__errno>:
 800aa10:	4b01      	ldr	r3, [pc, #4]	; (800aa18 <__errno+0x8>)
 800aa12:	6818      	ldr	r0, [r3, #0]
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	20000148 	.word	0x20000148

0800aa1c <__libc_init_array>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	4d0d      	ldr	r5, [pc, #52]	; (800aa54 <__libc_init_array+0x38>)
 800aa20:	4c0d      	ldr	r4, [pc, #52]	; (800aa58 <__libc_init_array+0x3c>)
 800aa22:	1b64      	subs	r4, r4, r5
 800aa24:	10a4      	asrs	r4, r4, #2
 800aa26:	2600      	movs	r6, #0
 800aa28:	42a6      	cmp	r6, r4
 800aa2a:	d109      	bne.n	800aa40 <__libc_init_array+0x24>
 800aa2c:	4d0b      	ldr	r5, [pc, #44]	; (800aa5c <__libc_init_array+0x40>)
 800aa2e:	4c0c      	ldr	r4, [pc, #48]	; (800aa60 <__libc_init_array+0x44>)
 800aa30:	f000 fc6a 	bl	800b308 <_init>
 800aa34:	1b64      	subs	r4, r4, r5
 800aa36:	10a4      	asrs	r4, r4, #2
 800aa38:	2600      	movs	r6, #0
 800aa3a:	42a6      	cmp	r6, r4
 800aa3c:	d105      	bne.n	800aa4a <__libc_init_array+0x2e>
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa44:	4798      	blx	r3
 800aa46:	3601      	adds	r6, #1
 800aa48:	e7ee      	b.n	800aa28 <__libc_init_array+0xc>
 800aa4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa4e:	4798      	blx	r3
 800aa50:	3601      	adds	r6, #1
 800aa52:	e7f2      	b.n	800aa3a <__libc_init_array+0x1e>
 800aa54:	0800b410 	.word	0x0800b410
 800aa58:	0800b410 	.word	0x0800b410
 800aa5c:	0800b410 	.word	0x0800b410
 800aa60:	0800b414 	.word	0x0800b414

0800aa64 <__retarget_lock_acquire_recursive>:
 800aa64:	4770      	bx	lr

0800aa66 <__retarget_lock_release_recursive>:
 800aa66:	4770      	bx	lr

0800aa68 <_free_r>:
 800aa68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa6a:	2900      	cmp	r1, #0
 800aa6c:	d044      	beq.n	800aaf8 <_free_r+0x90>
 800aa6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa72:	9001      	str	r0, [sp, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f1a1 0404 	sub.w	r4, r1, #4
 800aa7a:	bfb8      	it	lt
 800aa7c:	18e4      	addlt	r4, r4, r3
 800aa7e:	f000 f8df 	bl	800ac40 <__malloc_lock>
 800aa82:	4a1e      	ldr	r2, [pc, #120]	; (800aafc <_free_r+0x94>)
 800aa84:	9801      	ldr	r0, [sp, #4]
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	b933      	cbnz	r3, 800aa98 <_free_r+0x30>
 800aa8a:	6063      	str	r3, [r4, #4]
 800aa8c:	6014      	str	r4, [r2, #0]
 800aa8e:	b003      	add	sp, #12
 800aa90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa94:	f000 b8da 	b.w	800ac4c <__malloc_unlock>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d908      	bls.n	800aaae <_free_r+0x46>
 800aa9c:	6825      	ldr	r5, [r4, #0]
 800aa9e:	1961      	adds	r1, r4, r5
 800aaa0:	428b      	cmp	r3, r1
 800aaa2:	bf01      	itttt	eq
 800aaa4:	6819      	ldreq	r1, [r3, #0]
 800aaa6:	685b      	ldreq	r3, [r3, #4]
 800aaa8:	1949      	addeq	r1, r1, r5
 800aaaa:	6021      	streq	r1, [r4, #0]
 800aaac:	e7ed      	b.n	800aa8a <_free_r+0x22>
 800aaae:	461a      	mov	r2, r3
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	b10b      	cbz	r3, 800aab8 <_free_r+0x50>
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	d9fa      	bls.n	800aaae <_free_r+0x46>
 800aab8:	6811      	ldr	r1, [r2, #0]
 800aaba:	1855      	adds	r5, r2, r1
 800aabc:	42a5      	cmp	r5, r4
 800aabe:	d10b      	bne.n	800aad8 <_free_r+0x70>
 800aac0:	6824      	ldr	r4, [r4, #0]
 800aac2:	4421      	add	r1, r4
 800aac4:	1854      	adds	r4, r2, r1
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	6011      	str	r1, [r2, #0]
 800aaca:	d1e0      	bne.n	800aa8e <_free_r+0x26>
 800aacc:	681c      	ldr	r4, [r3, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	6053      	str	r3, [r2, #4]
 800aad2:	440c      	add	r4, r1
 800aad4:	6014      	str	r4, [r2, #0]
 800aad6:	e7da      	b.n	800aa8e <_free_r+0x26>
 800aad8:	d902      	bls.n	800aae0 <_free_r+0x78>
 800aada:	230c      	movs	r3, #12
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	e7d6      	b.n	800aa8e <_free_r+0x26>
 800aae0:	6825      	ldr	r5, [r4, #0]
 800aae2:	1961      	adds	r1, r4, r5
 800aae4:	428b      	cmp	r3, r1
 800aae6:	bf04      	itt	eq
 800aae8:	6819      	ldreq	r1, [r3, #0]
 800aaea:	685b      	ldreq	r3, [r3, #4]
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	bf04      	itt	eq
 800aaf0:	1949      	addeq	r1, r1, r5
 800aaf2:	6021      	streq	r1, [r4, #0]
 800aaf4:	6054      	str	r4, [r2, #4]
 800aaf6:	e7ca      	b.n	800aa8e <_free_r+0x26>
 800aaf8:	b003      	add	sp, #12
 800aafa:	bd30      	pop	{r4, r5, pc}
 800aafc:	2000215c 	.word	0x2000215c

0800ab00 <sbrk_aligned>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	4e0e      	ldr	r6, [pc, #56]	; (800ab3c <sbrk_aligned+0x3c>)
 800ab04:	460c      	mov	r4, r1
 800ab06:	6831      	ldr	r1, [r6, #0]
 800ab08:	4605      	mov	r5, r0
 800ab0a:	b911      	cbnz	r1, 800ab12 <sbrk_aligned+0x12>
 800ab0c:	f000 fba6 	bl	800b25c <_sbrk_r>
 800ab10:	6030      	str	r0, [r6, #0]
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	f000 fba1 	bl	800b25c <_sbrk_r>
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	d00a      	beq.n	800ab34 <sbrk_aligned+0x34>
 800ab1e:	1cc4      	adds	r4, r0, #3
 800ab20:	f024 0403 	bic.w	r4, r4, #3
 800ab24:	42a0      	cmp	r0, r4
 800ab26:	d007      	beq.n	800ab38 <sbrk_aligned+0x38>
 800ab28:	1a21      	subs	r1, r4, r0
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f000 fb96 	bl	800b25c <_sbrk_r>
 800ab30:	3001      	adds	r0, #1
 800ab32:	d101      	bne.n	800ab38 <sbrk_aligned+0x38>
 800ab34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab38:	4620      	mov	r0, r4
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	20002160 	.word	0x20002160

0800ab40 <_malloc_r>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	1ccd      	adds	r5, r1, #3
 800ab46:	f025 0503 	bic.w	r5, r5, #3
 800ab4a:	3508      	adds	r5, #8
 800ab4c:	2d0c      	cmp	r5, #12
 800ab4e:	bf38      	it	cc
 800ab50:	250c      	movcc	r5, #12
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	4607      	mov	r7, r0
 800ab56:	db01      	blt.n	800ab5c <_malloc_r+0x1c>
 800ab58:	42a9      	cmp	r1, r5
 800ab5a:	d905      	bls.n	800ab68 <_malloc_r+0x28>
 800ab5c:	230c      	movs	r3, #12
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	2600      	movs	r6, #0
 800ab62:	4630      	mov	r0, r6
 800ab64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac3c <_malloc_r+0xfc>
 800ab6c:	f000 f868 	bl	800ac40 <__malloc_lock>
 800ab70:	f8d8 3000 	ldr.w	r3, [r8]
 800ab74:	461c      	mov	r4, r3
 800ab76:	bb5c      	cbnz	r4, 800abd0 <_malloc_r+0x90>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f7ff ffc0 	bl	800ab00 <sbrk_aligned>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	4604      	mov	r4, r0
 800ab84:	d155      	bne.n	800ac32 <_malloc_r+0xf2>
 800ab86:	f8d8 4000 	ldr.w	r4, [r8]
 800ab8a:	4626      	mov	r6, r4
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	d145      	bne.n	800ac1c <_malloc_r+0xdc>
 800ab90:	2c00      	cmp	r4, #0
 800ab92:	d048      	beq.n	800ac26 <_malloc_r+0xe6>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	4631      	mov	r1, r6
 800ab98:	4638      	mov	r0, r7
 800ab9a:	eb04 0903 	add.w	r9, r4, r3
 800ab9e:	f000 fb5d 	bl	800b25c <_sbrk_r>
 800aba2:	4581      	cmp	r9, r0
 800aba4:	d13f      	bne.n	800ac26 <_malloc_r+0xe6>
 800aba6:	6821      	ldr	r1, [r4, #0]
 800aba8:	1a6d      	subs	r5, r5, r1
 800abaa:	4629      	mov	r1, r5
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff ffa7 	bl	800ab00 <sbrk_aligned>
 800abb2:	3001      	adds	r0, #1
 800abb4:	d037      	beq.n	800ac26 <_malloc_r+0xe6>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	442b      	add	r3, r5
 800abba:	6023      	str	r3, [r4, #0]
 800abbc:	f8d8 3000 	ldr.w	r3, [r8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d038      	beq.n	800ac36 <_malloc_r+0xf6>
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	42a2      	cmp	r2, r4
 800abc8:	d12b      	bne.n	800ac22 <_malloc_r+0xe2>
 800abca:	2200      	movs	r2, #0
 800abcc:	605a      	str	r2, [r3, #4]
 800abce:	e00f      	b.n	800abf0 <_malloc_r+0xb0>
 800abd0:	6822      	ldr	r2, [r4, #0]
 800abd2:	1b52      	subs	r2, r2, r5
 800abd4:	d41f      	bmi.n	800ac16 <_malloc_r+0xd6>
 800abd6:	2a0b      	cmp	r2, #11
 800abd8:	d917      	bls.n	800ac0a <_malloc_r+0xca>
 800abda:	1961      	adds	r1, r4, r5
 800abdc:	42a3      	cmp	r3, r4
 800abde:	6025      	str	r5, [r4, #0]
 800abe0:	bf18      	it	ne
 800abe2:	6059      	strne	r1, [r3, #4]
 800abe4:	6863      	ldr	r3, [r4, #4]
 800abe6:	bf08      	it	eq
 800abe8:	f8c8 1000 	streq.w	r1, [r8]
 800abec:	5162      	str	r2, [r4, r5]
 800abee:	604b      	str	r3, [r1, #4]
 800abf0:	4638      	mov	r0, r7
 800abf2:	f104 060b 	add.w	r6, r4, #11
 800abf6:	f000 f829 	bl	800ac4c <__malloc_unlock>
 800abfa:	f026 0607 	bic.w	r6, r6, #7
 800abfe:	1d23      	adds	r3, r4, #4
 800ac00:	1af2      	subs	r2, r6, r3
 800ac02:	d0ae      	beq.n	800ab62 <_malloc_r+0x22>
 800ac04:	1b9b      	subs	r3, r3, r6
 800ac06:	50a3      	str	r3, [r4, r2]
 800ac08:	e7ab      	b.n	800ab62 <_malloc_r+0x22>
 800ac0a:	42a3      	cmp	r3, r4
 800ac0c:	6862      	ldr	r2, [r4, #4]
 800ac0e:	d1dd      	bne.n	800abcc <_malloc_r+0x8c>
 800ac10:	f8c8 2000 	str.w	r2, [r8]
 800ac14:	e7ec      	b.n	800abf0 <_malloc_r+0xb0>
 800ac16:	4623      	mov	r3, r4
 800ac18:	6864      	ldr	r4, [r4, #4]
 800ac1a:	e7ac      	b.n	800ab76 <_malloc_r+0x36>
 800ac1c:	4634      	mov	r4, r6
 800ac1e:	6876      	ldr	r6, [r6, #4]
 800ac20:	e7b4      	b.n	800ab8c <_malloc_r+0x4c>
 800ac22:	4613      	mov	r3, r2
 800ac24:	e7cc      	b.n	800abc0 <_malloc_r+0x80>
 800ac26:	230c      	movs	r3, #12
 800ac28:	603b      	str	r3, [r7, #0]
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	f000 f80e 	bl	800ac4c <__malloc_unlock>
 800ac30:	e797      	b.n	800ab62 <_malloc_r+0x22>
 800ac32:	6025      	str	r5, [r4, #0]
 800ac34:	e7dc      	b.n	800abf0 <_malloc_r+0xb0>
 800ac36:	605b      	str	r3, [r3, #4]
 800ac38:	deff      	udf	#255	; 0xff
 800ac3a:	bf00      	nop
 800ac3c:	2000215c 	.word	0x2000215c

0800ac40 <__malloc_lock>:
 800ac40:	4801      	ldr	r0, [pc, #4]	; (800ac48 <__malloc_lock+0x8>)
 800ac42:	f7ff bf0f 	b.w	800aa64 <__retarget_lock_acquire_recursive>
 800ac46:	bf00      	nop
 800ac48:	20002158 	.word	0x20002158

0800ac4c <__malloc_unlock>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	; (800ac54 <__malloc_unlock+0x8>)
 800ac4e:	f7ff bf0a 	b.w	800aa66 <__retarget_lock_release_recursive>
 800ac52:	bf00      	nop
 800ac54:	20002158 	.word	0x20002158

0800ac58 <__ssputs_r>:
 800ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	688e      	ldr	r6, [r1, #8]
 800ac5e:	461f      	mov	r7, r3
 800ac60:	42be      	cmp	r6, r7
 800ac62:	680b      	ldr	r3, [r1, #0]
 800ac64:	4682      	mov	sl, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	4690      	mov	r8, r2
 800ac6a:	d82c      	bhi.n	800acc6 <__ssputs_r+0x6e>
 800ac6c:	898a      	ldrh	r2, [r1, #12]
 800ac6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac72:	d026      	beq.n	800acc2 <__ssputs_r+0x6a>
 800ac74:	6965      	ldr	r5, [r4, #20]
 800ac76:	6909      	ldr	r1, [r1, #16]
 800ac78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac7c:	eba3 0901 	sub.w	r9, r3, r1
 800ac80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac84:	1c7b      	adds	r3, r7, #1
 800ac86:	444b      	add	r3, r9
 800ac88:	106d      	asrs	r5, r5, #1
 800ac8a:	429d      	cmp	r5, r3
 800ac8c:	bf38      	it	cc
 800ac8e:	461d      	movcc	r5, r3
 800ac90:	0553      	lsls	r3, r2, #21
 800ac92:	d527      	bpl.n	800ace4 <__ssputs_r+0x8c>
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7ff ff53 	bl	800ab40 <_malloc_r>
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	b360      	cbz	r0, 800acf8 <__ssputs_r+0xa0>
 800ac9e:	6921      	ldr	r1, [r4, #16]
 800aca0:	464a      	mov	r2, r9
 800aca2:	f000 faeb 	bl	800b27c <memcpy>
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	6126      	str	r6, [r4, #16]
 800acb4:	6165      	str	r5, [r4, #20]
 800acb6:	444e      	add	r6, r9
 800acb8:	eba5 0509 	sub.w	r5, r5, r9
 800acbc:	6026      	str	r6, [r4, #0]
 800acbe:	60a5      	str	r5, [r4, #8]
 800acc0:	463e      	mov	r6, r7
 800acc2:	42be      	cmp	r6, r7
 800acc4:	d900      	bls.n	800acc8 <__ssputs_r+0x70>
 800acc6:	463e      	mov	r6, r7
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	4632      	mov	r2, r6
 800accc:	4641      	mov	r1, r8
 800acce:	f000 faab 	bl	800b228 <memmove>
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	4433      	add	r3, r6
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	2000      	movs	r0, #0
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	462a      	mov	r2, r5
 800ace6:	f000 fad7 	bl	800b298 <_realloc_r>
 800acea:	4606      	mov	r6, r0
 800acec:	2800      	cmp	r0, #0
 800acee:	d1e0      	bne.n	800acb2 <__ssputs_r+0x5a>
 800acf0:	6921      	ldr	r1, [r4, #16]
 800acf2:	4650      	mov	r0, sl
 800acf4:	f7ff feb8 	bl	800aa68 <_free_r>
 800acf8:	230c      	movs	r3, #12
 800acfa:	f8ca 3000 	str.w	r3, [sl]
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad0a:	e7e9      	b.n	800ace0 <__ssputs_r+0x88>

0800ad0c <_svfiprintf_r>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	4698      	mov	r8, r3
 800ad12:	898b      	ldrh	r3, [r1, #12]
 800ad14:	061b      	lsls	r3, r3, #24
 800ad16:	b09d      	sub	sp, #116	; 0x74
 800ad18:	4607      	mov	r7, r0
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	d50e      	bpl.n	800ad3e <_svfiprintf_r+0x32>
 800ad20:	690b      	ldr	r3, [r1, #16]
 800ad22:	b963      	cbnz	r3, 800ad3e <_svfiprintf_r+0x32>
 800ad24:	2140      	movs	r1, #64	; 0x40
 800ad26:	f7ff ff0b 	bl	800ab40 <_malloc_r>
 800ad2a:	6028      	str	r0, [r5, #0]
 800ad2c:	6128      	str	r0, [r5, #16]
 800ad2e:	b920      	cbnz	r0, 800ad3a <_svfiprintf_r+0x2e>
 800ad30:	230c      	movs	r3, #12
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad38:	e0d0      	b.n	800aedc <_svfiprintf_r+0x1d0>
 800ad3a:	2340      	movs	r3, #64	; 0x40
 800ad3c:	616b      	str	r3, [r5, #20]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	9309      	str	r3, [sp, #36]	; 0x24
 800ad42:	2320      	movs	r3, #32
 800ad44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad4c:	2330      	movs	r3, #48	; 0x30
 800ad4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aef4 <_svfiprintf_r+0x1e8>
 800ad52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad56:	f04f 0901 	mov.w	r9, #1
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	469a      	mov	sl, r3
 800ad5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad62:	b10a      	cbz	r2, 800ad68 <_svfiprintf_r+0x5c>
 800ad64:	2a25      	cmp	r2, #37	; 0x25
 800ad66:	d1f9      	bne.n	800ad5c <_svfiprintf_r+0x50>
 800ad68:	ebba 0b04 	subs.w	fp, sl, r4
 800ad6c:	d00b      	beq.n	800ad86 <_svfiprintf_r+0x7a>
 800ad6e:	465b      	mov	r3, fp
 800ad70:	4622      	mov	r2, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff ff6f 	bl	800ac58 <__ssputs_r>
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f000 80a9 	beq.w	800aed2 <_svfiprintf_r+0x1c6>
 800ad80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad82:	445a      	add	r2, fp
 800ad84:	9209      	str	r2, [sp, #36]	; 0x24
 800ad86:	f89a 3000 	ldrb.w	r3, [sl]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 80a1 	beq.w	800aed2 <_svfiprintf_r+0x1c6>
 800ad90:	2300      	movs	r3, #0
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad9a:	f10a 0a01 	add.w	sl, sl, #1
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	9307      	str	r3, [sp, #28]
 800ada2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ada6:	931a      	str	r3, [sp, #104]	; 0x68
 800ada8:	4654      	mov	r4, sl
 800adaa:	2205      	movs	r2, #5
 800adac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb0:	4850      	ldr	r0, [pc, #320]	; (800aef4 <_svfiprintf_r+0x1e8>)
 800adb2:	f7f5 fa15 	bl	80001e0 <memchr>
 800adb6:	9a04      	ldr	r2, [sp, #16]
 800adb8:	b9d8      	cbnz	r0, 800adf2 <_svfiprintf_r+0xe6>
 800adba:	06d0      	lsls	r0, r2, #27
 800adbc:	bf44      	itt	mi
 800adbe:	2320      	movmi	r3, #32
 800adc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc4:	0711      	lsls	r1, r2, #28
 800adc6:	bf44      	itt	mi
 800adc8:	232b      	movmi	r3, #43	; 0x2b
 800adca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adce:	f89a 3000 	ldrb.w	r3, [sl]
 800add2:	2b2a      	cmp	r3, #42	; 0x2a
 800add4:	d015      	beq.n	800ae02 <_svfiprintf_r+0xf6>
 800add6:	9a07      	ldr	r2, [sp, #28]
 800add8:	4654      	mov	r4, sl
 800adda:	2000      	movs	r0, #0
 800addc:	f04f 0c0a 	mov.w	ip, #10
 800ade0:	4621      	mov	r1, r4
 800ade2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ade6:	3b30      	subs	r3, #48	; 0x30
 800ade8:	2b09      	cmp	r3, #9
 800adea:	d94d      	bls.n	800ae88 <_svfiprintf_r+0x17c>
 800adec:	b1b0      	cbz	r0, 800ae1c <_svfiprintf_r+0x110>
 800adee:	9207      	str	r2, [sp, #28]
 800adf0:	e014      	b.n	800ae1c <_svfiprintf_r+0x110>
 800adf2:	eba0 0308 	sub.w	r3, r0, r8
 800adf6:	fa09 f303 	lsl.w	r3, r9, r3
 800adfa:	4313      	orrs	r3, r2
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	46a2      	mov	sl, r4
 800ae00:	e7d2      	b.n	800ada8 <_svfiprintf_r+0x9c>
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	1d19      	adds	r1, r3, #4
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	9103      	str	r1, [sp, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	bfbb      	ittet	lt
 800ae0e:	425b      	neglt	r3, r3
 800ae10:	f042 0202 	orrlt.w	r2, r2, #2
 800ae14:	9307      	strge	r3, [sp, #28]
 800ae16:	9307      	strlt	r3, [sp, #28]
 800ae18:	bfb8      	it	lt
 800ae1a:	9204      	strlt	r2, [sp, #16]
 800ae1c:	7823      	ldrb	r3, [r4, #0]
 800ae1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae20:	d10c      	bne.n	800ae3c <_svfiprintf_r+0x130>
 800ae22:	7863      	ldrb	r3, [r4, #1]
 800ae24:	2b2a      	cmp	r3, #42	; 0x2a
 800ae26:	d134      	bne.n	800ae92 <_svfiprintf_r+0x186>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	9203      	str	r2, [sp, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bfb8      	it	lt
 800ae34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae38:	3402      	adds	r4, #2
 800ae3a:	9305      	str	r3, [sp, #20]
 800ae3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af04 <_svfiprintf_r+0x1f8>
 800ae40:	7821      	ldrb	r1, [r4, #0]
 800ae42:	2203      	movs	r2, #3
 800ae44:	4650      	mov	r0, sl
 800ae46:	f7f5 f9cb 	bl	80001e0 <memchr>
 800ae4a:	b138      	cbz	r0, 800ae5c <_svfiprintf_r+0x150>
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	eba0 000a 	sub.w	r0, r0, sl
 800ae52:	2240      	movs	r2, #64	; 0x40
 800ae54:	4082      	lsls	r2, r0
 800ae56:	4313      	orrs	r3, r2
 800ae58:	3401      	adds	r4, #1
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae60:	4825      	ldr	r0, [pc, #148]	; (800aef8 <_svfiprintf_r+0x1ec>)
 800ae62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae66:	2206      	movs	r2, #6
 800ae68:	f7f5 f9ba 	bl	80001e0 <memchr>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d038      	beq.n	800aee2 <_svfiprintf_r+0x1d6>
 800ae70:	4b22      	ldr	r3, [pc, #136]	; (800aefc <_svfiprintf_r+0x1f0>)
 800ae72:	bb1b      	cbnz	r3, 800aebc <_svfiprintf_r+0x1b0>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	3307      	adds	r3, #7
 800ae78:	f023 0307 	bic.w	r3, r3, #7
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	4433      	add	r3, r6
 800ae84:	9309      	str	r3, [sp, #36]	; 0x24
 800ae86:	e768      	b.n	800ad5a <_svfiprintf_r+0x4e>
 800ae88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	2001      	movs	r0, #1
 800ae90:	e7a6      	b.n	800ade0 <_svfiprintf_r+0xd4>
 800ae92:	2300      	movs	r3, #0
 800ae94:	3401      	adds	r4, #1
 800ae96:	9305      	str	r3, [sp, #20]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f04f 0c0a 	mov.w	ip, #10
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea4:	3a30      	subs	r2, #48	; 0x30
 800aea6:	2a09      	cmp	r2, #9
 800aea8:	d903      	bls.n	800aeb2 <_svfiprintf_r+0x1a6>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0c6      	beq.n	800ae3c <_svfiprintf_r+0x130>
 800aeae:	9105      	str	r1, [sp, #20]
 800aeb0:	e7c4      	b.n	800ae3c <_svfiprintf_r+0x130>
 800aeb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e7f0      	b.n	800ae9e <_svfiprintf_r+0x192>
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	462a      	mov	r2, r5
 800aec2:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <_svfiprintf_r+0x1f4>)
 800aec4:	a904      	add	r1, sp, #16
 800aec6:	4638      	mov	r0, r7
 800aec8:	f3af 8000 	nop.w
 800aecc:	1c42      	adds	r2, r0, #1
 800aece:	4606      	mov	r6, r0
 800aed0:	d1d6      	bne.n	800ae80 <_svfiprintf_r+0x174>
 800aed2:	89ab      	ldrh	r3, [r5, #12]
 800aed4:	065b      	lsls	r3, r3, #25
 800aed6:	f53f af2d 	bmi.w	800ad34 <_svfiprintf_r+0x28>
 800aeda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aedc:	b01d      	add	sp, #116	; 0x74
 800aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee2:	ab03      	add	r3, sp, #12
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	462a      	mov	r2, r5
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <_svfiprintf_r+0x1f4>)
 800aeea:	a904      	add	r1, sp, #16
 800aeec:	4638      	mov	r0, r7
 800aeee:	f000 f879 	bl	800afe4 <_printf_i>
 800aef2:	e7eb      	b.n	800aecc <_svfiprintf_r+0x1c0>
 800aef4:	0800b3d4 	.word	0x0800b3d4
 800aef8:	0800b3de 	.word	0x0800b3de
 800aefc:	00000000 	.word	0x00000000
 800af00:	0800ac59 	.word	0x0800ac59
 800af04:	0800b3da 	.word	0x0800b3da

0800af08 <_printf_common>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	4616      	mov	r6, r2
 800af0e:	4699      	mov	r9, r3
 800af10:	688a      	ldr	r2, [r1, #8]
 800af12:	690b      	ldr	r3, [r1, #16]
 800af14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af18:	4293      	cmp	r3, r2
 800af1a:	bfb8      	it	lt
 800af1c:	4613      	movlt	r3, r2
 800af1e:	6033      	str	r3, [r6, #0]
 800af20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af24:	4607      	mov	r7, r0
 800af26:	460c      	mov	r4, r1
 800af28:	b10a      	cbz	r2, 800af2e <_printf_common+0x26>
 800af2a:	3301      	adds	r3, #1
 800af2c:	6033      	str	r3, [r6, #0]
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	0699      	lsls	r1, r3, #26
 800af32:	bf42      	ittt	mi
 800af34:	6833      	ldrmi	r3, [r6, #0]
 800af36:	3302      	addmi	r3, #2
 800af38:	6033      	strmi	r3, [r6, #0]
 800af3a:	6825      	ldr	r5, [r4, #0]
 800af3c:	f015 0506 	ands.w	r5, r5, #6
 800af40:	d106      	bne.n	800af50 <_printf_common+0x48>
 800af42:	f104 0a19 	add.w	sl, r4, #25
 800af46:	68e3      	ldr	r3, [r4, #12]
 800af48:	6832      	ldr	r2, [r6, #0]
 800af4a:	1a9b      	subs	r3, r3, r2
 800af4c:	42ab      	cmp	r3, r5
 800af4e:	dc26      	bgt.n	800af9e <_printf_common+0x96>
 800af50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af54:	1e13      	subs	r3, r2, #0
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	bf18      	it	ne
 800af5a:	2301      	movne	r3, #1
 800af5c:	0692      	lsls	r2, r2, #26
 800af5e:	d42b      	bmi.n	800afb8 <_printf_common+0xb0>
 800af60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af64:	4649      	mov	r1, r9
 800af66:	4638      	mov	r0, r7
 800af68:	47c0      	blx	r8
 800af6a:	3001      	adds	r0, #1
 800af6c:	d01e      	beq.n	800afac <_printf_common+0xa4>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	6922      	ldr	r2, [r4, #16]
 800af72:	f003 0306 	and.w	r3, r3, #6
 800af76:	2b04      	cmp	r3, #4
 800af78:	bf02      	ittt	eq
 800af7a:	68e5      	ldreq	r5, [r4, #12]
 800af7c:	6833      	ldreq	r3, [r6, #0]
 800af7e:	1aed      	subeq	r5, r5, r3
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	bf0c      	ite	eq
 800af84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af88:	2500      	movne	r5, #0
 800af8a:	4293      	cmp	r3, r2
 800af8c:	bfc4      	itt	gt
 800af8e:	1a9b      	subgt	r3, r3, r2
 800af90:	18ed      	addgt	r5, r5, r3
 800af92:	2600      	movs	r6, #0
 800af94:	341a      	adds	r4, #26
 800af96:	42b5      	cmp	r5, r6
 800af98:	d11a      	bne.n	800afd0 <_printf_common+0xc8>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e008      	b.n	800afb0 <_printf_common+0xa8>
 800af9e:	2301      	movs	r3, #1
 800afa0:	4652      	mov	r2, sl
 800afa2:	4649      	mov	r1, r9
 800afa4:	4638      	mov	r0, r7
 800afa6:	47c0      	blx	r8
 800afa8:	3001      	adds	r0, #1
 800afaa:	d103      	bne.n	800afb4 <_printf_common+0xac>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb4:	3501      	adds	r5, #1
 800afb6:	e7c6      	b.n	800af46 <_printf_common+0x3e>
 800afb8:	18e1      	adds	r1, r4, r3
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	2030      	movs	r0, #48	; 0x30
 800afbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afc2:	4422      	add	r2, r4
 800afc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afcc:	3302      	adds	r3, #2
 800afce:	e7c7      	b.n	800af60 <_printf_common+0x58>
 800afd0:	2301      	movs	r3, #1
 800afd2:	4622      	mov	r2, r4
 800afd4:	4649      	mov	r1, r9
 800afd6:	4638      	mov	r0, r7
 800afd8:	47c0      	blx	r8
 800afda:	3001      	adds	r0, #1
 800afdc:	d0e6      	beq.n	800afac <_printf_common+0xa4>
 800afde:	3601      	adds	r6, #1
 800afe0:	e7d9      	b.n	800af96 <_printf_common+0x8e>
	...

0800afe4 <_printf_i>:
 800afe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	7e0f      	ldrb	r7, [r1, #24]
 800afea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afec:	2f78      	cmp	r7, #120	; 0x78
 800afee:	4691      	mov	r9, r2
 800aff0:	4680      	mov	r8, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	469a      	mov	sl, r3
 800aff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800affa:	d807      	bhi.n	800b00c <_printf_i+0x28>
 800affc:	2f62      	cmp	r7, #98	; 0x62
 800affe:	d80a      	bhi.n	800b016 <_printf_i+0x32>
 800b000:	2f00      	cmp	r7, #0
 800b002:	f000 80d4 	beq.w	800b1ae <_printf_i+0x1ca>
 800b006:	2f58      	cmp	r7, #88	; 0x58
 800b008:	f000 80c0 	beq.w	800b18c <_printf_i+0x1a8>
 800b00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b014:	e03a      	b.n	800b08c <_printf_i+0xa8>
 800b016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b01a:	2b15      	cmp	r3, #21
 800b01c:	d8f6      	bhi.n	800b00c <_printf_i+0x28>
 800b01e:	a101      	add	r1, pc, #4	; (adr r1, 800b024 <_printf_i+0x40>)
 800b020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b024:	0800b07d 	.word	0x0800b07d
 800b028:	0800b091 	.word	0x0800b091
 800b02c:	0800b00d 	.word	0x0800b00d
 800b030:	0800b00d 	.word	0x0800b00d
 800b034:	0800b00d 	.word	0x0800b00d
 800b038:	0800b00d 	.word	0x0800b00d
 800b03c:	0800b091 	.word	0x0800b091
 800b040:	0800b00d 	.word	0x0800b00d
 800b044:	0800b00d 	.word	0x0800b00d
 800b048:	0800b00d 	.word	0x0800b00d
 800b04c:	0800b00d 	.word	0x0800b00d
 800b050:	0800b195 	.word	0x0800b195
 800b054:	0800b0bd 	.word	0x0800b0bd
 800b058:	0800b14f 	.word	0x0800b14f
 800b05c:	0800b00d 	.word	0x0800b00d
 800b060:	0800b00d 	.word	0x0800b00d
 800b064:	0800b1b7 	.word	0x0800b1b7
 800b068:	0800b00d 	.word	0x0800b00d
 800b06c:	0800b0bd 	.word	0x0800b0bd
 800b070:	0800b00d 	.word	0x0800b00d
 800b074:	0800b00d 	.word	0x0800b00d
 800b078:	0800b157 	.word	0x0800b157
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	602a      	str	r2, [r5, #0]
 800b084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b08c:	2301      	movs	r3, #1
 800b08e:	e09f      	b.n	800b1d0 <_printf_i+0x1ec>
 800b090:	6820      	ldr	r0, [r4, #0]
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	0607      	lsls	r7, r0, #24
 800b096:	f103 0104 	add.w	r1, r3, #4
 800b09a:	6029      	str	r1, [r5, #0]
 800b09c:	d501      	bpl.n	800b0a2 <_printf_i+0xbe>
 800b09e:	681e      	ldr	r6, [r3, #0]
 800b0a0:	e003      	b.n	800b0aa <_printf_i+0xc6>
 800b0a2:	0646      	lsls	r6, r0, #25
 800b0a4:	d5fb      	bpl.n	800b09e <_printf_i+0xba>
 800b0a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0aa:	2e00      	cmp	r6, #0
 800b0ac:	da03      	bge.n	800b0b6 <_printf_i+0xd2>
 800b0ae:	232d      	movs	r3, #45	; 0x2d
 800b0b0:	4276      	negs	r6, r6
 800b0b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b6:	485a      	ldr	r0, [pc, #360]	; (800b220 <_printf_i+0x23c>)
 800b0b8:	230a      	movs	r3, #10
 800b0ba:	e012      	b.n	800b0e2 <_printf_i+0xfe>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	6820      	ldr	r0, [r4, #0]
 800b0c0:	1d19      	adds	r1, r3, #4
 800b0c2:	6029      	str	r1, [r5, #0]
 800b0c4:	0605      	lsls	r5, r0, #24
 800b0c6:	d501      	bpl.n	800b0cc <_printf_i+0xe8>
 800b0c8:	681e      	ldr	r6, [r3, #0]
 800b0ca:	e002      	b.n	800b0d2 <_printf_i+0xee>
 800b0cc:	0641      	lsls	r1, r0, #25
 800b0ce:	d5fb      	bpl.n	800b0c8 <_printf_i+0xe4>
 800b0d0:	881e      	ldrh	r6, [r3, #0]
 800b0d2:	4853      	ldr	r0, [pc, #332]	; (800b220 <_printf_i+0x23c>)
 800b0d4:	2f6f      	cmp	r7, #111	; 0x6f
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2308      	moveq	r3, #8
 800b0da:	230a      	movne	r3, #10
 800b0dc:	2100      	movs	r1, #0
 800b0de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0e2:	6865      	ldr	r5, [r4, #4]
 800b0e4:	60a5      	str	r5, [r4, #8]
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	bfa2      	ittt	ge
 800b0ea:	6821      	ldrge	r1, [r4, #0]
 800b0ec:	f021 0104 	bicge.w	r1, r1, #4
 800b0f0:	6021      	strge	r1, [r4, #0]
 800b0f2:	b90e      	cbnz	r6, 800b0f8 <_printf_i+0x114>
 800b0f4:	2d00      	cmp	r5, #0
 800b0f6:	d04b      	beq.n	800b190 <_printf_i+0x1ac>
 800b0f8:	4615      	mov	r5, r2
 800b0fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0fe:	fb03 6711 	mls	r7, r3, r1, r6
 800b102:	5dc7      	ldrb	r7, [r0, r7]
 800b104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b108:	4637      	mov	r7, r6
 800b10a:	42bb      	cmp	r3, r7
 800b10c:	460e      	mov	r6, r1
 800b10e:	d9f4      	bls.n	800b0fa <_printf_i+0x116>
 800b110:	2b08      	cmp	r3, #8
 800b112:	d10b      	bne.n	800b12c <_printf_i+0x148>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	07de      	lsls	r6, r3, #31
 800b118:	d508      	bpl.n	800b12c <_printf_i+0x148>
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	6861      	ldr	r1, [r4, #4]
 800b11e:	4299      	cmp	r1, r3
 800b120:	bfde      	ittt	le
 800b122:	2330      	movle	r3, #48	; 0x30
 800b124:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b128:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b12c:	1b52      	subs	r2, r2, r5
 800b12e:	6122      	str	r2, [r4, #16]
 800b130:	f8cd a000 	str.w	sl, [sp]
 800b134:	464b      	mov	r3, r9
 800b136:	aa03      	add	r2, sp, #12
 800b138:	4621      	mov	r1, r4
 800b13a:	4640      	mov	r0, r8
 800b13c:	f7ff fee4 	bl	800af08 <_printf_common>
 800b140:	3001      	adds	r0, #1
 800b142:	d14a      	bne.n	800b1da <_printf_i+0x1f6>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b148:	b004      	add	sp, #16
 800b14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	f043 0320 	orr.w	r3, r3, #32
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	4833      	ldr	r0, [pc, #204]	; (800b224 <_printf_i+0x240>)
 800b158:	2778      	movs	r7, #120	; 0x78
 800b15a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	6829      	ldr	r1, [r5, #0]
 800b162:	061f      	lsls	r7, r3, #24
 800b164:	f851 6b04 	ldr.w	r6, [r1], #4
 800b168:	d402      	bmi.n	800b170 <_printf_i+0x18c>
 800b16a:	065f      	lsls	r7, r3, #25
 800b16c:	bf48      	it	mi
 800b16e:	b2b6      	uxthmi	r6, r6
 800b170:	07df      	lsls	r7, r3, #31
 800b172:	bf48      	it	mi
 800b174:	f043 0320 	orrmi.w	r3, r3, #32
 800b178:	6029      	str	r1, [r5, #0]
 800b17a:	bf48      	it	mi
 800b17c:	6023      	strmi	r3, [r4, #0]
 800b17e:	b91e      	cbnz	r6, 800b188 <_printf_i+0x1a4>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	f023 0320 	bic.w	r3, r3, #32
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	2310      	movs	r3, #16
 800b18a:	e7a7      	b.n	800b0dc <_printf_i+0xf8>
 800b18c:	4824      	ldr	r0, [pc, #144]	; (800b220 <_printf_i+0x23c>)
 800b18e:	e7e4      	b.n	800b15a <_printf_i+0x176>
 800b190:	4615      	mov	r5, r2
 800b192:	e7bd      	b.n	800b110 <_printf_i+0x12c>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	6826      	ldr	r6, [r4, #0]
 800b198:	6961      	ldr	r1, [r4, #20]
 800b19a:	1d18      	adds	r0, r3, #4
 800b19c:	6028      	str	r0, [r5, #0]
 800b19e:	0635      	lsls	r5, r6, #24
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	d501      	bpl.n	800b1a8 <_printf_i+0x1c4>
 800b1a4:	6019      	str	r1, [r3, #0]
 800b1a6:	e002      	b.n	800b1ae <_printf_i+0x1ca>
 800b1a8:	0670      	lsls	r0, r6, #25
 800b1aa:	d5fb      	bpl.n	800b1a4 <_printf_i+0x1c0>
 800b1ac:	8019      	strh	r1, [r3, #0]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	6123      	str	r3, [r4, #16]
 800b1b2:	4615      	mov	r5, r2
 800b1b4:	e7bc      	b.n	800b130 <_printf_i+0x14c>
 800b1b6:	682b      	ldr	r3, [r5, #0]
 800b1b8:	1d1a      	adds	r2, r3, #4
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	681d      	ldr	r5, [r3, #0]
 800b1be:	6862      	ldr	r2, [r4, #4]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f7f5 f80c 	bl	80001e0 <memchr>
 800b1c8:	b108      	cbz	r0, 800b1ce <_printf_i+0x1ea>
 800b1ca:	1b40      	subs	r0, r0, r5
 800b1cc:	6060      	str	r0, [r4, #4]
 800b1ce:	6863      	ldr	r3, [r4, #4]
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d8:	e7aa      	b.n	800b130 <_printf_i+0x14c>
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	462a      	mov	r2, r5
 800b1de:	4649      	mov	r1, r9
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	47d0      	blx	sl
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d0ad      	beq.n	800b144 <_printf_i+0x160>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	079b      	lsls	r3, r3, #30
 800b1ec:	d413      	bmi.n	800b216 <_printf_i+0x232>
 800b1ee:	68e0      	ldr	r0, [r4, #12]
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	4298      	cmp	r0, r3
 800b1f4:	bfb8      	it	lt
 800b1f6:	4618      	movlt	r0, r3
 800b1f8:	e7a6      	b.n	800b148 <_printf_i+0x164>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4649      	mov	r1, r9
 800b200:	4640      	mov	r0, r8
 800b202:	47d0      	blx	sl
 800b204:	3001      	adds	r0, #1
 800b206:	d09d      	beq.n	800b144 <_printf_i+0x160>
 800b208:	3501      	adds	r5, #1
 800b20a:	68e3      	ldr	r3, [r4, #12]
 800b20c:	9903      	ldr	r1, [sp, #12]
 800b20e:	1a5b      	subs	r3, r3, r1
 800b210:	42ab      	cmp	r3, r5
 800b212:	dcf2      	bgt.n	800b1fa <_printf_i+0x216>
 800b214:	e7eb      	b.n	800b1ee <_printf_i+0x20a>
 800b216:	2500      	movs	r5, #0
 800b218:	f104 0619 	add.w	r6, r4, #25
 800b21c:	e7f5      	b.n	800b20a <_printf_i+0x226>
 800b21e:	bf00      	nop
 800b220:	0800b3e5 	.word	0x0800b3e5
 800b224:	0800b3f6 	.word	0x0800b3f6

0800b228 <memmove>:
 800b228:	4288      	cmp	r0, r1
 800b22a:	b510      	push	{r4, lr}
 800b22c:	eb01 0402 	add.w	r4, r1, r2
 800b230:	d902      	bls.n	800b238 <memmove+0x10>
 800b232:	4284      	cmp	r4, r0
 800b234:	4623      	mov	r3, r4
 800b236:	d807      	bhi.n	800b248 <memmove+0x20>
 800b238:	1e43      	subs	r3, r0, #1
 800b23a:	42a1      	cmp	r1, r4
 800b23c:	d008      	beq.n	800b250 <memmove+0x28>
 800b23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b246:	e7f8      	b.n	800b23a <memmove+0x12>
 800b248:	4402      	add	r2, r0
 800b24a:	4601      	mov	r1, r0
 800b24c:	428a      	cmp	r2, r1
 800b24e:	d100      	bne.n	800b252 <memmove+0x2a>
 800b250:	bd10      	pop	{r4, pc}
 800b252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b25a:	e7f7      	b.n	800b24c <memmove+0x24>

0800b25c <_sbrk_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d06      	ldr	r5, [pc, #24]	; (800b278 <_sbrk_r+0x1c>)
 800b260:	2300      	movs	r3, #0
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	602b      	str	r3, [r5, #0]
 800b268:	f7f7 f808 	bl	800227c <_sbrk>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_sbrk_r+0x1a>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_sbrk_r+0x1a>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20002154 	.word	0x20002154

0800b27c <memcpy>:
 800b27c:	440a      	add	r2, r1
 800b27e:	4291      	cmp	r1, r2
 800b280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b284:	d100      	bne.n	800b288 <memcpy+0xc>
 800b286:	4770      	bx	lr
 800b288:	b510      	push	{r4, lr}
 800b28a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b28e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b292:	4291      	cmp	r1, r2
 800b294:	d1f9      	bne.n	800b28a <memcpy+0xe>
 800b296:	bd10      	pop	{r4, pc}

0800b298 <_realloc_r>:
 800b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	4680      	mov	r8, r0
 800b29e:	4614      	mov	r4, r2
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	b921      	cbnz	r1, 800b2ae <_realloc_r+0x16>
 800b2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	f7ff bc49 	b.w	800ab40 <_malloc_r>
 800b2ae:	b92a      	cbnz	r2, 800b2bc <_realloc_r+0x24>
 800b2b0:	f7ff fbda 	bl	800aa68 <_free_r>
 800b2b4:	4625      	mov	r5, r4
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	f000 f81b 	bl	800b2f6 <_malloc_usable_size_r>
 800b2c0:	4284      	cmp	r4, r0
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	d802      	bhi.n	800b2cc <_realloc_r+0x34>
 800b2c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2ca:	d812      	bhi.n	800b2f2 <_realloc_r+0x5a>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	f7ff fc36 	bl	800ab40 <_malloc_r>
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d0ed      	beq.n	800b2b6 <_realloc_r+0x1e>
 800b2da:	42bc      	cmp	r4, r7
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4631      	mov	r1, r6
 800b2e0:	bf28      	it	cs
 800b2e2:	463a      	movcs	r2, r7
 800b2e4:	f7ff ffca 	bl	800b27c <memcpy>
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	f7ff fbbc 	bl	800aa68 <_free_r>
 800b2f0:	e7e1      	b.n	800b2b6 <_realloc_r+0x1e>
 800b2f2:	4635      	mov	r5, r6
 800b2f4:	e7df      	b.n	800b2b6 <_realloc_r+0x1e>

0800b2f6 <_malloc_usable_size_r>:
 800b2f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2fa:	1f18      	subs	r0, r3, #4
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfbc      	itt	lt
 800b300:	580b      	ldrlt	r3, [r1, r0]
 800b302:	18c0      	addlt	r0, r0, r3
 800b304:	4770      	bx	lr
	...

0800b308 <_init>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	bf00      	nop
 800b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30e:	bc08      	pop	{r3}
 800b310:	469e      	mov	lr, r3
 800b312:	4770      	bx	lr

0800b314 <_fini>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	bf00      	nop
 800b318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b31a:	bc08      	pop	{r3}
 800b31c:	469e      	mov	lr, r3
 800b31e:	4770      	bx	lr
=======
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d817      	bhi.n	800a418 <USBD_Get_USB_Status+0x44>
 800a3e8:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <USBD_Get_USB_Status+0x1c>)
 800a3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ee:	bf00      	nop
 800a3f0:	0800a401 	.word	0x0800a401
 800a3f4:	0800a407 	.word	0x0800a407
 800a3f8:	0800a40d 	.word	0x0800a40d
 800a3fc:	0800a413 	.word	0x0800a413
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]
    break;
 800a404:	e00b      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a406:	2303      	movs	r3, #3
 800a408:	73fb      	strb	r3, [r7, #15]
    break;
 800a40a:	e008      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
    break;
 800a410:	e005      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	73fb      	strb	r3, [r7, #15]
    break;
 800a416:	e002      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	73fb      	strb	r3, [r7, #15]
    break;
 800a41c:	bf00      	nop
  }
  return usb_status;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <_vsiprintf_r>:
 800a42c:	b500      	push	{lr}
 800a42e:	b09b      	sub	sp, #108	; 0x6c
 800a430:	9100      	str	r1, [sp, #0]
 800a432:	9104      	str	r1, [sp, #16]
 800a434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a438:	9105      	str	r1, [sp, #20]
 800a43a:	9102      	str	r1, [sp, #8]
 800a43c:	4905      	ldr	r1, [pc, #20]	; (800a454 <_vsiprintf_r+0x28>)
 800a43e:	9103      	str	r1, [sp, #12]
 800a440:	4669      	mov	r1, sp
 800a442:	f000 f999 	bl	800a778 <_svfiprintf_r>
 800a446:	9b00      	ldr	r3, [sp, #0]
 800a448:	2200      	movs	r2, #0
 800a44a:	701a      	strb	r2, [r3, #0]
 800a44c:	b01b      	add	sp, #108	; 0x6c
 800a44e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a452:	bf00      	nop
 800a454:	ffff0208 	.word	0xffff0208

0800a458 <vsiprintf>:
 800a458:	4613      	mov	r3, r2
 800a45a:	460a      	mov	r2, r1
 800a45c:	4601      	mov	r1, r0
 800a45e:	4802      	ldr	r0, [pc, #8]	; (800a468 <vsiprintf+0x10>)
 800a460:	6800      	ldr	r0, [r0, #0]
 800a462:	f7ff bfe3 	b.w	800a42c <_vsiprintf_r>
 800a466:	bf00      	nop
 800a468:	20000148 	.word	0x20000148

0800a46c <memset>:
 800a46c:	4402      	add	r2, r0
 800a46e:	4603      	mov	r3, r0
 800a470:	4293      	cmp	r3, r2
 800a472:	d100      	bne.n	800a476 <memset+0xa>
 800a474:	4770      	bx	lr
 800a476:	f803 1b01 	strb.w	r1, [r3], #1
 800a47a:	e7f9      	b.n	800a470 <memset+0x4>

0800a47c <__errno>:
 800a47c:	4b01      	ldr	r3, [pc, #4]	; (800a484 <__errno+0x8>)
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000148 	.word	0x20000148

0800a488 <__libc_init_array>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	4d0d      	ldr	r5, [pc, #52]	; (800a4c0 <__libc_init_array+0x38>)
 800a48c:	4c0d      	ldr	r4, [pc, #52]	; (800a4c4 <__libc_init_array+0x3c>)
 800a48e:	1b64      	subs	r4, r4, r5
 800a490:	10a4      	asrs	r4, r4, #2
 800a492:	2600      	movs	r6, #0
 800a494:	42a6      	cmp	r6, r4
 800a496:	d109      	bne.n	800a4ac <__libc_init_array+0x24>
 800a498:	4d0b      	ldr	r5, [pc, #44]	; (800a4c8 <__libc_init_array+0x40>)
 800a49a:	4c0c      	ldr	r4, [pc, #48]	; (800a4cc <__libc_init_array+0x44>)
 800a49c:	f000 fc6a 	bl	800ad74 <_init>
 800a4a0:	1b64      	subs	r4, r4, r5
 800a4a2:	10a4      	asrs	r4, r4, #2
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	42a6      	cmp	r6, r4
 800a4a8:	d105      	bne.n	800a4b6 <__libc_init_array+0x2e>
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b0:	4798      	blx	r3
 800a4b2:	3601      	adds	r6, #1
 800a4b4:	e7ee      	b.n	800a494 <__libc_init_array+0xc>
 800a4b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ba:	4798      	blx	r3
 800a4bc:	3601      	adds	r6, #1
 800a4be:	e7f2      	b.n	800a4a6 <__libc_init_array+0x1e>
 800a4c0:	0800ae68 	.word	0x0800ae68
 800a4c4:	0800ae68 	.word	0x0800ae68
 800a4c8:	0800ae68 	.word	0x0800ae68
 800a4cc:	0800ae6c 	.word	0x0800ae6c

0800a4d0 <__retarget_lock_acquire_recursive>:
 800a4d0:	4770      	bx	lr

0800a4d2 <__retarget_lock_release_recursive>:
 800a4d2:	4770      	bx	lr

0800a4d4 <_free_r>:
 800a4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d044      	beq.n	800a564 <_free_r+0x90>
 800a4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4de:	9001      	str	r0, [sp, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4e6:	bfb8      	it	lt
 800a4e8:	18e4      	addlt	r4, r4, r3
 800a4ea:	f000 f8df 	bl	800a6ac <__malloc_lock>
 800a4ee:	4a1e      	ldr	r2, [pc, #120]	; (800a568 <_free_r+0x94>)
 800a4f0:	9801      	ldr	r0, [sp, #4]
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	b933      	cbnz	r3, 800a504 <_free_r+0x30>
 800a4f6:	6063      	str	r3, [r4, #4]
 800a4f8:	6014      	str	r4, [r2, #0]
 800a4fa:	b003      	add	sp, #12
 800a4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a500:	f000 b8da 	b.w	800a6b8 <__malloc_unlock>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d908      	bls.n	800a51a <_free_r+0x46>
 800a508:	6825      	ldr	r5, [r4, #0]
 800a50a:	1961      	adds	r1, r4, r5
 800a50c:	428b      	cmp	r3, r1
 800a50e:	bf01      	itttt	eq
 800a510:	6819      	ldreq	r1, [r3, #0]
 800a512:	685b      	ldreq	r3, [r3, #4]
 800a514:	1949      	addeq	r1, r1, r5
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	e7ed      	b.n	800a4f6 <_free_r+0x22>
 800a51a:	461a      	mov	r2, r3
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	b10b      	cbz	r3, 800a524 <_free_r+0x50>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d9fa      	bls.n	800a51a <_free_r+0x46>
 800a524:	6811      	ldr	r1, [r2, #0]
 800a526:	1855      	adds	r5, r2, r1
 800a528:	42a5      	cmp	r5, r4
 800a52a:	d10b      	bne.n	800a544 <_free_r+0x70>
 800a52c:	6824      	ldr	r4, [r4, #0]
 800a52e:	4421      	add	r1, r4
 800a530:	1854      	adds	r4, r2, r1
 800a532:	42a3      	cmp	r3, r4
 800a534:	6011      	str	r1, [r2, #0]
 800a536:	d1e0      	bne.n	800a4fa <_free_r+0x26>
 800a538:	681c      	ldr	r4, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	6053      	str	r3, [r2, #4]
 800a53e:	440c      	add	r4, r1
 800a540:	6014      	str	r4, [r2, #0]
 800a542:	e7da      	b.n	800a4fa <_free_r+0x26>
 800a544:	d902      	bls.n	800a54c <_free_r+0x78>
 800a546:	230c      	movs	r3, #12
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	e7d6      	b.n	800a4fa <_free_r+0x26>
 800a54c:	6825      	ldr	r5, [r4, #0]
 800a54e:	1961      	adds	r1, r4, r5
 800a550:	428b      	cmp	r3, r1
 800a552:	bf04      	itt	eq
 800a554:	6819      	ldreq	r1, [r3, #0]
 800a556:	685b      	ldreq	r3, [r3, #4]
 800a558:	6063      	str	r3, [r4, #4]
 800a55a:	bf04      	itt	eq
 800a55c:	1949      	addeq	r1, r1, r5
 800a55e:	6021      	streq	r1, [r4, #0]
 800a560:	6054      	str	r4, [r2, #4]
 800a562:	e7ca      	b.n	800a4fa <_free_r+0x26>
 800a564:	b003      	add	sp, #12
 800a566:	bd30      	pop	{r4, r5, pc}
 800a568:	200020f8 	.word	0x200020f8

0800a56c <sbrk_aligned>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	4e0e      	ldr	r6, [pc, #56]	; (800a5a8 <sbrk_aligned+0x3c>)
 800a570:	460c      	mov	r4, r1
 800a572:	6831      	ldr	r1, [r6, #0]
 800a574:	4605      	mov	r5, r0
 800a576:	b911      	cbnz	r1, 800a57e <sbrk_aligned+0x12>
 800a578:	f000 fba6 	bl	800acc8 <_sbrk_r>
 800a57c:	6030      	str	r0, [r6, #0]
 800a57e:	4621      	mov	r1, r4
 800a580:	4628      	mov	r0, r5
 800a582:	f000 fba1 	bl	800acc8 <_sbrk_r>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d00a      	beq.n	800a5a0 <sbrk_aligned+0x34>
 800a58a:	1cc4      	adds	r4, r0, #3
 800a58c:	f024 0403 	bic.w	r4, r4, #3
 800a590:	42a0      	cmp	r0, r4
 800a592:	d007      	beq.n	800a5a4 <sbrk_aligned+0x38>
 800a594:	1a21      	subs	r1, r4, r0
 800a596:	4628      	mov	r0, r5
 800a598:	f000 fb96 	bl	800acc8 <_sbrk_r>
 800a59c:	3001      	adds	r0, #1
 800a59e:	d101      	bne.n	800a5a4 <sbrk_aligned+0x38>
 800a5a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	200020fc 	.word	0x200020fc

0800a5ac <_malloc_r>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	1ccd      	adds	r5, r1, #3
 800a5b2:	f025 0503 	bic.w	r5, r5, #3
 800a5b6:	3508      	adds	r5, #8
 800a5b8:	2d0c      	cmp	r5, #12
 800a5ba:	bf38      	it	cc
 800a5bc:	250c      	movcc	r5, #12
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	db01      	blt.n	800a5c8 <_malloc_r+0x1c>
 800a5c4:	42a9      	cmp	r1, r5
 800a5c6:	d905      	bls.n	800a5d4 <_malloc_r+0x28>
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6a8 <_malloc_r+0xfc>
 800a5d8:	f000 f868 	bl	800a6ac <__malloc_lock>
 800a5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e0:	461c      	mov	r4, r3
 800a5e2:	bb5c      	cbnz	r4, 800a63c <_malloc_r+0x90>
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7ff ffc0 	bl	800a56c <sbrk_aligned>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	d155      	bne.n	800a69e <_malloc_r+0xf2>
 800a5f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a5f6:	4626      	mov	r6, r4
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	d145      	bne.n	800a688 <_malloc_r+0xdc>
 800a5fc:	2c00      	cmp	r4, #0
 800a5fe:	d048      	beq.n	800a692 <_malloc_r+0xe6>
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	4631      	mov	r1, r6
 800a604:	4638      	mov	r0, r7
 800a606:	eb04 0903 	add.w	r9, r4, r3
 800a60a:	f000 fb5d 	bl	800acc8 <_sbrk_r>
 800a60e:	4581      	cmp	r9, r0
 800a610:	d13f      	bne.n	800a692 <_malloc_r+0xe6>
 800a612:	6821      	ldr	r1, [r4, #0]
 800a614:	1a6d      	subs	r5, r5, r1
 800a616:	4629      	mov	r1, r5
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff ffa7 	bl	800a56c <sbrk_aligned>
 800a61e:	3001      	adds	r0, #1
 800a620:	d037      	beq.n	800a692 <_malloc_r+0xe6>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	442b      	add	r3, r5
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	f8d8 3000 	ldr.w	r3, [r8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d038      	beq.n	800a6a2 <_malloc_r+0xf6>
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	42a2      	cmp	r2, r4
 800a634:	d12b      	bne.n	800a68e <_malloc_r+0xe2>
 800a636:	2200      	movs	r2, #0
 800a638:	605a      	str	r2, [r3, #4]
 800a63a:	e00f      	b.n	800a65c <_malloc_r+0xb0>
 800a63c:	6822      	ldr	r2, [r4, #0]
 800a63e:	1b52      	subs	r2, r2, r5
 800a640:	d41f      	bmi.n	800a682 <_malloc_r+0xd6>
 800a642:	2a0b      	cmp	r2, #11
 800a644:	d917      	bls.n	800a676 <_malloc_r+0xca>
 800a646:	1961      	adds	r1, r4, r5
 800a648:	42a3      	cmp	r3, r4
 800a64a:	6025      	str	r5, [r4, #0]
 800a64c:	bf18      	it	ne
 800a64e:	6059      	strne	r1, [r3, #4]
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	bf08      	it	eq
 800a654:	f8c8 1000 	streq.w	r1, [r8]
 800a658:	5162      	str	r2, [r4, r5]
 800a65a:	604b      	str	r3, [r1, #4]
 800a65c:	4638      	mov	r0, r7
 800a65e:	f104 060b 	add.w	r6, r4, #11
 800a662:	f000 f829 	bl	800a6b8 <__malloc_unlock>
 800a666:	f026 0607 	bic.w	r6, r6, #7
 800a66a:	1d23      	adds	r3, r4, #4
 800a66c:	1af2      	subs	r2, r6, r3
 800a66e:	d0ae      	beq.n	800a5ce <_malloc_r+0x22>
 800a670:	1b9b      	subs	r3, r3, r6
 800a672:	50a3      	str	r3, [r4, r2]
 800a674:	e7ab      	b.n	800a5ce <_malloc_r+0x22>
 800a676:	42a3      	cmp	r3, r4
 800a678:	6862      	ldr	r2, [r4, #4]
 800a67a:	d1dd      	bne.n	800a638 <_malloc_r+0x8c>
 800a67c:	f8c8 2000 	str.w	r2, [r8]
 800a680:	e7ec      	b.n	800a65c <_malloc_r+0xb0>
 800a682:	4623      	mov	r3, r4
 800a684:	6864      	ldr	r4, [r4, #4]
 800a686:	e7ac      	b.n	800a5e2 <_malloc_r+0x36>
 800a688:	4634      	mov	r4, r6
 800a68a:	6876      	ldr	r6, [r6, #4]
 800a68c:	e7b4      	b.n	800a5f8 <_malloc_r+0x4c>
 800a68e:	4613      	mov	r3, r2
 800a690:	e7cc      	b.n	800a62c <_malloc_r+0x80>
 800a692:	230c      	movs	r3, #12
 800a694:	603b      	str	r3, [r7, #0]
 800a696:	4638      	mov	r0, r7
 800a698:	f000 f80e 	bl	800a6b8 <__malloc_unlock>
 800a69c:	e797      	b.n	800a5ce <_malloc_r+0x22>
 800a69e:	6025      	str	r5, [r4, #0]
 800a6a0:	e7dc      	b.n	800a65c <_malloc_r+0xb0>
 800a6a2:	605b      	str	r3, [r3, #4]
 800a6a4:	deff      	udf	#255	; 0xff
 800a6a6:	bf00      	nop
 800a6a8:	200020f8 	.word	0x200020f8

0800a6ac <__malloc_lock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	; (800a6b4 <__malloc_lock+0x8>)
 800a6ae:	f7ff bf0f 	b.w	800a4d0 <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	200020f4 	.word	0x200020f4

0800a6b8 <__malloc_unlock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	; (800a6c0 <__malloc_unlock+0x8>)
 800a6ba:	f7ff bf0a 	b.w	800a4d2 <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	200020f4 	.word	0x200020f4

0800a6c4 <__ssputs_r>:
 800a6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	688e      	ldr	r6, [r1, #8]
 800a6ca:	461f      	mov	r7, r3
 800a6cc:	42be      	cmp	r6, r7
 800a6ce:	680b      	ldr	r3, [r1, #0]
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	4690      	mov	r8, r2
 800a6d6:	d82c      	bhi.n	800a732 <__ssputs_r+0x6e>
 800a6d8:	898a      	ldrh	r2, [r1, #12]
 800a6da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6de:	d026      	beq.n	800a72e <__ssputs_r+0x6a>
 800a6e0:	6965      	ldr	r5, [r4, #20]
 800a6e2:	6909      	ldr	r1, [r1, #16]
 800a6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e8:	eba3 0901 	sub.w	r9, r3, r1
 800a6ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6f0:	1c7b      	adds	r3, r7, #1
 800a6f2:	444b      	add	r3, r9
 800a6f4:	106d      	asrs	r5, r5, #1
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	bf38      	it	cc
 800a6fa:	461d      	movcc	r5, r3
 800a6fc:	0553      	lsls	r3, r2, #21
 800a6fe:	d527      	bpl.n	800a750 <__ssputs_r+0x8c>
 800a700:	4629      	mov	r1, r5
 800a702:	f7ff ff53 	bl	800a5ac <_malloc_r>
 800a706:	4606      	mov	r6, r0
 800a708:	b360      	cbz	r0, 800a764 <__ssputs_r+0xa0>
 800a70a:	6921      	ldr	r1, [r4, #16]
 800a70c:	464a      	mov	r2, r9
 800a70e:	f000 faeb 	bl	800ace8 <memcpy>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	6126      	str	r6, [r4, #16]
 800a720:	6165      	str	r5, [r4, #20]
 800a722:	444e      	add	r6, r9
 800a724:	eba5 0509 	sub.w	r5, r5, r9
 800a728:	6026      	str	r6, [r4, #0]
 800a72a:	60a5      	str	r5, [r4, #8]
 800a72c:	463e      	mov	r6, r7
 800a72e:	42be      	cmp	r6, r7
 800a730:	d900      	bls.n	800a734 <__ssputs_r+0x70>
 800a732:	463e      	mov	r6, r7
 800a734:	6820      	ldr	r0, [r4, #0]
 800a736:	4632      	mov	r2, r6
 800a738:	4641      	mov	r1, r8
 800a73a:	f000 faab 	bl	800ac94 <memmove>
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	1b9b      	subs	r3, r3, r6
 800a742:	60a3      	str	r3, [r4, #8]
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	4433      	add	r3, r6
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	2000      	movs	r0, #0
 800a74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a750:	462a      	mov	r2, r5
 800a752:	f000 fad7 	bl	800ad04 <_realloc_r>
 800a756:	4606      	mov	r6, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1e0      	bne.n	800a71e <__ssputs_r+0x5a>
 800a75c:	6921      	ldr	r1, [r4, #16]
 800a75e:	4650      	mov	r0, sl
 800a760:	f7ff feb8 	bl	800a4d4 <_free_r>
 800a764:	230c      	movs	r3, #12
 800a766:	f8ca 3000 	str.w	r3, [sl]
 800a76a:	89a3      	ldrh	r3, [r4, #12]
 800a76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	f04f 30ff 	mov.w	r0, #4294967295
 800a776:	e7e9      	b.n	800a74c <__ssputs_r+0x88>

0800a778 <_svfiprintf_r>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	4698      	mov	r8, r3
 800a77e:	898b      	ldrh	r3, [r1, #12]
 800a780:	061b      	lsls	r3, r3, #24
 800a782:	b09d      	sub	sp, #116	; 0x74
 800a784:	4607      	mov	r7, r0
 800a786:	460d      	mov	r5, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	d50e      	bpl.n	800a7aa <_svfiprintf_r+0x32>
 800a78c:	690b      	ldr	r3, [r1, #16]
 800a78e:	b963      	cbnz	r3, 800a7aa <_svfiprintf_r+0x32>
 800a790:	2140      	movs	r1, #64	; 0x40
 800a792:	f7ff ff0b 	bl	800a5ac <_malloc_r>
 800a796:	6028      	str	r0, [r5, #0]
 800a798:	6128      	str	r0, [r5, #16]
 800a79a:	b920      	cbnz	r0, 800a7a6 <_svfiprintf_r+0x2e>
 800a79c:	230c      	movs	r3, #12
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	e0d0      	b.n	800a948 <_svfiprintf_r+0x1d0>
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	616b      	str	r3, [r5, #20]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b8:	2330      	movs	r3, #48	; 0x30
 800a7ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a960 <_svfiprintf_r+0x1e8>
 800a7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c2:	f04f 0901 	mov.w	r9, #1
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	b10a      	cbz	r2, 800a7d4 <_svfiprintf_r+0x5c>
 800a7d0:	2a25      	cmp	r2, #37	; 0x25
 800a7d2:	d1f9      	bne.n	800a7c8 <_svfiprintf_r+0x50>
 800a7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d8:	d00b      	beq.n	800a7f2 <_svfiprintf_r+0x7a>
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ff6f 	bl	800a6c4 <__ssputs_r>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f000 80a9 	beq.w	800a93e <_svfiprintf_r+0x1c6>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ee:	445a      	add	r2, fp
 800a7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 80a1 	beq.w	800a93e <_svfiprintf_r+0x1c6>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a806:	f10a 0a01 	add.w	sl, sl, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a812:	931a      	str	r3, [sp, #104]	; 0x68
 800a814:	4654      	mov	r4, sl
 800a816:	2205      	movs	r2, #5
 800a818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81c:	4850      	ldr	r0, [pc, #320]	; (800a960 <_svfiprintf_r+0x1e8>)
 800a81e:	f7f5 fcdf 	bl	80001e0 <memchr>
 800a822:	9a04      	ldr	r2, [sp, #16]
 800a824:	b9d8      	cbnz	r0, 800a85e <_svfiprintf_r+0xe6>
 800a826:	06d0      	lsls	r0, r2, #27
 800a828:	bf44      	itt	mi
 800a82a:	2320      	movmi	r3, #32
 800a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a830:	0711      	lsls	r1, r2, #28
 800a832:	bf44      	itt	mi
 800a834:	232b      	movmi	r3, #43	; 0x2b
 800a836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83a:	f89a 3000 	ldrb.w	r3, [sl]
 800a83e:	2b2a      	cmp	r3, #42	; 0x2a
 800a840:	d015      	beq.n	800a86e <_svfiprintf_r+0xf6>
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	4654      	mov	r4, sl
 800a846:	2000      	movs	r0, #0
 800a848:	f04f 0c0a 	mov.w	ip, #10
 800a84c:	4621      	mov	r1, r4
 800a84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a852:	3b30      	subs	r3, #48	; 0x30
 800a854:	2b09      	cmp	r3, #9
 800a856:	d94d      	bls.n	800a8f4 <_svfiprintf_r+0x17c>
 800a858:	b1b0      	cbz	r0, 800a888 <_svfiprintf_r+0x110>
 800a85a:	9207      	str	r2, [sp, #28]
 800a85c:	e014      	b.n	800a888 <_svfiprintf_r+0x110>
 800a85e:	eba0 0308 	sub.w	r3, r0, r8
 800a862:	fa09 f303 	lsl.w	r3, r9, r3
 800a866:	4313      	orrs	r3, r2
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	46a2      	mov	sl, r4
 800a86c:	e7d2      	b.n	800a814 <_svfiprintf_r+0x9c>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d19      	adds	r1, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	9103      	str	r1, [sp, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	bfbb      	ittet	lt
 800a87a:	425b      	neglt	r3, r3
 800a87c:	f042 0202 	orrlt.w	r2, r2, #2
 800a880:	9307      	strge	r3, [sp, #28]
 800a882:	9307      	strlt	r3, [sp, #28]
 800a884:	bfb8      	it	lt
 800a886:	9204      	strlt	r2, [sp, #16]
 800a888:	7823      	ldrb	r3, [r4, #0]
 800a88a:	2b2e      	cmp	r3, #46	; 0x2e
 800a88c:	d10c      	bne.n	800a8a8 <_svfiprintf_r+0x130>
 800a88e:	7863      	ldrb	r3, [r4, #1]
 800a890:	2b2a      	cmp	r3, #42	; 0x2a
 800a892:	d134      	bne.n	800a8fe <_svfiprintf_r+0x186>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	9203      	str	r2, [sp, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bfb8      	it	lt
 800a8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a4:	3402      	adds	r4, #2
 800a8a6:	9305      	str	r3, [sp, #20]
 800a8a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a970 <_svfiprintf_r+0x1f8>
 800a8ac:	7821      	ldrb	r1, [r4, #0]
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	f7f5 fc95 	bl	80001e0 <memchr>
 800a8b6:	b138      	cbz	r0, 800a8c8 <_svfiprintf_r+0x150>
 800a8b8:	9b04      	ldr	r3, [sp, #16]
 800a8ba:	eba0 000a 	sub.w	r0, r0, sl
 800a8be:	2240      	movs	r2, #64	; 0x40
 800a8c0:	4082      	lsls	r2, r0
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	3401      	adds	r4, #1
 800a8c6:	9304      	str	r3, [sp, #16]
 800a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8cc:	4825      	ldr	r0, [pc, #148]	; (800a964 <_svfiprintf_r+0x1ec>)
 800a8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d2:	2206      	movs	r2, #6
 800a8d4:	f7f5 fc84 	bl	80001e0 <memchr>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d038      	beq.n	800a94e <_svfiprintf_r+0x1d6>
 800a8dc:	4b22      	ldr	r3, [pc, #136]	; (800a968 <_svfiprintf_r+0x1f0>)
 800a8de:	bb1b      	cbnz	r3, 800a928 <_svfiprintf_r+0x1b0>
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	3307      	adds	r3, #7
 800a8e4:	f023 0307 	bic.w	r3, r3, #7
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ee:	4433      	add	r3, r6
 800a8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f2:	e768      	b.n	800a7c6 <_svfiprintf_r+0x4e>
 800a8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7a6      	b.n	800a84c <_svfiprintf_r+0xd4>
 800a8fe:	2300      	movs	r3, #0
 800a900:	3401      	adds	r4, #1
 800a902:	9305      	str	r3, [sp, #20]
 800a904:	4619      	mov	r1, r3
 800a906:	f04f 0c0a 	mov.w	ip, #10
 800a90a:	4620      	mov	r0, r4
 800a90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a910:	3a30      	subs	r2, #48	; 0x30
 800a912:	2a09      	cmp	r2, #9
 800a914:	d903      	bls.n	800a91e <_svfiprintf_r+0x1a6>
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0c6      	beq.n	800a8a8 <_svfiprintf_r+0x130>
 800a91a:	9105      	str	r1, [sp, #20]
 800a91c:	e7c4      	b.n	800a8a8 <_svfiprintf_r+0x130>
 800a91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a922:	4604      	mov	r4, r0
 800a924:	2301      	movs	r3, #1
 800a926:	e7f0      	b.n	800a90a <_svfiprintf_r+0x192>
 800a928:	ab03      	add	r3, sp, #12
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	462a      	mov	r2, r5
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <_svfiprintf_r+0x1f4>)
 800a930:	a904      	add	r1, sp, #16
 800a932:	4638      	mov	r0, r7
 800a934:	f3af 8000 	nop.w
 800a938:	1c42      	adds	r2, r0, #1
 800a93a:	4606      	mov	r6, r0
 800a93c:	d1d6      	bne.n	800a8ec <_svfiprintf_r+0x174>
 800a93e:	89ab      	ldrh	r3, [r5, #12]
 800a940:	065b      	lsls	r3, r3, #25
 800a942:	f53f af2d 	bmi.w	800a7a0 <_svfiprintf_r+0x28>
 800a946:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a948:	b01d      	add	sp, #116	; 0x74
 800a94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94e:	ab03      	add	r3, sp, #12
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	462a      	mov	r2, r5
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <_svfiprintf_r+0x1f4>)
 800a956:	a904      	add	r1, sp, #16
 800a958:	4638      	mov	r0, r7
 800a95a:	f000 f879 	bl	800aa50 <_printf_i>
 800a95e:	e7eb      	b.n	800a938 <_svfiprintf_r+0x1c0>
 800a960:	0800ae2c 	.word	0x0800ae2c
 800a964:	0800ae36 	.word	0x0800ae36
 800a968:	00000000 	.word	0x00000000
 800a96c:	0800a6c5 	.word	0x0800a6c5
 800a970:	0800ae32 	.word	0x0800ae32

0800a974 <_printf_common>:
 800a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a978:	4616      	mov	r6, r2
 800a97a:	4699      	mov	r9, r3
 800a97c:	688a      	ldr	r2, [r1, #8]
 800a97e:	690b      	ldr	r3, [r1, #16]
 800a980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a984:	4293      	cmp	r3, r2
 800a986:	bfb8      	it	lt
 800a988:	4613      	movlt	r3, r2
 800a98a:	6033      	str	r3, [r6, #0]
 800a98c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a990:	4607      	mov	r7, r0
 800a992:	460c      	mov	r4, r1
 800a994:	b10a      	cbz	r2, 800a99a <_printf_common+0x26>
 800a996:	3301      	adds	r3, #1
 800a998:	6033      	str	r3, [r6, #0]
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	0699      	lsls	r1, r3, #26
 800a99e:	bf42      	ittt	mi
 800a9a0:	6833      	ldrmi	r3, [r6, #0]
 800a9a2:	3302      	addmi	r3, #2
 800a9a4:	6033      	strmi	r3, [r6, #0]
 800a9a6:	6825      	ldr	r5, [r4, #0]
 800a9a8:	f015 0506 	ands.w	r5, r5, #6
 800a9ac:	d106      	bne.n	800a9bc <_printf_common+0x48>
 800a9ae:	f104 0a19 	add.w	sl, r4, #25
 800a9b2:	68e3      	ldr	r3, [r4, #12]
 800a9b4:	6832      	ldr	r2, [r6, #0]
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	dc26      	bgt.n	800aa0a <_printf_common+0x96>
 800a9bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9c0:	1e13      	subs	r3, r2, #0
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	bf18      	it	ne
 800a9c6:	2301      	movne	r3, #1
 800a9c8:	0692      	lsls	r2, r2, #26
 800a9ca:	d42b      	bmi.n	800aa24 <_printf_common+0xb0>
 800a9cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	47c0      	blx	r8
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d01e      	beq.n	800aa18 <_printf_common+0xa4>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	6922      	ldr	r2, [r4, #16]
 800a9de:	f003 0306 	and.w	r3, r3, #6
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	bf02      	ittt	eq
 800a9e6:	68e5      	ldreq	r5, [r4, #12]
 800a9e8:	6833      	ldreq	r3, [r6, #0]
 800a9ea:	1aed      	subeq	r5, r5, r3
 800a9ec:	68a3      	ldr	r3, [r4, #8]
 800a9ee:	bf0c      	ite	eq
 800a9f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9f4:	2500      	movne	r5, #0
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	bfc4      	itt	gt
 800a9fa:	1a9b      	subgt	r3, r3, r2
 800a9fc:	18ed      	addgt	r5, r5, r3
 800a9fe:	2600      	movs	r6, #0
 800aa00:	341a      	adds	r4, #26
 800aa02:	42b5      	cmp	r5, r6
 800aa04:	d11a      	bne.n	800aa3c <_printf_common+0xc8>
 800aa06:	2000      	movs	r0, #0
 800aa08:	e008      	b.n	800aa1c <_printf_common+0xa8>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	4649      	mov	r1, r9
 800aa10:	4638      	mov	r0, r7
 800aa12:	47c0      	blx	r8
 800aa14:	3001      	adds	r0, #1
 800aa16:	d103      	bne.n	800aa20 <_printf_common+0xac>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa20:	3501      	adds	r5, #1
 800aa22:	e7c6      	b.n	800a9b2 <_printf_common+0x3e>
 800aa24:	18e1      	adds	r1, r4, r3
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	2030      	movs	r0, #48	; 0x30
 800aa2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa2e:	4422      	add	r2, r4
 800aa30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa38:	3302      	adds	r3, #2
 800aa3a:	e7c7      	b.n	800a9cc <_printf_common+0x58>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4622      	mov	r2, r4
 800aa40:	4649      	mov	r1, r9
 800aa42:	4638      	mov	r0, r7
 800aa44:	47c0      	blx	r8
 800aa46:	3001      	adds	r0, #1
 800aa48:	d0e6      	beq.n	800aa18 <_printf_common+0xa4>
 800aa4a:	3601      	adds	r6, #1
 800aa4c:	e7d9      	b.n	800aa02 <_printf_common+0x8e>
	...

0800aa50 <_printf_i>:
 800aa50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	7e0f      	ldrb	r7, [r1, #24]
 800aa56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa58:	2f78      	cmp	r7, #120	; 0x78
 800aa5a:	4691      	mov	r9, r2
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	469a      	mov	sl, r3
 800aa62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa66:	d807      	bhi.n	800aa78 <_printf_i+0x28>
 800aa68:	2f62      	cmp	r7, #98	; 0x62
 800aa6a:	d80a      	bhi.n	800aa82 <_printf_i+0x32>
 800aa6c:	2f00      	cmp	r7, #0
 800aa6e:	f000 80d4 	beq.w	800ac1a <_printf_i+0x1ca>
 800aa72:	2f58      	cmp	r7, #88	; 0x58
 800aa74:	f000 80c0 	beq.w	800abf8 <_printf_i+0x1a8>
 800aa78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa80:	e03a      	b.n	800aaf8 <_printf_i+0xa8>
 800aa82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa86:	2b15      	cmp	r3, #21
 800aa88:	d8f6      	bhi.n	800aa78 <_printf_i+0x28>
 800aa8a:	a101      	add	r1, pc, #4	; (adr r1, 800aa90 <_printf_i+0x40>)
 800aa8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa90:	0800aae9 	.word	0x0800aae9
 800aa94:	0800aafd 	.word	0x0800aafd
 800aa98:	0800aa79 	.word	0x0800aa79
 800aa9c:	0800aa79 	.word	0x0800aa79
 800aaa0:	0800aa79 	.word	0x0800aa79
 800aaa4:	0800aa79 	.word	0x0800aa79
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aa79 	.word	0x0800aa79
 800aab0:	0800aa79 	.word	0x0800aa79
 800aab4:	0800aa79 	.word	0x0800aa79
 800aab8:	0800aa79 	.word	0x0800aa79
 800aabc:	0800ac01 	.word	0x0800ac01
 800aac0:	0800ab29 	.word	0x0800ab29
 800aac4:	0800abbb 	.word	0x0800abbb
 800aac8:	0800aa79 	.word	0x0800aa79
 800aacc:	0800aa79 	.word	0x0800aa79
 800aad0:	0800ac23 	.word	0x0800ac23
 800aad4:	0800aa79 	.word	0x0800aa79
 800aad8:	0800ab29 	.word	0x0800ab29
 800aadc:	0800aa79 	.word	0x0800aa79
 800aae0:	0800aa79 	.word	0x0800aa79
 800aae4:	0800abc3 	.word	0x0800abc3
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	1d1a      	adds	r2, r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	602a      	str	r2, [r5, #0]
 800aaf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e09f      	b.n	800ac3c <_printf_i+0x1ec>
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	0607      	lsls	r7, r0, #24
 800ab02:	f103 0104 	add.w	r1, r3, #4
 800ab06:	6029      	str	r1, [r5, #0]
 800ab08:	d501      	bpl.n	800ab0e <_printf_i+0xbe>
 800ab0a:	681e      	ldr	r6, [r3, #0]
 800ab0c:	e003      	b.n	800ab16 <_printf_i+0xc6>
 800ab0e:	0646      	lsls	r6, r0, #25
 800ab10:	d5fb      	bpl.n	800ab0a <_printf_i+0xba>
 800ab12:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	da03      	bge.n	800ab22 <_printf_i+0xd2>
 800ab1a:	232d      	movs	r3, #45	; 0x2d
 800ab1c:	4276      	negs	r6, r6
 800ab1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab22:	485a      	ldr	r0, [pc, #360]	; (800ac8c <_printf_i+0x23c>)
 800ab24:	230a      	movs	r3, #10
 800ab26:	e012      	b.n	800ab4e <_printf_i+0xfe>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	6820      	ldr	r0, [r4, #0]
 800ab2c:	1d19      	adds	r1, r3, #4
 800ab2e:	6029      	str	r1, [r5, #0]
 800ab30:	0605      	lsls	r5, r0, #24
 800ab32:	d501      	bpl.n	800ab38 <_printf_i+0xe8>
 800ab34:	681e      	ldr	r6, [r3, #0]
 800ab36:	e002      	b.n	800ab3e <_printf_i+0xee>
 800ab38:	0641      	lsls	r1, r0, #25
 800ab3a:	d5fb      	bpl.n	800ab34 <_printf_i+0xe4>
 800ab3c:	881e      	ldrh	r6, [r3, #0]
 800ab3e:	4853      	ldr	r0, [pc, #332]	; (800ac8c <_printf_i+0x23c>)
 800ab40:	2f6f      	cmp	r7, #111	; 0x6f
 800ab42:	bf0c      	ite	eq
 800ab44:	2308      	moveq	r3, #8
 800ab46:	230a      	movne	r3, #10
 800ab48:	2100      	movs	r1, #0
 800ab4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab4e:	6865      	ldr	r5, [r4, #4]
 800ab50:	60a5      	str	r5, [r4, #8]
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	bfa2      	ittt	ge
 800ab56:	6821      	ldrge	r1, [r4, #0]
 800ab58:	f021 0104 	bicge.w	r1, r1, #4
 800ab5c:	6021      	strge	r1, [r4, #0]
 800ab5e:	b90e      	cbnz	r6, 800ab64 <_printf_i+0x114>
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	d04b      	beq.n	800abfc <_printf_i+0x1ac>
 800ab64:	4615      	mov	r5, r2
 800ab66:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab6a:	fb03 6711 	mls	r7, r3, r1, r6
 800ab6e:	5dc7      	ldrb	r7, [r0, r7]
 800ab70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab74:	4637      	mov	r7, r6
 800ab76:	42bb      	cmp	r3, r7
 800ab78:	460e      	mov	r6, r1
 800ab7a:	d9f4      	bls.n	800ab66 <_printf_i+0x116>
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	d10b      	bne.n	800ab98 <_printf_i+0x148>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	07de      	lsls	r6, r3, #31
 800ab84:	d508      	bpl.n	800ab98 <_printf_i+0x148>
 800ab86:	6923      	ldr	r3, [r4, #16]
 800ab88:	6861      	ldr	r1, [r4, #4]
 800ab8a:	4299      	cmp	r1, r3
 800ab8c:	bfde      	ittt	le
 800ab8e:	2330      	movle	r3, #48	; 0x30
 800ab90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab98:	1b52      	subs	r2, r2, r5
 800ab9a:	6122      	str	r2, [r4, #16]
 800ab9c:	f8cd a000 	str.w	sl, [sp]
 800aba0:	464b      	mov	r3, r9
 800aba2:	aa03      	add	r2, sp, #12
 800aba4:	4621      	mov	r1, r4
 800aba6:	4640      	mov	r0, r8
 800aba8:	f7ff fee4 	bl	800a974 <_printf_common>
 800abac:	3001      	adds	r0, #1
 800abae:	d14a      	bne.n	800ac46 <_printf_i+0x1f6>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	b004      	add	sp, #16
 800abb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	f043 0320 	orr.w	r3, r3, #32
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	4833      	ldr	r0, [pc, #204]	; (800ac90 <_printf_i+0x240>)
 800abc4:	2778      	movs	r7, #120	; 0x78
 800abc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	6829      	ldr	r1, [r5, #0]
 800abce:	061f      	lsls	r7, r3, #24
 800abd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800abd4:	d402      	bmi.n	800abdc <_printf_i+0x18c>
 800abd6:	065f      	lsls	r7, r3, #25
 800abd8:	bf48      	it	mi
 800abda:	b2b6      	uxthmi	r6, r6
 800abdc:	07df      	lsls	r7, r3, #31
 800abde:	bf48      	it	mi
 800abe0:	f043 0320 	orrmi.w	r3, r3, #32
 800abe4:	6029      	str	r1, [r5, #0]
 800abe6:	bf48      	it	mi
 800abe8:	6023      	strmi	r3, [r4, #0]
 800abea:	b91e      	cbnz	r6, 800abf4 <_printf_i+0x1a4>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	f023 0320 	bic.w	r3, r3, #32
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	2310      	movs	r3, #16
 800abf6:	e7a7      	b.n	800ab48 <_printf_i+0xf8>
 800abf8:	4824      	ldr	r0, [pc, #144]	; (800ac8c <_printf_i+0x23c>)
 800abfa:	e7e4      	b.n	800abc6 <_printf_i+0x176>
 800abfc:	4615      	mov	r5, r2
 800abfe:	e7bd      	b.n	800ab7c <_printf_i+0x12c>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	6826      	ldr	r6, [r4, #0]
 800ac04:	6961      	ldr	r1, [r4, #20]
 800ac06:	1d18      	adds	r0, r3, #4
 800ac08:	6028      	str	r0, [r5, #0]
 800ac0a:	0635      	lsls	r5, r6, #24
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	d501      	bpl.n	800ac14 <_printf_i+0x1c4>
 800ac10:	6019      	str	r1, [r3, #0]
 800ac12:	e002      	b.n	800ac1a <_printf_i+0x1ca>
 800ac14:	0670      	lsls	r0, r6, #25
 800ac16:	d5fb      	bpl.n	800ac10 <_printf_i+0x1c0>
 800ac18:	8019      	strh	r1, [r3, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6123      	str	r3, [r4, #16]
 800ac1e:	4615      	mov	r5, r2
 800ac20:	e7bc      	b.n	800ab9c <_printf_i+0x14c>
 800ac22:	682b      	ldr	r3, [r5, #0]
 800ac24:	1d1a      	adds	r2, r3, #4
 800ac26:	602a      	str	r2, [r5, #0]
 800ac28:	681d      	ldr	r5, [r3, #0]
 800ac2a:	6862      	ldr	r2, [r4, #4]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f7f5 fad6 	bl	80001e0 <memchr>
 800ac34:	b108      	cbz	r0, 800ac3a <_printf_i+0x1ea>
 800ac36:	1b40      	subs	r0, r0, r5
 800ac38:	6060      	str	r0, [r4, #4]
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	6123      	str	r3, [r4, #16]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac44:	e7aa      	b.n	800ab9c <_printf_i+0x14c>
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	462a      	mov	r2, r5
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	47d0      	blx	sl
 800ac50:	3001      	adds	r0, #1
 800ac52:	d0ad      	beq.n	800abb0 <_printf_i+0x160>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	079b      	lsls	r3, r3, #30
 800ac58:	d413      	bmi.n	800ac82 <_printf_i+0x232>
 800ac5a:	68e0      	ldr	r0, [r4, #12]
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	4298      	cmp	r0, r3
 800ac60:	bfb8      	it	lt
 800ac62:	4618      	movlt	r0, r3
 800ac64:	e7a6      	b.n	800abb4 <_printf_i+0x164>
 800ac66:	2301      	movs	r3, #1
 800ac68:	4632      	mov	r2, r6
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	47d0      	blx	sl
 800ac70:	3001      	adds	r0, #1
 800ac72:	d09d      	beq.n	800abb0 <_printf_i+0x160>
 800ac74:	3501      	adds	r5, #1
 800ac76:	68e3      	ldr	r3, [r4, #12]
 800ac78:	9903      	ldr	r1, [sp, #12]
 800ac7a:	1a5b      	subs	r3, r3, r1
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dcf2      	bgt.n	800ac66 <_printf_i+0x216>
 800ac80:	e7eb      	b.n	800ac5a <_printf_i+0x20a>
 800ac82:	2500      	movs	r5, #0
 800ac84:	f104 0619 	add.w	r6, r4, #25
 800ac88:	e7f5      	b.n	800ac76 <_printf_i+0x226>
 800ac8a:	bf00      	nop
 800ac8c:	0800ae3d 	.word	0x0800ae3d
 800ac90:	0800ae4e 	.word	0x0800ae4e

0800ac94 <memmove>:
 800ac94:	4288      	cmp	r0, r1
 800ac96:	b510      	push	{r4, lr}
 800ac98:	eb01 0402 	add.w	r4, r1, r2
 800ac9c:	d902      	bls.n	800aca4 <memmove+0x10>
 800ac9e:	4284      	cmp	r4, r0
 800aca0:	4623      	mov	r3, r4
 800aca2:	d807      	bhi.n	800acb4 <memmove+0x20>
 800aca4:	1e43      	subs	r3, r0, #1
 800aca6:	42a1      	cmp	r1, r4
 800aca8:	d008      	beq.n	800acbc <memmove+0x28>
 800acaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acb2:	e7f8      	b.n	800aca6 <memmove+0x12>
 800acb4:	4402      	add	r2, r0
 800acb6:	4601      	mov	r1, r0
 800acb8:	428a      	cmp	r2, r1
 800acba:	d100      	bne.n	800acbe <memmove+0x2a>
 800acbc:	bd10      	pop	{r4, pc}
 800acbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acc6:	e7f7      	b.n	800acb8 <memmove+0x24>

0800acc8 <_sbrk_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d06      	ldr	r5, [pc, #24]	; (800ace4 <_sbrk_r+0x1c>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f7f7 f808 	bl	8001ce8 <_sbrk>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d102      	bne.n	800ace2 <_sbrk_r+0x1a>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	b103      	cbz	r3, 800ace2 <_sbrk_r+0x1a>
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	200020f0 	.word	0x200020f0

0800ace8 <memcpy>:
 800ace8:	440a      	add	r2, r1
 800acea:	4291      	cmp	r1, r2
 800acec:	f100 33ff 	add.w	r3, r0, #4294967295
 800acf0:	d100      	bne.n	800acf4 <memcpy+0xc>
 800acf2:	4770      	bx	lr
 800acf4:	b510      	push	{r4, lr}
 800acf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acfe:	4291      	cmp	r1, r2
 800ad00:	d1f9      	bne.n	800acf6 <memcpy+0xe>
 800ad02:	bd10      	pop	{r4, pc}

0800ad04 <_realloc_r>:
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	4680      	mov	r8, r0
 800ad0a:	4614      	mov	r4, r2
 800ad0c:	460e      	mov	r6, r1
 800ad0e:	b921      	cbnz	r1, 800ad1a <_realloc_r+0x16>
 800ad10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad14:	4611      	mov	r1, r2
 800ad16:	f7ff bc49 	b.w	800a5ac <_malloc_r>
 800ad1a:	b92a      	cbnz	r2, 800ad28 <_realloc_r+0x24>
 800ad1c:	f7ff fbda 	bl	800a4d4 <_free_r>
 800ad20:	4625      	mov	r5, r4
 800ad22:	4628      	mov	r0, r5
 800ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad28:	f000 f81b 	bl	800ad62 <_malloc_usable_size_r>
 800ad2c:	4284      	cmp	r4, r0
 800ad2e:	4607      	mov	r7, r0
 800ad30:	d802      	bhi.n	800ad38 <_realloc_r+0x34>
 800ad32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad36:	d812      	bhi.n	800ad5e <_realloc_r+0x5a>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	f7ff fc36 	bl	800a5ac <_malloc_r>
 800ad40:	4605      	mov	r5, r0
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d0ed      	beq.n	800ad22 <_realloc_r+0x1e>
 800ad46:	42bc      	cmp	r4, r7
 800ad48:	4622      	mov	r2, r4
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	bf28      	it	cs
 800ad4e:	463a      	movcs	r2, r7
 800ad50:	f7ff ffca 	bl	800ace8 <memcpy>
 800ad54:	4631      	mov	r1, r6
 800ad56:	4640      	mov	r0, r8
 800ad58:	f7ff fbbc 	bl	800a4d4 <_free_r>
 800ad5c:	e7e1      	b.n	800ad22 <_realloc_r+0x1e>
 800ad5e:	4635      	mov	r5, r6
 800ad60:	e7df      	b.n	800ad22 <_realloc_r+0x1e>

0800ad62 <_malloc_usable_size_r>:
 800ad62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad66:	1f18      	subs	r0, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	bfbc      	itt	lt
 800ad6c:	580b      	ldrlt	r3, [r1, r0]
 800ad6e:	18c0      	addlt	r0, r0, r3
 800ad70:	4770      	bx	lr
	...

0800ad74 <_init>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr

0800ad80 <_fini>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr
>>>>>>> 8d870d5b3679776d09aaa2f31e03616831eccd2c
