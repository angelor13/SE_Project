
STM32_SHIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e44  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800803c  0800803c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008044  08008044  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800804c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d64  200000fc  08008148  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e60  08008148  00021e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151a4  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003667  00000000  00000000  00035313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00038980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebe  00000000  00000000  00039cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001916e  00000000  00000000  0003ab86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166c5  00000000  00000000  00053cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009182a  00000000  00000000  0006a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050c0  00000000  00000000  000fbbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00100ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007fc4 	.word	0x08007fc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007fc4 	.word	0x08007fc4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <transmitDataSPI>:
        return 0;
    }
    return len;
}

void transmitDataSPI(uint32_t value, uint8_t flag) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
#define unpack(x) {(x >> 0) & 0xFF, (x >> 8) & 0xFF, (x >> 16) & 0xFF, (x >> 24) & 0xFF}
#define pack(x) (x[3] << 24) | (x[2] << 16) | (x[1] << 8) (x[0] << 0)

	HAL_SPI_Transmit(&hspi1, &flag, 1, 100);
 80004e0:	1cf9      	adds	r1, r7, #3
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	2201      	movs	r2, #1
 80004e6:	4816      	ldr	r0, [pc, #88]	; (8000540 <transmitDataSPI+0x6c>)
 80004e8:	f003 f8bb 	bl	8003662 <HAL_SPI_Transmit>

	uint8_t data[] = unpack(value);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	723b      	strb	r3, [r7, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	727b      	strb	r3, [r7, #9]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	0c1b      	lsrs	r3, r3, #16
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	72bb      	strb	r3, [r7, #10]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	0e1b      	lsrs	r3, r3, #24
 8000506:	b2db      	uxtb	r3, r3
 8000508:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < 4; i++) {
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e00e      	b.n	800052e <transmitDataSPI+0x5a>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 100);
 8000510:	f107 0208 	add.w	r2, r7, #8
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	18d1      	adds	r1, r2, r3
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2201      	movs	r2, #1
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <transmitDataSPI+0x6c>)
 800051e:	f003 f8a0 	bl	8003662 <HAL_SPI_Transmit>
		HAL_Delay(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f000 fbce 	bl	8000cc4 <HAL_Delay>
	for (int i = 0; i < 4; i++) {
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b03      	cmp	r3, #3
 8000532:	dded      	ble.n	8000510 <transmitDataSPI+0x3c>
	}

#undef unpack
#undef pack
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000118 	.word	0x20000118

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fb4a 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f814 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f92c 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f902 	bl	800075c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000558:	f007 f81e 	bl	8007598 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800055c:	f000 f8aa 	bl	80006b4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000560:	f000 f876 	bl	8000650 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  transmitDataSPI(1234, 0xAB);
 8000564:	21ab      	movs	r1, #171	; 0xab
 8000566:	f240 40d2 	movw	r0, #1234	; 0x4d2
 800056a:	f7ff ffb3 	bl	80004d4 <transmitDataSPI>
	  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fba8 	bl	8000cc4 <HAL_Delay>
	  transmitDataSPI(1234, 0xAB);
 8000574:	e7f6      	b.n	8000564 <main+0x20>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fcf0 	bl	8007f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <SystemClock_Config+0xd4>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d4:	2303      	movs	r3, #3
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f0:	2310      	movs	r3, #16
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 80005f4:	237b      	movs	r3, #123	; 0x7b
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fb73 	bl	8002cf0 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 f910 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fdd6 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f8fb 	bl	8000834 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <MX_SPI1_Init+0x60>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_SPI1_Init+0x5c>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_SPI1_Init+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_SPI1_Init+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_SPI1_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000692:	220a      	movs	r2, #10
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_SPI1_Init+0x5c>)
 8000698:	f002 ff5a 	bl	8003550 <HAL_SPI_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80006a2:	f000 f8c7 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000118 	.word	0x20000118
 80006b0:	40013000 	.word	0x40013000

080006b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2224      	movs	r2, #36	; 0x24
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 fc52 	bl	8007f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_TIM2_Init+0xa4>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_TIM2_Init+0xa4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_TIM2_Init+0xa4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_TIM2_Init+0xa4>)
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_TIM2_Init+0xa4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_TIM2_Init+0xa4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000710:	2301      	movs	r3, #1
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_TIM2_Init+0xa4>)
 8000724:	f003 face 	bl	8003cc4 <HAL_TIM_Encoder_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800072e:	f000 f881 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_TIM2_Init+0xa4>)
 8000740:	f003 fbf2 	bl	8003f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800074a:	f000 f873 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000230 	.word	0x20000230

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_DMA_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DMA_Init+0x4c>)
 800076c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2038      	movs	r0, #56	; 0x38
 8000784:	f000 fb9d 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000788:	2038      	movs	r0, #56	; 0x38
 800078a:	f000 fbb6 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	203a      	movs	r0, #58	; 0x3a
 8000794:	f000 fb95 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000798:	203a      	movs	r0, #58	; 0x3a
 800079a:	f000 fbae 	bl	8000efa <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_GPIO_Init+0x84>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <MX_GPIO_Init+0x84>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_GPIO_Init+0x84>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_GPIO_Init+0x84>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <MX_GPIO_Init+0x84>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_GPIO_Init+0x84>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_GPIO_Init+0x84>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_GPIO_Init+0x84>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_GPIO_Init+0x84>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_GPIO_Init+0x84>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_GPIO_Init+0x84>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_GPIO_Init+0x84>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a5a      	ldr	r2, [pc, #360]	; (8000a18 <HAL_SPI_MspInit+0x188>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	f040 80ae 	bne.w	8000a10 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008bc:	4a57      	ldr	r2, [pc, #348]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c2:	6453      	str	r3, [r2, #68]	; 0x44
 80008c4:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
 80008e0:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a49      	ldr	r2, [pc, #292]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <HAL_SPI_MspInit+0x18c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000908:	2390      	movs	r3, #144	; 0x90
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000918:	2305      	movs	r3, #5
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	483f      	ldr	r0, [pc, #252]	; (8000a20 <HAL_SPI_MspInit+0x190>)
 8000924:	f000 fe10 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000928:	2318      	movs	r3, #24
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000938:	2305      	movs	r3, #5
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4838      	ldr	r0, [pc, #224]	; (8000a24 <HAL_SPI_MspInit+0x194>)
 8000944:	f000 fe00 	bl	8001548 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000948:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 800094a:	4a38      	ldr	r2, [pc, #224]	; (8000a2c <HAL_SPI_MspInit+0x19c>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 8000950:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000954:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000970:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000988:	4827      	ldr	r0, [pc, #156]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 800098a:	f000 fad1 	bl	8000f30 <HAL_DMA_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000994:	f7ff ff4e 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 800099c:	64da      	str	r2, [r3, #76]	; 0x4c
 800099e:	4a22      	ldr	r2, [pc, #136]	; (8000a28 <HAL_SPI_MspInit+0x198>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <HAL_SPI_MspInit+0x1a4>)
 80009a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009b4:	2240      	movs	r2, #64	; 0x40
 80009b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009e6:	f000 faa3 	bl	8000f30 <HAL_DMA_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 80009f0:	f7ff ff20 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009f8:	649a      	str	r2, [r3, #72]	; 0x48
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_SPI_MspInit+0x1a0>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2023      	movs	r0, #35	; 0x23
 8000a06:	f000 fa5c 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a0a:	2023      	movs	r0, #35	; 0x23
 8000a0c:	f000 fa75 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40013000 	.word	0x40013000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	20000170 	.word	0x20000170
 8000a2c:	40026410 	.word	0x40026410
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	40026440 	.word	0x40026440

08000a38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a58:	d12b      	bne.n	8000ab2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_TIM_Encoder_MspInit+0x84>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <HAL_TIM_Encoder_MspInit+0x84>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_TIM_Encoder_MspInit+0x84>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_TIM_Encoder_MspInit+0x84>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_TIM_Encoder_MspInit+0x84>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_TIM_Encoder_MspInit+0x84>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a92:	2303      	movs	r3, #3
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8000aae:	f000 fd4b 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f8b8 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <SPI1_IRQHandler+0x10>)
 8000b1e:	f002 fee3 	bl	80038e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000118 	.word	0x20000118

08000b2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <DMA2_Stream0_IRQHandler+0x10>)
 8000b32:	f000 facd 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000170 	.word	0x20000170

08000b40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <DMA2_Stream2_IRQHandler+0x10>)
 8000b46:	f000 fac3 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001d0 	.word	0x200001d0

08000b54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <OTG_FS_IRQHandler+0x10>)
 8000b5a:	f000 ffbd 	bl	8001ad8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000175c 	.word	0x2000175c

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f007 f9df 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fcc1 	bl	8000544 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000bd0:	0800804c 	.word	0x0800804c
  ldr r2, =_sbss
 8000bd4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000bd8:	20001e60 	.word	0x20001e60

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f94f 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe14 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f967 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 f92f 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000278 	.word	0x20000278

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000278 	.word	0x20000278

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff29 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff3e 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff31 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff feb6 	bl	8000cac <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e099      	b.n	8001080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6c:	e00f      	b.n	8000f8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f6e:	f7ff fe9d 	bl	8000cac <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d908      	bls.n	8000f8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2220      	movs	r2, #32
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e078      	b.n	8001080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e8      	bne.n	8000f6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_DMA_Init+0x158>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d107      	bne.n	8000ff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f023 0307 	bic.w	r3, r3, #7
 800100e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	4313      	orrs	r3, r2
 8001018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	2b04      	cmp	r3, #4
 8001020:	d117      	bne.n	8001052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4313      	orrs	r3, r2
 800102a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00e      	beq.n	8001052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fa0b 	bl	8001450 <DMA_CheckFifoParam>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2240      	movs	r2, #64	; 0x40
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800104e:	2301      	movs	r3, #1
 8001050:	e016      	b.n	8001080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f9c2 	bl	80013e4 <DMA_CalcBaseAndBitshift>
 8001060:	4603      	mov	r3, r0
 8001062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001068:	223f      	movs	r2, #63	; 0x3f
 800106a:	409a      	lsls	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	f010803f 	.word	0xf010803f

0800108c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d004      	beq.n	80010aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00c      	b.n	80010c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010dc:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <HAL_DMA_IRQHandler+0x248>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a8e      	ldr	r2, [pc, #568]	; (800131c <HAL_DMA_IRQHandler+0x24c>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0a9b      	lsrs	r3, r3, #10
 80010e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	2208      	movs	r2, #8
 80010fc:	409a      	lsls	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01a      	beq.n	800113c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	2208      	movs	r2, #8
 800112a:	409a      	lsls	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	2201      	movs	r2, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d012      	beq.n	8001172 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115e:	2201      	movs	r2, #1
 8001160:	409a      	lsls	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	f043 0202 	orr.w	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	2204      	movs	r2, #4
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	2204      	movs	r2, #4
 8001196:	409a      	lsls	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	f043 0204 	orr.w	r2, r3, #4
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	2210      	movs	r2, #16
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d043      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03c      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ca:	2210      	movs	r2, #16
 80011cc:	409a      	lsls	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d018      	beq.n	8001212 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d108      	bne.n	8001200 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d024      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
 80011fe:	e01f      	b.n	8001240 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01b      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
 8001210:	e016      	b.n	8001240 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0208 	bic.w	r2, r2, #8
 800122e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2220      	movs	r2, #32
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 808f 	beq.w	8001370 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 8087 	beq.w	8001370 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2220      	movs	r2, #32
 8001268:	409a      	lsls	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b05      	cmp	r3, #5
 8001278:	d136      	bne.n	80012e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0216 	bic.w	r2, r2, #22
 8001288:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001298:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <HAL_DMA_IRQHandler+0x1da>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0208 	bic.w	r2, r2, #8
 80012b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012be:	223f      	movs	r2, #63	; 0x3f
 80012c0:	409a      	lsls	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d07e      	beq.n	80013dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
        }
        return;
 80012e6:	e079      	b.n	80013dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01d      	beq.n	8001332 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10d      	bne.n	8001320 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	2b00      	cmp	r3, #0
 800130a:	d031      	beq.n	8001370 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
 8001314:	e02c      	b.n	8001370 <HAL_DMA_IRQHandler+0x2a0>
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000
 800131c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
 8001330:	e01e      	b.n	8001370 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10f      	bne.n	8001360 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0210 	bic.w	r2, r2, #16
 800134e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001374:	2b00      	cmp	r3, #0
 8001376:	d032      	beq.n	80013de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d022      	beq.n	80013ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2205      	movs	r2, #5
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d307      	bcc.n	80013b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f2      	bne.n	800139c <HAL_DMA_IRQHandler+0x2cc>
 80013b6:	e000      	b.n	80013ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	4798      	blx	r3
 80013da:	e000      	b.n	80013de <HAL_DMA_IRQHandler+0x30e>
        return;
 80013dc:	bf00      	nop
    }
  }
}
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3b10      	subs	r3, #16
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <DMA_CalcBaseAndBitshift+0x64>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <DMA_CalcBaseAndBitshift+0x68>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d909      	bls.n	8001426 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	1d1a      	adds	r2, r3, #4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	659a      	str	r2, [r3, #88]	; 0x58
 8001424:	e007      	b.n	8001436 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	aaaaaaab 	.word	0xaaaaaaab
 800144c:	08008034 	.word	0x08008034

08001450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11f      	bne.n	80014aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d856      	bhi.n	800151e <DMA_CheckFifoParam+0xce>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <DMA_CheckFifoParam+0x28>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001489 	.word	0x08001489
 800147c:	0800149b 	.word	0x0800149b
 8001480:	08001489 	.word	0x08001489
 8001484:	0800151f 	.word	0x0800151f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d046      	beq.n	8001522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001498:	e043      	b.n	8001522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014a2:	d140      	bne.n	8001526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a8:	e03d      	b.n	8001526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b2:	d121      	bne.n	80014f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d837      	bhi.n	800152a <DMA_CheckFifoParam+0xda>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <DMA_CheckFifoParam+0x70>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014d7 	.word	0x080014d7
 80014c8:	080014d1 	.word	0x080014d1
 80014cc:	080014e9 	.word	0x080014e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      break;
 80014d4:	e030      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d025      	beq.n	800152e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e6:	e022      	b.n	800152e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014f0:	d11f      	bne.n	8001532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014f6:	e01c      	b.n	8001532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d903      	bls.n	8001506 <DMA_CheckFifoParam+0xb6>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d003      	beq.n	800150c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001504:	e018      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
      break;
 800150a:	e015      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00e      	beq.n	8001536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      break;
 800151c:	e00b      	b.n	8001536 <DMA_CheckFifoParam+0xe6>
      break;
 800151e:	bf00      	nop
 8001520:	e00a      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 8001522:	bf00      	nop
 8001524:	e008      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 8001526:	bf00      	nop
 8001528:	e006      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 800152a:	bf00      	nop
 800152c:	e004      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 800152e:	bf00      	nop
 8001530:	e002      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;   
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <DMA_CheckFifoParam+0xe8>
      break;
 8001536:	bf00      	nop
    }
  } 
  
  return status; 
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e159      	b.n	8001818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8148 	bne.w	8001812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a2 	beq.w	8001812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a56      	ldr	r2, [pc, #344]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x202>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2f4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x1fe>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_GPIO_Init+0x2f8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a46      	ldr	r2, [pc, #280]	; (8001844 <HAL_GPIO_Init+0x2fc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x1f6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a45      	ldr	r2, [pc, #276]	; (8001848 <HAL_GPIO_Init+0x300>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x1f2>
 8001736:	2304      	movs	r3, #4
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173a:	2307      	movs	r3, #7
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x204>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_GPIO_Init+0x304>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a2f      	ldr	r2, [pc, #188]	; (800184c <HAL_GPIO_Init+0x304>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_GPIO_Init+0x304>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a24      	ldr	r2, [pc, #144]	; (800184c <HAL_GPIO_Init+0x304>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_GPIO_Init+0x304>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_GPIO_Init+0x304>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_GPIO_Init+0x304>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_GPIO_Init+0x304>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f aea2 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e101      	b.n	8001a66 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d106      	bne.n	8001882 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f006 f86b 	bl	8007958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2203      	movs	r2, #3
 8001886:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001890:	d102      	bne.n	8001898 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fcc8 	bl	8004232 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7c1a      	ldrb	r2, [r3, #16]
 80018aa:	f88d 2000 	strb.w	r2, [sp]
 80018ae:	3304      	adds	r3, #4
 80018b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b2:	f002 fba7 	bl	8004004 <USB_CoreInit>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0ce      	b.n	8001a66 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fcc0 	bl	8004254 <USB_SetCurrentMode>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0bf      	b.n	8001a66 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e04a      	b.n	8001982 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3315      	adds	r3, #21
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3314      	adds	r3, #20
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	b298      	uxth	r0, r3
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	332e      	adds	r3, #46	; 0x2e
 8001928:	4602      	mov	r2, r0
 800192a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	3318      	adds	r3, #24
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	331c      	adds	r3, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3320      	adds	r3, #32
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3324      	adds	r3, #36	; 0x24
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3301      	adds	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3af      	bcc.n	80018ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e044      	b.n	8001a1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3b5      	bcc.n	8001992 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7c1a      	ldrb	r2, [r3, #16]
 8001a2e:	f88d 2000 	strb.w	r2, [sp]
 8001a32:	3304      	adds	r3, #4
 8001a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a36:	f002 fc59 	bl	80042ec <USB_DevInit>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e00c      	b.n	8001a66 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fc9d 	bl	800539e <USB_DevDisconnect>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_PCD_Start+0x1c>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e022      	b.n	8001ad0 <HAL_PCD_Start+0x62>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 fbaa 	bl	8004210 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fc4b 	bl	800535c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b08d      	sub	sp, #52	; 0x34
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fd09 	bl	8005506 <USB_GetMode>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 848c 	bne.w	8002414 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fc6d 	bl	80053e0 <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8482 	beq.w	8002412 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fc5a 	bl	80053e0 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f002 0202 	and.w	r2, r2, #2
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fc48 	bl	80053e0 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d161      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0210 	bic.w	r2, r2, #16
 8001b68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 020f 	and.w	r2, r3, #15
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	3304      	adds	r3, #4
 8001b88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	0c5b      	lsrs	r3, r3, #17
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d124      	bne.n	8001be0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d035      	beq.n	8001c0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6a38      	ldr	r0, [r7, #32]
 8001bb6:	f003 fa7f 	bl	80050b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc6:	441a      	add	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd8:	441a      	add	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	e016      	b.n	8001c0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	0c5b      	lsrs	r3, r3, #17
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d110      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6a38      	ldr	r0, [r7, #32]
 8001bf8:	f003 fa5e 	bl	80050b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c08:	441a      	add	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0210 	orr.w	r2, r2, #16
 8001c1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fbdc 	bl	80053e0 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c32:	f040 80a7 	bne.w	8001d84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fbe1 	bl	8005406 <USB_ReadDevAllOutEpInterrupt>
 8001c44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c46:	e099      	b.n	8001d7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 808e 	beq.w	8001d70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fc05 	bl	800546e <USB_ReadDevOutEPInterrupt>
 8001c64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00c      	beq.n	8001c8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2301      	movs	r3, #1
 8001c80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fea1 	bl	80029cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00c      	beq.n	8001cae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 ff77 	bl	8002b9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d030      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d109      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2200      	movs	r2, #0
 8001d16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f005 ff16 	bl	8007b50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d30:	461a      	mov	r2, r3
 8001d32:	2302      	movs	r3, #2
 8001d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2320      	movs	r3, #32
 8001d50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3301      	adds	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f47f af62 	bne.w	8001c48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fb29 	bl	80053e0 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d98:	f040 80db 	bne.w	8001f52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fb4a 	bl	800543a <USB_ReadDevAllInEpInterrupt>
 8001da6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dac:	e0cd      	b.n	8001f4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80c2 	beq.w	8001f3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fb70 	bl	80054aa <USB_ReadDevInEPInterrupt>
 8001dca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d057      	beq.n	8001e86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	2201      	movs	r2, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69f9      	ldr	r1, [r7, #28]
 8001df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df6:	4013      	ands	r3, r2
 8001df8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e06:	461a      	mov	r2, r3
 8001e08:	2301      	movs	r3, #1
 8001e0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	799b      	ldrb	r3, [r3, #6]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d132      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3320      	adds	r3, #32
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4403      	add	r3, r0
 8001e34:	331c      	adds	r3, #28
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4419      	add	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4403      	add	r3, r0
 8001e48:	3320      	adds	r3, #32
 8001e4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d113      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x3a2>
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	3324      	adds	r3, #36	; 0x24
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d108      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e72:	461a      	mov	r2, r3
 8001e74:	2101      	movs	r1, #1
 8001e76:	f003 fb77 	bl	8005568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f005 fdea 	bl	8007a5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2310      	movs	r3, #16
 8001ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2340      	movs	r3, #64	; 0x40
 8001ed8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee6:	6a38      	ldr	r0, [r7, #32]
 8001ee8:	f002 fb64 	bl	80045b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	78db      	ldrb	r3, [r3, #3]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 fe2d 	bl	8007b74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f26:	461a      	mov	r2, r3
 8001f28:	2302      	movs	r3, #2
 8001f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fcbb 	bl	80028b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f af2e 	bne.w	8001dae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fa42 	bl	80053e0 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f66:	d122      	bne.n	8001fae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fea1 	bl	8002cd8 <HAL_PCDEx_LPM_Callback>
 8001f96:	e002      	b.n	8001f9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f005 fdcb 	bl	8007b34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fa14 	bl	80053e0 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fc2:	d112      	bne.n	8001fea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d102      	bne.n	8001fda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f005 fd87 	bl	8007ae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fe8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 f9f6 	bl	80053e0 <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffe:	f040 80b7 	bne.w	8002170 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2110      	movs	r1, #16
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fac9 	bl	80045b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002026:	e046      	b.n	80020b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002034:	461a      	mov	r2, r3
 8002036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800203a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204c:	0151      	lsls	r1, r2, #5
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	440a      	add	r2, r1
 8002052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800205a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	461a      	mov	r2, r3
 800206a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800206e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002080:	0151      	lsls	r1, r2, #5
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	440a      	add	r2, r1
 8002086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800208a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800208e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a0:	0151      	lsls	r1, r2, #5
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	440a      	add	r2, r1
 80020a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	3301      	adds	r3, #1
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	4293      	cmp	r3, r2
 80020c0:	d3b2      	bcc.n	8002028 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7bdb      	ldrb	r3, [r3, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ee:	f043 030b 	orr.w	r3, r3, #11
 80020f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002104:	f043 030b 	orr.w	r3, r3, #11
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	e015      	b.n	8002138 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800211a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800211e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002122:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002132:	f043 030b 	orr.w	r3, r3, #11
 8002136:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002146:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800214a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800215a:	461a      	mov	r2, r3
 800215c:	f003 fa04 	bl	8005568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800216e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 f933 	bl	80053e0 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002184:	d123      	bne.n	80021ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 f9c9 	bl	8005522 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fa86 	bl	80046a6 <USB_GetDevSpeed>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	f001 f9c7 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 80021aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021b0:	461a      	mov	r2, r3
 80021b2:	4620      	mov	r0, r4
 80021b4:	f001 ff8a 	bl	80040cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f005 fc76 	bl	8007aaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 f904 	bl	80053e0 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d10a      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 fc53 	bl	8007a8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f002 0208 	and.w	r2, r2, #8
 80021f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 f8ef 	bl	80053e0 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d123      	bne.n	8002254 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	e014      	b.n	8002248 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fb08 	bl	8002852 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	791b      	ldrb	r3, [r3, #4]
 800224c:	461a      	mov	r2, r3
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	4293      	cmp	r3, r2
 8002252:	d3e4      	bcc.n	800221e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 f8c1 	bl	80053e0 <USB_ReadInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002268:	d13c      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800226a:	2301      	movs	r3, #1
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e02b      	b.n	80022c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3318      	adds	r3, #24
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d115      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002296:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	da12      	bge.n	80022c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3317      	adds	r3, #23
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fac8 	bl	8002852 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	3301      	adds	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	791b      	ldrb	r3, [r3, #4]
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d3cd      	bcc.n	8002270 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f879 	bl	80053e0 <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f8:	d156      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022fa:	2301      	movs	r3, #1
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e045      	b.n	800238c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d12e      	bne.n	8002386 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002328:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	da2b      	bge.n	8002386 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800233a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800233e:	429a      	cmp	r2, r3
 8002340:	d121      	bne.n	8002386 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002382:	6053      	str	r3, [r2, #4]
            break;
 8002384:	e008      	b.n	8002398 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	791b      	ldrb	r3, [r3, #4]
 8002390:	461a      	mov	r2, r3
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	4293      	cmp	r3, r2
 8002396:	d3b3      	bcc.n	8002300 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 f817 	bl	80053e0 <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d10a      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f005 fbea 	bl	8007b98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 f801 	bl	80053e0 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d115      	bne.n	8002414 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f005 fbda 	bl	8007bb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	e000      	b.n	8002414 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002412:	bf00      	nop
    }
  }
}
 8002414:	3734      	adds	r7, #52	; 0x34
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}

0800241a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_PCD_SetAddress+0x1a>
 8002430:	2302      	movs	r3, #2
 8002432:	e012      	b.n	800245a <HAL_PCD_SetAddress+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f002 ff60 	bl	8005310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	4608      	mov	r0, r1
 800246c:	4611      	mov	r1, r2
 800246e:	461a      	mov	r2, r3
 8002470:	4603      	mov	r3, r0
 8002472:	70fb      	strb	r3, [r7, #3]
 8002474:	460b      	mov	r3, r1
 8002476:	803b      	strh	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002484:	2b00      	cmp	r3, #0
 8002486:	da0f      	bge.n	80024a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 020f 	and.w	r2, r3, #15
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3310      	adds	r3, #16
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	705a      	strb	r2, [r3, #1]
 80024a6:	e00f      	b.n	80024c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 020f 	and.w	r2, r3, #15
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024d4:	883a      	ldrh	r2, [r7, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	78ba      	ldrb	r2, [r7, #2]
 80024de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d102      	bne.n	80024fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_PCD_EP_Open+0xaa>
 8002508:	2302      	movs	r3, #2
 800250a:	e00e      	b.n	800252a <HAL_PCD_EP_Open+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	4618      	mov	r0, r3
 800251c:	f002 f8e8 	bl	80046f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002528:	7afb      	ldrb	r3, [r7, #11]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800253e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002542:	2b00      	cmp	r3, #0
 8002544:	da0f      	bge.n	8002566 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	3310      	adds	r3, #16
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	3304      	adds	r3, #4
 800255c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	705a      	strb	r2, [r3, #1]
 8002564:	e00f      	b.n	8002586 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	f003 020f 	and.w	r2, r3, #15
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_EP_Close+0x6e>
 800259c:	2302      	movs	r3, #2
 800259e:	e00e      	b.n	80025be <HAL_PCD_EP_Close+0x8c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f926 	bl	8004800 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	460b      	mov	r3, r1
 80025d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	b2da      	uxtb	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	799b      	ldrb	r3, [r3, #6]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	799b      	ldrb	r3, [r3, #6]
 800262a:	461a      	mov	r2, r3
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	f002 f9c3 	bl	80049b8 <USB_EPStartXfer>

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3310      	adds	r3, #16
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ac:	7afb      	ldrb	r3, [r7, #11]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	799b      	ldrb	r3, [r3, #6]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	799b      	ldrb	r3, [r3, #6]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6979      	ldr	r1, [r7, #20]
 80026d2:	f002 f971 	bl	80049b8 <USB_EPStartXfer>

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	7912      	ldrb	r2, [r2, #4]
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e04f      	b.n	800279e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002702:	2b00      	cmp	r3, #0
 8002704:	da0f      	bge.n	8002726 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	3310      	adds	r3, #16
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	705a      	strb	r2, [r3, #1]
 8002724:	e00d      	b.n	8002742 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_PCD_EP_SetStall+0x82>
 800275e:	2302      	movs	r3, #2
 8002760:	e01d      	b.n	800279e <HAL_PCD_EP_SetStall+0xbe>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	4618      	mov	r0, r3
 8002772:	f002 fcf9 	bl	8005168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7999      	ldrb	r1, [r3, #6]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800278e:	461a      	mov	r2, r3
 8002790:	f002 feea 	bl	8005568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	7912      	ldrb	r2, [r2, #4]
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e042      	b.n	800284a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da0f      	bge.n	80027ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 020f 	and.w	r2, r3, #15
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	3310      	adds	r3, #16
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]
 80027ea:	e00f      	b.n	800280c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 020f 	and.w	r2, r3, #15
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_PCD_EP_ClrStall+0x86>
 8002828:	2302      	movs	r3, #2
 800282a:	e00e      	b.n	800284a <HAL_PCD_EP_ClrStall+0xa4>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68f9      	ldr	r1, [r7, #12]
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fd02 	bl	8005244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800285e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da0c      	bge.n	8002880 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	3310      	adds	r3, #16
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e00c      	b.n	800289a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 020f 	and.w	r2, r3, #15
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	3304      	adds	r3, #4
 8002898:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fb21 	bl	8004ee8 <USB_EPStopXfer>
 80028a6:	4603      	mov	r3, r0
 80028a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	3310      	adds	r3, #16
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d901      	bls.n	80028ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e06b      	b.n	80029c4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d902      	bls.n	8002908 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3303      	adds	r3, #3
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002910:	e02a      	b.n	8002968 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	429a      	cmp	r2, r3
 8002926:	d902      	bls.n	800292e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3303      	adds	r3, #3
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4603      	mov	r3, r0
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f002 fb76 	bl	800503c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	441a      	add	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	441a      	add	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	429a      	cmp	r2, r3
 800297c:	d809      	bhi.n	8002992 <PCD_WriteEmptyTxFifo+0xde>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002986:	429a      	cmp	r2, r3
 8002988:	d203      	bcs.n	8002992 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1bf      	bne.n	8002912 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	429a      	cmp	r2, r3
 800299c:	d811      	bhi.n	80029c2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	2201      	movs	r2, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029be:	4013      	ands	r3, r2
 80029c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	333c      	adds	r3, #60	; 0x3c
 80029e4:	3304      	adds	r3, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	799b      	ldrb	r3, [r3, #6]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d17b      	bne.n	8002afa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4a61      	ldr	r2, [pc, #388]	; (8002b94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	f240 80b9 	bls.w	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80b3 	beq.w	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a34:	6093      	str	r3, [r2, #8]
 8002a36:	e0a7      	b.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2320      	movs	r3, #32
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	e098      	b.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 8093 	bne.w	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d90f      	bls.n	8002a8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	461a      	mov	r2, r3
 8002a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a86:	6093      	str	r3, [r2, #8]
 8002a88:	e07e      	b.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	0159      	lsls	r1, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	1ad2      	subs	r2, r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d114      	bne.n	8002aec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	f002 fd46 	bl	8005568 <USB_EP0_OutStart>
 8002adc:	e006      	b.n	8002aec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	441a      	add	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f004 ff96 	bl	8007a24 <HAL_PCD_DataOutStageCallback>
 8002af8:	e046      	b.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d124      	bne.n	8002b4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1e:	6093      	str	r3, [r2, #8]
 8002b20:	e032      	b.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f004 ff6d 	bl	8007a24 <HAL_PCD_DataOutStageCallback>
 8002b4a:	e01d      	b.n	8002b88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d114      	bne.n	8002b7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b74:	461a      	mov	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f002 fcf6 	bl	8005568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f004 ff4e 	bl	8007a24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	4f54300a 	.word	0x4f54300a
 8002b98:	4f54310a 	.word	0x4f54310a

08002b9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	333c      	adds	r3, #60	; 0x3c
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d90e      	bls.n	8002bf0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	461a      	mov	r2, r3
 8002bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f004 ff05 	bl	8007a00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d90c      	bls.n	8002c18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	799b      	ldrb	r3, [r3, #6]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d108      	bne.n	8002c18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c10:	461a      	mov	r2, r3
 8002c12:	2101      	movs	r1, #1
 8002c14:	f002 fca8 	bl	8005568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	4f54300a 	.word	0x4f54300a

08002c28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
 8002c34:	4613      	mov	r3, r2
 8002c36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c46:	883b      	ldrh	r3, [r7, #0]
 8002c48:	0419      	lsls	r1, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
 8002c54:	e028      	b.n	8002ca8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	4413      	add	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e00d      	b.n	8002c86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3340      	adds	r3, #64	; 0x40
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	3301      	adds	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3ec      	bcc.n	8002c6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c90:	883b      	ldrh	r3, [r7, #0]
 8002c92:	0418      	lsls	r0, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6819      	ldr	r1, [r3, #0]
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4302      	orrs	r2, r0
 8002ca0:	3340      	adds	r3, #64	; 0x40
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e267      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e242      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6f      	ldr	r2, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b66      	ldr	r3, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fd ff80 	bl	8000cac <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fd ff7c 	bl	8000cac <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e207      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fd ff6c 	bl	8000cac <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7fd ff68 	bl	8000cac <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f3      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c7      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fd ff21 	bl	8000cac <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fd ff1d 	bl	8000cac <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a8      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fd ff00 	bl	8000cac <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fd fefc 	bl	8000cac <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e187      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fd fee0 	bl	8000cac <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7fd fedc 	bl	8000cac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e167      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e01b      	b.n	8002f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fd fec9 	bl	8000cac <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fd fec5 	bl	8000cac <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e150      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b74      	ldr	r3, [pc, #464]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fe85 	bl	8000cac <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fd fe81 	bl	8000cac <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e10c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e01c      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fd fe46 	bl	8000cac <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fd fe42 	bl	8000cac <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0cb      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x334>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fd fe30 	bl	8000cac <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fd fe2c 	bl	8000cac <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b5      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a1 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d05c      	beq.n	8003154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fe00 	bl	8000cac <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fd fdfc 	bl	8000cac <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e087      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fd fdd5 	bl	8000cac <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fd fdd1 	bl	8000cac <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e05c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x416>
 8003124:	e054      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fd fdbe 	bl	8000cac <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fd fdba 	bl	8000cac <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e045      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e038      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d028      	beq.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	3b01      	subs	r3, #1
 80031b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fd fcec 	bl	8000cac <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fd fce8 	bl	8000cac <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fc4c 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08008024 	.word	0x08008024
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b090      	sub	sp, #64	; 0x40
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
 80033b8:	2300      	movs	r3, #0
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033bc:	2300      	movs	r3, #0
 80033be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80a1 	bhi.w	8003518 <HAL_RCC_GetSysClockFreq+0x16c>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e09b      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033e4:	e09b      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ea:	e098      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b4f      	ldr	r3, [pc, #316]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d028      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	627a      	str	r2, [r7, #36]	; 0x24
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003414:	2100      	movs	r1, #0
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 8003418:	fb03 f201 	mul.w	r2, r3, r1
 800341c:	2300      	movs	r3, #0
 800341e:	fb00 f303 	mul.w	r3, r0, r3
 8003422:	4413      	add	r3, r2
 8003424:	4a43      	ldr	r2, [pc, #268]	; (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 8003426:	fba0 1202 	umull	r1, r2, r0, r2
 800342a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800342c:	460a      	mov	r2, r1
 800342e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003432:	4413      	add	r3, r2
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	2200      	movs	r2, #0
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003446:	f7fc fec7 	bl	80001d8 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4613      	mov	r3, r2
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003452:	e053      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	2200      	movs	r2, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	617a      	str	r2, [r7, #20]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003466:	f04f 0b00 	mov.w	fp, #0
 800346a:	4652      	mov	r2, sl
 800346c:	465b      	mov	r3, fp
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347c:	0150      	lsls	r0, r2, #5
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	ebb2 080a 	subs.w	r8, r2, sl
 8003486:	eb63 090b 	sbc.w	r9, r3, fp
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800349a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800349e:	ebb2 0408 	subs.w	r4, r2, r8
 80034a2:	eb63 0509 	sbc.w	r5, r3, r9
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	00eb      	lsls	r3, r5, #3
 80034b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b4:	00e2      	lsls	r2, r4, #3
 80034b6:	4614      	mov	r4, r2
 80034b8:	461d      	mov	r5, r3
 80034ba:	eb14 030a 	adds.w	r3, r4, sl
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	eb45 030b 	adc.w	r3, r5, fp
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034d2:	4629      	mov	r1, r5
 80034d4:	028b      	lsls	r3, r1, #10
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034dc:	4621      	mov	r1, r4
 80034de:	028a      	lsls	r2, r1, #10
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	2200      	movs	r2, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f0:	f7fc fe72 	bl	80001d8 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	3301      	adds	r3, #1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800350c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003516:	e002      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800351c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003520:	4618      	mov	r0, r3
 8003522:	3740      	adds	r7, #64	; 0x40
 8003524:	46bd      	mov	sp, r7
 8003526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	00f42400 	.word	0x00f42400
 8003534:	017d7840 	.word	0x017d7840

08003538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000

08003550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07b      	b.n	800365a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d108      	bne.n	800357c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003572:	d009      	beq.n	8003588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
 800357a:	e005      	b.n	8003588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f974 	bl	8000890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	ea42 0103 	orr.w	r1, r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	f003 0104 	and.w	r1, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f003 0210 	and.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b088      	sub	sp, #32
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_SPI_Transmit+0x22>
 8003680:	2302      	movs	r3, #2
 8003682:	e12d      	b.n	80038e0 <HAL_SPI_Transmit+0x27e>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368c:	f7fd fb0e 	bl	8000cac <HAL_GetTick>
 8003690:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a6:	e116      	b.n	80038d6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_SPI_Transmit+0x52>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036b8:	e10d      	b.n	80038d6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003700:	d10f      	bne.n	8003722 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003710:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003720:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d007      	beq.n	8003740 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003748:	d14f      	bne.n	80037ea <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SPI_Transmit+0xf6>
 8003752:	8afb      	ldrh	r3, [r7, #22]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d142      	bne.n	80037de <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800377c:	e02f      	b.n	80037de <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d112      	bne.n	80037b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80037b0:	e015      	b.n	80037de <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b2:	f7fd fa7b 	bl	8000cac <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d803      	bhi.n	80037ca <HAL_SPI_Transmit+0x168>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c8:	d102      	bne.n	80037d0 <HAL_SPI_Transmit+0x16e>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80037dc:	e07b      	b.n	80038d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ca      	bne.n	800377e <HAL_SPI_Transmit+0x11c>
 80037e8:	e050      	b.n	800388c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_Transmit+0x196>
 80037f2:	8afb      	ldrh	r3, [r7, #22]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d144      	bne.n	8003882 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800381e:	e030      	b.n	8003882 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d113      	bne.n	8003856 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	86da      	strh	r2, [r3, #54]	; 0x36
 8003854:	e015      	b.n	8003882 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003856:	f7fd fa29 	bl	8000cac <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d803      	bhi.n	800386e <HAL_SPI_Transmit+0x20c>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386c:	d102      	bne.n	8003874 <HAL_SPI_Transmit+0x212>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003880:	e029      	b.n	80038d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1c9      	bne.n	8003820 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	6839      	ldr	r1, [r7, #0]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f9c3 	bl	8003c1c <SPI_EndRxTxTransaction>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e003      	b.n	80038d6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038de:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10e      	bne.n	8003928 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
    return;
 8003926:	e0ce      	b.n	8003ac6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_SPI_IRQHandler+0x5e>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
    return;
 8003944:	e0bf      	b.n	8003ac6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_SPI_IRQHandler+0x7e>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80b0 	beq.w	8003ac6 <HAL_SPI_IRQHandler+0x1de>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80aa 	beq.w	8003ac6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d011      	beq.n	80039ac <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0204 	orr.w	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	e00b      	b.n	80039c4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
        return;
 80039c2:	e080      	b.n	8003ac6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d014      	beq.n	80039f8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f043 0208 	orr.w	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d04f      	beq.n	8003ac4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a32:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_SPI_IRQHandler+0x168>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d034      	beq.n	8003aba <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0203 	bic.w	r2, r2, #3
 8003a5e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	4a17      	ldr	r2, [pc, #92]	; (8003acc <HAL_SPI_IRQHandler+0x1e4>)
 8003a6e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fb09 	bl	800108c <HAL_DMA_Abort_IT>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <HAL_SPI_IRQHandler+0x1e4>)
 8003a9a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd faf3 	bl	800108c <HAL_DMA_Abort_IT>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003ab8:	e003      	b.n	8003ac2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f808 	bl	8003ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ac0:	e000      	b.n	8003ac4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003ac2:	bf00      	nop
    return;
 8003ac4:	bf00      	nop
  }
}
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08003ae5 	.word	0x08003ae5

08003ad0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff ffe6 	bl	8003ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b1c:	f7fd f8c6 	bl	8000cac <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b2c:	f7fd f8be 	bl	8000cac <HAL_GetTick>
 8003b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	015b      	lsls	r3, r3, #5
 8003b38:	0d1b      	lsrs	r3, r3, #20
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	e054      	b.n	8003bee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4a:	d050      	beq.n	8003bee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4c:	f7fd f8ae 	bl	8000cac <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d902      	bls.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d13d      	bne.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7a:	d111      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b84:	d004      	beq.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	d107      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba8:	d10f      	bne.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e017      	b.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d19b      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000000 	.word	0x20000000

08003c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2102      	movs	r1, #2
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff6a 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e032      	b.n	8003cb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <SPI_EndRxTxTransaction+0xa0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <SPI_EndRxTxTransaction+0xa4>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	0d5b      	lsrs	r3, r3, #21
 8003c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6c:	d112      	bne.n	8003c94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff ff47 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d016      	beq.n	8003cb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e00f      	b.n	8003cb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d0f2      	beq.n	8003c94 <SPI_EndRxTxTransaction+0x78>
 8003cae:	e000      	b.n	8003cb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8003cb0:	bf00      	nop
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	165e9f81 	.word	0x165e9f81

08003cc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e097      	b.n	8003e08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fc fea3 	bl	8000a38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d08:	f023 0307 	bic.w	r3, r3, #7
 8003d0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f000 f879 	bl	8003e10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	4313      	orrs	r3, r2
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d64:	f023 030c 	bic.w	r3, r3, #12
 8003d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	4313      	orrs	r3, r2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	011a      	lsls	r2, r3, #4
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	031b      	lsls	r3, r3, #12
 8003d94:	4313      	orrs	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	4313      	orrs	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a3a      	ldr	r2, [pc, #232]	; (8003f0c <TIM_Base_SetConfig+0xfc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00f      	beq.n	8003e48 <TIM_Base_SetConfig+0x38>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d00b      	beq.n	8003e48 <TIM_Base_SetConfig+0x38>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <TIM_Base_SetConfig+0x100>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <TIM_Base_SetConfig+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a36      	ldr	r2, [pc, #216]	; (8003f14 <TIM_Base_SetConfig+0x104>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0x38>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a35      	ldr	r2, [pc, #212]	; (8003f18 <TIM_Base_SetConfig+0x108>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d108      	bne.n	8003e5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <TIM_Base_SetConfig+0xfc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01b      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d017      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a28      	ldr	r2, [pc, #160]	; (8003f10 <TIM_Base_SetConfig+0x100>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <TIM_Base_SetConfig+0x104>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00f      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a26      	ldr	r2, [pc, #152]	; (8003f18 <TIM_Base_SetConfig+0x108>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <TIM_Base_SetConfig+0x10c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <TIM_Base_SetConfig+0x110>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a0e      	ldr	r2, [pc, #56]	; (8003f0c <TIM_Base_SetConfig+0xfc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]
  }
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800

08003f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e050      	b.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d013      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40014000 	.word	0x40014000

08004004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004004:	b084      	sub	sp, #16
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	f107 001c 	add.w	r0, r7, #28
 8004012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004016:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800401a:	2b01      	cmp	r3, #1
 800401c:	d123      	bne.n	8004066 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004046:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f001 fae2 	bl	8005624 <USB_CoreReset>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e01b      	b.n	800409e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f001 fad6 	bl	8005624 <USB_CoreReset>
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800407c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
 8004090:	e005      	b.n	800409e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800409e:	7fbb      	ldrb	r3, [r7, #30]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10b      	bne.n	80040bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f043 0206 	orr.w	r2, r3, #6
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c8:	b004      	add	sp, #16
 80040ca:	4770      	bx	lr

080040cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d165      	bne.n	80041ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <USB_SetTurnaroundTime+0x11c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d906      	bls.n	80040f6 <USB_SetTurnaroundTime+0x2a>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a40      	ldr	r2, [pc, #256]	; (80041ec <USB_SetTurnaroundTime+0x120>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d202      	bcs.n	80040f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040f0:	230f      	movs	r3, #15
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e062      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4a3c      	ldr	r2, [pc, #240]	; (80041ec <USB_SetTurnaroundTime+0x120>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d306      	bcc.n	800410c <USB_SetTurnaroundTime+0x40>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <USB_SetTurnaroundTime+0x124>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d202      	bcs.n	800410c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004106:	230e      	movs	r3, #14
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e057      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a38      	ldr	r2, [pc, #224]	; (80041f0 <USB_SetTurnaroundTime+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d306      	bcc.n	8004122 <USB_SetTurnaroundTime+0x56>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a37      	ldr	r2, [pc, #220]	; (80041f4 <USB_SetTurnaroundTime+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d202      	bcs.n	8004122 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800411c:	230d      	movs	r3, #13
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e04c      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <USB_SetTurnaroundTime+0x128>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d306      	bcc.n	8004138 <USB_SetTurnaroundTime+0x6c>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a32      	ldr	r2, [pc, #200]	; (80041f8 <USB_SetTurnaroundTime+0x12c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d802      	bhi.n	8004138 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004132:	230c      	movs	r3, #12
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e041      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <USB_SetTurnaroundTime+0x12c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d906      	bls.n	800414e <USB_SetTurnaroundTime+0x82>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <USB_SetTurnaroundTime+0x130>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d802      	bhi.n	800414e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004148:	230b      	movs	r3, #11
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e036      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <USB_SetTurnaroundTime+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d906      	bls.n	8004164 <USB_SetTurnaroundTime+0x98>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <USB_SetTurnaroundTime+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d802      	bhi.n	8004164 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800415e:	230a      	movs	r3, #10
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e02b      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4a26      	ldr	r2, [pc, #152]	; (8004200 <USB_SetTurnaroundTime+0x134>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d906      	bls.n	800417a <USB_SetTurnaroundTime+0xae>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a25      	ldr	r2, [pc, #148]	; (8004204 <USB_SetTurnaroundTime+0x138>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d202      	bcs.n	800417a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004174:	2309      	movs	r3, #9
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e020      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <USB_SetTurnaroundTime+0x138>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d306      	bcc.n	8004190 <USB_SetTurnaroundTime+0xc4>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <USB_SetTurnaroundTime+0x13c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d802      	bhi.n	8004190 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800418a:	2308      	movs	r3, #8
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e015      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <USB_SetTurnaroundTime+0x13c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d906      	bls.n	80041a6 <USB_SetTurnaroundTime+0xda>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <USB_SetTurnaroundTime+0x140>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d202      	bcs.n	80041a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041a0:	2307      	movs	r3, #7
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e00a      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041a6:	2306      	movs	r3, #6
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e007      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041b2:	2309      	movs	r3, #9
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e001      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041b8:	2309      	movs	r3, #9
 80041ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	00d8acbf 	.word	0x00d8acbf
 80041ec:	00e4e1c0 	.word	0x00e4e1c0
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	01067380 	.word	0x01067380
 80041f8:	011a499f 	.word	0x011a499f
 80041fc:	01312cff 	.word	0x01312cff
 8004200:	014ca43f 	.word	0x014ca43f
 8004204:	016e3600 	.word	0x016e3600
 8004208:	01a6ab1f 	.word	0x01a6ab1f
 800420c:	01e84800 	.word	0x01e84800

08004210 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d115      	bne.n	80042a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004282:	200a      	movs	r0, #10
 8004284:	f7fc fd1e 	bl	8000cc4 <HAL_Delay>
      ms += 10U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	330a      	adds	r3, #10
 800428c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 f939 	bl	8005506 <USB_GetMode>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d01e      	beq.n	80042d8 <USB_SetCurrentMode+0x84>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2bc7      	cmp	r3, #199	; 0xc7
 800429e:	d9f0      	bls.n	8004282 <USB_SetCurrentMode+0x2e>
 80042a0:	e01a      	b.n	80042d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042b4:	200a      	movs	r0, #10
 80042b6:	f7fc fd05 	bl	8000cc4 <HAL_Delay>
      ms += 10U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	330a      	adds	r3, #10
 80042be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 f920 	bl	8005506 <USB_GetMode>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <USB_SetCurrentMode+0x84>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2bc7      	cmp	r3, #199	; 0xc7
 80042d0:	d9f0      	bls.n	80042b4 <USB_SetCurrentMode+0x60>
 80042d2:	e001      	b.n	80042d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e005      	b.n	80042e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2bc8      	cmp	r3, #200	; 0xc8
 80042dc:	d101      	bne.n	80042e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ec:	b084      	sub	sp, #16
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	e009      	b.n	8004320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3340      	adds	r3, #64	; 0x40
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0e      	cmp	r3, #14
 8004324:	d9f2      	bls.n	800430c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004326:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11c      	bne.n	8004368 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
 8004366:	e00b      	b.n	8004380 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800438c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10d      	bne.n	80043b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800439c:	2100      	movs	r1, #0
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f968 	bl	8004674 <USB_SetDevSpeed>
 80043a4:	e008      	b.n	80043b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043a6:	2101      	movs	r1, #1
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f963 	bl	8004674 <USB_SetDevSpeed>
 80043ae:	e003      	b.n	80043b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043b0:	2103      	movs	r1, #3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f95e 	bl	8004674 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043b8:	2110      	movs	r1, #16
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f8fa 	bl	80045b4 <USB_FlushTxFifo>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f924 	bl	8004618 <USB_FlushRxFifo>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	461a      	mov	r2, r3
 80043ee:	2300      	movs	r3, #0
 80043f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e043      	b.n	800448c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441a:	d118      	bne.n	800444e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	461a      	mov	r2, r3
 8004430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e013      	b.n	8004460 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	461a      	mov	r2, r3
 8004446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e008      	b.n	8004460 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	2300      	movs	r3, #0
 8004470:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004484:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3301      	adds	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004490:	461a      	mov	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4293      	cmp	r3, r2
 8004496:	d3b5      	bcc.n	8004404 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e043      	b.n	8004526 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b4:	d118      	bne.n	80044e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e013      	b.n	80044fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e008      	b.n	80044fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	461a      	mov	r2, r3
 80044f6:	2300      	movs	r3, #0
 80044f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	2300      	movs	r3, #0
 800450a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	461a      	mov	r2, r3
 800451a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800451e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3301      	adds	r3, #1
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800452a:	461a      	mov	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4293      	cmp	r3, r2
 8004530:	d3b5      	bcc.n	800449e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004544:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004552:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f043 0210 	orr.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <USB_DevInit+0x2c4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004574:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f043 0208 	orr.w	r2, r3, #8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004588:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ac:	b004      	add	sp, #16
 80045ae:	4770      	bx	lr
 80045b0:	803c3800 	.word	0x803c3800

080045b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80045ce:	d901      	bls.n	80045d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e01b      	b.n	800460c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	daf2      	bge.n	80045c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	019b      	lsls	r3, r3, #6
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80045f8:	d901      	bls.n	80045fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d0f0      	beq.n	80045ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004630:	d901      	bls.n	8004636 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e018      	b.n	8004668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	daf2      	bge.n	8004624 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2210      	movs	r2, #16
 8004646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004654:	d901      	bls.n	800465a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e006      	b.n	8004668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d0f0      	beq.n	8004648 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b087      	sub	sp, #28
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0306 	and.w	r3, r3, #6
 80046be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]
 80046ca:	e00a      	b.n	80046e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d002      	beq.n	80046d8 <USB_GetDevSpeed+0x32>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d102      	bne.n	80046de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046d8:	2302      	movs	r3, #2
 80046da:	75fb      	strb	r3, [r7, #23]
 80046dc:	e001      	b.n	80046e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046de:	230f      	movs	r3, #15
 80046e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d13a      	bne.n	8004782 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472a:	4313      	orrs	r3, r2
 800472c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d155      	bne.n	80047f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004760:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	059b      	lsls	r3, r3, #22
 8004766:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004768:	4313      	orrs	r3, r2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e036      	b.n	80047f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	2101      	movs	r1, #1
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11a      	bne.n	80047f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047d6:	430b      	orrs	r3, r1
 80047d8:	4313      	orrs	r3, r2
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d161      	bne.n	80048e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004832:	d11f      	bne.n	8004874 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004852:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	0151      	lsls	r1, r2, #5
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	440a      	add	r2, r1
 800486a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004894:	4013      	ands	r3, r2
 8004896:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	2101      	movs	r1, #1
 80048aa:	fa01 f303 	lsl.w	r3, r1, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b8:	4013      	ands	r3, r2
 80048ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	0159      	lsls	r1, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	440b      	add	r3, r1
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	4619      	mov	r1, r3
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <USB_DeactivateEndpoint+0x1b0>)
 80048da:	4013      	ands	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
 80048de:	e060      	b.n	80049a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f6:	d11f      	bne.n	8004938 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004912:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004916:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004936:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	2101      	movs	r1, #1
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	43db      	mvns	r3, r3
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004958:	4013      	ands	r3, r2
 800495a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	43db      	mvns	r3, r3
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800497c:	4013      	ands	r3, r2
 800497e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	0159      	lsls	r1, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	440b      	add	r3, r1
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	4619      	mov	r1, r3
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <USB_DeactivateEndpoint+0x1b4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	ec337800 	.word	0xec337800
 80049b4:	eff37800 	.word	0xeff37800

080049b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	f040 817a 	bne.w	8004cce <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d132      	bne.n	8004a48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	0151      	lsls	r1, r2, #5
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	440a      	add	r2, r1
 8004a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a40:	0cdb      	lsrs	r3, r3, #19
 8004a42:	04db      	lsls	r3, r3, #19
 8004a44:	6113      	str	r3, [r2, #16]
 8004a46:	e092      	b.n	8004b6e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a62:	0cdb      	lsrs	r3, r3, #19
 8004a64:	04db      	lsls	r3, r3, #19
 8004a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a8a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11a      	bne.n	8004ac8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d903      	bls.n	8004aa6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac4:	6113      	str	r3, [r2, #16]
 8004ac6:	e01b      	b.n	8004b00 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6919      	ldr	r1, [r3, #16]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	440b      	add	r3, r1
 8004ae0:	1e59      	subs	r1, r3, #1
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004aec:	4ba2      	ldr	r3, [pc, #648]	; (8004d78 <USB_EPStartXfer+0x3c0>)
 8004aee:	400b      	ands	r3, r1
 8004af0:	69b9      	ldr	r1, [r7, #24]
 8004af2:	0148      	lsls	r0, r1, #5
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	4401      	add	r1, r0
 8004af8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	791b      	ldrb	r3, [r3, #4]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11f      	bne.n	8004b6e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d14b      	bne.n	8004c0c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	791b      	ldrb	r3, [r3, #4]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d128      	bne.n	8004bea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d110      	bne.n	8004bca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e00f      	b.n	8004bea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e165      	b.n	8004ed8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	791b      	ldrb	r3, [r3, #4]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d015      	beq.n	8004c60 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 814d 	beq.w	8004ed8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	2101      	movs	r1, #1
 8004c50:	fa01 f303 	lsl.w	r3, r1, r3
 8004c54:	69f9      	ldr	r1, [r7, #28]
 8004c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c5e:	e13b      	b.n	8004ed8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d110      	bne.n	8004c92 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e00f      	b.n	8004cb2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	68d9      	ldr	r1, [r3, #12]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	b298      	uxth	r0, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f9b8 	bl	800503c <USB_WritePacket>
 8004ccc:	e104      	b.n	8004ed8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce8:	0cdb      	lsrs	r3, r3, #19
 8004cea:	04db      	lsls	r3, r3, #19
 8004cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d10:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d131      	bne.n	8004d7c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	0148      	lsls	r0, r1, #5
 8004d4a:	69f9      	ldr	r1, [r7, #28]
 8004d4c:	4401      	add	r1, r0
 8004d4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d74:	6113      	str	r3, [r2, #16]
 8004d76:	e061      	b.n	8004e3c <USB_EPStartXfer+0x484>
 8004d78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d123      	bne.n	8004dcc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	0148      	lsls	r0, r1, #5
 8004d9e:	69f9      	ldr	r1, [r7, #28]
 8004da0:	4401      	add	r1, r0
 8004da2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004da6:	4313      	orrs	r3, r2
 8004da8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc8:	6113      	str	r3, [r2, #16]
 8004dca:	e037      	b.n	8004e3c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	1e5a      	subs	r2, r3, #1
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	8afa      	ldrh	r2, [r7, #22]
 8004de8:	fb03 f202 	mul.w	r2, r3, r2
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	8afb      	ldrh	r3, [r7, #22]
 8004e00:	04d9      	lsls	r1, r3, #19
 8004e02:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <USB_EPStartXfer+0x52c>)
 8004e04:	400b      	ands	r3, r1
 8004e06:	69b9      	ldr	r1, [r7, #24]
 8004e08:	0148      	lsls	r0, r1, #5
 8004e0a:	69f9      	ldr	r1, [r7, #28]
 8004e0c:	4401      	add	r1, r0
 8004e0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e12:	4313      	orrs	r3, r2
 8004e14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2c:	69b9      	ldr	r1, [r7, #24]
 8004e2e:	0148      	lsls	r0, r1, #5
 8004e30:	69f9      	ldr	r1, [r7, #28]
 8004e32:	4401      	add	r1, r0
 8004e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10d      	bne.n	8004e5e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68d9      	ldr	r1, [r3, #12]
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	460a      	mov	r2, r1
 8004e5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	791b      	ldrb	r3, [r3, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d128      	bne.n	8004eb8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d110      	bne.n	8004e98 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	e00f      	b.n	8004eb8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	1ff80000 	.word	0x1ff80000

08004ee8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d14a      	bne.n	8004f9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1e:	f040 8086 	bne.w	800502e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d902      	bls.n	8004f80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f7e:	e056      	b.n	800502e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f98:	d0e7      	beq.n	8004f6a <USB_EPStopXfer+0x82>
 8004f9a:	e048      	b.n	800502e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb4:	d13b      	bne.n	800502e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	7812      	ldrb	r2, [r2, #0]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3301      	adds	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f242 7210 	movw	r2, #10000	; 0x2710
 800500a:	4293      	cmp	r3, r2
 800500c:	d902      	bls.n	8005014 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
          break;
 8005012:	e00c      	b.n	800502e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502c:	d0e7      	beq.n	8004ffe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	460b      	mov	r3, r1
 800504c:	71fb      	strb	r3, [r7, #7]
 800504e:	4613      	mov	r3, r2
 8005050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800505a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	d123      	bne.n	80050aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005062:	88bb      	ldrh	r3, [r7, #4]
 8005064:	3303      	adds	r3, #3
 8005066:	089b      	lsrs	r3, r3, #2
 8005068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e018      	b.n	80050a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	031a      	lsls	r2, r3, #12
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507c:	461a      	mov	r2, r3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3301      	adds	r3, #1
 800508e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3301      	adds	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	3301      	adds	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3e2      	bcc.n	8005070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3724      	adds	r7, #36	; 0x24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b08b      	sub	sp, #44	; 0x2c
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e014      	b.n	800510e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	3301      	adds	r3, #1
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	3301      	adds	r3, #1
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	3301      	adds	r3, #1
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	3301      	adds	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	3301      	adds	r3, #1
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	429a      	cmp	r2, r3
 8005114:	d3e6      	bcc.n	80050e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005116:	8bfb      	ldrh	r3, [r7, #30]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01e      	beq.n	800515a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005126:	461a      	mov	r2, r3
 8005128:	f107 0310 	add.w	r3, r7, #16
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	701a      	strb	r2, [r3, #0]
      i++;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	3301      	adds	r3, #1
 8005146:	623b      	str	r3, [r7, #32]
      pDest++;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	3301      	adds	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800514e:	8bfb      	ldrh	r3, [r7, #30]
 8005150:	3b01      	subs	r3, #1
 8005152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005154:	8bfb      	ldrh	r3, [r7, #30]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ea      	bne.n	8005130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800515c:	4618      	mov	r0, r3
 800515e:	372c      	adds	r7, #44	; 0x2c
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d12c      	bne.n	80051de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	db12      	blt.n	80051bc <USB_EPSetStall+0x54>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00f      	beq.n	80051bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e02b      	b.n	8005236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	db12      	blt.n	8005216 <USB_EPSetStall+0xae>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00f      	beq.n	8005216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d128      	bne.n	80052b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800527e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	791b      	ldrb	r3, [r3, #4]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d003      	beq.n	8005290 <USB_EPClearStall+0x4c>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	791b      	ldrb	r3, [r3, #4]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d138      	bne.n	8005302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	e027      	b.n	8005302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d003      	beq.n	80052e2 <USB_EPClearStall+0x9e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	791b      	ldrb	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d10f      	bne.n	8005302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538a:	f023 0302 	bic.w	r3, r3, #2
 800538e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053b8:	f023 0303 	bic.w	r3, r3, #3
 80053bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	0c1b      	lsrs	r3, r3, #16
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	b29b      	uxth	r3, r3
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800549c:	68bb      	ldr	r3, [r7, #8]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b087      	sub	sp, #28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	01db      	lsls	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4013      	ands	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f8:	68bb      	ldr	r3, [r7, #8]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0301 	and.w	r3, r3, #1
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005540:	f023 0307 	bic.w	r3, r3, #7
 8005544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	460b      	mov	r3, r1
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	333c      	adds	r3, #60	; 0x3c
 800557e:	3304      	adds	r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <USB_EP0_OutStart+0xb8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d90a      	bls.n	80055a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d101      	bne.n	80055a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e037      	b.n	8005612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f043 0318 	orr.w	r3, r3, #24
 80055d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800560e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	4f54300a 	.word	0x4f54300a

08005624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800563c:	d901      	bls.n	8005642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e01b      	b.n	800567a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	daf2      	bge.n	8005630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005666:	d901      	bls.n	800566c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d0f0      	beq.n	800565a <USB_CoreReset+0x36>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005694:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005698:	f002 fc24 	bl	8007ee4 <USBD_static_malloc>
 800569c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	32b0      	adds	r2, #176	; 0xb0
 80056ae:	2100      	movs	r1, #0
 80056b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056b4:	2302      	movs	r3, #2
 80056b6:	e0d4      	b.n	8005862 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80056b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056bc:	2100      	movs	r1, #0
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f002 fc54 	bl	8007f6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	32b0      	adds	r2, #176	; 0xb0
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	32b0      	adds	r2, #176	; 0xb0
 80056de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	7c1b      	ldrb	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d138      	bne.n	8005762 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056f0:	4b5e      	ldr	r3, [pc, #376]	; (800586c <USBD_CDC_Init+0x1e4>)
 80056f2:	7819      	ldrb	r1, [r3, #0]
 80056f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f8:	2202      	movs	r2, #2
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f002 facf 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005700:	4b5a      	ldr	r3, [pc, #360]	; (800586c <USBD_CDC_Init+0x1e4>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	3324      	adds	r3, #36	; 0x24
 8005716:	2201      	movs	r2, #1
 8005718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800571a:	4b55      	ldr	r3, [pc, #340]	; (8005870 <USBD_CDC_Init+0x1e8>)
 800571c:	7819      	ldrb	r1, [r3, #0]
 800571e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005722:	2202      	movs	r2, #2
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f002 faba 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800572a:	4b51      	ldr	r3, [pc, #324]	; (8005870 <USBD_CDC_Init+0x1e8>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005742:	2201      	movs	r2, #1
 8005744:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005746:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <USBD_CDC_Init+0x1ec>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f003 020f 	and.w	r2, r3, #15
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3326      	adds	r3, #38	; 0x26
 800575c:	2210      	movs	r2, #16
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	e035      	b.n	80057ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005762:	4b42      	ldr	r3, [pc, #264]	; (800586c <USBD_CDC_Init+0x1e4>)
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	2202      	movs	r2, #2
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f002 fa97 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005770:	4b3e      	ldr	r3, [pc, #248]	; (800586c <USBD_CDC_Init+0x1e4>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	3324      	adds	r3, #36	; 0x24
 8005786:	2201      	movs	r2, #1
 8005788:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <USBD_CDC_Init+0x1e8>)
 800578c:	7819      	ldrb	r1, [r3, #0]
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	2202      	movs	r2, #2
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fa83 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <USBD_CDC_Init+0x1e8>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057b0:	2201      	movs	r2, #1
 80057b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057b4:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <USBD_CDC_Init+0x1ec>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3326      	adds	r3, #38	; 0x26
 80057ca:	2210      	movs	r2, #16
 80057cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <USBD_CDC_Init+0x1ec>)
 80057d0:	7819      	ldrb	r1, [r3, #0]
 80057d2:	2308      	movs	r3, #8
 80057d4:	2203      	movs	r2, #3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f002 fa61 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80057dc:	4b25      	ldr	r3, [pc, #148]	; (8005874 <USBD_CDC_Init+0x1ec>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	3324      	adds	r3, #36	; 0x24
 80057f2:	2201      	movs	r2, #1
 80057f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	33b0      	adds	r3, #176	; 0xb0
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800582c:	2302      	movs	r3, #2
 800582e:	e018      	b.n	8005862 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7c1b      	ldrb	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <USBD_CDC_Init+0x1e8>)
 800583a:	7819      	ldrb	r1, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f002 fb18 	bl	8007e7c <USBD_LL_PrepareReceive>
 800584c:	e008      	b.n	8005860 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800584e:	4b08      	ldr	r3, [pc, #32]	; (8005870 <USBD_CDC_Init+0x1e8>)
 8005850:	7819      	ldrb	r1, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005858:	2340      	movs	r3, #64	; 0x40
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f002 fb0e 	bl	8007e7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000093 	.word	0x20000093
 8005870:	20000094 	.word	0x20000094
 8005874:	20000095 	.word	0x20000095

08005878 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005884:	4b3a      	ldr	r3, [pc, #232]	; (8005970 <USBD_CDC_DeInit+0xf8>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f002 fa2d 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005890:	4b37      	ldr	r3, [pc, #220]	; (8005970 <USBD_CDC_DeInit+0xf8>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f003 020f 	and.w	r2, r3, #15
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	3324      	adds	r3, #36	; 0x24
 80058a6:	2200      	movs	r2, #0
 80058a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058aa:	4b32      	ldr	r3, [pc, #200]	; (8005974 <USBD_CDC_DeInit+0xfc>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f002 fa1a 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058b6:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <USBD_CDC_DeInit+0xfc>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f003 020f 	and.w	r2, r3, #15
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058ce:	2200      	movs	r2, #0
 80058d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058d2:	4b29      	ldr	r3, [pc, #164]	; (8005978 <USBD_CDC_DeInit+0x100>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 fa06 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <USBD_CDC_DeInit+0x100>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	3324      	adds	r3, #36	; 0x24
 80058f4:	2200      	movs	r2, #0
 80058f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058f8:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <USBD_CDC_DeInit+0x100>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3326      	adds	r3, #38	; 0x26
 800590e:	2200      	movs	r2, #0
 8005910:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	32b0      	adds	r2, #176	; 0xb0
 800591c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01f      	beq.n	8005964 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	33b0      	adds	r3, #176	; 0xb0
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32b0      	adds	r2, #176	; 0xb0
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	4618      	mov	r0, r3
 8005948:	f002 fada 	bl	8007f00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	32b0      	adds	r2, #176	; 0xb0
 8005956:	2100      	movs	r1, #0
 8005958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000093 	.word	0x20000093
 8005974:	20000094 	.word	0x20000094
 8005978:	20000095 	.word	0x20000095

0800597c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	32b0      	adds	r2, #176	; 0xb0
 8005990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0bf      	b.n	8005b2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d050      	beq.n	8005a5a <USBD_CDC_Setup+0xde>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	f040 80af 	bne.w	8005b1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	88db      	ldrh	r3, [r3, #6]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d03a      	beq.n	8005a3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b25b      	sxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da1b      	bge.n	8005a08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	33b0      	adds	r3, #176	; 0xb0
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80059e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	88d2      	ldrh	r2, [r2, #6]
 80059ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	88db      	ldrh	r3, [r3, #6]
 80059f2:	2b07      	cmp	r3, #7
 80059f4:	bf28      	it	cs
 80059f6:	2307      	movcs	r3, #7
 80059f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	89fa      	ldrh	r2, [r7, #14]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 fd49 	bl	8007498 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a06:	e090      	b.n	8005b2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	785a      	ldrb	r2, [r3, #1]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	88db      	ldrh	r3, [r3, #6]
 8005a16:	2b3f      	cmp	r3, #63	; 0x3f
 8005a18:	d803      	bhi.n	8005a22 <USBD_CDC_Setup+0xa6>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	88db      	ldrh	r3, [r3, #6]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	e000      	b.n	8005a24 <USBD_CDC_Setup+0xa8>
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a2a:	6939      	ldr	r1, [r7, #16]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a32:	461a      	mov	r2, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fd5b 	bl	80074f0 <USBD_CtlPrepareRx>
      break;
 8005a3a:	e076      	b.n	8005b2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	33b0      	adds	r3, #176	; 0xb0
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	7850      	ldrb	r0, [r2, #1]
 8005a52:	2200      	movs	r2, #0
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	4798      	blx	r3
      break;
 8005a58:	e067      	b.n	8005b2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b0b      	cmp	r3, #11
 8005a60:	d851      	bhi.n	8005b06 <USBD_CDC_Setup+0x18a>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <USBD_CDC_Setup+0xec>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005a99 	.word	0x08005a99
 8005a6c:	08005b15 	.word	0x08005b15
 8005a70:	08005b07 	.word	0x08005b07
 8005a74:	08005b07 	.word	0x08005b07
 8005a78:	08005b07 	.word	0x08005b07
 8005a7c:	08005b07 	.word	0x08005b07
 8005a80:	08005b07 	.word	0x08005b07
 8005a84:	08005b07 	.word	0x08005b07
 8005a88:	08005b07 	.word	0x08005b07
 8005a8c:	08005b07 	.word	0x08005b07
 8005a90:	08005ac3 	.word	0x08005ac3
 8005a94:	08005aed 	.word	0x08005aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d107      	bne.n	8005ab4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005aa4:	f107 030a 	add.w	r3, r7, #10
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 fcf3 	bl	8007498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ab2:	e032      	b.n	8005b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fc7d 	bl	80073b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005abc:	2303      	movs	r3, #3
 8005abe:	75fb      	strb	r3, [r7, #23]
          break;
 8005ac0:	e02b      	b.n	8005b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d107      	bne.n	8005ade <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ace:	f107 030d 	add.w	r3, r7, #13
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fcde 	bl	8007498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005adc:	e01d      	b.n	8005b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fc68 	bl	80073b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aea:	e016      	b.n	8005b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d00f      	beq.n	8005b18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fc5b 	bl	80073b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b00:	2303      	movs	r3, #3
 8005b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b04:	e008      	b.n	8005b18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fc54 	bl	80073b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	75fb      	strb	r3, [r7, #23]
          break;
 8005b12:	e002      	b.n	8005b1a <USBD_CDC_Setup+0x19e>
          break;
 8005b14:	bf00      	nop
 8005b16:	e008      	b.n	8005b2a <USBD_CDC_Setup+0x1ae>
          break;
 8005b18:	bf00      	nop
      }
      break;
 8005b1a:	e006      	b.n	8005b2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fc49 	bl	80073b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b24:	2303      	movs	r3, #3
 8005b26:	75fb      	strb	r3, [r7, #23]
      break;
 8005b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	32b0      	adds	r2, #176	; 0xb0
 8005b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e065      	b.n	8005c2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	32b0      	adds	r2, #176	; 0xb0
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f003 020f 	and.w	r2, r3, #15
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	3318      	adds	r3, #24
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d02f      	beq.n	8005be8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 010f 	and.w	r1, r3, #15
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	440b      	add	r3, r1
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4403      	add	r3, r0
 8005bb0:	331c      	adds	r3, #28
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d112      	bne.n	8005be8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bda:	78f9      	ldrb	r1, [r7, #3]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2200      	movs	r2, #0
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f002 f92a 	bl	8007e3a <USBD_LL_Transmit>
 8005be6:	e01f      	b.n	8005c28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	33b0      	adds	r3, #176	; 0xb0
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d010      	beq.n	8005c28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	33b0      	adds	r3, #176	; 0xb0
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c24:	78fa      	ldrb	r2, [r7, #3]
 8005c26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	32b0      	adds	r2, #176	; 0xb0
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	32b0      	adds	r2, #176	; 0xb0
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e01a      	b.n	8005c9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f002 f928 	bl	8007ebe <USBD_LL_GetRxDataSize>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	33b0      	adds	r3, #176	; 0xb0
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c94:	4611      	mov	r1, r2
 8005c96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	32b0      	adds	r2, #176	; 0xb0
 8005cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e025      	b.n	8005d10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	33b0      	adds	r3, #176	; 0xb0
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01a      	beq.n	8005d0e <USBD_CDC_EP0_RxReady+0x6c>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	d015      	beq.n	8005d0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	33b0      	adds	r3, #176	; 0xb0
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005cfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d02:	b292      	uxth	r2, r2
 8005d04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d20:	2182      	movs	r1, #130	; 0x82
 8005d22:	4818      	ldr	r0, [pc, #96]	; (8005d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d24:	f000 fd0f 	bl	8006746 <USBD_GetEpDesc>
 8005d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4815      	ldr	r0, [pc, #84]	; (8005d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d2e:	f000 fd0a 	bl	8006746 <USBD_GetEpDesc>
 8005d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d34:	2181      	movs	r1, #129	; 0x81
 8005d36:	4813      	ldr	r0, [pc, #76]	; (8005d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d38:	f000 fd05 	bl	8006746 <USBD_GetEpDesc>
 8005d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2210      	movs	r2, #16
 8005d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d58:	711a      	strb	r2, [r3, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d006      	beq.n	8005d72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d6c:	711a      	strb	r2, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2243      	movs	r2, #67	; 0x43
 8005d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000050 	.word	0x20000050

08005d88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d90:	2182      	movs	r1, #130	; 0x82
 8005d92:	4818      	ldr	r0, [pc, #96]	; (8005df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d94:	f000 fcd7 	bl	8006746 <USBD_GetEpDesc>
 8005d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4815      	ldr	r0, [pc, #84]	; (8005df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d9e:	f000 fcd2 	bl	8006746 <USBD_GetEpDesc>
 8005da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005da4:	2181      	movs	r1, #129	; 0x81
 8005da6:	4813      	ldr	r0, [pc, #76]	; (8005df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005da8:	f000 fccd 	bl	8006746 <USBD_GetEpDesc>
 8005dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2210      	movs	r2, #16
 8005db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	711a      	strb	r2, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f042 0202 	orr.w	r2, r2, #2
 8005dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	711a      	strb	r2, [r3, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f042 0202 	orr.w	r2, r2, #2
 8005de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2243      	movs	r2, #67	; 0x43
 8005de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005de8:	4b02      	ldr	r3, [pc, #8]	; (8005df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000050 	.word	0x20000050

08005df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e00:	2182      	movs	r1, #130	; 0x82
 8005e02:	4818      	ldr	r0, [pc, #96]	; (8005e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e04:	f000 fc9f 	bl	8006746 <USBD_GetEpDesc>
 8005e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4815      	ldr	r0, [pc, #84]	; (8005e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e0e:	f000 fc9a 	bl	8006746 <USBD_GetEpDesc>
 8005e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e14:	2181      	movs	r1, #129	; 0x81
 8005e16:	4813      	ldr	r0, [pc, #76]	; (8005e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e18:	f000 fc95 	bl	8006746 <USBD_GetEpDesc>
 8005e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2210      	movs	r2, #16
 8005e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e38:	711a      	strb	r2, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d006      	beq.n	8005e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e4c:	711a      	strb	r2, [r3, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2243      	movs	r2, #67	; 0x43
 8005e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e58:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000050 	.word	0x20000050

08005e68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	220a      	movs	r2, #10
 8005e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	2000000c 	.word	0x2000000c

08005e88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e009      	b.n	8005eb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	33b0      	adds	r3, #176	; 0xb0
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	32b0      	adds	r2, #176	; 0xb0
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e008      	b.n	8005ef4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	32b0      	adds	r2, #176	; 0xb0
 8005f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e004      	b.n	8005f2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	32b0      	adds	r2, #176	; 0xb0
 8005f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	32b0      	adds	r2, #176	; 0xb0
 8005f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e018      	b.n	8005f9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7c1b      	ldrb	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <USBD_CDC_ReceivePacket+0x68>)
 8005f74:	7819      	ldrb	r1, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ff7b 	bl	8007e7c <USBD_LL_PrepareReceive>
 8005f86:	e008      	b.n	8005f9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <USBD_CDC_ReceivePacket+0x68>)
 8005f8a:	7819      	ldrb	r1, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f92:	2340      	movs	r3, #64	; 0x40
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 ff71 	bl	8007e7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000094 	.word	0x20000094

08005fa8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e01f      	b.n	8006000 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	79fa      	ldrb	r2, [r7, #7]
 8005ff2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f001 fdeb 	bl	8007bd0 <USBD_LL_Init>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800601c:	2303      	movs	r3, #3
 800601e:	e025      	b.n	800606c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	32ae      	adds	r2, #174	; 0xae
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00f      	beq.n	800605c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	32ae      	adds	r2, #174	; 0xae
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	f107 020e 	add.w	r2, r7, #14
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	4602      	mov	r2, r0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 fdf3 	bl	8007c68 <USBD_LL_Start>
 8006082:	4603      	mov	r3, r0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006094:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	4611      	mov	r1, r2
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	4611      	mov	r1, r2
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f001 f90e 	bl	8007342 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006134:	461a      	mov	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2b02      	cmp	r3, #2
 8006148:	d01a      	beq.n	8006180 <USBD_LL_SetupStage+0x72>
 800614a:	2b02      	cmp	r3, #2
 800614c:	d822      	bhi.n	8006194 <USBD_LL_SetupStage+0x86>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <USBD_LL_SetupStage+0x4a>
 8006152:	2b01      	cmp	r3, #1
 8006154:	d00a      	beq.n	800616c <USBD_LL_SetupStage+0x5e>
 8006156:	e01d      	b.n	8006194 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb65 	bl	8006830 <USBD_StdDevReq>
 8006166:	4603      	mov	r3, r0
 8006168:	73fb      	strb	r3, [r7, #15]
      break;
 800616a:	e020      	b.n	80061ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fbcd 	bl	8006914 <USBD_StdItfReq>
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]
      break;
 800617e:	e016      	b.n	80061ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc2f 	bl	80069ec <USBD_StdEPReq>
 800618e:	4603      	mov	r3, r0
 8006190:	73fb      	strb	r3, [r7, #15]
      break;
 8006192:	e00c      	b.n	80061ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800619a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fdc0 	bl	8007d28 <USBD_LL_StallEP>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
      break;
 80061ac:	bf00      	nop
  }

  return ret;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	460b      	mov	r3, r1
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80061ca:	7afb      	ldrb	r3, [r7, #11]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d16e      	bne.n	80062ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061de:	2b03      	cmp	r3, #3
 80061e0:	f040 8098 	bne.w	8006314 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d913      	bls.n	8006218 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4293      	cmp	r3, r2
 8006208:	bf28      	it	cs
 800620a:	4613      	movcs	r3, r2
 800620c:	461a      	mov	r2, r3
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 f98a 	bl	800752a <USBD_CtlContinueRx>
 8006216:	e07d      	b.n	8006314 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b02      	cmp	r3, #2
 8006224:	d014      	beq.n	8006250 <USBD_LL_DataOutStage+0x98>
 8006226:	2b02      	cmp	r3, #2
 8006228:	d81d      	bhi.n	8006266 <USBD_LL_DataOutStage+0xae>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <USBD_LL_DataOutStage+0x7c>
 800622e:	2b01      	cmp	r3, #1
 8006230:	d003      	beq.n	800623a <USBD_LL_DataOutStage+0x82>
 8006232:	e018      	b.n	8006266 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	75bb      	strb	r3, [r7, #22]
            break;
 8006238:	e018      	b.n	800626c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4619      	mov	r1, r3
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fa64 	bl	8006712 <USBD_CoreFindIF>
 800624a:	4603      	mov	r3, r0
 800624c:	75bb      	strb	r3, [r7, #22]
            break;
 800624e:	e00d      	b.n	800626c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006256:	b2db      	uxtb	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fa66 	bl	800672c <USBD_CoreFindEP>
 8006260:	4603      	mov	r3, r0
 8006262:	75bb      	strb	r3, [r7, #22]
            break;
 8006264:	e002      	b.n	800626c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	75bb      	strb	r3, [r7, #22]
            break;
 800626a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800626c:	7dbb      	ldrb	r3, [r7, #22]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d119      	bne.n	80062a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b03      	cmp	r3, #3
 800627c:	d113      	bne.n	80062a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800627e:	7dba      	ldrb	r2, [r7, #22]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	32ae      	adds	r2, #174	; 0xae
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800628e:	7dba      	ldrb	r2, [r7, #22]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006296:	7dba      	ldrb	r2, [r7, #22]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	32ae      	adds	r2, #174	; 0xae
 800629c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f001 f950 	bl	800754c <USBD_CtlSendStatus>
 80062ac:	e032      	b.n	8006314 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa37 	bl	800672c <USBD_CoreFindEP>
 80062be:	4603      	mov	r3, r0
 80062c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062c2:	7dbb      	ldrb	r3, [r7, #22]
 80062c4:	2bff      	cmp	r3, #255	; 0xff
 80062c6:	d025      	beq.n	8006314 <USBD_LL_DataOutStage+0x15c>
 80062c8:	7dbb      	ldrb	r3, [r7, #22]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d122      	bne.n	8006314 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d117      	bne.n	800630a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062da:	7dba      	ldrb	r2, [r7, #22]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00f      	beq.n	800630a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80062ea:	7dba      	ldrb	r2, [r7, #22]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80062f2:	7dba      	ldrb	r2, [r7, #22]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	32ae      	adds	r2, #174	; 0xae
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	7afa      	ldrb	r2, [r7, #11]
 8006300:	4611      	mov	r1, r2
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	4798      	blx	r3
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	e000      	b.n	8006316 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	460b      	mov	r3, r1
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d16f      	bne.n	8006412 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3314      	adds	r3, #20
 8006336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800633e:	2b02      	cmp	r3, #2
 8006340:	d15a      	bne.n	80063f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	429a      	cmp	r2, r3
 800634c:	d914      	bls.n	8006378 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	461a      	mov	r2, r3
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f001 f8b2 	bl	80074ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800636a:	2300      	movs	r3, #0
 800636c:	2200      	movs	r2, #0
 800636e:	2100      	movs	r1, #0
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f001 fd83 	bl	8007e7c <USBD_LL_PrepareReceive>
 8006376:	e03f      	b.n	80063f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	429a      	cmp	r2, r3
 8006382:	d11c      	bne.n	80063be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800638c:	429a      	cmp	r2, r3
 800638e:	d316      	bcc.n	80063be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800639a:	429a      	cmp	r2, r3
 800639c:	d20f      	bcs.n	80063be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800639e:	2200      	movs	r2, #0
 80063a0:	2100      	movs	r1, #0
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f001 f893 	bl	80074ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063b0:	2300      	movs	r3, #0
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f001 fd60 	bl	8007e7c <USBD_LL_PrepareReceive>
 80063bc:	e01c      	b.n	80063f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d10f      	bne.n	80063ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063ea:	2180      	movs	r1, #128	; 0x80
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f001 fc9b 	bl	8007d28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f001 f8bd 	bl	8007572 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d03a      	beq.n	8006478 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fe42 	bl	800608c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006410:	e032      	b.n	8006478 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006418:	b2db      	uxtb	r3, r3
 800641a:	4619      	mov	r1, r3
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f985 	bl	800672c <USBD_CoreFindEP>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	2bff      	cmp	r3, #255	; 0xff
 800642a:	d025      	beq.n	8006478 <USBD_LL_DataInStage+0x15a>
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d122      	bne.n	8006478 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b03      	cmp	r3, #3
 800643c:	d11c      	bne.n	8006478 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800643e:	7dfa      	ldrb	r2, [r7, #23]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	32ae      	adds	r2, #174	; 0xae
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d014      	beq.n	8006478 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800644e:	7dfa      	ldrb	r2, [r7, #23]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006456:	7dfa      	ldrb	r2, [r7, #23]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	32ae      	adds	r2, #174	; 0xae
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	7afa      	ldrb	r2, [r7, #11]
 8006464:	4611      	mov	r1, r2
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	4798      	blx	r3
 800646a:	4603      	mov	r3, r0
 800646c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800646e:	7dbb      	ldrb	r3, [r7, #22]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006474:	7dbb      	ldrb	r3, [r7, #22]
 8006476:	e000      	b.n	800647a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d014      	beq.n	80064e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00e      	beq.n	80064e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6852      	ldr	r2, [r2, #4]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	4611      	mov	r1, r2
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064e8:	2340      	movs	r3, #64	; 0x40
 80064ea:	2200      	movs	r2, #0
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fbd5 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	2200      	movs	r2, #0
 8006508:	2180      	movs	r1, #128	; 0x80
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fbc7 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2240      	movs	r2, #64	; 0x40
 800651a:	621a      	str	r2, [r3, #32]

  return ret;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	78fa      	ldrb	r2, [r7, #3]
 8006536:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b04      	cmp	r3, #4
 8006558:	d006      	beq.n	8006568 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	b2da      	uxtb	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2204      	movs	r2, #4
 800656c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b04      	cmp	r3, #4
 8006590:	d106      	bne.n	80065a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006598:	b2da      	uxtb	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d110      	bne.n	80065e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	32ae      	adds	r2, #174	; 0xae
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	e01c      	b.n	800664a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b03      	cmp	r3, #3
 800661a:	d115      	bne.n	8006648 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32ae      	adds	r2, #174	; 0xae
 8006626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32ae      	adds	r2, #174	; 0xae
 800663a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	4611      	mov	r1, r2
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	32ae      	adds	r2, #174	; 0xae
 8006668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e01c      	b.n	80066ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b03      	cmp	r3, #3
 800667e:	d115      	bne.n	80066ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	32ae      	adds	r2, #174	; 0xae
 800668a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	32ae      	adds	r2, #174	; 0xae
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	4611      	mov	r1, r2
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00e      	beq.n	8006708 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6852      	ldr	r2, [r2, #4]
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	4611      	mov	r1, r2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800671e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006738:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	885b      	ldrh	r3, [r3, #2]
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	429a      	cmp	r2, r3
 800676c:	d920      	bls.n	80067b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006776:	e013      	b.n	80067a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006778:	f107 030a 	add.w	r3, r7, #10
 800677c:	4619      	mov	r1, r3
 800677e:	6978      	ldr	r0, [r7, #20]
 8006780:	f000 f81b 	bl	80067ba <USBD_GetNextDesc>
 8006784:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2b05      	cmp	r3, #5
 800678c:	d108      	bne.n	80067a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	789b      	ldrb	r3, [r3, #2]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	429a      	cmp	r2, r3
 800679a:	d008      	beq.n	80067ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	885b      	ldrh	r3, [r3, #2]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	897b      	ldrh	r3, [r7, #10]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d8e5      	bhi.n	8006778 <USBD_GetEpDesc+0x32>
 80067ac:	e000      	b.n	80067b0 <USBD_GetEpDesc+0x6a>
          break;
 80067ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067b0:	693b      	ldr	r3, [r7, #16]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067e6:	68fb      	ldr	r3, [r7, #12]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	3301      	adds	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006812:	8a3b      	ldrh	r3, [r7, #16]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	b21a      	sxth	r2, r3
 8006818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800681c:	4313      	orrs	r3, r2
 800681e:	b21b      	sxth	r3, r3
 8006820:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006822:	89fb      	ldrh	r3, [r7, #14]
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d005      	beq.n	8006856 <USBD_StdDevReq+0x26>
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d857      	bhi.n	80068fe <USBD_StdDevReq+0xce>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00f      	beq.n	8006872 <USBD_StdDevReq+0x42>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d153      	bne.n	80068fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	32ae      	adds	r2, #174	; 0xae
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
      break;
 8006870:	e04a      	b.n	8006908 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b09      	cmp	r3, #9
 8006878:	d83b      	bhi.n	80068f2 <USBD_StdDevReq+0xc2>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <USBD_StdDevReq+0x50>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	080068d5 	.word	0x080068d5
 8006884:	080068e9 	.word	0x080068e9
 8006888:	080068f3 	.word	0x080068f3
 800688c:	080068df 	.word	0x080068df
 8006890:	080068f3 	.word	0x080068f3
 8006894:	080068b3 	.word	0x080068b3
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068f3 	.word	0x080068f3
 80068a0:	080068cb 	.word	0x080068cb
 80068a4:	080068bd 	.word	0x080068bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa3c 	bl	8006d28 <USBD_GetDescriptor>
          break;
 80068b0:	e024      	b.n	80068fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fba1 	bl	8006ffc <USBD_SetAddress>
          break;
 80068ba:	e01f      	b.n	80068fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fbe0 	bl	8007084 <USBD_SetConfig>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
          break;
 80068c8:	e018      	b.n	80068fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc83 	bl	80071d8 <USBD_GetConfig>
          break;
 80068d2:	e013      	b.n	80068fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fcb4 	bl	8007244 <USBD_GetStatus>
          break;
 80068dc:	e00e      	b.n	80068fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fce3 	bl	80072ac <USBD_SetFeature>
          break;
 80068e6:	e009      	b.n	80068fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fd07 	bl	80072fe <USBD_ClrFeature>
          break;
 80068f0:	e004      	b.n	80068fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fd5e 	bl	80073b6 <USBD_CtlError>
          break;
 80068fa:	bf00      	nop
      }
      break;
 80068fc:	e004      	b.n	8006908 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fd58 	bl	80073b6 <USBD_CtlError>
      break;
 8006906:	bf00      	nop
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop

08006914 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d005      	beq.n	800693a <USBD_StdItfReq+0x26>
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d852      	bhi.n	80069d8 <USBD_StdItfReq+0xc4>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <USBD_StdItfReq+0x26>
 8006936:	2b20      	cmp	r3, #32
 8006938:	d14e      	bne.n	80069d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006940:	b2db      	uxtb	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	2b02      	cmp	r3, #2
 8006946:	d840      	bhi.n	80069ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	889b      	ldrh	r3, [r3, #4]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d836      	bhi.n	80069c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	889b      	ldrh	r3, [r3, #4]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fed9 	bl	8006712 <USBD_CoreFindIF>
 8006960:	4603      	mov	r3, r0
 8006962:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	2bff      	cmp	r3, #255	; 0xff
 8006968:	d01d      	beq.n	80069a6 <USBD_StdItfReq+0x92>
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11a      	bne.n	80069a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006970:	7bba      	ldrb	r2, [r7, #14]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32ae      	adds	r2, #174	; 0xae
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00f      	beq.n	80069a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006980:	7bba      	ldrb	r2, [r7, #14]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006988:	7bba      	ldrb	r2, [r7, #14]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32ae      	adds	r2, #174	; 0xae
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800699e:	e004      	b.n	80069aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069a0:	2303      	movs	r3, #3
 80069a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069a4:	e001      	b.n	80069aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	88db      	ldrh	r3, [r3, #6]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d110      	bne.n	80069d4 <USBD_StdItfReq+0xc0>
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10d      	bne.n	80069d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fdc7 	bl	800754c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069be:	e009      	b.n	80069d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fcf7 	bl	80073b6 <USBD_CtlError>
          break;
 80069c8:	e004      	b.n	80069d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fcf2 	bl	80073b6 <USBD_CtlError>
          break;
 80069d2:	e000      	b.n	80069d6 <USBD_StdItfReq+0xc2>
          break;
 80069d4:	bf00      	nop
      }
      break;
 80069d6:	e004      	b.n	80069e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fceb 	bl	80073b6 <USBD_CtlError>
      break;
 80069e0:	bf00      	nop
  }

  return ret;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	889b      	ldrh	r3, [r3, #4]
 80069fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d007      	beq.n	8006a1c <USBD_StdEPReq+0x30>
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	f200 817f 	bhi.w	8006d10 <USBD_StdEPReq+0x324>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d02a      	beq.n	8006a6c <USBD_StdEPReq+0x80>
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	f040 817a 	bne.w	8006d10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fe83 	bl	800672c <USBD_CoreFindEP>
 8006a26:	4603      	mov	r3, r0
 8006a28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a2a:	7b7b      	ldrb	r3, [r7, #13]
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	f000 8174 	beq.w	8006d1a <USBD_StdEPReq+0x32e>
 8006a32:	7b7b      	ldrb	r3, [r7, #13]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f040 8170 	bne.w	8006d1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a3a:	7b7a      	ldrb	r2, [r7, #13]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a42:	7b7a      	ldrb	r2, [r7, #13]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32ae      	adds	r2, #174	; 0xae
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 8163 	beq.w	8006d1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a54:	7b7a      	ldrb	r2, [r7, #13]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32ae      	adds	r2, #174	; 0xae
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a6a:	e156      	b.n	8006d1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d008      	beq.n	8006a86 <USBD_StdEPReq+0x9a>
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	f300 8145 	bgt.w	8006d04 <USBD_StdEPReq+0x318>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 809b 	beq.w	8006bb6 <USBD_StdEPReq+0x1ca>
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d03c      	beq.n	8006afe <USBD_StdEPReq+0x112>
 8006a84:	e13e      	b.n	8006d04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d002      	beq.n	8006a98 <USBD_StdEPReq+0xac>
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d016      	beq.n	8006ac4 <USBD_StdEPReq+0xd8>
 8006a96:	e02c      	b.n	8006af2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00d      	beq.n	8006aba <USBD_StdEPReq+0xce>
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b80      	cmp	r3, #128	; 0x80
 8006aa2:	d00a      	beq.n	8006aba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f93d 	bl	8007d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aae:	2180      	movs	r1, #128	; 0x80
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f939 	bl	8007d28 <USBD_LL_StallEP>
 8006ab6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ab8:	e020      	b.n	8006afc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fc7a 	bl	80073b6 <USBD_CtlError>
              break;
 8006ac2:	e01b      	b.n	8006afc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	885b      	ldrh	r3, [r3, #2]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10e      	bne.n	8006aea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <USBD_StdEPReq+0xfe>
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d008      	beq.n	8006aea <USBD_StdEPReq+0xfe>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	88db      	ldrh	r3, [r3, #6]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f91f 	bl	8007d28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fd2e 	bl	800754c <USBD_CtlSendStatus>

              break;
 8006af0:	e004      	b.n	8006afc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fc5e 	bl	80073b6 <USBD_CtlError>
              break;
 8006afa:	bf00      	nop
          }
          break;
 8006afc:	e107      	b.n	8006d0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d002      	beq.n	8006b10 <USBD_StdEPReq+0x124>
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d016      	beq.n	8006b3c <USBD_StdEPReq+0x150>
 8006b0e:	e04b      	b.n	8006ba8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <USBD_StdEPReq+0x146>
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b80      	cmp	r3, #128	; 0x80
 8006b1a:	d00a      	beq.n	8006b32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f901 	bl	8007d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b26:	2180      	movs	r1, #128	; 0x80
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 f8fd 	bl	8007d28 <USBD_LL_StallEP>
 8006b2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b30:	e040      	b.n	8006bb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fc3e 	bl	80073b6 <USBD_CtlError>
              break;
 8006b3a:	e03b      	b.n	8006bb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	885b      	ldrh	r3, [r3, #2]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d136      	bne.n	8006bb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 f907 	bl	8007d66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fcf7 	bl	800754c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fde2 	bl	800672c <USBD_CoreFindEP>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b6c:	7b7b      	ldrb	r3, [r7, #13]
 8006b6e:	2bff      	cmp	r3, #255	; 0xff
 8006b70:	d01f      	beq.n	8006bb2 <USBD_StdEPReq+0x1c6>
 8006b72:	7b7b      	ldrb	r3, [r7, #13]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11c      	bne.n	8006bb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b78:	7b7a      	ldrb	r2, [r7, #13]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b80:	7b7a      	ldrb	r2, [r7, #13]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	32ae      	adds	r2, #174	; 0xae
 8006b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d010      	beq.n	8006bb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b90:	7b7a      	ldrb	r2, [r7, #13]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32ae      	adds	r2, #174	; 0xae
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ba6:	e004      	b.n	8006bb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fc03 	bl	80073b6 <USBD_CtlError>
              break;
 8006bb0:	e000      	b.n	8006bb4 <USBD_StdEPReq+0x1c8>
              break;
 8006bb2:	bf00      	nop
          }
          break;
 8006bb4:	e0ab      	b.n	8006d0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d002      	beq.n	8006bc8 <USBD_StdEPReq+0x1dc>
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d032      	beq.n	8006c2c <USBD_StdEPReq+0x240>
 8006bc6:	e097      	b.n	8006cf8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <USBD_StdEPReq+0x1f2>
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d004      	beq.n	8006bde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fbed 	bl	80073b6 <USBD_CtlError>
                break;
 8006bdc:	e091      	b.n	8006d02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da0b      	bge.n	8006bfe <USBD_StdEPReq+0x212>
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	3310      	adds	r3, #16
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	e00b      	b.n	8006c16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4413      	add	r3, r2
 8006c14:	3304      	adds	r3, #4
 8006c16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2202      	movs	r2, #2
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc37 	bl	8007498 <USBD_CtlSendData>
              break;
 8006c2a:	e06a      	b.n	8006d02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da11      	bge.n	8006c58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	f003 020f 	and.w	r2, r3, #15
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	3324      	adds	r3, #36	; 0x24
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d117      	bne.n	8006c7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fbb0 	bl	80073b6 <USBD_CtlError>
                  break;
 8006c56:	e054      	b.n	8006d02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	f003 020f 	and.w	r2, r3, #15
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fb9d 	bl	80073b6 <USBD_CtlError>
                  break;
 8006c7c:	e041      	b.n	8006d02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da0b      	bge.n	8006c9e <USBD_StdEPReq+0x2b2>
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	3310      	adds	r3, #16
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4413      	add	r3, r2
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	e00b      	b.n	8006cb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <USBD_StdEPReq+0x2d8>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b80      	cmp	r3, #128	; 0x80
 8006cc2:	d103      	bne.n	8006ccc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e00e      	b.n	8006cea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f867 	bl	8007da4 <USBD_LL_IsStallEP>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e002      	b.n	8006cea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2202      	movs	r2, #2
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fbd1 	bl	8007498 <USBD_CtlSendData>
              break;
 8006cf6:	e004      	b.n	8006d02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb5b 	bl	80073b6 <USBD_CtlError>
              break;
 8006d00:	bf00      	nop
          }
          break;
 8006d02:	e004      	b.n	8006d0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fb55 	bl	80073b6 <USBD_CtlError>
          break;
 8006d0c:	bf00      	nop
      }
      break;
 8006d0e:	e005      	b.n	8006d1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fb4f 	bl	80073b6 <USBD_CtlError>
      break;
 8006d18:	e000      	b.n	8006d1c <USBD_StdEPReq+0x330>
      break;
 8006d1a:	bf00      	nop
  }

  return ret;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	885b      	ldrh	r3, [r3, #2]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	2b06      	cmp	r3, #6
 8006d4a:	f200 8128 	bhi.w	8006f9e <USBD_GetDescriptor+0x276>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <USBD_GetDescriptor+0x2c>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d71 	.word	0x08006d71
 8006d58:	08006d89 	.word	0x08006d89
 8006d5c:	08006dc9 	.word	0x08006dc9
 8006d60:	08006f9f 	.word	0x08006f9f
 8006d64:	08006f9f 	.word	0x08006f9f
 8006d68:	08006f3f 	.word	0x08006f3f
 8006d6c:	08006f6b 	.word	0x08006f6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
      break;
 8006d86:	e112      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7c1b      	ldrb	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10d      	bne.n	8006dac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	f107 0208 	add.w	r2, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	2202      	movs	r2, #2
 8006da8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006daa:	e100      	b.n	8006fae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f107 0208 	add.w	r2, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	701a      	strb	r2, [r3, #0]
      break;
 8006dc6:	e0f2      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	885b      	ldrh	r3, [r3, #2]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	f200 80ac 	bhi.w	8006f2c <USBD_GetDescriptor+0x204>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_GetDescriptor+0xb4>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006df5 	.word	0x08006df5
 8006de0:	08006e29 	.word	0x08006e29
 8006de4:	08006e5d 	.word	0x08006e5d
 8006de8:	08006e91 	.word	0x08006e91
 8006dec:	08006ec5 	.word	0x08006ec5
 8006df0:	08006ef9 	.word	0x08006ef9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7c12      	ldrb	r2, [r2, #16]
 8006e0c:	f107 0108 	add.w	r1, r7, #8
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e16:	e091      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 facb 	bl	80073b6 <USBD_CtlError>
            err++;
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	3301      	adds	r3, #1
 8006e24:	72fb      	strb	r3, [r7, #11]
          break;
 8006e26:	e089      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4a:	e077      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fab1 	bl	80073b6 <USBD_CtlError>
            err++;
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	3301      	adds	r3, #1
 8006e58:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5a:	e06f      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	7c12      	ldrb	r2, [r2, #16]
 8006e74:	f107 0108 	add.w	r1, r7, #8
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
 8006e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e7e:	e05d      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa97 	bl	80073b6 <USBD_CtlError>
            err++;
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e8e:	e055      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	7c12      	ldrb	r2, [r2, #16]
 8006ea8:	f107 0108 	add.w	r1, r7, #8
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb2:	e043      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa7d 	bl	80073b6 <USBD_CtlError>
            err++;
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec2:	e03b      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7c12      	ldrb	r2, [r2, #16]
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee6:	e029      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa63 	bl	80073b6 <USBD_CtlError>
            err++;
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef6:	e021      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	f107 0108 	add.w	r1, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1a:	e00f      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa49 	bl	80073b6 <USBD_CtlError>
            err++;
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	3301      	adds	r3, #1
 8006f28:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2a:	e007      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa41 	bl	80073b6 <USBD_CtlError>
          err++;
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	3301      	adds	r3, #1
 8006f38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f3a:	bf00      	nop
      }
      break;
 8006f3c:	e037      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7c1b      	ldrb	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	f107 0208 	add.w	r2, r7, #8
 8006f52:	4610      	mov	r0, r2
 8006f54:	4798      	blx	r3
 8006f56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f58:	e029      	b.n	8006fae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fa2a 	bl	80073b6 <USBD_CtlError>
        err++;
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	3301      	adds	r3, #1
 8006f66:	72fb      	strb	r3, [r7, #11]
      break;
 8006f68:	e021      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7c1b      	ldrb	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10d      	bne.n	8006f8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f107 0208 	add.w	r2, r7, #8
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4798      	blx	r3
 8006f82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	2207      	movs	r2, #7
 8006f8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f8c:	e00f      	b.n	8006fae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa10 	bl	80073b6 <USBD_CtlError>
        err++;
 8006f96:	7afb      	ldrb	r3, [r7, #11]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f9c:	e007      	b.n	8006fae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa08 	bl	80073b6 <USBD_CtlError>
      err++;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	72fb      	strb	r3, [r7, #11]
      break;
 8006fac:	bf00      	nop
  }

  if (err != 0U)
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d11e      	bne.n	8006ff2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	88db      	ldrh	r3, [r3, #6]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d016      	beq.n	8006fea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	88da      	ldrh	r2, [r3, #6]
 8006fc6:	893b      	ldrh	r3, [r7, #8]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bf28      	it	cs
 8006fcc:	4613      	movcs	r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fd2:	893b      	ldrh	r3, [r7, #8]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68f9      	ldr	r1, [r7, #12]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa5d 	bl	8007498 <USBD_CtlSendData>
 8006fde:	e009      	b.n	8006ff4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9e7 	bl	80073b6 <USBD_CtlError>
 8006fe8:	e004      	b.n	8006ff4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 faae 	bl	800754c <USBD_CtlSendStatus>
 8006ff0:	e000      	b.n	8006ff4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ff2:	bf00      	nop
  }
}
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop

08006ffc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	889b      	ldrh	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d131      	bne.n	8007072 <USBD_SetAddress+0x76>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	88db      	ldrh	r3, [r3, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d12d      	bne.n	8007072 <USBD_SetAddress+0x76>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	885b      	ldrh	r3, [r3, #2]
 800701a:	2b7f      	cmp	r3, #127	; 0x7f
 800701c:	d829      	bhi.n	8007072 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007028:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b03      	cmp	r3, #3
 8007034:	d104      	bne.n	8007040 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9bc 	bl	80073b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703e:	e01d      	b.n	800707c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7bfa      	ldrb	r2, [r7, #15]
 8007044:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fed5 	bl	8007dfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa7a 	bl	800754c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007066:	e009      	b.n	800707c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007070:	e004      	b.n	800707c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f99e 	bl	80073b6 <USBD_CtlError>
  }
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	885b      	ldrh	r3, [r3, #2]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b4e      	ldr	r3, [pc, #312]	; (80071d4 <USBD_SetConfig+0x150>)
 800709a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800709c:	4b4d      	ldr	r3, [pc, #308]	; (80071d4 <USBD_SetConfig+0x150>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d905      	bls.n	80070b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f985 	bl	80073b6 <USBD_CtlError>
    return USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e08c      	b.n	80071ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d002      	beq.n	80070c2 <USBD_SetConfig+0x3e>
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d029      	beq.n	8007114 <USBD_SetConfig+0x90>
 80070c0:	e075      	b.n	80071ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070c2:	4b44      	ldr	r3, [pc, #272]	; (80071d4 <USBD_SetConfig+0x150>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d020      	beq.n	800710c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070ca:	4b42      	ldr	r3, [pc, #264]	; (80071d4 <USBD_SetConfig+0x150>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070d4:	4b3f      	ldr	r3, [pc, #252]	; (80071d4 <USBD_SetConfig+0x150>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fe ffe1 	bl	80060a2 <USBD_SetClassConfig>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f962 	bl	80073b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070fa:	e065      	b.n	80071c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa25 	bl	800754c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2203      	movs	r2, #3
 8007106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800710a:	e05d      	b.n	80071c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa1d 	bl	800754c <USBD_CtlSendStatus>
      break;
 8007112:	e059      	b.n	80071c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007114:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <USBD_SetConfig+0x150>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d112      	bne.n	8007142 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007124:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <USBD_SetConfig+0x150>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800712e:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <USBD_SetConfig+0x150>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe ffd0 	bl	80060da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa06 	bl	800754c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007140:	e042      	b.n	80071c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007142:	4b24      	ldr	r3, [pc, #144]	; (80071d4 <USBD_SetConfig+0x150>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d02a      	beq.n	80071a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fe ffbe 	bl	80060da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <USBD_SetConfig+0x150>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007168:	4b1a      	ldr	r3, [pc, #104]	; (80071d4 <USBD_SetConfig+0x150>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fe ff97 	bl	80060a2 <USBD_SetClassConfig>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00f      	beq.n	800719e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f918 	bl	80073b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fe ffa3 	bl	80060da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800719c:	e014      	b.n	80071c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f9d4 	bl	800754c <USBD_CtlSendStatus>
      break;
 80071a4:	e010      	b.n	80071c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9d0 	bl	800754c <USBD_CtlSendStatus>
      break;
 80071ac:	e00c      	b.n	80071c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f900 	bl	80073b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <USBD_SetConfig+0x150>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7fe ff8c 	bl	80060da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	73fb      	strb	r3, [r7, #15]
      break;
 80071c6:	bf00      	nop
  }

  return ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2000027c 	.word	0x2000027c

080071d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	88db      	ldrh	r3, [r3, #6]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d004      	beq.n	80071f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f8e2 	bl	80073b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071f2:	e023      	b.n	800723c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	dc02      	bgt.n	8007206 <USBD_GetConfig+0x2e>
 8007200:	2b00      	cmp	r3, #0
 8007202:	dc03      	bgt.n	800720c <USBD_GetConfig+0x34>
 8007204:	e015      	b.n	8007232 <USBD_GetConfig+0x5a>
 8007206:	2b03      	cmp	r3, #3
 8007208:	d00b      	beq.n	8007222 <USBD_GetConfig+0x4a>
 800720a:	e012      	b.n	8007232 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3308      	adds	r3, #8
 8007216:	2201      	movs	r2, #1
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f93c 	bl	8007498 <USBD_CtlSendData>
        break;
 8007220:	e00c      	b.n	800723c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	2201      	movs	r2, #1
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f934 	bl	8007498 <USBD_CtlSendData>
        break;
 8007230:	e004      	b.n	800723c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8be 	bl	80073b6 <USBD_CtlError>
        break;
 800723a:	bf00      	nop
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007254:	b2db      	uxtb	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	2b02      	cmp	r3, #2
 800725a:	d81e      	bhi.n	800729a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	88db      	ldrh	r3, [r3, #6]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d004      	beq.n	800726e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8a5 	bl	80073b6 <USBD_CtlError>
        break;
 800726c:	e01a      	b.n	80072a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f043 0202 	orr.w	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	330c      	adds	r3, #12
 800728e:	2202      	movs	r2, #2
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f900 	bl	8007498 <USBD_CtlSendData>
      break;
 8007298:	e004      	b.n	80072a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f88a 	bl	80073b6 <USBD_CtlError>
      break;
 80072a2:	bf00      	nop
  }
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	885b      	ldrh	r3, [r3, #2]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d107      	bne.n	80072ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f940 	bl	800754c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072cc:	e013      	b.n	80072f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d10b      	bne.n	80072ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	889b      	ldrh	r3, [r3, #4]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f930 	bl	800754c <USBD_CtlSendStatus>
}
 80072ec:	e003      	b.n	80072f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f860 	bl	80073b6 <USBD_CtlError>
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	2b02      	cmp	r3, #2
 8007314:	d80b      	bhi.n	800732e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	885b      	ldrh	r3, [r3, #2]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10c      	bne.n	8007338 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f910 	bl	800754c <USBD_CtlSendStatus>
      }
      break;
 800732c:	e004      	b.n	8007338 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f840 	bl	80073b6 <USBD_CtlError>
      break;
 8007336:	e000      	b.n	800733a <USBD_ClrFeature+0x3c>
      break;
 8007338:	bf00      	nop
  }
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fa41 	bl	80067f4 <SWAPBYTE>
 8007372:	4603      	mov	r3, r0
 8007374:	461a      	mov	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fa34 	bl	80067f4 <SWAPBYTE>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff fa27 	bl	80067f4 <SWAPBYTE>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	80da      	strh	r2, [r3, #6]
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcb0 	bl	8007d28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073c8:	2100      	movs	r1, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fcac 	bl	8007d28 <USBD_LL_StallEP>
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d036      	beq.n	800745c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f000 f836 	bl	8007464 <USBD_GetLen>
 80073f8:	4603      	mov	r3, r0
 80073fa:	3301      	adds	r3, #1
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	4413      	add	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7812      	ldrb	r2, [r2, #0]
 8007410:	701a      	strb	r2, [r3, #0]
  idx++;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	3301      	adds	r3, #1
 8007416:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	2203      	movs	r2, #3
 8007420:	701a      	strb	r2, [r3, #0]
  idx++;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	3301      	adds	r3, #1
 8007426:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007428:	e013      	b.n	8007452 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	4413      	add	r3, r2
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	7812      	ldrb	r2, [r2, #0]
 8007434:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	3301      	adds	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
    idx++;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	3301      	adds	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4413      	add	r3, r2
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
    idx++;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	3301      	adds	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e7      	bne.n	800742a <USBD_GetString+0x52>
 800745a:	e000      	b.n	800745e <USBD_GetString+0x86>
    return;
 800745c:	bf00      	nop
  }
}
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007474:	e005      	b.n	8007482 <USBD_GetLen+0x1e>
  {
    len++;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	3301      	adds	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	3301      	adds	r3, #1
 8007480:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f5      	bne.n	8007476 <USBD_GetLen+0x12>
  }

  return len;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	2100      	movs	r1, #0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fcbb 	bl	8007e3a <USBD_LL_Transmit>

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	2100      	movs	r1, #0
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fcaa 	bl	8007e3a <USBD_LL_Transmit>

  return USBD_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2203      	movs	r2, #3
 8007500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	2100      	movs	r1, #0
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fcae 	bl	8007e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	2100      	movs	r1, #0
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fc9d 	bl	8007e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2204      	movs	r2, #4
 8007558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800755c:	2300      	movs	r3, #0
 800755e:	2200      	movs	r2, #0
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fc69 	bl	8007e3a <USBD_LL_Transmit>

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2205      	movs	r2, #5
 800757e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007582:	2300      	movs	r3, #0
 8007584:	2200      	movs	r2, #0
 8007586:	2100      	movs	r1, #0
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fc77 	bl	8007e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800759c:	2200      	movs	r2, #0
 800759e:	4912      	ldr	r1, [pc, #72]	; (80075e8 <MX_USB_DEVICE_Init+0x50>)
 80075a0:	4812      	ldr	r0, [pc, #72]	; (80075ec <MX_USB_DEVICE_Init+0x54>)
 80075a2:	f7fe fd01 	bl	8005fa8 <USBD_Init>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075ac:	f7f9 f942 	bl	8000834 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075b0:	490f      	ldr	r1, [pc, #60]	; (80075f0 <MX_USB_DEVICE_Init+0x58>)
 80075b2:	480e      	ldr	r0, [pc, #56]	; (80075ec <MX_USB_DEVICE_Init+0x54>)
 80075b4:	f7fe fd28 	bl	8006008 <USBD_RegisterClass>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075be:	f7f9 f939 	bl	8000834 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075c2:	490c      	ldr	r1, [pc, #48]	; (80075f4 <MX_USB_DEVICE_Init+0x5c>)
 80075c4:	4809      	ldr	r0, [pc, #36]	; (80075ec <MX_USB_DEVICE_Init+0x54>)
 80075c6:	f7fe fc5f 	bl	8005e88 <USBD_CDC_RegisterInterface>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075d0:	f7f9 f930 	bl	8000834 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075d4:	4805      	ldr	r0, [pc, #20]	; (80075ec <MX_USB_DEVICE_Init+0x54>)
 80075d6:	f7fe fd4d 	bl	8006074 <USBD_Start>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075e0:	f7f9 f928 	bl	8000834 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075e4:	bf00      	nop
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200000ac 	.word	0x200000ac
 80075ec:	20000280 	.word	0x20000280
 80075f0:	20000018 	.word	0x20000018
 80075f4:	20000098 	.word	0x20000098

080075f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075fc:	2200      	movs	r2, #0
 80075fe:	4905      	ldr	r1, [pc, #20]	; (8007614 <CDC_Init_FS+0x1c>)
 8007600:	4805      	ldr	r0, [pc, #20]	; (8007618 <CDC_Init_FS+0x20>)
 8007602:	f7fe fc5b 	bl	8005ebc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007606:	4905      	ldr	r1, [pc, #20]	; (800761c <CDC_Init_FS+0x24>)
 8007608:	4803      	ldr	r0, [pc, #12]	; (8007618 <CDC_Init_FS+0x20>)
 800760a:	f7fe fc79 	bl	8005f00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800760e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007610:	4618      	mov	r0, r3
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20000d5c 	.word	0x20000d5c
 8007618:	20000280 	.word	0x20000280
 800761c:	2000055c 	.word	0x2000055c

08007620 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007624:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007626:	4618      	mov	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
 800763c:	4613      	mov	r3, r2
 800763e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b23      	cmp	r3, #35	; 0x23
 8007644:	d84a      	bhi.n	80076dc <CDC_Control_FS+0xac>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <CDC_Control_FS+0x1c>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	080076dd 	.word	0x080076dd
 8007650:	080076dd 	.word	0x080076dd
 8007654:	080076dd 	.word	0x080076dd
 8007658:	080076dd 	.word	0x080076dd
 800765c:	080076dd 	.word	0x080076dd
 8007660:	080076dd 	.word	0x080076dd
 8007664:	080076dd 	.word	0x080076dd
 8007668:	080076dd 	.word	0x080076dd
 800766c:	080076dd 	.word	0x080076dd
 8007670:	080076dd 	.word	0x080076dd
 8007674:	080076dd 	.word	0x080076dd
 8007678:	080076dd 	.word	0x080076dd
 800767c:	080076dd 	.word	0x080076dd
 8007680:	080076dd 	.word	0x080076dd
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076dd 	.word	0x080076dd
 800768c:	080076dd 	.word	0x080076dd
 8007690:	080076dd 	.word	0x080076dd
 8007694:	080076dd 	.word	0x080076dd
 8007698:	080076dd 	.word	0x080076dd
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076dd 	.word	0x080076dd
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076dd 	.word	0x080076dd
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076dd 	.word	0x080076dd
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076dd 	.word	0x080076dd
 80076d4:	080076dd 	.word	0x080076dd
 80076d8:	080076dd 	.word	0x080076dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076dc:	bf00      	nop
  }

  return (USBD_OK);
 80076de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4805      	ldr	r0, [pc, #20]	; (8007710 <CDC_Receive_FS+0x24>)
 80076fa:	f7fe fc01 	bl	8005f00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076fe:	4804      	ldr	r0, [pc, #16]	; (8007710 <CDC_Receive_FS+0x24>)
 8007700:	f7fe fc1c 	bl	8005f3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007704:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000280 	.word	0x20000280

08007714 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2212      	movs	r2, #18
 8007748:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800774a:	4b03      	ldr	r3, [pc, #12]	; (8007758 <USBD_FS_DeviceDescriptor+0x20>)
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	200000c8 	.word	0x200000c8

0800775c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	6039      	str	r1, [r7, #0]
 8007766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2204      	movs	r2, #4
 800776c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	200000dc 	.word	0x200000dc

08007780 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d105      	bne.n	800779e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4907      	ldr	r1, [pc, #28]	; (80077b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007796:	4808      	ldr	r0, [pc, #32]	; (80077b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007798:	f7ff fe1e 	bl	80073d8 <USBD_GetString>
 800779c:	e004      	b.n	80077a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	4904      	ldr	r1, [pc, #16]	; (80077b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077a2:	4805      	ldr	r0, [pc, #20]	; (80077b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077a4:	f7ff fe18 	bl	80073d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	2000155c 	.word	0x2000155c
 80077b8:	08007fdc 	.word	0x08007fdc

080077bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	4904      	ldr	r1, [pc, #16]	; (80077dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077cc:	4804      	ldr	r0, [pc, #16]	; (80077e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077ce:	f7ff fe03 	bl	80073d8 <USBD_GetString>
  return USBD_StrDesc;
 80077d2:	4b02      	ldr	r3, [pc, #8]	; (80077dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	2000155c 	.word	0x2000155c
 80077e0:	08007ff4 	.word	0x08007ff4

080077e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	6039      	str	r1, [r7, #0]
 80077ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	221a      	movs	r2, #26
 80077f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077f6:	f000 f843 	bl	8007880 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077fa:	4b02      	ldr	r3, [pc, #8]	; (8007804 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	200000e0 	.word	0x200000e0

08007808 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	4907      	ldr	r1, [pc, #28]	; (800783c <USBD_FS_ConfigStrDescriptor+0x34>)
 800781e:	4808      	ldr	r0, [pc, #32]	; (8007840 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007820:	f7ff fdda 	bl	80073d8 <USBD_GetString>
 8007824:	e004      	b.n	8007830 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4904      	ldr	r1, [pc, #16]	; (800783c <USBD_FS_ConfigStrDescriptor+0x34>)
 800782a:	4805      	ldr	r0, [pc, #20]	; (8007840 <USBD_FS_ConfigStrDescriptor+0x38>)
 800782c:	f7ff fdd4 	bl	80073d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	2000155c 	.word	0x2000155c
 8007840:	08008008 	.word	0x08008008

08007844 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	6039      	str	r1, [r7, #0]
 800784e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4907      	ldr	r1, [pc, #28]	; (8007878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800785a:	4808      	ldr	r0, [pc, #32]	; (800787c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800785c:	f7ff fdbc 	bl	80073d8 <USBD_GetString>
 8007860:	e004      	b.n	800786c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	4904      	ldr	r1, [pc, #16]	; (8007878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007868:	f7ff fdb6 	bl	80073d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	2000155c 	.word	0x2000155c
 800787c:	08008014 	.word	0x08008014

08007880 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007886:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <Get_SerialNum+0x44>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800788c:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <Get_SerialNum+0x48>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007892:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <Get_SerialNum+0x4c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078a6:	2208      	movs	r2, #8
 80078a8:	4909      	ldr	r1, [pc, #36]	; (80078d0 <Get_SerialNum+0x50>)
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f814 	bl	80078d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078b0:	2204      	movs	r2, #4
 80078b2:	4908      	ldr	r1, [pc, #32]	; (80078d4 <Get_SerialNum+0x54>)
 80078b4:	68b8      	ldr	r0, [r7, #8]
 80078b6:	f000 f80f 	bl	80078d8 <IntToUnicode>
  }
}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	1fff7a10 	.word	0x1fff7a10
 80078c8:	1fff7a14 	.word	0x1fff7a14
 80078cc:	1fff7a18 	.word	0x1fff7a18
 80078d0:	200000e2 	.word	0x200000e2
 80078d4:	200000f2 	.word	0x200000f2

080078d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]
 80078ee:	e027      	b.n	8007940 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	0f1b      	lsrs	r3, r3, #28
 80078f4:	2b09      	cmp	r3, #9
 80078f6:	d80b      	bhi.n	8007910 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	0f1b      	lsrs	r3, r3, #28
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4619      	mov	r1, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	440b      	add	r3, r1
 8007908:	3230      	adds	r2, #48	; 0x30
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	e00a      	b.n	8007926 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	0f1b      	lsrs	r3, r3, #28
 8007914:	b2da      	uxtb	r2, r3
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4619      	mov	r1, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	440b      	add	r3, r1
 8007920:	3237      	adds	r2, #55	; 0x37
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	3301      	adds	r3, #1
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	4413      	add	r3, r2
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	3301      	adds	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
 8007940:	7dfa      	ldrb	r2, [r7, #23]
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	429a      	cmp	r2, r3
 8007946:	d3d3      	bcc.n	80078f0 <IntToUnicode+0x18>
  }
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007960:	f107 0314 	add.w	r3, r7, #20
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007978:	d13a      	bne.n	80079f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 8007984:	f043 0301 	orr.w	r3, r3, #1
 8007988:	6313      	str	r3, [r2, #48]	; 0x30
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007996:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800799a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800799c:	2302      	movs	r3, #2
 800799e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079a4:	2303      	movs	r3, #3
 80079a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079a8:	230a      	movs	r3, #10
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ac:	f107 0314 	add.w	r3, r7, #20
 80079b0:	4619      	mov	r1, r3
 80079b2:	4812      	ldr	r0, [pc, #72]	; (80079fc <HAL_PCD_MspInit+0xa4>)
 80079b4:	f7f9 fdc8 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079b8:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 80079ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079bc:	4a0e      	ldr	r2, [pc, #56]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 80079be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c2:	6353      	str	r3, [r2, #52]	; 0x34
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 80079ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079cc:	4a0a      	ldr	r2, [pc, #40]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 80079ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079d2:	6453      	str	r3, [r2, #68]	; 0x44
 80079d4:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <HAL_PCD_MspInit+0xa0>)
 80079d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	2043      	movs	r0, #67	; 0x43
 80079e6:	f7f9 fa6c 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079ea:	2043      	movs	r0, #67	; 0x43
 80079ec:	f7f9 fa85 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079f0:	bf00      	nop
 80079f2:	3728      	adds	r7, #40	; 0x28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40020000 	.word	0x40020000

08007a00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fe fb79 	bl	800610e <USBD_LL_SetupStage>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007a36:	78fa      	ldrb	r2, [r7, #3]
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7fe fbb3 	bl	80061b8 <USBD_LL_DataOutStage>
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	3320      	adds	r3, #32
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	4619      	mov	r1, r3
 8007a82:	f7fe fc4c 	bl	800631e <USBD_LL_DataInStage>
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fd86 	bl	80065ae <USBD_LL_SOF>
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	79db      	ldrb	r3, [r3, #7]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d001      	beq.n	8007ac2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007abe:	f7f8 feb9 	bl	8000834 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ac8:	7bfa      	ldrb	r2, [r7, #15]
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fd2a 	bl	8006526 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fcd2 	bl	8006482 <USBD_LL_Reset>
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fd25 	bl	8006546 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7adb      	ldrb	r3, [r3, #11]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <HAL_PCD_SuspendCallback+0x48>)
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	4a03      	ldr	r2, [pc, #12]	; (8007b30 <HAL_PCD_SuspendCallback+0x48>)
 8007b22:	f043 0306 	orr.w	r3, r3, #6
 8007b26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	e000ed00 	.word	0xe000ed00

08007b34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fd1b 	bl	800657e <USBD_LL_Resume>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fd73 	bl	8006652 <USBD_LL_IsoOUTIncomplete>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fd2f 	bl	80065ee <USBD_LL_IsoINIncomplete>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fd85 	bl	80066b6 <USBD_LL_DevConnected>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fd82 	bl	80066cc <USBD_LL_DevDisconnected>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d13c      	bne.n	8007c5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007be0:	4a20      	ldr	r2, [pc, #128]	; (8007c64 <USBD_LL_Init+0x94>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <USBD_LL_Init+0x94>)
 8007bec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bf0:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <USBD_LL_Init+0x94>)
 8007bf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <USBD_LL_Init+0x94>)
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bfe:	4b19      	ldr	r3, [pc, #100]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c04:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007c10:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c22:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c28:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c2e:	480d      	ldr	r0, [pc, #52]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c30:	f7f9 fe0e 	bl	8001850 <HAL_PCD_Init>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c3a:	f7f8 fdfb 	bl	8000834 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c3e:	2180      	movs	r1, #128	; 0x80
 8007c40:	4808      	ldr	r0, [pc, #32]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c42:	f7fb f838 	bl	8002cb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4806      	ldr	r0, [pc, #24]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c4c:	f7fa ffec 	bl	8002c28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c50:	2280      	movs	r2, #128	; 0x80
 8007c52:	2101      	movs	r1, #1
 8007c54:	4803      	ldr	r0, [pc, #12]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c56:	f7fa ffe7 	bl	8002c28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	2000175c 	.word	0x2000175c

08007c68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7f9 fef5 	bl	8001a6e <HAL_PCD_Start>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f942 	bl	8007f14 <USBD_Get_USB_Status>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	461a      	mov	r2, r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	70fb      	strb	r3, [r7, #3]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70bb      	strb	r3, [r7, #2]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007cc6:	78bb      	ldrb	r3, [r7, #2]
 8007cc8:	883a      	ldrh	r2, [r7, #0]
 8007cca:	78f9      	ldrb	r1, [r7, #3]
 8007ccc:	f7fa fbc9 	bl	8002462 <HAL_PCD_EP_Open>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f91c 	bl	8007f14 <USBD_Get_USB_Status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fa fc12 	bl	8002532 <HAL_PCD_EP_Close>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f8fd 	bl	8007f14 <USBD_Get_USB_Status>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fa fcca 	bl	80026e0 <HAL_PCD_EP_SetStall>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f8de 	bl	8007f14 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fa fd0e 	bl	80027a6 <HAL_PCD_EP_ClrStall>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f8bf 	bl	8007f14 <USBD_Get_USB_Status>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007db6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da0b      	bge.n	8007dd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3316      	adds	r3, #22
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	e00b      	b.n	8007df0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dde:	68f9      	ldr	r1, [r7, #12]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007dee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fa fafd 	bl	800241a <HAL_PCD_SetAddress>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f874 	bl	8007f14 <USBD_Get_USB_Status>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b086      	sub	sp, #24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	460b      	mov	r3, r1
 8007e48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e58:	7af9      	ldrb	r1, [r7, #11]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	f7fa fc05 	bl	800266c <HAL_PCD_EP_Transmit>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 f853 	bl	8007f14 <USBD_Get_USB_Status>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e72:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e9a:	7af9      	ldrb	r1, [r7, #11]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	f7fa fb91 	bl	80025c6 <HAL_PCD_EP_Receive>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f832 	bl	8007f14 <USBD_Get_USB_Status>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fa fbb1 	bl	800263c <HAL_PCD_EP_GetRxCount>
 8007eda:	4603      	mov	r3, r0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_static_malloc+0x18>)
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20001c40 	.word	0x20001c40

08007f00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]

}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d817      	bhi.n	8007f58 <USBD_Get_USB_Status+0x44>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <USBD_Get_USB_Status+0x1c>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f47 	.word	0x08007f47
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f53 	.word	0x08007f53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
    break;
 8007f44:	e00b      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4a:	e008      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f50:	e005      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	73fb      	strb	r3, [r7, #15]
    break;
 8007f56:	e002      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f5c:	bf00      	nop
  }
  return usb_status;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <memset>:
 8007f6c:	4402      	add	r2, r0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d100      	bne.n	8007f76 <memset+0xa>
 8007f74:	4770      	bx	lr
 8007f76:	f803 1b01 	strb.w	r1, [r3], #1
 8007f7a:	e7f9      	b.n	8007f70 <memset+0x4>

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	; (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	; (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	; (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	; (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f000 f818 	bl	8007fc4 <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	08008044 	.word	0x08008044
 8007fb8:	08008044 	.word	0x08008044
 8007fbc:	08008044 	.word	0x08008044
 8007fc0:	08008048 	.word	0x08008048

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr
