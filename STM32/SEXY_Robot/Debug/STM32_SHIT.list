
STM32_SHIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f48  08008f48  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f50  08008f50  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  2000014c  080090a4  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ffc  080090a4  00021ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150a2  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036cc  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebe  00000000  00000000  00039c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194dd  00000000  00000000  0003ab3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016aca  00000000  00000000  0005401b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091cc9  00000000  00000000  0006aae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055ac  00000000  00000000  000fc7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00101d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e90 	.word	0x08008e90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08008e90 	.word	0x08008e90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <xprintf>:

extern SPI_HandleTypeDef hspi1;

// Stores the last measured deltas between each encoder's detected RISING edges

int xprintf(const char* fmt, ...) {
 800057c:	b40f      	push	{r0, r1, r2, r3}
 800057e:	b580      	push	{r7, lr}
 8000580:	b0a4      	sub	sp, #144	; 0x90
 8000582:	af00      	add	r7, sp, #0
    uint8_t rc = USBD_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    char tmp[128];
	va_list ptr;

	va_start(ptr, fmt);
 800058a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800058e:	607b      	str	r3, [r7, #4]
	int len = vsprintf(tmp, fmt, ptr);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800059a:	4618      	mov	r0, r3
 800059c:	f007 ffea 	bl	8008574 <vsiprintf>
 80005a0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    va_end(ptr);

    do {
        rc = CDC_Transmit_FS((uint8_t*)tmp, len);
 80005a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f007 fb77 	bl	8007ca4 <CDC_Transmit_FS>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    } while (USBD_BUSY == rc);
 80005bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d0ef      	beq.n	80005a4 <xprintf+0x28>

    if (USBD_FAIL == rc) {
 80005c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d101      	bne.n	80005d0 <xprintf+0x54>
        return 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	e001      	b.n	80005d4 <xprintf+0x58>
    }

    return len;
 80005d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3790      	adds	r7, #144	; 0x90
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005de:	b004      	add	sp, #16
 80005e0:	4770      	bx	lr
	...

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	; 0x40
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fb95 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f829 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f941 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f6:	f000 f917 	bl	8000828 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005fa:	f007 fa95 	bl	8007b28 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80005fe:	f000 f8bf 	bl	8000780 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000602:	f000 f88b 	bl	800071c <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t data[64];
	  do {
		  HAL_SPI_Receive(&hspi1, data, 2, 100);
 8000606:	4639      	mov	r1, r7
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2202      	movs	r2, #2
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <main+0x58>)
 800060e:	f003 f8c4 	bl	800379a <HAL_SPI_Receive>
	  } while (data[0] != 0xAB && data[1] != 0xCD);
 8000612:	783b      	ldrb	r3, [r7, #0]
 8000614:	2bab      	cmp	r3, #171	; 0xab
 8000616:	d002      	beq.n	800061e <main+0x3a>
 8000618:	787b      	ldrb	r3, [r7, #1]
 800061a:	2bcd      	cmp	r3, #205	; 0xcd
 800061c:	d1f3      	bne.n	8000606 <main+0x22>

	  HAL_SPI_Receive(&hspi1, data, 15, 100);
 800061e:	4639      	mov	r1, r7
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	220f      	movs	r2, #15
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x58>)
 8000626:	f003 f8b8 	bl	800379a <HAL_SPI_Receive>

	  xprintf("RX: %.15s\n", data);
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x5c>)
 8000630:	f7ff ffa4 	bl	800057c <xprintf>

	  HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f000 fbe1 	bl	8000dfc <HAL_Delay>
  {
 800063a:	e7e4      	b.n	8000606 <main+0x22>
 800063c:	20000168 	.word	0x20000168
 8000640:	08008ea8 	.word	0x08008ea8

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 ff98 	bl	8008588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	; (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <SystemClock_Config+0xd4>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2310      	movs	r3, #16
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 80006c0:	237b      	movs	r3, #123	; 0x7b
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fba9 	bl	8002e28 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006dc:	f000 f910 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fe0c 	bl	8003318 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 f8fb 	bl	8000900 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <MX_SPI1_Init+0x60>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_SPI1_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI1_Init+0x5c>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_SPI1_Init+0x5c>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI1_Init+0x5c>)
 800075e:	220a      	movs	r2, #10
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_SPI1_Init+0x5c>)
 8000764:	f002 ff90 	bl	8003688 <HAL_SPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800076e:	f000 f8c7 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000168 	.word	0x20000168
 800077c:	40013000 	.word	0x40013000

08000780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2224      	movs	r2, #36	; 0x24
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f007 fefa 	bl	8008588 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_TIM2_Init+0xa4>)
 800079e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007dc:	2301      	movs	r3, #1
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_TIM2_Init+0xa4>)
 80007f0:	f003 fcf0 	bl	80041d4 <HAL_TIM_Encoder_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007fa:	f000 f881 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_TIM2_Init+0xa4>)
 800080c:	f003 fe14 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000816:	f000 f873 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3730      	adds	r7, #48	; 0x30
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000280 	.word	0x20000280

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_DMA_Init+0x4c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_DMA_Init+0x4c>)
 8000838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_DMA_Init+0x4c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2038      	movs	r0, #56	; 0x38
 8000850:	f000 fbd3 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000854:	2038      	movs	r0, #56	; 0x38
 8000856:	f000 fbec 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	203a      	movs	r0, #58	; 0x3a
 8000860:	f000 fbcb 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000864:	203a      	movs	r0, #58	; 0x3a
 8000866:	f000 fbe4 	bl	8001032 <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_GPIO_Init+0x84>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <MX_GPIO_Init+0x84>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_GPIO_Init+0x84>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <MX_GPIO_Init+0x84>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_GPIO_Init+0x84>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_GPIO_Init+0x84>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_GPIO_Init+0x84>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_GPIO_Init+0x84>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_GPIO_Init+0x84>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <MX_GPIO_Init+0x84>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_GPIO_Init+0x84>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a5a      	ldr	r2, [pc, #360]	; (8000ae4 <HAL_SPI_MspInit+0x188>)
 800097a:	4293      	cmp	r3, r2
 800097c:	f040 80ae 	bne.w	8000adc <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	4b58      	ldr	r3, [pc, #352]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 8000986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 800098a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800098e:	6453      	str	r3, [r2, #68]	; 0x44
 8000990:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 8000992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a50      	ldr	r2, [pc, #320]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4a49      	ldr	r2, [pc, #292]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	6313      	str	r3, [r2, #48]	; 0x30
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <HAL_SPI_MspInit+0x18c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80009d4:	2390      	movs	r3, #144	; 0x90
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e4:	2305      	movs	r3, #5
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	483f      	ldr	r0, [pc, #252]	; (8000aec <HAL_SPI_MspInit+0x190>)
 80009f0:	f000 fe46 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009f4:	2318      	movs	r3, #24
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a04:	2305      	movs	r3, #5
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4838      	ldr	r0, [pc, #224]	; (8000af0 <HAL_SPI_MspInit+0x194>)
 8000a10:	f000 fe36 	bl	8001680 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a16:	4a38      	ldr	r2, [pc, #224]	; (8000af8 <HAL_SPI_MspInit+0x19c>)
 8000a18:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a1c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a20:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a34:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a54:	4827      	ldr	r0, [pc, #156]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a56:	f000 fb07 	bl	8001068 <HAL_DMA_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000a60:	f7ff ff4e 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a68:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_SPI_MspInit+0x198>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a72:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <HAL_SPI_MspInit+0x1a4>)
 8000a74:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a80:	2240      	movs	r2, #64	; 0x40
 8000a82:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a90:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000ab2:	f000 fad9 	bl	8001068 <HAL_DMA_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8000abc:	f7ff ff20 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000ac4:	649a      	str	r2, [r3, #72]	; 0x48
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_SPI_MspInit+0x1a0>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2023      	movs	r0, #35	; 0x23
 8000ad2:	f000 fa92 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ad6:	2023      	movs	r0, #35	; 0x23
 8000ad8:	f000 faab 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	200001c0 	.word	0x200001c0
 8000af8:	40026410 	.word	0x40026410
 8000afc:	20000220 	.word	0x20000220
 8000b00:	40026440 	.word	0x40026440

08000b04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d12b      	bne.n	8000b7e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000b7a:	f000 fd81 	bl	8001680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f8ee 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <SPI1_IRQHandler+0x10>)
 8000bea:	f003 f89f 	bl	8003d2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000168 	.word	0x20000168

08000bf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA2_Stream0_IRQHandler+0x10>)
 8000bfe:	f000 fb03 	bl	8001208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001c0 	.word	0x200001c0

08000c0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <DMA2_Stream2_IRQHandler+0x10>)
 8000c12:	f000 faf9 	bl	8001208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000220 	.word	0x20000220

08000c20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <OTG_FS_IRQHandler+0x10>)
 8000c26:	f000 fff3 	bl	8001c10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200017b0 	.word	0x200017b0

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f007 fc98 	bl	8008598 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20020000 	.word	0x20020000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	200002c8 	.word	0x200002c8
 8000c9c:	20002000 	.word	0x20002000

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f007 fc57 	bl	80085a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc75 	bl	80005e4 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000d08:	08008f58 	.word	0x08008f58
  ldr r2, =_sbss
 8000d0c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d10:	20001ffc 	.word	0x20001ffc

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f94f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fdde 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f967 	bl	800104e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f000 f92f 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200002cc 	.word	0x200002cc

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200002cc 	.word	0x200002cc

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff feb6 	bl	8000de4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e099      	b.n	80011b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a4:	e00f      	b.n	80010c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a6:	f7ff fe9d 	bl	8000de4 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d908      	bls.n	80010c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2220      	movs	r2, #32
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e078      	b.n	80011b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e8      	bne.n	80010a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_DMA_Init+0x158>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b04      	cmp	r3, #4
 800111e:	d107      	bne.n	8001130 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4313      	orrs	r3, r2
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f023 0307 	bic.w	r3, r3, #7
 8001146:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4313      	orrs	r3, r2
 8001150:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	2b04      	cmp	r3, #4
 8001158:	d117      	bne.n	800118a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fa0b 	bl	8001588 <DMA_CheckFifoParam>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2240      	movs	r2, #64	; 0x40
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001186:	2301      	movs	r3, #1
 8001188:	e016      	b.n	80011b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f9c2 	bl	800151c <DMA_CalcBaseAndBitshift>
 8001198:	4603      	mov	r3, r0
 800119a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	223f      	movs	r2, #63	; 0x3f
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	f010803f 	.word	0xf010803f

080011c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d004      	beq.n	80011e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00c      	b.n	80011fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2205      	movs	r2, #5
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001214:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <HAL_DMA_IRQHandler+0x248>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a8e      	ldr	r2, [pc, #568]	; (8001454 <HAL_DMA_IRQHandler+0x24c>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0a9b      	lsrs	r3, r3, #10
 8001220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	2208      	movs	r2, #8
 8001234:	409a      	lsls	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d01a      	beq.n	8001274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0204 	bic.w	r2, r2, #4
 800125a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	2208      	movs	r2, #8
 8001262:	409a      	lsls	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001278:	2201      	movs	r2, #1
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d012      	beq.n	80012aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	2201      	movs	r2, #1
 8001298:	409a      	lsls	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	2204      	movs	r2, #4
 80012b0:	409a      	lsls	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d012      	beq.n	80012e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012cc:	2204      	movs	r2, #4
 80012ce:	409a      	lsls	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	f043 0204 	orr.w	r2, r3, #4
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	2210      	movs	r2, #16
 80012e6:	409a      	lsls	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d043      	beq.n	8001378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d03c      	beq.n	8001378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2210      	movs	r2, #16
 8001304:	409a      	lsls	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d018      	beq.n	800134a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d108      	bne.n	8001338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d024      	beq.n	8001378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	4798      	blx	r3
 8001336:	e01f      	b.n	8001378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01b      	beq.n	8001378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
 8001348:	e016      	b.n	8001378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0208 	bic.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137c:	2220      	movs	r2, #32
 800137e:	409a      	lsls	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 808f 	beq.w	80014a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8087 	beq.w	80014a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	2220      	movs	r2, #32
 80013a0:	409a      	lsls	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d136      	bne.n	8001420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0216 	bic.w	r2, r2, #22
 80013c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <HAL_DMA_IRQHandler+0x1da>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0208 	bic.w	r2, r2, #8
 80013f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	223f      	movs	r2, #63	; 0x3f
 80013f8:	409a      	lsls	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001412:	2b00      	cmp	r3, #0
 8001414:	d07e      	beq.n	8001514 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
        }
        return;
 800141e:	e079      	b.n	8001514 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d01d      	beq.n	800146a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10d      	bne.n	8001458 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	2b00      	cmp	r3, #0
 8001442:	d031      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
 800144c:	e02c      	b.n	80014a8 <HAL_DMA_IRQHandler+0x2a0>
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000
 8001454:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
 8001468:	e01e      	b.n	80014a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10f      	bne.n	8001498 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0210 	bic.w	r2, r2, #16
 8001486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d032      	beq.n	8001516 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d022      	beq.n	8001502 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2205      	movs	r2, #5
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d307      	bcc.n	80014f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f2      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x2cc>
 80014ee:	e000      	b.n	80014f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
 8001512:	e000      	b.n	8001516 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001514:	bf00      	nop
    }
  }
}
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3b10      	subs	r3, #16
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <DMA_CalcBaseAndBitshift+0x64>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <DMA_CalcBaseAndBitshift+0x68>)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d909      	bls.n	800155e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001552:	f023 0303 	bic.w	r3, r3, #3
 8001556:	1d1a      	adds	r2, r3, #4
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	659a      	str	r2, [r3, #88]	; 0x58
 800155c:	e007      	b.n	800156e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001566:	f023 0303 	bic.w	r3, r3, #3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	aaaaaaab 	.word	0xaaaaaaab
 8001584:	08008f0c 	.word	0x08008f0c

08001588 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d11f      	bne.n	80015e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d856      	bhi.n	8001656 <DMA_CheckFifoParam+0xce>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <DMA_CheckFifoParam+0x28>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015d3 	.word	0x080015d3
 80015b8:	080015c1 	.word	0x080015c1
 80015bc:	08001657 	.word	0x08001657
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d046      	beq.n	800165a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d0:	e043      	b.n	800165a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015da:	d140      	bne.n	800165e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015e0:	e03d      	b.n	800165e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ea:	d121      	bne.n	8001630 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d837      	bhi.n	8001662 <DMA_CheckFifoParam+0xda>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <DMA_CheckFifoParam+0x70>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800160f 	.word	0x0800160f
 8001600:	08001609 	.word	0x08001609
 8001604:	08001621 	.word	0x08001621
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
      break;
 800160c:	e030      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d025      	beq.n	8001666 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800161e:	e022      	b.n	8001666 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001628:	d11f      	bne.n	800166a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800162e:	e01c      	b.n	800166a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d903      	bls.n	800163e <DMA_CheckFifoParam+0xb6>
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d003      	beq.n	8001644 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800163c:	e018      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
      break;
 8001642:	e015      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00e      	beq.n	800166e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
      break;
 8001654:	e00b      	b.n	800166e <DMA_CheckFifoParam+0xe6>
      break;
 8001656:	bf00      	nop
 8001658:	e00a      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
 800165c:	e008      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      break;
 800165e:	bf00      	nop
 8001660:	e006      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      break;
 8001662:	bf00      	nop
 8001664:	e004      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      break;
 8001666:	bf00      	nop
 8001668:	e002      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      break;   
 800166a:	bf00      	nop
 800166c:	e000      	b.n	8001670 <DMA_CheckFifoParam+0xe8>
      break;
 800166e:	bf00      	nop
    }
  } 
  
  return status; 
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e159      	b.n	8001950 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f040 8148 	bne.w	800194a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d005      	beq.n	80016d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d130      	bne.n	8001734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0201 	and.w	r2, r3, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b03      	cmp	r3, #3
 800173e:	d017      	beq.n	8001770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80a2 	beq.w	800194a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_GPIO_Init+0x2e8>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a56      	ldr	r2, [pc, #344]	; (8001968 <HAL_GPIO_Init+0x2e8>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b54      	ldr	r3, [pc, #336]	; (8001968 <HAL_GPIO_Init+0x2e8>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_GPIO_Init+0x2ec>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a49      	ldr	r2, [pc, #292]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d019      	beq.n	8001882 <HAL_GPIO_Init+0x202>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a48      	ldr	r2, [pc, #288]	; (8001974 <HAL_GPIO_Init+0x2f4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x1fe>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a47      	ldr	r2, [pc, #284]	; (8001978 <HAL_GPIO_Init+0x2f8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x1fa>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a46      	ldr	r2, [pc, #280]	; (800197c <HAL_GPIO_Init+0x2fc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x1f6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a45      	ldr	r2, [pc, #276]	; (8001980 <HAL_GPIO_Init+0x300>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x1f2>
 800186e:	2304      	movs	r3, #4
 8001870:	e008      	b.n	8001884 <HAL_GPIO_Init+0x204>
 8001872:	2307      	movs	r3, #7
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x204>
 8001876:	2303      	movs	r3, #3
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x204>
 800187a:	2302      	movs	r3, #2
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x204>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x204>
 8001882:	2300      	movs	r3, #0
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f002 0203 	and.w	r2, r2, #3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001894:	4935      	ldr	r1, [pc, #212]	; (800196c <HAL_GPIO_Init+0x2ec>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_GPIO_Init+0x304>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c6:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <HAL_GPIO_Init+0x304>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_GPIO_Init+0x304>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x304>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_GPIO_Init+0x304>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800191a:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x304>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_GPIO_Init+0x304>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_GPIO_Init+0x304>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	f67f aea2 	bls.w	800169c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40013800 	.word	0x40013800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020400 	.word	0x40020400
 8001978:	40020800 	.word	0x40020800
 800197c:	40020c00 	.word	0x40020c00
 8001980:	40021000 	.word	0x40021000
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e101      	b.n	8001b9e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d106      	bne.n	80019ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f006 fabd 	bl	8007f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c8:	d102      	bne.n	80019d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 feb4 	bl	8004742 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7c1a      	ldrb	r2, [r3, #16]
 80019e2:	f88d 2000 	strb.w	r2, [sp]
 80019e6:	3304      	adds	r3, #4
 80019e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ea:	f002 fd93 	bl	8004514 <USB_CoreInit>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0ce      	b.n	8001b9e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 feac 	bl	8004764 <USB_SetCurrentMode>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0bf      	b.n	8001b9e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e04a      	b.n	8001aba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3315      	adds	r3, #21
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3314      	adds	r3, #20
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	b298      	uxth	r0, r3
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	332e      	adds	r3, #46	; 0x2e
 8001a60:	4602      	mov	r2, r0
 8001a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3318      	adds	r3, #24
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	331c      	adds	r3, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3320      	adds	r3, #32
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	3324      	adds	r3, #36	; 0x24
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3af      	bcc.n	8001a24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e044      	b.n	8001b54 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3301      	adds	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3b5      	bcc.n	8001aca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7c1a      	ldrb	r2, [r3, #16]
 8001b66:	f88d 2000 	strb.w	r2, [sp]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6e:	f002 fe45 	bl	80047fc <USB_DevInit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e00c      	b.n	8001b9e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fe89 	bl	80058ae <USB_DevDisconnect>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_PCD_Start+0x1c>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e022      	b.n	8001c08 <HAL_PCD_Start+0x62>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fd96 	bl	8004720 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fe37 	bl	800586c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b08d      	sub	sp, #52	; 0x34
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fef5 	bl	8005a16 <USB_GetMode>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 848c 	bne.w	800254c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fe59 	bl	80058f0 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8482 	beq.w	800254a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fe46 	bl	80058f0 <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f002 0202 	and.w	r2, r2, #2
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fe34 	bl	80058f0 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d161      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0210 	bic.w	r2, r2, #16
 8001ca0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	0c5b      	lsrs	r3, r3, #17
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d124      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d035      	beq.n	8001d46 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	6a38      	ldr	r0, [r7, #32]
 8001cee:	f003 fc6b 	bl	80055c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfe:	441a      	add	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d10:	441a      	add	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	e016      	b.n	8001d46 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d110      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6a38      	ldr	r0, [r7, #32]
 8001d30:	f003 fc4a 	bl	80055c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d40:	441a      	add	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0210 	orr.w	r2, r2, #16
 8001d54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fdc8 	bl	80058f0 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d6a:	f040 80a7 	bne.w	8001ebc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fdcd 	bl	8005916 <USB_ReadDevAllOutEpInterrupt>
 8001d7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d7e:	e099      	b.n	8001eb4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 808e 	beq.w	8001ea8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fdf1 	bl	800597e <USB_ReadDevOutEPInterrupt>
 8001d9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db4:	461a      	mov	r2, r3
 8001db6:	2301      	movs	r3, #1
 8001db8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fea1 	bl	8002b04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2308      	movs	r3, #8
 8001ddc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 ff77 	bl	8002cd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2310      	movs	r3, #16
 8001e00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d030      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b80      	cmp	r3, #128	; 0x80
 8001e16:	d109      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4619      	mov	r1, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f006 f968 	bl	800812c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e84:	461a      	mov	r2, r3
 8001e86:	2320      	movs	r3, #32
 8001e88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	3301      	adds	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f47f af62 	bne.w	8001d80 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fd15 	bl	80058f0 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ed0:	f040 80db 	bne.w	800208a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fd36 	bl	800594a <USB_ReadDevAllInEpInterrupt>
 8001ede:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ee4:	e0cd      	b.n	8002082 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80c2 	beq.w	8002076 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fd5c 	bl	80059ba <USB_ReadDevInEPInterrupt>
 8001f02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d057      	beq.n	8001fbe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	2201      	movs	r2, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69f9      	ldr	r1, [r7, #28]
 8001f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f2e:	4013      	ands	r3, r2
 8001f30:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2301      	movs	r3, #1
 8001f42:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	799b      	ldrb	r3, [r3, #6]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d132      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4403      	add	r3, r0
 8001f6c:	331c      	adds	r3, #28
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4419      	add	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4403      	add	r3, r0
 8001f80:	3320      	adds	r3, #32
 8001f82:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d113      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x3a2>
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3324      	adds	r3, #36	; 0x24
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d108      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001faa:	461a      	mov	r2, r3
 8001fac:	2101      	movs	r1, #1
 8001fae:	f003 fd63 	bl	8005a78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f006 f83c 	bl	8008036 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800200c:	461a      	mov	r2, r3
 800200e:	2340      	movs	r3, #64	; 0x40
 8002010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800201c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201e:	6a38      	ldr	r0, [r7, #32]
 8002020:	f002 fd50 	bl	8004ac4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3310      	adds	r3, #16
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d108      	bne.n	8002052 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2200      	movs	r2, #0
 8002044:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f006 f87f 	bl	8008150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205e:	461a      	mov	r2, r3
 8002060:	2302      	movs	r3, #2
 8002062:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800206e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fcbb 	bl	80029ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3301      	adds	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f af2e 	bne.w	8001ee6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fc2e 	bl	80058f0 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800209a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800209e:	d122      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d108      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020c6:	2100      	movs	r1, #0
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fea1 	bl	8002e10 <HAL_PCDEx_LPM_Callback>
 80020ce:	e002      	b.n	80020d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f006 f81d 	bl	8008110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fc00 	bl	80058f0 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020fa:	d112      	bne.n	8002122 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f005 ffd9 	bl	80080c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002120:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fbe2 	bl	80058f0 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002136:	f040 80b7 	bne.w	80022a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2110      	movs	r1, #16
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fcb5 	bl	8004ac4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215e:	e046      	b.n	80021ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216c:	461a      	mov	r2, r3
 800216e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002172:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	440a      	add	r2, r1
 800218a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800218e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002192:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b8:	0151      	lsls	r1, r2, #5
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	440a      	add	r2, r1
 80021be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d8:	0151      	lsls	r1, r2, #5
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	440a      	add	r2, r1
 80021de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	3301      	adds	r3, #1
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d3b2      	bcc.n	8002160 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002208:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800220c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7bdb      	ldrb	r3, [r3, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002226:	f043 030b 	orr.w	r3, r3, #11
 800222a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223c:	f043 030b 	orr.w	r3, r3, #11
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	e015      	b.n	8002270 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002256:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800225a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f043 030b 	orr.w	r3, r3, #11
 800226e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002282:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002292:	461a      	mov	r2, r3
 8002294:	f003 fbf0 	bl	8005a78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fb1f 	bl	80058f0 <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022bc:	d123      	bne.n	8002306 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fbb5 	bl	8005a32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fc72 	bl	8004bb6 <USB_GetDevSpeed>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681c      	ldr	r4, [r3, #0]
 80022de:	f001 f9c7 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80022e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022e8:	461a      	mov	r2, r3
 80022ea:	4620      	mov	r0, r4
 80022ec:	f002 f976 	bl	80045dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f005 fec8 	bl	8008086 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002304:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 faf0 	bl	80058f0 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b08      	cmp	r3, #8
 8002318:	d10a      	bne.n	8002330 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f005 fea5 	bl	800806a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f002 0208 	and.w	r2, r2, #8
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fadb 	bl	80058f0 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b80      	cmp	r3, #128	; 0x80
 8002342:	d123      	bne.n	800238c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002350:	2301      	movs	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	e014      	b.n	8002380 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb08 	bl	800298a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	791b      	ldrb	r3, [r3, #4]
 8002384:	461a      	mov	r2, r3
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	4293      	cmp	r3, r2
 800238a:	d3e4      	bcc.n	8002356 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 faad 	bl	80058f0 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a0:	d13c      	bne.n	800241c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023a2:	2301      	movs	r3, #1
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e02b      	b.n	8002400 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3318      	adds	r3, #24
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d115      	bne.n	80023fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da12      	bge.n	80023fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3317      	adds	r3, #23
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fac8 	bl	800298a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	3301      	adds	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	791b      	ldrb	r3, [r3, #4]
 8002404:	461a      	mov	r2, r3
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	4293      	cmp	r3, r2
 800240a:	d3cd      	bcc.n	80023a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800241a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fa65 	bl	80058f0 <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002430:	d156      	bne.n	80024e0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002432:	2301      	movs	r3, #1
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	e045      	b.n	80024c4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d12e      	bne.n	80024be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002460:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	da2b      	bge.n	80024be <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002472:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002476:	429a      	cmp	r2, r3
 8002478:	d121      	bne.n	80024be <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f203 2357 	addw	r3, r3, #599	; 0x257
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	6053      	str	r3, [r2, #4]
            break;
 80024bc:	e008      	b.n	80024d0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3301      	adds	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	791b      	ldrb	r3, [r3, #4]
 80024c8:	461a      	mov	r2, r3
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d3b3      	bcc.n	8002438 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fa03 	bl	80058f0 <USB_ReadInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d10a      	bne.n	800250c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f005 fe3c 	bl	8008174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800250a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f003 f9ed 	bl	80058f0 <USB_ReadInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d115      	bne.n	800254c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f005 fe2c 	bl	8008190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	e000      	b.n	800254c <HAL_PCD_IRQHandler+0x93c>
      return;
 800254a:	bf00      	nop
    }
  }
}
 800254c:	3734      	adds	r7, #52	; 0x34
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}

08002552 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_PCD_SetAddress+0x1a>
 8002568:	2302      	movs	r3, #2
 800256a:	e012      	b.n	8002592 <HAL_PCD_SetAddress+0x40>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f003 f94c 	bl	8005820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	4608      	mov	r0, r1
 80025a4:	4611      	mov	r1, r2
 80025a6:	461a      	mov	r2, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	70fb      	strb	r3, [r7, #3]
 80025ac:	460b      	mov	r3, r1
 80025ae:	803b      	strh	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da0f      	bge.n	80025e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	3310      	adds	r3, #16
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	705a      	strb	r2, [r3, #1]
 80025de:	e00f      	b.n	8002600 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 020f 	and.w	r2, r3, #15
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800260c:	883a      	ldrh	r2, [r7, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	78ba      	ldrb	r2, [r7, #2]
 8002616:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	785b      	ldrb	r3, [r3, #1]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800262a:	78bb      	ldrb	r3, [r7, #2]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d102      	bne.n	8002636 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_PCD_EP_Open+0xaa>
 8002640:	2302      	movs	r3, #2
 8002642:	e00e      	b.n	8002662 <HAL_PCD_EP_Open+0xc8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fad4 	bl	8004c00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002660:	7afb      	ldrb	r3, [r7, #11]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267a:	2b00      	cmp	r3, #0
 800267c:	da0f      	bge.n	800269e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 020f 	and.w	r2, r3, #15
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3310      	adds	r3, #16
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	705a      	strb	r2, [r3, #1]
 800269c:	e00f      	b.n	80026be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_PCD_EP_Close+0x6e>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e00e      	b.n	80026f6 <HAL_PCD_EP_Close+0x8c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f002 fb12 	bl	8004d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	460b      	mov	r3, r1
 800270c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	b2da      	uxtb	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	799b      	ldrb	r3, [r3, #6]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d102      	bne.n	800275a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	799b      	ldrb	r3, [r3, #6]
 8002762:	461a      	mov	r2, r3
 8002764:	6979      	ldr	r1, [r7, #20]
 8002766:	f002 fbaf 	bl	8004ec8 <USB_EPStartXfer>

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	460b      	mov	r3, r1
 80027b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3310      	adds	r3, #16
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e4:	7afb      	ldrb	r3, [r7, #11]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	799b      	ldrb	r3, [r3, #6]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	799b      	ldrb	r3, [r3, #6]
 8002806:	461a      	mov	r2, r3
 8002808:	6979      	ldr	r1, [r7, #20]
 800280a:	f002 fb5d 	bl	8004ec8 <USB_EPStartXfer>

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	7912      	ldrb	r2, [r2, #4]
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e04f      	b.n	80028d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0f      	bge.n	800285e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3310      	adds	r3, #16
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	705a      	strb	r2, [r3, #1]
 800285c:	e00d      	b.n	800287a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_PCD_EP_SetStall+0x82>
 8002896:	2302      	movs	r3, #2
 8002898:	e01d      	b.n	80028d6 <HAL_PCD_EP_SetStall+0xbe>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fee5 	bl	8005678 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7999      	ldrb	r1, [r3, #6]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80028c6:	461a      	mov	r2, r3
 80028c8:	f003 f8d6 	bl	8005a78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	7912      	ldrb	r2, [r2, #4]
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e042      	b.n	8002982 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002900:	2b00      	cmp	r3, #0
 8002902:	da0f      	bge.n	8002924 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	3310      	adds	r3, #16
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	3304      	adds	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
 8002922:	e00f      	b.n	8002944 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 020f 	and.w	r2, r3, #15
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_PCD_EP_ClrStall+0x86>
 8002960:	2302      	movs	r3, #2
 8002962:	e00e      	b.n	8002982 <HAL_PCD_EP_ClrStall+0xa4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	4618      	mov	r0, r3
 8002974:	f002 feee 	bl	8005754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	da0c      	bge.n	80029b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	3310      	adds	r3, #16
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e00c      	b.n	80029d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68f9      	ldr	r1, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fd0d 	bl	80053f8 <USB_EPStopXfer>
 80029de:	4603      	mov	r3, r0
 80029e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029e2:	7afb      	ldrb	r3, [r7, #11]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3304      	adds	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d901      	bls.n	8002a24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e06b      	b.n	8002afc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d902      	bls.n	8002a40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	3303      	adds	r3, #3
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a48:	e02a      	b.n	8002aa0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d902      	bls.n	8002a66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3303      	adds	r3, #3
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4603      	mov	r3, r0
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f002 fd62 	bl	800554c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d809      	bhi.n	8002aca <PCD_WriteEmptyTxFifo+0xde>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d203      	bcs.n	8002aca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1bf      	bne.n	8002a4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d811      	bhi.n	8002afa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	2201      	movs	r2, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	6939      	ldr	r1, [r7, #16]
 8002af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002af6:	4013      	ands	r3, r2
 8002af8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	333c      	adds	r3, #60	; 0x3c
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	799b      	ldrb	r3, [r3, #6]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d17b      	bne.n	8002c32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4a61      	ldr	r2, [pc, #388]	; (8002ccc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	f240 80b9 	bls.w	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b3 	beq.w	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6c:	6093      	str	r3, [r2, #8]
 8002b6e:	e0a7      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	461a      	mov	r2, r3
 8002b88:	2320      	movs	r3, #32
 8002b8a:	6093      	str	r3, [r2, #8]
 8002b8c:	e098      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 8093 	bne.w	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d90f      	bls.n	8002bc2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	e07e      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	1ad2      	subs	r2, r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d114      	bne.n	8002c24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f002 ff32 	bl	8005a78 <USB_EP0_OutStart>
 8002c14:	e006      	b.n	8002c24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	441a      	add	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f005 f9e8 	bl	8008000 <HAL_PCD_DataOutStageCallback>
 8002c30:	e046      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d124      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c50:	461a      	mov	r2, r3
 8002c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c56:	6093      	str	r3, [r2, #8]
 8002c58:	e032      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	461a      	mov	r2, r3
 8002c72:	2320      	movs	r3, #32
 8002c74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f005 f9bf 	bl	8008000 <HAL_PCD_DataOutStageCallback>
 8002c82:	e01d      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d114      	bne.n	8002cb4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cac:	461a      	mov	r2, r3
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f002 fee2 	bl	8005a78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f005 f9a0 	bl	8008000 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	4f54300a 	.word	0x4f54300a
 8002cd0:	4f54310a 	.word	0x4f54310a

08002cd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	333c      	adds	r3, #60	; 0x3c
 8002cec:	3304      	adds	r3, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d90e      	bls.n	8002d28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d20:	461a      	mov	r2, r3
 8002d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 f957 	bl	8007fdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d90c      	bls.n	8002d50 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	799b      	ldrb	r3, [r3, #6]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d108      	bne.n	8002d50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	f002 fe94 	bl	8005a78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	4f54300a 	.word	0x4f54300a

08002d60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d7e:	883b      	ldrh	r3, [r7, #0]
 8002d80:	0419      	lsls	r1, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e028      	b.n	8002de0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e00d      	b.n	8002dbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3340      	adds	r3, #64	; 0x40
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3ec      	bcc.n	8002da2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002dc8:	883b      	ldrh	r3, [r7, #0]
 8002dca:	0418      	lsls	r0, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4302      	orrs	r2, r0
 8002dd8:	3340      	adds	r3, #64	; 0x40
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e267      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d075      	beq.n	8002f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d00c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05b      	beq.n	8002f30 <HAL_RCC_OscConfig+0x108>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d157      	bne.n	8002f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e242      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x74>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a68      	ldr	r2, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fd ff80 	bl	8000de4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fd ff7c 	bl	8000de4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e207      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xc0>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fd ff6c 	bl	8000de4 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fd ff68 	bl	8000de4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1f3      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0xe8>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1c7      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x244>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fd ff21 	bl	8000de4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fd ff1d 	bl	8000de4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1a8      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4925      	ldr	r1, [pc, #148]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x244>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fd ff00 	bl	8000de4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fd fefc 	bl	8000de4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e187      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d036      	beq.n	8003080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x248>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fd fee0 	bl	8000de4 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7fd fedc 	bl	8000de4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e167      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x200>
 8003046:	e01b      	b.n	8003080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x248>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fd fec9 	bl	8000de4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	e00e      	b.n	8003074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7fd fec5 	bl	8000de4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e150      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
 8003068:	40023800 	.word	0x40023800
 800306c:	42470000 	.word	0x42470000
 8003070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8097 	beq.w	80031bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a7c      	ldr	r2, [pc, #496]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b7a      	ldr	r3, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b77      	ldr	r3, [pc, #476]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b74      	ldr	r3, [pc, #464]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fd fe85 	bl	8000de4 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fd fe81 	bl	8000de4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e10c      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x2ea>
 8003104:	4b64      	ldr	r3, [pc, #400]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	e01c      	b.n	800314c <HAL_RCC_OscConfig+0x324>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b05      	cmp	r3, #5
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x30c>
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a5b      	ldr	r2, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0x324>
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a54      	ldr	r2, [pc, #336]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fd fe46 	bl	8000de4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fd fe42 	bl	8000de4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0cb      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ee      	beq.n	800315c <HAL_RCC_OscConfig+0x334>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003180:	f7fd fe30 	bl	8000de4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fd fe2c 	bl	8000de4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0b5      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ee      	bne.n	8003188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a38      	ldr	r2, [pc, #224]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a1 	beq.w	8003308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d05c      	beq.n	800328c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d141      	bne.n	800325e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fe00 	bl	8000de4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fd fdfc 	bl	8000de4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e087      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	3b01      	subs	r3, #1
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	491b      	ldr	r1, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fd fdd5 	bl	8000de4 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323e:	f7fd fdd1 	bl	8000de4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e05c      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x416>
 800325c:	e054      	b.n	8003308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fdbe 	bl	8000de4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fd fdba 	bl	8000de4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e045      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x444>
 800328a:	e03d      	b.n	8003308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e038      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000
 80032a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x4ec>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d028      	beq.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d121      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d11a      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032dc:	4293      	cmp	r3, r2
 80032de:	d111      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0cc      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d90c      	bls.n	8003354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b8      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	494d      	ldr	r1, [pc, #308]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d044      	beq.n	8003438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d119      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e067      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4934      	ldr	r1, [pc, #208]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7fd fcec 	bl	8000de4 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fd fce8 	bl	8000de4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e04f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 020c 	and.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	429a      	cmp	r2, r3
 8003436:	d1eb      	bne.n	8003410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d20c      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e032      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4916      	ldr	r1, [pc, #88]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	490e      	ldr	r1, [pc, #56]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349e:	f000 f821 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490a      	ldr	r1, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fc4c 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08008efc 	.word	0x08008efc
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e8:	b090      	sub	sp, #64	; 0x40
 80034ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
 80034f0:	2300      	movs	r3, #0
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	2300      	movs	r3, #0
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d00d      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x40>
 8003508:	2b08      	cmp	r3, #8
 800350a:	f200 80a1 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x3a>
 8003516:	e09b      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_GetSysClockFreq+0x184>)
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800351c:	e09b      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351e:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003522:	e098      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352e:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d028      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	2200      	movs	r2, #0
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	627a      	str	r2, [r7, #36]	; 0x24
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800354c:	2100      	movs	r1, #0
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 8003550:	fb03 f201 	mul.w	r2, r3, r1
 8003554:	2300      	movs	r3, #0
 8003556:	fb00 f303 	mul.w	r3, r0, r3
 800355a:	4413      	add	r3, r2
 800355c:	4a43      	ldr	r2, [pc, #268]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 800355e:	fba0 1202 	umull	r1, r2, r0, r2
 8003562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003564:	460a      	mov	r2, r1
 8003566:	62ba      	str	r2, [r7, #40]	; 0x28
 8003568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356a:	4413      	add	r3, r2
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2200      	movs	r2, #0
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	61fa      	str	r2, [r7, #28]
 8003576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800357e:	f7fc fe7f 	bl	8000280 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4613      	mov	r3, r2
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358a:	e053      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	2200      	movs	r2, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	617a      	str	r2, [r7, #20]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800359e:	f04f 0b00 	mov.w	fp, #0
 80035a2:	4652      	mov	r2, sl
 80035a4:	465b      	mov	r3, fp
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	0159      	lsls	r1, r3, #5
 80035b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b4:	0150      	lsls	r0, r2, #5
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ebb2 080a 	subs.w	r8, r2, sl
 80035be:	eb63 090b 	sbc.w	r9, r3, fp
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035d6:	ebb2 0408 	subs.w	r4, r2, r8
 80035da:	eb63 0509 	sbc.w	r5, r3, r9
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	00eb      	lsls	r3, r5, #3
 80035e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ec:	00e2      	lsls	r2, r4, #3
 80035ee:	4614      	mov	r4, r2
 80035f0:	461d      	mov	r5, r3
 80035f2:	eb14 030a 	adds.w	r3, r4, sl
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	eb45 030b 	adc.w	r3, r5, fp
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360a:	4629      	mov	r1, r5
 800360c:	028b      	lsls	r3, r1, #10
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003614:	4621      	mov	r1, r4
 8003616:	028a      	lsls	r2, r1, #10
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	2200      	movs	r2, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	60fa      	str	r2, [r7, #12]
 8003624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003628:	f7fc fe2a 	bl	8000280 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetSysClockFreq+0x184>)
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003658:	4618      	mov	r0, r3
 800365a:	3740      	adds	r7, #64	; 0x40
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	017d7840 	.word	0x017d7840

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07b      	b.n	8003792 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036aa:	d009      	beq.n	80036c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
 80036b2:	e005      	b.n	80036c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd f93e 	bl	800095c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	ea42 0103 	orr.w	r1, r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 0104 	and.w	r1, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0210 	and.w	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b088      	sub	sp, #32
 800379e:	af02      	add	r7, sp, #8
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037be:	e0fb      	b.n	80039b8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c8:	d112      	bne.n	80037f0 <HAL_SPI_Receive+0x56>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2204      	movs	r2, #4
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f8ef 	bl	80039ca <HAL_SPI_TransmitReceive>
 80037ec:	4603      	mov	r3, r0
 80037ee:	e0e8      	b.n	80039c2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_SPI_Receive+0x64>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0e1      	b.n	80039c2 <HAL_SPI_Receive+0x228>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003806:	f7fd faed 	bl	8000de4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_Receive+0x7e>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800381c:	e0cc      	b.n	80039b8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2204      	movs	r2, #4
 8003822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	d10f      	bne.n	8003886 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003874:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003884:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d007      	beq.n	80038a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d16a      	bne.n	8003982 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038ac:	e032      	b.n	8003914 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d115      	bne.n	80038e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f103 020c 	add.w	r2, r3, #12
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038e6:	e015      	b.n	8003914 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e8:	f7fd fa7c 	bl	8000de4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d803      	bhi.n	8003900 <HAL_SPI_Receive+0x166>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fe:	d102      	bne.n	8003906 <HAL_SPI_Receive+0x16c>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003912:	e051      	b.n	80039b8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1c7      	bne.n	80038ae <HAL_SPI_Receive+0x114>
 800391e:	e035      	b.n	800398c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d113      	bne.n	8003956 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	b292      	uxth	r2, r2
 800393a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003954:	e015      	b.n	8003982 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003956:	f7fd fa45 	bl	8000de4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d803      	bhi.n	800396e <HAL_SPI_Receive+0x1d4>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800396c:	d102      	bne.n	8003974 <HAL_SPI_Receive+0x1da>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003980:	e01a      	b.n	80039b8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1c9      	bne.n	8003920 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	6839      	ldr	r1, [r7, #0]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fb65 	bl	8004060 <SPI_EndRxTransaction>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
 80039ae:	e003      	b.n	80039b8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b08c      	sub	sp, #48	; 0x30
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039d8:	2301      	movs	r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_SPI_TransmitReceive+0x26>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e198      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x358>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039f8:	f7fd f9f4 	bl	8000de4 <HAL_GetTick>
 80039fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d00f      	beq.n	8003a3a <HAL_SPI_TransmitReceive+0x70>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a20:	d107      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x68>
 8003a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
 8003a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a38:	e16d      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x82>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x82>
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a52:	e160      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d003      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2205      	movs	r2, #5
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	887a      	ldrh	r2, [r7, #2]
 8003a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d007      	beq.n	8003abc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	d17c      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x10a>
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d16a      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	881a      	ldrh	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	1c9a      	adds	r2, r3, #2
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af8:	e057      	b.n	8003baa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d11b      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x176>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_SPI_TransmitReceive+0x176>
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d113      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	1c9a      	adds	r2, r3, #2
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d119      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x1b8>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d014      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	b292      	uxth	r2, r2
 8003b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b82:	f7fd f92f 	bl	8000de4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d80b      	bhi.n	8003baa <HAL_SPI_TransmitReceive+0x1e0>
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b98:	d007      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ba8:	e0b5      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a2      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x130>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d19d      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x130>
 8003bbe:	e080      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x204>
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d16f      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e05b      	b.n	8003cae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11c      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x274>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x274>
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d114      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d119      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x2b6>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c80:	f7fd f8b0 	bl	8000de4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d803      	bhi.n	8003c98 <HAL_SPI_TransmitReceive+0x2ce>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x2d4>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d107      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003cac:	e033      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d19e      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x22c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d199      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fa30 	bl	800412c <SPI_EndRxTxTransaction>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cde:	e01a      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0c:	e003      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3730      	adds	r7, #48	; 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10e      	bne.n	8003d6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
    return;
 8003d6a:	e0ce      	b.n	8003f0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_SPI_IRQHandler+0x5e>
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
    return;
 8003d88:	e0bf      	b.n	8003f0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_SPI_IRQHandler+0x7e>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d105      	bne.n	8003daa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80b0 	beq.w	8003f0a <HAL_SPI_IRQHandler+0x1de>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80aa 	beq.w	8003f0a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d023      	beq.n	8003e08 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d011      	beq.n	8003df0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	e00b      	b.n	8003e08 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
        return;
 8003e06:	e080      	b.n	8003f0a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d014      	beq.n	8003e3c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04f      	beq.n	8003f08 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <HAL_SPI_IRQHandler+0x168>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d034      	beq.n	8003efe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0203 	bic.w	r2, r2, #3
 8003ea2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d011      	beq.n	8003ed0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb0:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <HAL_SPI_IRQHandler+0x1e4>)
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd f983 	bl	80011c4 <HAL_DMA_Abort_IT>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d016      	beq.n	8003f06 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <HAL_SPI_IRQHandler+0x1e4>)
 8003ede:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fd f96d 	bl	80011c4 <HAL_DMA_Abort_IT>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003efc:	e003      	b.n	8003f06 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f808 	bl	8003f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f04:	e000      	b.n	8003f08 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003f06:	bf00      	nop
    return;
 8003f08:	bf00      	nop
  }
}
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	08003f29 	.word	0x08003f29

08003f14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff ffe6 	bl	8003f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f60:	f7fc ff40 	bl	8000de4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f70:	f7fc ff38 	bl	8000de4 <HAL_GetTick>
 8003f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	015b      	lsls	r3, r3, #5
 8003f7c:	0d1b      	lsrs	r3, r3, #20
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f86:	e054      	b.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8e:	d050      	beq.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f90:	f7fc ff28 	bl	8000de4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d902      	bls.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d13d      	bne.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fbe:	d111      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc8:	d004      	beq.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d107      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fec:	d10f      	bne.n	800400e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800400c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e017      	b.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3b01      	subs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d19b      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000000 	.word	0x20000000

08004060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004074:	d111      	bne.n	800409a <SPI_EndRxTransaction+0x3a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407e:	d004      	beq.n	800408a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d107      	bne.n	800409a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a2:	d12a      	bne.n	80040fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ac:	d012      	beq.n	80040d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ff49 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02d      	beq.n	8004120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e026      	b.n	8004122 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	2101      	movs	r1, #1
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff ff36 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01a      	beq.n	8004120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e013      	b.n	8004122 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2200      	movs	r2, #0
 8004102:	2101      	movs	r1, #1
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff23 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e000      	b.n	8004122 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2201      	movs	r2, #1
 8004140:	2102      	movs	r1, #2
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff ff04 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e032      	b.n	80041c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <SPI_EndRxTxTransaction+0xa0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <SPI_EndRxTxTransaction+0xa4>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	0d5b      	lsrs	r3, r3, #21
 800416a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800417c:	d112      	bne.n	80041a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2200      	movs	r2, #0
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff fee1 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d016      	beq.n	80041c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e00f      	b.n	80041c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d0f2      	beq.n	80041a4 <SPI_EndRxTxTransaction+0x78>
 80041be:	e000      	b.n	80041c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80041c0:	bf00      	nop
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000000 	.word	0x20000000
 80041d0:	165e9f81 	.word	0x165e9f81

080041d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e097      	b.n	8004318 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fc fc81 	bl	8000b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004218:	f023 0307 	bic.w	r3, r3, #7
 800421c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 f879 	bl	8004320 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	4313      	orrs	r3, r2
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004274:	f023 030c 	bic.w	r3, r3, #12
 8004278:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4313      	orrs	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	011a      	lsls	r2, r3, #4
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	031b      	lsls	r3, r3, #12
 80042a4:	4313      	orrs	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	4313      	orrs	r3, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3a      	ldr	r2, [pc, #232]	; (800441c <TIM_Base_SetConfig+0xfc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00f      	beq.n	8004358 <TIM_Base_SetConfig+0x38>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d00b      	beq.n	8004358 <TIM_Base_SetConfig+0x38>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <TIM_Base_SetConfig+0x100>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_Base_SetConfig+0x38>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a36      	ldr	r2, [pc, #216]	; (8004424 <TIM_Base_SetConfig+0x104>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0x38>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a35      	ldr	r2, [pc, #212]	; (8004428 <TIM_Base_SetConfig+0x108>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2b      	ldr	r2, [pc, #172]	; (800441c <TIM_Base_SetConfig+0xfc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01b      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d017      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <TIM_Base_SetConfig+0x100>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a27      	ldr	r2, [pc, #156]	; (8004424 <TIM_Base_SetConfig+0x104>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <TIM_Base_SetConfig+0x108>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a25      	ldr	r2, [pc, #148]	; (800442c <TIM_Base_SetConfig+0x10c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <TIM_Base_SetConfig+0x110>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_Base_SetConfig+0x8a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <TIM_Base_SetConfig+0x114>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a0e      	ldr	r2, [pc, #56]	; (800441c <TIM_Base_SetConfig+0xfc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d103      	bne.n	80043f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d105      	bne.n	800440e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]
  }
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800

08004438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e050      	b.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d013      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a18      	ldr	r2, [pc, #96]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a16      	ldr	r2, [pc, #88]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10c      	bne.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40014000 	.word	0x40014000

08004514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004514:	b084      	sub	sp, #16
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	f107 001c 	add.w	r0, r7, #28
 8004522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004526:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800452a:	2b01      	cmp	r3, #1
 800452c:	d123      	bne.n	8004576 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004556:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f001 fae2 	bl	8005b34 <USB_CoreReset>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e01b      	b.n	80045ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f001 fad6 	bl	8005b34 <USB_CoreReset>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800458c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
 80045a0:	e005      	b.n	80045ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045ae:	7fbb      	ldrb	r3, [r7, #30]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10b      	bne.n	80045cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f043 0206 	orr.w	r2, r3, #6
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d8:	b004      	add	sp, #16
 80045da:	4770      	bx	lr

080045dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d165      	bne.n	80046bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a41      	ldr	r2, [pc, #260]	; (80046f8 <USB_SetTurnaroundTime+0x11c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d906      	bls.n	8004606 <USB_SetTurnaroundTime+0x2a>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a40      	ldr	r2, [pc, #256]	; (80046fc <USB_SetTurnaroundTime+0x120>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d202      	bcs.n	8004606 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004600:	230f      	movs	r3, #15
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e062      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a3c      	ldr	r2, [pc, #240]	; (80046fc <USB_SetTurnaroundTime+0x120>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d306      	bcc.n	800461c <USB_SetTurnaroundTime+0x40>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a3b      	ldr	r2, [pc, #236]	; (8004700 <USB_SetTurnaroundTime+0x124>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d202      	bcs.n	800461c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004616:	230e      	movs	r3, #14
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e057      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a38      	ldr	r2, [pc, #224]	; (8004700 <USB_SetTurnaroundTime+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d306      	bcc.n	8004632 <USB_SetTurnaroundTime+0x56>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a37      	ldr	r2, [pc, #220]	; (8004704 <USB_SetTurnaroundTime+0x128>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d202      	bcs.n	8004632 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800462c:	230d      	movs	r3, #13
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e04c      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a33      	ldr	r2, [pc, #204]	; (8004704 <USB_SetTurnaroundTime+0x128>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d306      	bcc.n	8004648 <USB_SetTurnaroundTime+0x6c>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a32      	ldr	r2, [pc, #200]	; (8004708 <USB_SetTurnaroundTime+0x12c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d802      	bhi.n	8004648 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004642:	230c      	movs	r3, #12
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e041      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <USB_SetTurnaroundTime+0x12c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d906      	bls.n	800465e <USB_SetTurnaroundTime+0x82>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a2e      	ldr	r2, [pc, #184]	; (800470c <USB_SetTurnaroundTime+0x130>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d802      	bhi.n	800465e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004658:	230b      	movs	r3, #11
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e036      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a2a      	ldr	r2, [pc, #168]	; (800470c <USB_SetTurnaroundTime+0x130>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d906      	bls.n	8004674 <USB_SetTurnaroundTime+0x98>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <USB_SetTurnaroundTime+0x134>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d802      	bhi.n	8004674 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800466e:	230a      	movs	r3, #10
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e02b      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <USB_SetTurnaroundTime+0x134>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d906      	bls.n	800468a <USB_SetTurnaroundTime+0xae>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <USB_SetTurnaroundTime+0x138>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d202      	bcs.n	800468a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004684:	2309      	movs	r3, #9
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e020      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <USB_SetTurnaroundTime+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d306      	bcc.n	80046a0 <USB_SetTurnaroundTime+0xc4>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <USB_SetTurnaroundTime+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d802      	bhi.n	80046a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800469a:	2308      	movs	r3, #8
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e015      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <USB_SetTurnaroundTime+0x13c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d906      	bls.n	80046b6 <USB_SetTurnaroundTime+0xda>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <USB_SetTurnaroundTime+0x140>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d202      	bcs.n	80046b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046b0:	2307      	movs	r3, #7
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e00a      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046b6:	2306      	movs	r3, #6
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	e007      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046c2:	2309      	movs	r3, #9
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e001      	b.n	80046cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046c8:	2309      	movs	r3, #9
 80046ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	00d8acbf 	.word	0x00d8acbf
 80046fc:	00e4e1c0 	.word	0x00e4e1c0
 8004700:	00f42400 	.word	0x00f42400
 8004704:	01067380 	.word	0x01067380
 8004708:	011a499f 	.word	0x011a499f
 800470c:	01312cff 	.word	0x01312cff
 8004710:	014ca43f 	.word	0x014ca43f
 8004714:	016e3600 	.word	0x016e3600
 8004718:	01a6ab1f 	.word	0x01a6ab1f
 800471c:	01e84800 	.word	0x01e84800

08004720 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f043 0201 	orr.w	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 0201 	bic.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d115      	bne.n	80047b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004792:	200a      	movs	r0, #10
 8004794:	f7fc fb32 	bl	8000dfc <HAL_Delay>
      ms += 10U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	330a      	adds	r3, #10
 800479c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 f939 	bl	8005a16 <USB_GetMode>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d01e      	beq.n	80047e8 <USB_SetCurrentMode+0x84>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2bc7      	cmp	r3, #199	; 0xc7
 80047ae:	d9f0      	bls.n	8004792 <USB_SetCurrentMode+0x2e>
 80047b0:	e01a      	b.n	80047e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d115      	bne.n	80047e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047c4:	200a      	movs	r0, #10
 80047c6:	f7fc fb19 	bl	8000dfc <HAL_Delay>
      ms += 10U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	330a      	adds	r3, #10
 80047ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 f920 	bl	8005a16 <USB_GetMode>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <USB_SetCurrentMode+0x84>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2bc7      	cmp	r3, #199	; 0xc7
 80047e0:	d9f0      	bls.n	80047c4 <USB_SetCurrentMode+0x60>
 80047e2:	e001      	b.n	80047e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e005      	b.n	80047f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2bc8      	cmp	r3, #200	; 0xc8
 80047ec:	d101      	bne.n	80047f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047fc:	b084      	sub	sp, #16
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800480a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e009      	b.n	8004830 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3340      	adds	r3, #64	; 0x40
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	2200      	movs	r2, #0
 8004828:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3301      	adds	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b0e      	cmp	r3, #14
 8004834:	d9f2      	bls.n	800481c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004836:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11c      	bne.n	8004878 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
 8004876:	e00b      	b.n	8004890 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800489c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d10d      	bne.n	80048c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048ac:	2100      	movs	r1, #0
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f968 	bl	8004b84 <USB_SetDevSpeed>
 80048b4:	e008      	b.n	80048c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048b6:	2101      	movs	r1, #1
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f963 	bl	8004b84 <USB_SetDevSpeed>
 80048be:	e003      	b.n	80048c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048c0:	2103      	movs	r1, #3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f95e 	bl	8004b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048c8:	2110      	movs	r1, #16
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8fa 	bl	8004ac4 <USB_FlushTxFifo>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f924 	bl	8004b28 <USB_FlushRxFifo>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	461a      	mov	r2, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fc:	461a      	mov	r2, r3
 80048fe:	2300      	movs	r3, #0
 8004900:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	461a      	mov	r2, r3
 800490a:	2300      	movs	r3, #0
 800490c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e043      	b.n	800499c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492a:	d118      	bne.n	800495e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	461a      	mov	r2, r3
 8004940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e013      	b.n	8004970 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e008      	b.n	8004970 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	461a      	mov	r2, r3
 800497e:	2300      	movs	r3, #0
 8004980:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	461a      	mov	r2, r3
 8004990:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004994:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3301      	adds	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049a0:	461a      	mov	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d3b5      	bcc.n	8004914 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	e043      	b.n	8004a36 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c4:	d118      	bne.n	80049f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e013      	b.n	8004a0a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e008      	b.n	8004a0a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	2300      	movs	r3, #0
 8004a08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3301      	adds	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d3b5      	bcc.n	80049ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f043 0210 	orr.w	r2, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <USB_DevInit+0x2c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f043 0208 	orr.w	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004abc:	b004      	add	sp, #16
 8004abe:	4770      	bx	lr
 8004ac0:	803c3800 	.word	0x803c3800

08004ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ade:	d901      	bls.n	8004ae4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e01b      	b.n	8004b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	daf2      	bge.n	8004ad2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	019b      	lsls	r3, r3, #6
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b08:	d901      	bls.n	8004b0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e006      	b.n	8004b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d0f0      	beq.n	8004afc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b40:	d901      	bls.n	8004b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e018      	b.n	8004b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	daf2      	bge.n	8004b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2210      	movs	r2, #16
 8004b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b64:	d901      	bls.n	8004b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e006      	b.n	8004b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d0f0      	beq.n	8004b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0306 	and.w	r3, r3, #6
 8004bce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
 8004bda:	e00a      	b.n	8004bf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d002      	beq.n	8004be8 <USB_GetDevSpeed+0x32>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d102      	bne.n	8004bee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004be8:	2302      	movs	r3, #2
 8004bea:	75fb      	strb	r3, [r7, #23]
 8004bec:	e001      	b.n	8004bf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bee:	230f      	movs	r3, #15
 8004bf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13a      	bne.n	8004c92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d155      	bne.n	8004d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	059b      	lsls	r3, r3, #22
 8004c76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e036      	b.n	8004d00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11a      	bne.n	8004d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	791b      	ldrb	r3, [r3, #4]
 8004ce4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d161      	bne.n	8004df0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d42:	d11f      	bne.n	8004d84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	2101      	movs	r1, #1
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da4:	4013      	ands	r3, r2
 8004da6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0159      	lsls	r1, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de6:	4619      	mov	r1, r3
 8004de8:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <USB_DeactivateEndpoint+0x1b0>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	e060      	b.n	8004eb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e06:	d11f      	bne.n	8004e48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	2101      	movs	r1, #1
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	43db      	mvns	r3, r3
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e68:	4013      	ands	r3, r2
 8004e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	43db      	mvns	r3, r3
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	440b      	add	r3, r1
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <USB_DeactivateEndpoint+0x1b4>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	ec337800 	.word	0xec337800
 8004ec4:	eff37800 	.word	0xeff37800

08004ec8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 817a 	bne.w	80051de <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d132      	bne.n	8004f58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	0cdb      	lsrs	r3, r3, #19
 8004f52:	04db      	lsls	r3, r3, #19
 8004f54:	6113      	str	r3, [r2, #16]
 8004f56:	e092      	b.n	800507e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f72:	0cdb      	lsrs	r3, r3, #19
 8004f74:	04db      	lsls	r3, r3, #19
 8004f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11a      	bne.n	8004fd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fd4:	6113      	str	r3, [r2, #16]
 8004fd6:	e01b      	b.n	8005010 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6919      	ldr	r1, [r3, #16]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	440b      	add	r3, r1
 8004ff0:	1e59      	subs	r1, r3, #1
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ffa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ffc:	4ba2      	ldr	r3, [pc, #648]	; (8005288 <USB_EPStartXfer+0x3c0>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	0148      	lsls	r0, r1, #5
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	4401      	add	r1, r0
 8005008:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800500c:	4313      	orrs	r3, r2
 800500e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005026:	69b9      	ldr	r1, [r7, #24]
 8005028:	0148      	lsls	r0, r1, #5
 800502a:	69f9      	ldr	r1, [r7, #28]
 800502c:	4401      	add	r1, r0
 800502e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005032:	4313      	orrs	r3, r2
 8005034:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	791b      	ldrb	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d11f      	bne.n	800507e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800505c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005078:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800507c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d14b      	bne.n	800511c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	791b      	ldrb	r3, [r3, #4]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d128      	bne.n	80050fa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d110      	bne.n	80050da <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	e00f      	b.n	80050fa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005114:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e165      	b.n	80053e8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	791b      	ldrb	r3, [r3, #4]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d015      	beq.n	8005170 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 814d 	beq.w	80053e8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	2101      	movs	r1, #1
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	69f9      	ldr	r1, [r7, #28]
 8005166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516a:	4313      	orrs	r3, r2
 800516c:	634b      	str	r3, [r1, #52]	; 0x34
 800516e:	e13b      	b.n	80053e8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d110      	bne.n	80051a2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e00f      	b.n	80051c2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	b298      	uxth	r0, r3
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4603      	mov	r3, r0
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f9b8 	bl	800554c <USB_WritePacket>
 80051dc:	e104      	b.n	80053e8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	0cdb      	lsrs	r3, r3, #19
 80051fa:	04db      	lsls	r3, r3, #19
 80051fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005220:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d131      	bne.n	800528c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005256:	69b9      	ldr	r1, [r7, #24]
 8005258:	0148      	lsls	r0, r1, #5
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	4401      	add	r1, r0
 800525e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005262:	4313      	orrs	r3, r2
 8005264:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005284:	6113      	str	r3, [r2, #16]
 8005286:	e061      	b.n	800534c <USB_EPStartXfer+0x484>
 8005288:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d123      	bne.n	80052dc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052aa:	69b9      	ldr	r1, [r7, #24]
 80052ac:	0148      	lsls	r0, r1, #5
 80052ae:	69f9      	ldr	r1, [r7, #28]
 80052b0:	4401      	add	r1, r0
 80052b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d8:	6113      	str	r3, [r2, #16]
 80052da:	e037      	b.n	800534c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4413      	add	r3, r2
 80052e6:	1e5a      	subs	r2, r3, #1
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	8afa      	ldrh	r2, [r7, #22]
 80052f8:	fb03 f202 	mul.w	r2, r3, r2
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	04d9      	lsls	r1, r3, #19
 8005312:	4b38      	ldr	r3, [pc, #224]	; (80053f4 <USB_EPStartXfer+0x52c>)
 8005314:	400b      	ands	r3, r1
 8005316:	69b9      	ldr	r1, [r7, #24]
 8005318:	0148      	lsls	r0, r1, #5
 800531a:	69f9      	ldr	r1, [r7, #28]
 800531c:	4401      	add	r1, r0
 800531e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005322:	4313      	orrs	r3, r2
 8005324:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	0148      	lsls	r0, r1, #5
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	4401      	add	r1, r0
 8005344:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10d      	bne.n	800536e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	68d9      	ldr	r1, [r3, #12]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536a:	460a      	mov	r2, r1
 800536c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d128      	bne.n	80053c8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d110      	bne.n	80053a8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e00f      	b.n	80053c8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	1ff80000 	.word	0x1ff80000

080053f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d14a      	bne.n	80054ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542e:	f040 8086 	bne.w	800553e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005454:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	7812      	ldrb	r2, [r2, #0]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005478:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f242 7210 	movw	r2, #10000	; 0x2710
 8005486:	4293      	cmp	r3, r2
 8005488:	d902      	bls.n	8005490 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
          break;
 800548e:	e056      	b.n	800553e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a8:	d0e7      	beq.n	800547a <USB_EPStopXfer+0x82>
 80054aa:	e048      	b.n	800553e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c4:	d13b      	bne.n	800553e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	7812      	ldrb	r2, [r2, #0]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800550c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f242 7210 	movw	r2, #10000	; 0x2710
 800551a:	4293      	cmp	r3, r2
 800551c:	d902      	bls.n	8005524 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
          break;
 8005522:	e00c      	b.n	800553e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553c:	d0e7      	beq.n	800550e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005540:	4618      	mov	r0, r3
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	460b      	mov	r3, r1
 800555c:	71fb      	strb	r3, [r7, #7]
 800555e:	4613      	mov	r3, r2
 8005560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800556a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d123      	bne.n	80055ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005572:	88bb      	ldrh	r3, [r7, #4]
 8005574:	3303      	adds	r3, #3
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e018      	b.n	80055b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	031a      	lsls	r2, r3, #12
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558c:	461a      	mov	r2, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3301      	adds	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d3e2      	bcc.n	8005580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3724      	adds	r7, #36	; 0x24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b08b      	sub	sp, #44	; 0x2c
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	089b      	lsrs	r3, r3, #2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	e014      	b.n	800561e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	3301      	adds	r3, #1
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	3301      	adds	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	3301      	adds	r3, #1
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	3301      	adds	r3, #1
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	3301      	adds	r3, #1
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	429a      	cmp	r2, r3
 8005624:	d3e6      	bcc.n	80055f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005626:	8bfb      	ldrh	r3, [r7, #30]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01e      	beq.n	800566a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	461a      	mov	r2, r3
 8005638:	f107 0310 	add.w	r3, r7, #16
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
 800564c:	b2da      	uxtb	r2, r3
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	701a      	strb	r2, [r3, #0]
      i++;
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	3301      	adds	r3, #1
 8005656:	623b      	str	r3, [r7, #32]
      pDest++;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	3301      	adds	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800565e:	8bfb      	ldrh	r3, [r7, #30]
 8005660:	3b01      	subs	r3, #1
 8005662:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005664:	8bfb      	ldrh	r3, [r7, #30]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1ea      	bne.n	8005640 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800566c:	4618      	mov	r0, r3
 800566e:	372c      	adds	r7, #44	; 0x2c
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d12c      	bne.n	80056ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	db12      	blt.n	80056cc <USB_EPSetStall+0x54>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00f      	beq.n	80056cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	e02b      	b.n	8005746 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db12      	blt.n	8005726 <USB_EPSetStall+0xae>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00f      	beq.n	8005726 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005724:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d128      	bne.n	80057c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800578e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d003      	beq.n	80057a0 <USB_EPClearStall+0x4c>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d138      	bne.n	8005812 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e027      	b.n	8005812 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d003      	beq.n	80057f2 <USB_EPClearStall+0x9e>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d10f      	bne.n	8005812 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005810:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005842:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800589a:	f023 0302 	bic.w	r3, r3, #2
 800589e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058c8:	f023 0303 	bic.w	r3, r3, #3
 80058cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	0c1b      	lsrs	r3, r3, #16
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	b29b      	uxth	r3, r3
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	4013      	ands	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059ac:	68bb      	ldr	r3, [r7, #8]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ea:	01db      	lsls	r3, r3, #7
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4013      	ands	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a08:	68bb      	ldr	r3, [r7, #8]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f003 0301 	and.w	r3, r3, #1
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	460b      	mov	r3, r1
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	333c      	adds	r3, #60	; 0x3c
 8005a8e:	3304      	adds	r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <USB_EP0_OutStart+0xb8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d90a      	bls.n	8005ab2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aac:	d101      	bne.n	8005ab2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e037      	b.n	8005b22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae0:	f043 0318 	orr.w	r3, r3, #24
 8005ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005af8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005afa:	7afb      	ldrb	r3, [r7, #11]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10f      	bne.n	8005b20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	4f54300a 	.word	0x4f54300a

08005b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b4c:	d901      	bls.n	8005b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e01b      	b.n	8005b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	daf2      	bge.n	8005b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b76:	d901      	bls.n	8005b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d0f0      	beq.n	8005b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ba4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ba8:	f002 fc8a 	bl	80084c0 <USBD_static_malloc>
 8005bac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	32b0      	adds	r2, #176	; 0xb0
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e0d4      	b.n	8005d72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005bc8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005bcc:	2100      	movs	r1, #0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f002 fcda 	bl	8008588 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	32b0      	adds	r2, #176	; 0xb0
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32b0      	adds	r2, #176	; 0xb0
 8005bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7c1b      	ldrb	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d138      	bne.n	8005c72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c00:	4b5e      	ldr	r3, [pc, #376]	; (8005d7c <USBD_CDC_Init+0x1e4>)
 8005c02:	7819      	ldrb	r1, [r3, #0]
 8005c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c08:	2202      	movs	r2, #2
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f002 fb35 	bl	800827a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c10:	4b5a      	ldr	r3, [pc, #360]	; (8005d7c <USBD_CDC_Init+0x1e4>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3324      	adds	r3, #36	; 0x24
 8005c26:	2201      	movs	r2, #1
 8005c28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c2a:	4b55      	ldr	r3, [pc, #340]	; (8005d80 <USBD_CDC_Init+0x1e8>)
 8005c2c:	7819      	ldrb	r1, [r3, #0]
 8005c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c32:	2202      	movs	r2, #2
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f002 fb20 	bl	800827a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c3a:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <USBD_CDC_Init+0x1e8>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f003 020f 	and.w	r2, r3, #15
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c52:	2201      	movs	r2, #1
 8005c54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c56:	4b4b      	ldr	r3, [pc, #300]	; (8005d84 <USBD_CDC_Init+0x1ec>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	3326      	adds	r3, #38	; 0x26
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e035      	b.n	8005cde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c72:	4b42      	ldr	r3, [pc, #264]	; (8005d7c <USBD_CDC_Init+0x1e4>)
 8005c74:	7819      	ldrb	r1, [r3, #0]
 8005c76:	2340      	movs	r3, #64	; 0x40
 8005c78:	2202      	movs	r2, #2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f002 fafd 	bl	800827a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c80:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <USBD_CDC_Init+0x1e4>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	3324      	adds	r3, #36	; 0x24
 8005c96:	2201      	movs	r2, #1
 8005c98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c9a:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <USBD_CDC_Init+0x1e8>)
 8005c9c:	7819      	ldrb	r1, [r3, #0]
 8005c9e:	2340      	movs	r3, #64	; 0x40
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f002 fae9 	bl	800827a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ca8:	4b35      	ldr	r3, [pc, #212]	; (8005d80 <USBD_CDC_Init+0x1e8>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f003 020f 	and.w	r2, r3, #15
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cc4:	4b2f      	ldr	r3, [pc, #188]	; (8005d84 <USBD_CDC_Init+0x1ec>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3326      	adds	r3, #38	; 0x26
 8005cda:	2210      	movs	r2, #16
 8005cdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cde:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <USBD_CDC_Init+0x1ec>)
 8005ce0:	7819      	ldrb	r1, [r3, #0]
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f002 fac7 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <USBD_CDC_Init+0x1ec>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	2201      	movs	r2, #1
 8005d04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	33b0      	adds	r3, #176	; 0xb0
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e018      	b.n	8005d72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7c1b      	ldrb	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <USBD_CDC_Init+0x1e8>)
 8005d4a:	7819      	ldrb	r1, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f002 fb7e 	bl	8008458 <USBD_LL_PrepareReceive>
 8005d5c:	e008      	b.n	8005d70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <USBD_CDC_Init+0x1e8>)
 8005d60:	7819      	ldrb	r1, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f002 fb74 	bl	8008458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000093 	.word	0x20000093
 8005d80:	20000094 	.word	0x20000094
 8005d84:	20000095 	.word	0x20000095

08005d88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d94:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <USBD_CDC_DeInit+0xf8>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f002 fa93 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005da0:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <USBD_CDC_DeInit+0xf8>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2200      	movs	r2, #0
 8005db8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005dba:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <USBD_CDC_DeInit+0xfc>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f002 fa80 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <USBD_CDC_DeInit+0xfc>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dde:	2200      	movs	r2, #0
 8005de0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <USBD_CDC_DeInit+0x100>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 fa6c 	bl	80082c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <USBD_CDC_DeInit+0x100>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	f003 020f 	and.w	r2, r3, #15
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	3324      	adds	r3, #36	; 0x24
 8005e04:	2200      	movs	r2, #0
 8005e06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <USBD_CDC_DeInit+0x100>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f003 020f 	and.w	r2, r3, #15
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3326      	adds	r3, #38	; 0x26
 8005e1e:	2200      	movs	r2, #0
 8005e20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32b0      	adds	r2, #176	; 0xb0
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01f      	beq.n	8005e74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	33b0      	adds	r3, #176	; 0xb0
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32b0      	adds	r2, #176	; 0xb0
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 fb40 	bl	80084dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	32b0      	adds	r2, #176	; 0xb0
 8005e66:	2100      	movs	r1, #0
 8005e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000093 	.word	0x20000093
 8005e84:	20000094 	.word	0x20000094
 8005e88:	20000095 	.word	0x20000095

08005e8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	32b0      	adds	r2, #176	; 0xb0
 8005ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e0bf      	b.n	800603c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d050      	beq.n	8005f6a <USBD_CDC_Setup+0xde>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	f040 80af 	bne.w	800602c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88db      	ldrh	r3, [r3, #6]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d03a      	beq.n	8005f4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da1b      	bge.n	8005f18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	33b0      	adds	r3, #176	; 0xb0
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	88d2      	ldrh	r2, [r2, #6]
 8005efc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	88db      	ldrh	r3, [r3, #6]
 8005f02:	2b07      	cmp	r3, #7
 8005f04:	bf28      	it	cs
 8005f06:	2307      	movcs	r3, #7
 8005f08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	89fa      	ldrh	r2, [r7, #14]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fd89 	bl	8007a28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005f16:	e090      	b.n	800603a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	785a      	ldrb	r2, [r3, #1]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	88db      	ldrh	r3, [r3, #6]
 8005f26:	2b3f      	cmp	r3, #63	; 0x3f
 8005f28:	d803      	bhi.n	8005f32 <USBD_CDC_Setup+0xa6>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	88db      	ldrh	r3, [r3, #6]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	e000      	b.n	8005f34 <USBD_CDC_Setup+0xa8>
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f3a:	6939      	ldr	r1, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f42:	461a      	mov	r2, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fd9b 	bl	8007a80 <USBD_CtlPrepareRx>
      break;
 8005f4a:	e076      	b.n	800603a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	33b0      	adds	r3, #176	; 0xb0
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	7850      	ldrb	r0, [r2, #1]
 8005f62:	2200      	movs	r2, #0
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	4798      	blx	r3
      break;
 8005f68:	e067      	b.n	800603a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b0b      	cmp	r3, #11
 8005f70:	d851      	bhi.n	8006016 <USBD_CDC_Setup+0x18a>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <USBD_CDC_Setup+0xec>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005fa9 	.word	0x08005fa9
 8005f7c:	08006025 	.word	0x08006025
 8005f80:	08006017 	.word	0x08006017
 8005f84:	08006017 	.word	0x08006017
 8005f88:	08006017 	.word	0x08006017
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	08006017 	.word	0x08006017
 8005f94:	08006017 	.word	0x08006017
 8005f98:	08006017 	.word	0x08006017
 8005f9c:	08006017 	.word	0x08006017
 8005fa0:	08005fd3 	.word	0x08005fd3
 8005fa4:	08005ffd 	.word	0x08005ffd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d107      	bne.n	8005fc4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fb4:	f107 030a 	add.w	r3, r7, #10
 8005fb8:	2202      	movs	r2, #2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fd33 	bl	8007a28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fc2:	e032      	b.n	800602a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fcbd 	bl	8007946 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd0:	e02b      	b.n	800602a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d107      	bne.n	8005fee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fde:	f107 030d 	add.w	r3, r7, #13
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 fd1e 	bl	8007a28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fec:	e01d      	b.n	800602a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fca8 	bl	8007946 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8005ffa:	e016      	b.n	800602a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b03      	cmp	r3, #3
 8006006:	d00f      	beq.n	8006028 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 fc9b 	bl	8007946 <USBD_CtlError>
            ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006014:	e008      	b.n	8006028 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fc94 	bl	8007946 <USBD_CtlError>
          ret = USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	75fb      	strb	r3, [r7, #23]
          break;
 8006022:	e002      	b.n	800602a <USBD_CDC_Setup+0x19e>
          break;
 8006024:	bf00      	nop
 8006026:	e008      	b.n	800603a <USBD_CDC_Setup+0x1ae>
          break;
 8006028:	bf00      	nop
      }
      break;
 800602a:	e006      	b.n	800603a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fc89 	bl	8007946 <USBD_CtlError>
      ret = USBD_FAIL;
 8006034:	2303      	movs	r3, #3
 8006036:	75fb      	strb	r3, [r7, #23]
      break;
 8006038:	bf00      	nop
  }

  return (uint8_t)ret;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006056:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32b0      	adds	r2, #176	; 0xb0
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800606a:	2303      	movs	r3, #3
 800606c:	e065      	b.n	800613a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	32b0      	adds	r2, #176	; 0xb0
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 020f 	and.w	r2, r3, #15
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3318      	adds	r3, #24
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d02f      	beq.n	80060f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 020f 	and.w	r2, r3, #15
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	3318      	adds	r3, #24
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	f003 010f 	and.w	r1, r3, #15
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	460b      	mov	r3, r1
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	440b      	add	r3, r1
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4403      	add	r3, r0
 80060c0:	331c      	adds	r3, #28
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d112      	bne.n	80060f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	f003 020f 	and.w	r2, r3, #15
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3318      	adds	r3, #24
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060ea:	78f9      	ldrb	r1, [r7, #3]
 80060ec:	2300      	movs	r3, #0
 80060ee:	2200      	movs	r2, #0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f002 f990 	bl	8008416 <USBD_LL_Transmit>
 80060f6:	e01f      	b.n	8006138 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	33b0      	adds	r3, #176	; 0xb0
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	33b0      	adds	r3, #176	; 0xb0
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	32b0      	adds	r2, #176	; 0xb0
 8006158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32b0      	adds	r2, #176	; 0xb0
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e01a      	b.n	80061aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f002 f98e 	bl	800849a <USBD_LL_GetRxDataSize>
 800617e:	4602      	mov	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	33b0      	adds	r3, #176	; 0xb0
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061a4:	4611      	mov	r1, r2
 80061a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	32b0      	adds	r2, #176	; 0xb0
 80061c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e025      	b.n	8006220 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	33b0      	adds	r3, #176	; 0xb0
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01a      	beq.n	800621e <USBD_CDC_EP0_RxReady+0x6c>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061ee:	2bff      	cmp	r3, #255	; 0xff
 80061f0:	d015      	beq.n	800621e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	33b0      	adds	r3, #176	; 0xb0
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800620a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006212:	b292      	uxth	r2, r2
 8006214:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006230:	2182      	movs	r1, #130	; 0x82
 8006232:	4818      	ldr	r0, [pc, #96]	; (8006294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006234:	f000 fd4f 	bl	8006cd6 <USBD_GetEpDesc>
 8006238:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800623a:	2101      	movs	r1, #1
 800623c:	4815      	ldr	r0, [pc, #84]	; (8006294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800623e:	f000 fd4a 	bl	8006cd6 <USBD_GetEpDesc>
 8006242:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006244:	2181      	movs	r1, #129	; 0x81
 8006246:	4813      	ldr	r0, [pc, #76]	; (8006294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006248:	f000 fd45 	bl	8006cd6 <USBD_GetEpDesc>
 800624c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2210      	movs	r2, #16
 8006258:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d006      	beq.n	800626e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2200      	movs	r2, #0
 8006264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006268:	711a      	strb	r2, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d006      	beq.n	8006282 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800627c:	711a      	strb	r2, [r3, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2243      	movs	r2, #67	; 0x43
 8006286:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006288:	4b02      	ldr	r3, [pc, #8]	; (8006294 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000050 	.word	0x20000050

08006298 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062a0:	2182      	movs	r1, #130	; 0x82
 80062a2:	4818      	ldr	r0, [pc, #96]	; (8006304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062a4:	f000 fd17 	bl	8006cd6 <USBD_GetEpDesc>
 80062a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062aa:	2101      	movs	r1, #1
 80062ac:	4815      	ldr	r0, [pc, #84]	; (8006304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062ae:	f000 fd12 	bl	8006cd6 <USBD_GetEpDesc>
 80062b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062b4:	2181      	movs	r1, #129	; 0x81
 80062b6:	4813      	ldr	r0, [pc, #76]	; (8006304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062b8:	f000 fd0d 	bl	8006cd6 <USBD_GetEpDesc>
 80062bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2210      	movs	r2, #16
 80062c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d006      	beq.n	80062de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2200      	movs	r2, #0
 80062d4:	711a      	strb	r2, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f042 0202 	orr.w	r2, r2, #2
 80062dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	711a      	strb	r2, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f042 0202 	orr.w	r2, r2, #2
 80062f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2243      	movs	r2, #67	; 0x43
 80062f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000050 	.word	0x20000050

08006308 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006310:	2182      	movs	r1, #130	; 0x82
 8006312:	4818      	ldr	r0, [pc, #96]	; (8006374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006314:	f000 fcdf 	bl	8006cd6 <USBD_GetEpDesc>
 8006318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800631a:	2101      	movs	r1, #1
 800631c:	4815      	ldr	r0, [pc, #84]	; (8006374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800631e:	f000 fcda 	bl	8006cd6 <USBD_GetEpDesc>
 8006322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006324:	2181      	movs	r1, #129	; 0x81
 8006326:	4813      	ldr	r0, [pc, #76]	; (8006374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006328:	f000 fcd5 	bl	8006cd6 <USBD_GetEpDesc>
 800632c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2210      	movs	r2, #16
 8006338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2200      	movs	r2, #0
 8006344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006348:	711a      	strb	r2, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635c:	711a      	strb	r2, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2243      	movs	r2, #67	; 0x43
 8006366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000050 	.word	0x20000050

08006378 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	220a      	movs	r2, #10
 8006384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006386:	4b03      	ldr	r3, [pc, #12]	; (8006394 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	2000000c 	.word	0x2000000c

08006398 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e009      	b.n	80063c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	33b0      	adds	r3, #176	; 0xb0
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	32b0      	adds	r2, #176	; 0xb0
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e008      	b.n	8006404 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	32b0      	adds	r2, #176	; 0xb0
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	e004      	b.n	800643e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	32b0      	adds	r2, #176	; 0xb0
 800645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006462:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800646e:	2303      	movs	r3, #3
 8006470:	e025      	b.n	80064be <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006478:	2b00      	cmp	r3, #0
 800647a:	d11f      	bne.n	80064bc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2201      	movs	r2, #1
 8006480:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <USBD_CDC_TransmitPacket+0x7c>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f003 020f 	and.w	r2, r3, #15
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4403      	add	r3, r0
 800649e:	3318      	adds	r3, #24
 80064a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <USBD_CDC_TransmitPacket+0x7c>)
 80064a4:	7819      	ldrb	r1, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 ffaf 	bl	8008416 <USBD_LL_Transmit>

    ret = USBD_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000093 	.word	0x20000093

080064cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32b0      	adds	r2, #176	; 0xb0
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e018      	b.n	800652c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7c1b      	ldrb	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <USBD_CDC_ReceivePacket+0x68>)
 8006504:	7819      	ldrb	r1, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800650c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 ffa1 	bl	8008458 <USBD_LL_PrepareReceive>
 8006516:	e008      	b.n	800652a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <USBD_CDC_ReceivePacket+0x68>)
 800651a:	7819      	ldrb	r1, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006522:	2340      	movs	r3, #64	; 0x40
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 ff97 	bl	8008458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000094 	.word	0x20000094

08006538 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800654c:	2303      	movs	r3, #3
 800654e:	e01f      	b.n	8006590 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	79fa      	ldrb	r2, [r7, #7]
 8006582:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f001 fe11 	bl	80081ac <USBD_LL_Init>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e025      	b.n	80065fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32ae      	adds	r2, #174	; 0xae
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00f      	beq.n	80065ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32ae      	adds	r2, #174	; 0xae
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	f107 020e 	add.w	r2, r7, #14
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	4602      	mov	r2, r0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 fe19 	bl	8008244 <USBD_LL_Start>
 8006612:	4603      	mov	r3, r0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d009      	beq.n	8006660 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	78fa      	ldrb	r2, [r7, #3]
 8006656:	4611      	mov	r1, r2
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	4611      	mov	r1, r2
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f90e 	bl	80078d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066c4:	461a      	mov	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d01a      	beq.n	8006710 <USBD_LL_SetupStage+0x72>
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d822      	bhi.n	8006724 <USBD_LL_SetupStage+0x86>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <USBD_LL_SetupStage+0x4a>
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d00a      	beq.n	80066fc <USBD_LL_SetupStage+0x5e>
 80066e6:	e01d      	b.n	8006724 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fb65 	bl	8006dc0 <USBD_StdDevReq>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]
      break;
 80066fa:	e020      	b.n	800673e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fbcd 	bl	8006ea4 <USBD_StdItfReq>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
      break;
 800670e:	e016      	b.n	800673e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc2f 	bl	8006f7c <USBD_StdEPReq>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
      break;
 8006722:	e00c      	b.n	800673e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800672a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800672e:	b2db      	uxtb	r3, r3
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fde6 	bl	8008304 <USBD_LL_StallEP>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	bf00      	nop
  }

  return ret;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	460b      	mov	r3, r1
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d16e      	bne.n	800683e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006766:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800676e:	2b03      	cmp	r3, #3
 8006770:	f040 8098 	bne.w	80068a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	429a      	cmp	r2, r3
 800677e:	d913      	bls.n	80067a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	1ad2      	subs	r2, r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4293      	cmp	r3, r2
 8006798:	bf28      	it	cs
 800679a:	4613      	movcs	r3, r2
 800679c:	461a      	mov	r2, r3
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f001 f98a 	bl	8007aba <USBD_CtlContinueRx>
 80067a6:	e07d      	b.n	80068a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d014      	beq.n	80067e0 <USBD_LL_DataOutStage+0x98>
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d81d      	bhi.n	80067f6 <USBD_LL_DataOutStage+0xae>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <USBD_LL_DataOutStage+0x7c>
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d003      	beq.n	80067ca <USBD_LL_DataOutStage+0x82>
 80067c2:	e018      	b.n	80067f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	75bb      	strb	r3, [r7, #22]
            break;
 80067c8:	e018      	b.n	80067fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fa64 	bl	8006ca2 <USBD_CoreFindIF>
 80067da:	4603      	mov	r3, r0
 80067dc:	75bb      	strb	r3, [r7, #22]
            break;
 80067de:	e00d      	b.n	80067fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	4619      	mov	r1, r3
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fa66 	bl	8006cbc <USBD_CoreFindEP>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75bb      	strb	r3, [r7, #22]
            break;
 80067f4:	e002      	b.n	80067fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75bb      	strb	r3, [r7, #22]
            break;
 80067fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80067fc:	7dbb      	ldrb	r3, [r7, #22]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d119      	bne.n	8006836 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b03      	cmp	r3, #3
 800680c:	d113      	bne.n	8006836 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800680e:	7dba      	ldrb	r2, [r7, #22]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	32ae      	adds	r2, #174	; 0xae
 8006814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800681e:	7dba      	ldrb	r2, [r7, #22]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006826:	7dba      	ldrb	r2, [r7, #22]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	32ae      	adds	r2, #174	; 0xae
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f001 f950 	bl	8007adc <USBD_CtlSendStatus>
 800683c:	e032      	b.n	80068a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006844:	b2db      	uxtb	r3, r3
 8006846:	4619      	mov	r1, r3
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa37 	bl	8006cbc <USBD_CoreFindEP>
 800684e:	4603      	mov	r3, r0
 8006850:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006852:	7dbb      	ldrb	r3, [r7, #22]
 8006854:	2bff      	cmp	r3, #255	; 0xff
 8006856:	d025      	beq.n	80068a4 <USBD_LL_DataOutStage+0x15c>
 8006858:	7dbb      	ldrb	r3, [r7, #22]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d122      	bne.n	80068a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b03      	cmp	r3, #3
 8006868:	d117      	bne.n	800689a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800686a:	7dba      	ldrb	r2, [r7, #22]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	32ae      	adds	r2, #174	; 0xae
 8006870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00f      	beq.n	800689a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800687a:	7dba      	ldrb	r2, [r7, #22]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006882:	7dba      	ldrb	r2, [r7, #22]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	32ae      	adds	r2, #174	; 0xae
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	7afa      	ldrb	r2, [r7, #11]
 8006890:	4611      	mov	r1, r2
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	4798      	blx	r3
 8006896:	4603      	mov	r3, r0
 8006898:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	e000      	b.n	80068a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	460b      	mov	r3, r1
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d16f      	bne.n	80069a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3314      	adds	r3, #20
 80068c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d15a      	bne.n	8006988 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d914      	bls.n	8006908 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	461a      	mov	r2, r3
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f001 f8b2 	bl	8007a5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068fa:	2300      	movs	r3, #0
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 fda9 	bl	8008458 <USBD_LL_PrepareReceive>
 8006906:	e03f      	b.n	8006988 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	429a      	cmp	r2, r3
 8006912:	d11c      	bne.n	800694e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800691c:	429a      	cmp	r2, r3
 800691e:	d316      	bcc.n	800694e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800692a:	429a      	cmp	r2, r3
 800692c:	d20f      	bcs.n	800694e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f001 f893 	bl	8007a5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006940:	2300      	movs	r3, #0
 8006942:	2200      	movs	r2, #0
 8006944:	2100      	movs	r1, #0
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 fd86 	bl	8008458 <USBD_LL_PrepareReceive>
 800694c:	e01c      	b.n	8006988 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d10f      	bne.n	800697a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800697a:	2180      	movs	r1, #128	; 0x80
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f001 fcc1 	bl	8008304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f001 f8bd 	bl	8007b02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d03a      	beq.n	8006a08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7ff fe42 	bl	800661c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069a0:	e032      	b.n	8006a08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f985 	bl	8006cbc <USBD_CoreFindEP>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2bff      	cmp	r3, #255	; 0xff
 80069ba:	d025      	beq.n	8006a08 <USBD_LL_DataInStage+0x15a>
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d122      	bne.n	8006a08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d11c      	bne.n	8006a08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80069ce:	7dfa      	ldrb	r2, [r7, #23]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	32ae      	adds	r2, #174	; 0xae
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d014      	beq.n	8006a08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069de:	7dfa      	ldrb	r2, [r7, #23]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069e6:	7dfa      	ldrb	r2, [r7, #23]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	32ae      	adds	r2, #174	; 0xae
 80069ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	7afa      	ldrb	r2, [r7, #11]
 80069f4:	4611      	mov	r1, r2
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	4798      	blx	r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80069fe:	7dbb      	ldrb	r3, [r7, #22]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a04:	7dbb      	ldrb	r3, [r7, #22]
 8006a06:	e000      	b.n	8006a0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d014      	beq.n	8006a78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6852      	ldr	r2, [r2, #4]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	4611      	mov	r1, r2
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a74:	2303      	movs	r3, #3
 8006a76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a78:	2340      	movs	r3, #64	; 0x40
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fbfb 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2240      	movs	r2, #64	; 0x40
 8006a90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	2200      	movs	r2, #0
 8006a98:	2180      	movs	r1, #128	; 0x80
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fbed 	bl	800827a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2240      	movs	r2, #64	; 0x40
 8006aaa:	621a      	str	r2, [r3, #32]

  return ret;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	78fa      	ldrb	r2, [r7, #3]
 8006ac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d006      	beq.n	8006af8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2204      	movs	r2, #4
 8006afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d106      	bne.n	8006b30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d110      	bne.n	8006b74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	32ae      	adds	r2, #174	; 0xae
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e01c      	b.n	8006bda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d115      	bne.n	8006bd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	32ae      	adds	r2, #174	; 0xae
 8006bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32ae      	adds	r2, #174	; 0xae
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	32ae      	adds	r2, #174	; 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e01c      	b.n	8006c3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d115      	bne.n	8006c3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32ae      	adds	r2, #174	; 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	; 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	4611      	mov	r1, r2
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6852      	ldr	r2, [r2, #4]
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	4611      	mov	r1, r2
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d920      	bls.n	8006d40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d06:	e013      	b.n	8006d30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d08:	f107 030a 	add.w	r3, r7, #10
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6978      	ldr	r0, [r7, #20]
 8006d10:	f000 f81b 	bl	8006d4a <USBD_GetNextDesc>
 8006d14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d108      	bne.n	8006d30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	789b      	ldrb	r3, [r3, #2]
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d008      	beq.n	8006d3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	885b      	ldrh	r3, [r3, #2]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	897b      	ldrh	r3, [r7, #10]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d8e5      	bhi.n	8006d08 <USBD_GetEpDesc+0x32>
 8006d3c:	e000      	b.n	8006d40 <USBD_GetEpDesc+0x6a>
          break;
 8006d3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d40:	693b      	ldr	r3, [r7, #16]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	881a      	ldrh	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4413      	add	r3, r2
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d76:	68fb      	ldr	r3, [r7, #12]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006da2:	8a3b      	ldrh	r3, [r7, #16]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	b21a      	sxth	r2, r3
 8006da8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b21b      	sxth	r3, r3
 8006db0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006db2:	89fb      	ldrh	r3, [r7, #14]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d005      	beq.n	8006de6 <USBD_StdDevReq+0x26>
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d857      	bhi.n	8006e8e <USBD_StdDevReq+0xce>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <USBD_StdDevReq+0x42>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d153      	bne.n	8006e8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	32ae      	adds	r2, #174	; 0xae
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e04a      	b.n	8006e98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b09      	cmp	r3, #9
 8006e08:	d83b      	bhi.n	8006e82 <USBD_StdDevReq+0xc2>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBD_StdDevReq+0x50>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e65 	.word	0x08006e65
 8006e14:	08006e79 	.word	0x08006e79
 8006e18:	08006e83 	.word	0x08006e83
 8006e1c:	08006e6f 	.word	0x08006e6f
 8006e20:	08006e83 	.word	0x08006e83
 8006e24:	08006e43 	.word	0x08006e43
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e83 	.word	0x08006e83
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	08006e4d 	.word	0x08006e4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa3c 	bl	80072b8 <USBD_GetDescriptor>
          break;
 8006e40:	e024      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fba1 	bl	800758c <USBD_SetAddress>
          break;
 8006e4a:	e01f      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fbe0 	bl	8007614 <USBD_SetConfig>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
          break;
 8006e58:	e018      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fc83 	bl	8007768 <USBD_GetConfig>
          break;
 8006e62:	e013      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fcb4 	bl	80077d4 <USBD_GetStatus>
          break;
 8006e6c:	e00e      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fce3 	bl	800783c <USBD_SetFeature>
          break;
 8006e76:	e009      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fd07 	bl	800788e <USBD_ClrFeature>
          break;
 8006e80:	e004      	b.n	8006e8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fd5e 	bl	8007946 <USBD_CtlError>
          break;
 8006e8a:	bf00      	nop
      }
      break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fd58 	bl	8007946 <USBD_CtlError>
      break;
 8006e96:	bf00      	nop
  }

  return ret;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop

08006ea4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d005      	beq.n	8006eca <USBD_StdItfReq+0x26>
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d852      	bhi.n	8006f68 <USBD_StdItfReq+0xc4>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <USBD_StdItfReq+0x26>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d14e      	bne.n	8006f68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d840      	bhi.n	8006f5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	889b      	ldrh	r3, [r3, #4]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d836      	bhi.n	8006f50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	889b      	ldrh	r3, [r3, #4]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff fed9 	bl	8006ca2 <USBD_CoreFindIF>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d01d      	beq.n	8006f36 <USBD_StdItfReq+0x92>
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11a      	bne.n	8006f36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f00:	7bba      	ldrb	r2, [r7, #14]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	32ae      	adds	r2, #174	; 0xae
 8006f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00f      	beq.n	8006f30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f10:	7bba      	ldrb	r2, [r7, #14]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f18:	7bba      	ldrb	r2, [r7, #14]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	; 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f2e:	e004      	b.n	8006f3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f34:	e001      	b.n	8006f3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f36:	2303      	movs	r3, #3
 8006f38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	88db      	ldrh	r3, [r3, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d110      	bne.n	8006f64 <USBD_StdItfReq+0xc0>
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fdc7 	bl	8007adc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f4e:	e009      	b.n	8006f64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fcf7 	bl	8007946 <USBD_CtlError>
          break;
 8006f58:	e004      	b.n	8006f64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fcf2 	bl	8007946 <USBD_CtlError>
          break;
 8006f62:	e000      	b.n	8006f66 <USBD_StdItfReq+0xc2>
          break;
 8006f64:	bf00      	nop
      }
      break;
 8006f66:	e004      	b.n	8006f72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fceb 	bl	8007946 <USBD_CtlError>
      break;
 8006f70:	bf00      	nop
  }

  return ret;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	889b      	ldrh	r3, [r3, #4]
 8006f8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f98:	2b40      	cmp	r3, #64	; 0x40
 8006f9a:	d007      	beq.n	8006fac <USBD_StdEPReq+0x30>
 8006f9c:	2b40      	cmp	r3, #64	; 0x40
 8006f9e:	f200 817f 	bhi.w	80072a0 <USBD_StdEPReq+0x324>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d02a      	beq.n	8006ffc <USBD_StdEPReq+0x80>
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	f040 817a 	bne.w	80072a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff fe83 	bl	8006cbc <USBD_CoreFindEP>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fba:	7b7b      	ldrb	r3, [r7, #13]
 8006fbc:	2bff      	cmp	r3, #255	; 0xff
 8006fbe:	f000 8174 	beq.w	80072aa <USBD_StdEPReq+0x32e>
 8006fc2:	7b7b      	ldrb	r3, [r7, #13]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 8170 	bne.w	80072aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006fca:	7b7a      	ldrb	r2, [r7, #13]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006fd2:	7b7a      	ldrb	r2, [r7, #13]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	32ae      	adds	r2, #174	; 0xae
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 8163 	beq.w	80072aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006fe4:	7b7a      	ldrb	r2, [r7, #13]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	32ae      	adds	r2, #174	; 0xae
 8006fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ffa:	e156      	b.n	80072aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d008      	beq.n	8007016 <USBD_StdEPReq+0x9a>
 8007004:	2b03      	cmp	r3, #3
 8007006:	f300 8145 	bgt.w	8007294 <USBD_StdEPReq+0x318>
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 809b 	beq.w	8007146 <USBD_StdEPReq+0x1ca>
 8007010:	2b01      	cmp	r3, #1
 8007012:	d03c      	beq.n	800708e <USBD_StdEPReq+0x112>
 8007014:	e13e      	b.n	8007294 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d002      	beq.n	8007028 <USBD_StdEPReq+0xac>
 8007022:	2b03      	cmp	r3, #3
 8007024:	d016      	beq.n	8007054 <USBD_StdEPReq+0xd8>
 8007026:	e02c      	b.n	8007082 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <USBD_StdEPReq+0xce>
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d00a      	beq.n	800704a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f963 	bl	8008304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800703e:	2180      	movs	r1, #128	; 0x80
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f95f 	bl	8008304 <USBD_LL_StallEP>
 8007046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007048:	e020      	b.n	800708c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc7a 	bl	8007946 <USBD_CtlError>
              break;
 8007052:	e01b      	b.n	800708c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	885b      	ldrh	r3, [r3, #2]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10e      	bne.n	800707a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <USBD_StdEPReq+0xfe>
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b80      	cmp	r3, #128	; 0x80
 8007066:	d008      	beq.n	800707a <USBD_StdEPReq+0xfe>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	88db      	ldrh	r3, [r3, #6]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f945 	bl	8008304 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fd2e 	bl	8007adc <USBD_CtlSendStatus>

              break;
 8007080:	e004      	b.n	800708c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fc5e 	bl	8007946 <USBD_CtlError>
              break;
 800708a:	bf00      	nop
          }
          break;
 800708c:	e107      	b.n	800729e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d002      	beq.n	80070a0 <USBD_StdEPReq+0x124>
 800709a:	2b03      	cmp	r3, #3
 800709c:	d016      	beq.n	80070cc <USBD_StdEPReq+0x150>
 800709e:	e04b      	b.n	8007138 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00d      	beq.n	80070c2 <USBD_StdEPReq+0x146>
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b80      	cmp	r3, #128	; 0x80
 80070aa:	d00a      	beq.n	80070c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 f927 	bl	8008304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070b6:	2180      	movs	r1, #128	; 0x80
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f923 	bl	8008304 <USBD_LL_StallEP>
 80070be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070c0:	e040      	b.n	8007144 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc3e 	bl	8007946 <USBD_CtlError>
              break;
 80070ca:	e03b      	b.n	8007144 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d136      	bne.n	8007142 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f92d 	bl	8008342 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fcf7 	bl	8007adc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fde2 	bl	8006cbc <USBD_CoreFindEP>
 80070f8:	4603      	mov	r3, r0
 80070fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070fc:	7b7b      	ldrb	r3, [r7, #13]
 80070fe:	2bff      	cmp	r3, #255	; 0xff
 8007100:	d01f      	beq.n	8007142 <USBD_StdEPReq+0x1c6>
 8007102:	7b7b      	ldrb	r3, [r7, #13]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11c      	bne.n	8007142 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007108:	7b7a      	ldrb	r2, [r7, #13]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007110:	7b7a      	ldrb	r2, [r7, #13]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	32ae      	adds	r2, #174	; 0xae
 8007116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d010      	beq.n	8007142 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007120:	7b7a      	ldrb	r2, [r7, #13]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	32ae      	adds	r2, #174	; 0xae
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007136:	e004      	b.n	8007142 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fc03 	bl	8007946 <USBD_CtlError>
              break;
 8007140:	e000      	b.n	8007144 <USBD_StdEPReq+0x1c8>
              break;
 8007142:	bf00      	nop
          }
          break;
 8007144:	e0ab      	b.n	800729e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d002      	beq.n	8007158 <USBD_StdEPReq+0x1dc>
 8007152:	2b03      	cmp	r3, #3
 8007154:	d032      	beq.n	80071bc <USBD_StdEPReq+0x240>
 8007156:	e097      	b.n	8007288 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d007      	beq.n	800716e <USBD_StdEPReq+0x1f2>
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	2b80      	cmp	r3, #128	; 0x80
 8007162:	d004      	beq.n	800716e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fbed 	bl	8007946 <USBD_CtlError>
                break;
 800716c:	e091      	b.n	8007292 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800716e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007172:	2b00      	cmp	r3, #0
 8007174:	da0b      	bge.n	800718e <USBD_StdEPReq+0x212>
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	3310      	adds	r3, #16
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	3304      	adds	r3, #4
 800718c:	e00b      	b.n	80071a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4413      	add	r3, r2
 80071a4:	3304      	adds	r3, #4
 80071a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2202      	movs	r2, #2
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc37 	bl	8007a28 <USBD_CtlSendData>
              break;
 80071ba:	e06a      	b.n	8007292 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da11      	bge.n	80071e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	f003 020f 	and.w	r2, r3, #15
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	3324      	adds	r3, #36	; 0x24
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d117      	bne.n	800720e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fbb0 	bl	8007946 <USBD_CtlError>
                  break;
 80071e6:	e054      	b.n	8007292 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	f003 020f 	and.w	r2, r3, #15
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb9d 	bl	8007946 <USBD_CtlError>
                  break;
 800720c:	e041      	b.n	8007292 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800720e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007212:	2b00      	cmp	r3, #0
 8007214:	da0b      	bge.n	800722e <USBD_StdEPReq+0x2b2>
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	3310      	adds	r3, #16
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4413      	add	r3, r2
 800722a:	3304      	adds	r3, #4
 800722c:	e00b      	b.n	8007246 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	4413      	add	r3, r2
 8007244:	3304      	adds	r3, #4
 8007246:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <USBD_StdEPReq+0x2d8>
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d103      	bne.n	800725c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e00e      	b.n	800727a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f88d 	bl	8008380 <USBD_LL_IsStallEP>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e002      	b.n	800727a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2202      	movs	r2, #2
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fbd1 	bl	8007a28 <USBD_CtlSendData>
              break;
 8007286:	e004      	b.n	8007292 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fb5b 	bl	8007946 <USBD_CtlError>
              break;
 8007290:	bf00      	nop
          }
          break;
 8007292:	e004      	b.n	800729e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb55 	bl	8007946 <USBD_CtlError>
          break;
 800729c:	bf00      	nop
      }
      break;
 800729e:	e005      	b.n	80072ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fb4f 	bl	8007946 <USBD_CtlError>
      break;
 80072a8:	e000      	b.n	80072ac <USBD_StdEPReq+0x330>
      break;
 80072aa:	bf00      	nop
  }

  return ret;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	0a1b      	lsrs	r3, r3, #8
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	2b06      	cmp	r3, #6
 80072da:	f200 8128 	bhi.w	800752e <USBD_GetDescriptor+0x276>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USBD_GetDescriptor+0x2c>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007319 	.word	0x08007319
 80072ec:	08007359 	.word	0x08007359
 80072f0:	0800752f 	.word	0x0800752f
 80072f4:	0800752f 	.word	0x0800752f
 80072f8:	080074cf 	.word	0x080074cf
 80072fc:	080074fb 	.word	0x080074fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
      break;
 8007316:	e112      	b.n	800753e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7c1b      	ldrb	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10d      	bne.n	800733c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f107 0208 	add.w	r2, r7, #8
 800732c:	4610      	mov	r0, r2
 800732e:	4798      	blx	r3
 8007330:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	2202      	movs	r2, #2
 8007338:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800733a:	e100      	b.n	800753e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f107 0208 	add.w	r2, r7, #8
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	2202      	movs	r2, #2
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e0f2      	b.n	800753e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	885b      	ldrh	r3, [r3, #2]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b05      	cmp	r3, #5
 8007360:	f200 80ac 	bhi.w	80074bc <USBD_GetDescriptor+0x204>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBD_GetDescriptor+0xb4>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	08007385 	.word	0x08007385
 8007370:	080073b9 	.word	0x080073b9
 8007374:	080073ed 	.word	0x080073ed
 8007378:	08007421 	.word	0x08007421
 800737c:	08007455 	.word	0x08007455
 8007380:	08007489 	.word	0x08007489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	7c12      	ldrb	r2, [r2, #16]
 800739c:	f107 0108 	add.w	r1, r7, #8
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073a6:	e091      	b.n	80074cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 facb 	bl	8007946 <USBD_CtlError>
            err++;
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	3301      	adds	r3, #1
 80073b4:	72fb      	strb	r3, [r7, #11]
          break;
 80073b6:	e089      	b.n	80074cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	7c12      	ldrb	r2, [r2, #16]
 80073d0:	f107 0108 	add.w	r1, r7, #8
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073da:	e077      	b.n	80074cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fab1 	bl	8007946 <USBD_CtlError>
            err++;
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	3301      	adds	r3, #1
 80073e8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ea:	e06f      	b.n	80074cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	7c12      	ldrb	r2, [r2, #16]
 8007404:	f107 0108 	add.w	r1, r7, #8
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
 800740c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740e:	e05d      	b.n	80074cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa97 	bl	8007946 <USBD_CtlError>
            err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
          break;
 800741e:	e055      	b.n	80074cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7c12      	ldrb	r2, [r2, #16]
 8007438:	f107 0108 	add.w	r1, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007442:	e043      	b.n	80074cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa7d 	bl	8007946 <USBD_CtlError>
            err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
          break;
 8007452:	e03b      	b.n	80074cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	7c12      	ldrb	r2, [r2, #16]
 800746c:	f107 0108 	add.w	r1, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007476:	e029      	b.n	80074cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa63 	bl	8007946 <USBD_CtlError>
            err++;
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	3301      	adds	r3, #1
 8007484:	72fb      	strb	r3, [r7, #11]
          break;
 8007486:	e021      	b.n	80074cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074aa:	e00f      	b.n	80074cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa49 	bl	8007946 <USBD_CtlError>
            err++;
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	3301      	adds	r3, #1
 80074b8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ba:	e007      	b.n	80074cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa41 	bl	8007946 <USBD_CtlError>
          err++;
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	3301      	adds	r3, #1
 80074c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80074ca:	bf00      	nop
      }
      break;
 80074cc:	e037      	b.n	800753e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7c1b      	ldrb	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	f107 0208 	add.w	r2, r7, #8
 80074e2:	4610      	mov	r0, r2
 80074e4:	4798      	blx	r3
 80074e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074e8:	e029      	b.n	800753e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fa2a 	bl	8007946 <USBD_CtlError>
        err++;
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	3301      	adds	r3, #1
 80074f6:	72fb      	strb	r3, [r7, #11]
      break;
 80074f8:	e021      	b.n	800753e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7c1b      	ldrb	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10d      	bne.n	800751e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	f107 0208 	add.w	r2, r7, #8
 800750e:	4610      	mov	r0, r2
 8007510:	4798      	blx	r3
 8007512:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	2207      	movs	r2, #7
 800751a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800751c:	e00f      	b.n	800753e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa10 	bl	8007946 <USBD_CtlError>
        err++;
 8007526:	7afb      	ldrb	r3, [r7, #11]
 8007528:	3301      	adds	r3, #1
 800752a:	72fb      	strb	r3, [r7, #11]
      break;
 800752c:	e007      	b.n	800753e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa08 	bl	8007946 <USBD_CtlError>
      err++;
 8007536:	7afb      	ldrb	r3, [r7, #11]
 8007538:	3301      	adds	r3, #1
 800753a:	72fb      	strb	r3, [r7, #11]
      break;
 800753c:	bf00      	nop
  }

  if (err != 0U)
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11e      	bne.n	8007582 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	88db      	ldrh	r3, [r3, #6]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d016      	beq.n	800757a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800754c:	893b      	ldrh	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00e      	beq.n	8007570 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88da      	ldrh	r2, [r3, #6]
 8007556:	893b      	ldrh	r3, [r7, #8]
 8007558:	4293      	cmp	r3, r2
 800755a:	bf28      	it	cs
 800755c:	4613      	movcs	r3, r2
 800755e:	b29b      	uxth	r3, r3
 8007560:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	461a      	mov	r2, r3
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa5d 	bl	8007a28 <USBD_CtlSendData>
 800756e:	e009      	b.n	8007584 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9e7 	bl	8007946 <USBD_CtlError>
 8007578:	e004      	b.n	8007584 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 faae 	bl	8007adc <USBD_CtlSendStatus>
 8007580:	e000      	b.n	8007584 <USBD_GetDescriptor+0x2cc>
    return;
 8007582:	bf00      	nop
  }
}
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop

0800758c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	889b      	ldrh	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d131      	bne.n	8007602 <USBD_SetAddress+0x76>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	88db      	ldrh	r3, [r3, #6]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d12d      	bne.n	8007602 <USBD_SetAddress+0x76>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	885b      	ldrh	r3, [r3, #2]
 80075aa:	2b7f      	cmp	r3, #127	; 0x7f
 80075ac:	d829      	bhi.n	8007602 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d104      	bne.n	80075d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f9bc 	bl	8007946 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ce:	e01d      	b.n	800760c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	7bfa      	ldrb	r2, [r7, #15]
 80075d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fefb 	bl	80083d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa7a 	bl	8007adc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f6:	e009      	b.n	800760c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007600:	e004      	b.n	800760c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f99e 	bl	8007946 <USBD_CtlError>
  }
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	885b      	ldrh	r3, [r3, #2]
 8007626:	b2da      	uxtb	r2, r3
 8007628:	4b4e      	ldr	r3, [pc, #312]	; (8007764 <USBD_SetConfig+0x150>)
 800762a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800762c:	4b4d      	ldr	r3, [pc, #308]	; (8007764 <USBD_SetConfig+0x150>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d905      	bls.n	8007640 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f985 	bl	8007946 <USBD_CtlError>
    return USBD_FAIL;
 800763c:	2303      	movs	r3, #3
 800763e:	e08c      	b.n	800775a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d002      	beq.n	8007652 <USBD_SetConfig+0x3e>
 800764c:	2b03      	cmp	r3, #3
 800764e:	d029      	beq.n	80076a4 <USBD_SetConfig+0x90>
 8007650:	e075      	b.n	800773e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007652:	4b44      	ldr	r3, [pc, #272]	; (8007764 <USBD_SetConfig+0x150>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d020      	beq.n	800769c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800765a:	4b42      	ldr	r3, [pc, #264]	; (8007764 <USBD_SetConfig+0x150>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007664:	4b3f      	ldr	r3, [pc, #252]	; (8007764 <USBD_SetConfig+0x150>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe ffe1 	bl	8006632 <USBD_SetClassConfig>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d008      	beq.n	800768c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f962 	bl	8007946 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2202      	movs	r2, #2
 8007686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800768a:	e065      	b.n	8007758 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa25 	bl	8007adc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800769a:	e05d      	b.n	8007758 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fa1d 	bl	8007adc <USBD_CtlSendStatus>
      break;
 80076a2:	e059      	b.n	8007758 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076a4:	4b2f      	ldr	r3, [pc, #188]	; (8007764 <USBD_SetConfig+0x150>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d112      	bne.n	80076d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076b4:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <USBD_SetConfig+0x150>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076be:	4b29      	ldr	r3, [pc, #164]	; (8007764 <USBD_SetConfig+0x150>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7fe ffd0 	bl	800666a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa06 	bl	8007adc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076d0:	e042      	b.n	8007758 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <USBD_SetConfig+0x150>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d02a      	beq.n	8007736 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fe ffbe 	bl	800666a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076ee:	4b1d      	ldr	r3, [pc, #116]	; (8007764 <USBD_SetConfig+0x150>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <USBD_SetConfig+0x150>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fe ff97 	bl	8006632 <USBD_SetClassConfig>
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00f      	beq.n	800772e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f918 	bl	8007946 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fe ffa3 	bl	800666a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800772c:	e014      	b.n	8007758 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9d4 	bl	8007adc <USBD_CtlSendStatus>
      break;
 8007734:	e010      	b.n	8007758 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9d0 	bl	8007adc <USBD_CtlSendStatus>
      break;
 800773c:	e00c      	b.n	8007758 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f900 	bl	8007946 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <USBD_SetConfig+0x150>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7fe ff8c 	bl	800666a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007752:	2303      	movs	r3, #3
 8007754:	73fb      	strb	r3, [r7, #15]
      break;
 8007756:	bf00      	nop
  }

  return ret;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200002d0 	.word	0x200002d0

08007768 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d004      	beq.n	8007784 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f8e2 	bl	8007946 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007782:	e023      	b.n	80077cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	dc02      	bgt.n	8007796 <USBD_GetConfig+0x2e>
 8007790:	2b00      	cmp	r3, #0
 8007792:	dc03      	bgt.n	800779c <USBD_GetConfig+0x34>
 8007794:	e015      	b.n	80077c2 <USBD_GetConfig+0x5a>
 8007796:	2b03      	cmp	r3, #3
 8007798:	d00b      	beq.n	80077b2 <USBD_GetConfig+0x4a>
 800779a:	e012      	b.n	80077c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3308      	adds	r3, #8
 80077a6:	2201      	movs	r2, #1
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f93c 	bl	8007a28 <USBD_CtlSendData>
        break;
 80077b0:	e00c      	b.n	80077cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3304      	adds	r3, #4
 80077b6:	2201      	movs	r2, #1
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f934 	bl	8007a28 <USBD_CtlSendData>
        break;
 80077c0:	e004      	b.n	80077cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f8be 	bl	8007946 <USBD_CtlError>
        break;
 80077ca:	bf00      	nop
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d81e      	bhi.n	800782a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	88db      	ldrh	r3, [r3, #6]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d004      	beq.n	80077fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8a5 	bl	8007946 <USBD_CtlError>
        break;
 80077fc:	e01a      	b.n	8007834 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f043 0202 	orr.w	r2, r3, #2
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	330c      	adds	r3, #12
 800781e:	2202      	movs	r2, #2
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f900 	bl	8007a28 <USBD_CtlSendData>
      break;
 8007828:	e004      	b.n	8007834 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f88a 	bl	8007946 <USBD_CtlError>
      break;
 8007832:	bf00      	nop
  }
}
 8007834:	bf00      	nop
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d107      	bne.n	800785e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f940 	bl	8007adc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800785c:	e013      	b.n	8007886 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	885b      	ldrh	r3, [r3, #2]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d10b      	bne.n	800787e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	b29b      	uxth	r3, r3
 800786e:	b2da      	uxtb	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f930 	bl	8007adc <USBD_CtlSendStatus>
}
 800787c:	e003      	b.n	8007886 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f860 	bl	8007946 <USBD_CtlError>
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d80b      	bhi.n	80078be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10c      	bne.n	80078c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f910 	bl	8007adc <USBD_CtlSendStatus>
      }
      break;
 80078bc:	e004      	b.n	80078c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f840 	bl	8007946 <USBD_CtlError>
      break;
 80078c6:	e000      	b.n	80078ca <USBD_ClrFeature+0x3c>
      break;
 80078c8:	bf00      	nop
  }
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fa41 	bl	8006d84 <SWAPBYTE>
 8007902:	4603      	mov	r3, r0
 8007904:	461a      	mov	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff fa34 	bl	8006d84 <SWAPBYTE>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3301      	adds	r3, #1
 800792e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fa27 	bl	8006d84 <SWAPBYTE>
 8007936:	4603      	mov	r3, r0
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	80da      	strh	r2, [r3, #6]
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fcd6 	bl	8008304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007958:	2100      	movs	r1, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fcd2 	bl	8008304 <USBD_LL_StallEP>
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d036      	beq.n	80079ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007982:	6938      	ldr	r0, [r7, #16]
 8007984:	f000 f836 	bl	80079f4 <USBD_GetLen>
 8007988:	4603      	mov	r3, r0
 800798a:	3301      	adds	r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	4413      	add	r3, r2
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	3301      	adds	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	4413      	add	r3, r2
 80079ae:	2203      	movs	r2, #3
 80079b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	3301      	adds	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079b8:	e013      	b.n	80079e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	4413      	add	r3, r2
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	7812      	ldrb	r2, [r2, #0]
 80079c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3301      	adds	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
    idx++;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	3301      	adds	r3, #1
 80079d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	4413      	add	r3, r2
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
    idx++;
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	3301      	adds	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e7      	bne.n	80079ba <USBD_GetString+0x52>
 80079ea:	e000      	b.n	80079ee <USBD_GetString+0x86>
    return;
 80079ec:	bf00      	nop
  }
}
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a04:	e005      	b.n	8007a12 <USBD_GetLen+0x1e>
  {
    len++;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f5      	bne.n	8007a06 <USBD_GetLen+0x12>
  }

  return len;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fce1 	bl	8008416 <USBD_LL_Transmit>

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fcd0 	bl	8008416 <USBD_LL_Transmit>

  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 fcd4 	bl	8008458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	2100      	movs	r1, #0
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fcc3 	bl	8008458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007aec:	2300      	movs	r3, #0
 8007aee:	2200      	movs	r2, #0
 8007af0:	2100      	movs	r1, #0
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fc8f 	bl	8008416 <USBD_LL_Transmit>

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2205      	movs	r2, #5
 8007b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b12:	2300      	movs	r3, #0
 8007b14:	2200      	movs	r2, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fc9d 	bl	8008458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4912      	ldr	r1, [pc, #72]	; (8007b78 <MX_USB_DEVICE_Init+0x50>)
 8007b30:	4812      	ldr	r0, [pc, #72]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b32:	f7fe fd01 	bl	8006538 <USBD_Init>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b3c:	f7f8 fee0 	bl	8000900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b40:	490f      	ldr	r1, [pc, #60]	; (8007b80 <MX_USB_DEVICE_Init+0x58>)
 8007b42:	480e      	ldr	r0, [pc, #56]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b44:	f7fe fd28 	bl	8006598 <USBD_RegisterClass>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b4e:	f7f8 fed7 	bl	8000900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b52:	490c      	ldr	r1, [pc, #48]	; (8007b84 <MX_USB_DEVICE_Init+0x5c>)
 8007b54:	4809      	ldr	r0, [pc, #36]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b56:	f7fe fc1f 	bl	8006398 <USBD_CDC_RegisterInterface>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b60:	f7f8 fece 	bl	8000900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b64:	4805      	ldr	r0, [pc, #20]	; (8007b7c <MX_USB_DEVICE_Init+0x54>)
 8007b66:	f7fe fd4d 	bl	8006604 <USBD_Start>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b70:	f7f8 fec6 	bl	8000900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b74:	bf00      	nop
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	200000ac 	.word	0x200000ac
 8007b7c:	200002d4 	.word	0x200002d4
 8007b80:	20000018 	.word	0x20000018
 8007b84:	20000098 	.word	0x20000098

08007b88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4905      	ldr	r1, [pc, #20]	; (8007ba4 <CDC_Init_FS+0x1c>)
 8007b90:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <CDC_Init_FS+0x20>)
 8007b92:	f7fe fc1b 	bl	80063cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b96:	4905      	ldr	r1, [pc, #20]	; (8007bac <CDC_Init_FS+0x24>)
 8007b98:	4803      	ldr	r0, [pc, #12]	; (8007ba8 <CDC_Init_FS+0x20>)
 8007b9a:	f7fe fc39 	bl	8006410 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000db0 	.word	0x20000db0
 8007ba8:	200002d4 	.word	0x200002d4
 8007bac:	200005b0 	.word	0x200005b0

08007bb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b23      	cmp	r3, #35	; 0x23
 8007bd4:	d84a      	bhi.n	8007c6c <CDC_Control_FS+0xac>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <CDC_Control_FS+0x1c>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c6d 	.word	0x08007c6d
 8007be0:	08007c6d 	.word	0x08007c6d
 8007be4:	08007c6d 	.word	0x08007c6d
 8007be8:	08007c6d 	.word	0x08007c6d
 8007bec:	08007c6d 	.word	0x08007c6d
 8007bf0:	08007c6d 	.word	0x08007c6d
 8007bf4:	08007c6d 	.word	0x08007c6d
 8007bf8:	08007c6d 	.word	0x08007c6d
 8007bfc:	08007c6d 	.word	0x08007c6d
 8007c00:	08007c6d 	.word	0x08007c6d
 8007c04:	08007c6d 	.word	0x08007c6d
 8007c08:	08007c6d 	.word	0x08007c6d
 8007c0c:	08007c6d 	.word	0x08007c6d
 8007c10:	08007c6d 	.word	0x08007c6d
 8007c14:	08007c6d 	.word	0x08007c6d
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007c6d 	.word	0x08007c6d
 8007c20:	08007c6d 	.word	0x08007c6d
 8007c24:	08007c6d 	.word	0x08007c6d
 8007c28:	08007c6d 	.word	0x08007c6d
 8007c2c:	08007c6d 	.word	0x08007c6d
 8007c30:	08007c6d 	.word	0x08007c6d
 8007c34:	08007c6d 	.word	0x08007c6d
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007c6d 	.word	0x08007c6d
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c6d 	.word	0x08007c6d
 8007c50:	08007c6d 	.word	0x08007c6d
 8007c54:	08007c6d 	.word	0x08007c6d
 8007c58:	08007c6d 	.word	0x08007c6d
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c6d 	.word	0x08007c6d
 8007c64:	08007c6d 	.word	0x08007c6d
 8007c68:	08007c6d 	.word	0x08007c6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c6c:	bf00      	nop
  }

  return (USBD_OK);
 8007c6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4805      	ldr	r0, [pc, #20]	; (8007ca0 <CDC_Receive_FS+0x24>)
 8007c8a:	f7fe fbc1 	bl	8006410 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c8e:	4804      	ldr	r0, [pc, #16]	; (8007ca0 <CDC_Receive_FS+0x24>)
 8007c90:	f7fe fc1c 	bl	80064cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200002d4 	.word	0x200002d4

08007ca4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <CDC_Transmit_FS+0x48>)
 8007cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e00b      	b.n	8007ce2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007cca:	887b      	ldrh	r3, [r7, #2]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4806      	ldr	r0, [pc, #24]	; (8007cec <CDC_Transmit_FS+0x48>)
 8007cd2:	f7fe fb7b 	bl	80063cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <CDC_Transmit_FS+0x48>)
 8007cd8:	f7fe fbb8 	bl	800644c <USBD_CDC_TransmitPacket>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200002d4 	.word	0x200002d4

08007cf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
	...

08007d14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2212      	movs	r2, #18
 8007d24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d26:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	200000c8 	.word	0x200000c8

08007d38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	6039      	str	r1, [r7, #0]
 8007d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2204      	movs	r2, #4
 8007d48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d4a:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	200000dc 	.word	0x200000dc

08007d5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d105      	bne.n	8007d7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4907      	ldr	r1, [pc, #28]	; (8007d90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d72:	4808      	ldr	r0, [pc, #32]	; (8007d94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d74:	f7ff fdf8 	bl	8007968 <USBD_GetString>
 8007d78:	e004      	b.n	8007d84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	4904      	ldr	r1, [pc, #16]	; (8007d90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d7e:	4805      	ldr	r0, [pc, #20]	; (8007d94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d80:	f7ff fdf2 	bl	8007968 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	200015b0 	.word	0x200015b0
 8007d94:	08008eb4 	.word	0x08008eb4

08007d98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	4904      	ldr	r1, [pc, #16]	; (8007db8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007da8:	4804      	ldr	r0, [pc, #16]	; (8007dbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007daa:	f7ff fddd 	bl	8007968 <USBD_GetString>
  return USBD_StrDesc;
 8007dae:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	200015b0 	.word	0x200015b0
 8007dbc:	08008ecc 	.word	0x08008ecc

08007dc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	221a      	movs	r2, #26
 8007dd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dd2:	f000 f843 	bl	8007e5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dd6:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	200000e0 	.word	0x200000e0

08007de4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4907      	ldr	r1, [pc, #28]	; (8007e18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dfa:	4808      	ldr	r0, [pc, #32]	; (8007e1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dfc:	f7ff fdb4 	bl	8007968 <USBD_GetString>
 8007e00:	e004      	b.n	8007e0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4904      	ldr	r1, [pc, #16]	; (8007e18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e06:	4805      	ldr	r0, [pc, #20]	; (8007e1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e08:	f7ff fdae 	bl	8007968 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e0c:	4b02      	ldr	r3, [pc, #8]	; (8007e18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200015b0 	.word	0x200015b0
 8007e1c:	08008ee0 	.word	0x08008ee0

08007e20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4907      	ldr	r1, [pc, #28]	; (8007e54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e36:	4808      	ldr	r0, [pc, #32]	; (8007e58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e38:	f7ff fd96 	bl	8007968 <USBD_GetString>
 8007e3c:	e004      	b.n	8007e48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4904      	ldr	r1, [pc, #16]	; (8007e54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e42:	4805      	ldr	r0, [pc, #20]	; (8007e58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e44:	f7ff fd90 	bl	8007968 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	200015b0 	.word	0x200015b0
 8007e58:	08008eec 	.word	0x08008eec

08007e5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <Get_SerialNum+0x44>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e68:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <Get_SerialNum+0x48>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <Get_SerialNum+0x4c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4413      	add	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e82:	2208      	movs	r2, #8
 8007e84:	4909      	ldr	r1, [pc, #36]	; (8007eac <Get_SerialNum+0x50>)
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f814 	bl	8007eb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	4908      	ldr	r1, [pc, #32]	; (8007eb0 <Get_SerialNum+0x54>)
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f000 f80f 	bl	8007eb4 <IntToUnicode>
  }
}
 8007e96:	bf00      	nop
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	1fff7a10 	.word	0x1fff7a10
 8007ea4:	1fff7a14 	.word	0x1fff7a14
 8007ea8:	1fff7a18 	.word	0x1fff7a18
 8007eac:	200000e2 	.word	0x200000e2
 8007eb0:	200000f2 	.word	0x200000f2

08007eb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
 8007eca:	e027      	b.n	8007f1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	0f1b      	lsrs	r3, r3, #28
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d80b      	bhi.n	8007eec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	0f1b      	lsrs	r3, r3, #28
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	440b      	add	r3, r1
 8007ee4:	3230      	adds	r2, #48	; 0x30
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	e00a      	b.n	8007f02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	0f1b      	lsrs	r3, r3, #28
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	440b      	add	r3, r1
 8007efc:	3237      	adds	r2, #55	; 0x37
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	011b      	lsls	r3, r3, #4
 8007f06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
 8007f1c:	7dfa      	ldrb	r2, [r7, #23]
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d3d3      	bcc.n	8007ecc <IntToUnicode+0x18>
  }
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	609a      	str	r2, [r3, #8]
 8007f48:	60da      	str	r2, [r3, #12]
 8007f4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f54:	d13a      	bne.n	8007fcc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	6313      	str	r3, [r2, #48]	; 0x30
 8007f66:	4b1b      	ldr	r3, [pc, #108]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f80:	2303      	movs	r3, #3
 8007f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f84:	230a      	movs	r3, #10
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4812      	ldr	r0, [pc, #72]	; (8007fd8 <HAL_PCD_MspInit+0xa4>)
 8007f90:	f7f9 fb76 	bl	8001680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f94:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f98:	4a0e      	ldr	r2, [pc, #56]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9e:	6353      	str	r3, [r2, #52]	; 0x34
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa8:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fae:	6453      	str	r3, [r2, #68]	; 0x44
 8007fb0:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <HAL_PCD_MspInit+0xa0>)
 8007fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	2043      	movs	r0, #67	; 0x43
 8007fc2:	f7f9 f81a 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fc6:	2043      	movs	r0, #67	; 0x43
 8007fc8:	f7f9 f833 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fcc:	bf00      	nop
 8007fce:	3728      	adds	r7, #40	; 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	40020000 	.word	0x40020000

08007fdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f7fe fb53 	bl	800669e <USBD_LL_SetupStage>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4613      	mov	r3, r2
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	4619      	mov	r1, r3
 800802a:	f7fe fb8d 	bl	8006748 <USBD_LL_DataOutStage>
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4613      	mov	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	3320      	adds	r3, #32
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	4619      	mov	r1, r3
 800805e:	f7fe fc26 	bl	80068ae <USBD_LL_DataInStage>
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fd60 	bl	8006b3e <USBD_LL_SOF>
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800808e:	2301      	movs	r3, #1
 8008090:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	79db      	ldrb	r3, [r3, #7]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d001      	beq.n	800809e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800809a:	f7f8 fc31 	bl	8000900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fd04 	bl	8006ab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fcac 	bl	8006a12 <USBD_LL_Reset>
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fcff 	bl	8006ad6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7adb      	ldrb	r3, [r3, #11]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <HAL_PCD_SuspendCallback+0x48>)
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	4a03      	ldr	r2, [pc, #12]	; (800810c <HAL_PCD_SuspendCallback+0x48>)
 80080fe:	f043 0306 	orr.w	r3, r3, #6
 8008102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	e000ed00 	.word	0xe000ed00

08008110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe fcf5 	bl	8006b0e <USBD_LL_Resume>
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fd4d 	bl	8006be2 <USBD_LL_IsoOUTIncomplete>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fd09 	bl	8006b7e <USBD_LL_IsoINIncomplete>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fd5f 	bl	8006c46 <USBD_LL_DevConnected>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fd5c 	bl	8006c5c <USBD_LL_DevDisconnected>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d13c      	bne.n	8008236 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081bc:	4a20      	ldr	r2, [pc, #128]	; (8008240 <USBD_LL_Init+0x94>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1e      	ldr	r2, [pc, #120]	; (8008240 <USBD_LL_Init+0x94>)
 80081c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <USBD_LL_Init+0x94>)
 80081ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081d4:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <USBD_LL_Init+0x94>)
 80081d6:	2204      	movs	r2, #4
 80081d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081da:	4b19      	ldr	r3, [pc, #100]	; (8008240 <USBD_LL_Init+0x94>)
 80081dc:	2202      	movs	r2, #2
 80081de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081e0:	4b17      	ldr	r3, [pc, #92]	; (8008240 <USBD_LL_Init+0x94>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081e6:	4b16      	ldr	r3, [pc, #88]	; (8008240 <USBD_LL_Init+0x94>)
 80081e8:	2202      	movs	r2, #2
 80081ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80081ec:	4b14      	ldr	r3, [pc, #80]	; (8008240 <USBD_LL_Init+0x94>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <USBD_LL_Init+0x94>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081f8:	4b11      	ldr	r3, [pc, #68]	; (8008240 <USBD_LL_Init+0x94>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <USBD_LL_Init+0x94>)
 8008200:	2200      	movs	r2, #0
 8008202:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <USBD_LL_Init+0x94>)
 8008206:	2200      	movs	r2, #0
 8008208:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800820a:	480d      	ldr	r0, [pc, #52]	; (8008240 <USBD_LL_Init+0x94>)
 800820c:	f7f9 fbbc 	bl	8001988 <HAL_PCD_Init>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008216:	f7f8 fb73 	bl	8000900 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	4808      	ldr	r0, [pc, #32]	; (8008240 <USBD_LL_Init+0x94>)
 800821e:	f7fa fde6 	bl	8002dee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008222:	2240      	movs	r2, #64	; 0x40
 8008224:	2100      	movs	r1, #0
 8008226:	4806      	ldr	r0, [pc, #24]	; (8008240 <USBD_LL_Init+0x94>)
 8008228:	f7fa fd9a 	bl	8002d60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800822c:	2280      	movs	r2, #128	; 0x80
 800822e:	2101      	movs	r1, #1
 8008230:	4803      	ldr	r0, [pc, #12]	; (8008240 <USBD_LL_Init+0x94>)
 8008232:	f7fa fd95 	bl	8002d60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	200017b0 	.word	0x200017b0

08008244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800825a:	4618      	mov	r0, r3
 800825c:	f7f9 fca3 	bl	8001ba6 <HAL_PCD_Start>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f942 	bl	80084f0 <USBD_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008270:	7bbb      	ldrb	r3, [r7, #14]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	461a      	mov	r2, r3
 8008288:	4603      	mov	r3, r0
 800828a:	70fb      	strb	r3, [r7, #3]
 800828c:	460b      	mov	r3, r1
 800828e:	70bb      	strb	r3, [r7, #2]
 8008290:	4613      	mov	r3, r2
 8008292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082a2:	78bb      	ldrb	r3, [r7, #2]
 80082a4:	883a      	ldrh	r2, [r7, #0]
 80082a6:	78f9      	ldrb	r1, [r7, #3]
 80082a8:	f7fa f977 	bl	800259a <HAL_PCD_EP_Open>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f91c 	bl	80084f0 <USBD_Get_USB_Status>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fa f9c0 	bl	800266a <HAL_PCD_EP_Close>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f8fd 	bl	80084f0 <USBD_Get_USB_Status>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	4618      	mov	r0, r3
 8008324:	f7fa fa78 	bl	8002818 <HAL_PCD_EP_SetStall>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f8de 	bl	80084f0 <USBD_Get_USB_Status>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008338:	7bbb      	ldrb	r3, [r7, #14]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7fa fabc 	bl	80028de <HAL_PCD_EP_ClrStall>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f8bf 	bl	80084f0 <USBD_Get_USB_Status>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008376:	7bbb      	ldrb	r3, [r7, #14]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008398:	2b00      	cmp	r3, #0
 800839a:	da0b      	bge.n	80083b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	3316      	adds	r3, #22
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	e00b      	b.n	80083cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	f203 2356 	addw	r3, r3, #598	; 0x256
 80083ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fa f8ab 	bl	8002552 <HAL_PCD_SetAddress>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f874 	bl	80084f0 <USBD_Get_USB_Status>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840c:	7bbb      	ldrb	r3, [r7, #14]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	460b      	mov	r3, r1
 8008424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008434:	7af9      	ldrb	r1, [r7, #11]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	f7fa f9b3 	bl	80027a4 <HAL_PCD_EP_Transmit>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f853 	bl	80084f0 <USBD_Get_USB_Status>
 800844a:	4603      	mov	r3, r0
 800844c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800844e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	460b      	mov	r3, r1
 8008466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008476:	7af9      	ldrb	r1, [r7, #11]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f7fa f93f 	bl	80026fe <HAL_PCD_EP_Receive>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f832 	bl	80084f0 <USBD_Get_USB_Status>
 800848c:	4603      	mov	r3, r0
 800848e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008490:	7dbb      	ldrb	r3, [r7, #22]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fa f95f 	bl	8002774 <HAL_PCD_EP_GetRxCount>
 80084b6:	4603      	mov	r3, r0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084c8:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_static_malloc+0x18>)
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20001c94 	.word	0x20001c94

080084dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	2b03      	cmp	r3, #3
 8008502:	d817      	bhi.n	8008534 <USBD_Get_USB_Status+0x44>
 8008504:	a201      	add	r2, pc, #4	; (adr r2, 800850c <USBD_Get_USB_Status+0x1c>)
 8008506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850a:	bf00      	nop
 800850c:	0800851d 	.word	0x0800851d
 8008510:	08008523 	.word	0x08008523
 8008514:	08008529 	.word	0x08008529
 8008518:	0800852f 	.word	0x0800852f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
    break;
 8008520:	e00b      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008522:	2303      	movs	r3, #3
 8008524:	73fb      	strb	r3, [r7, #15]
    break;
 8008526:	e008      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008528:	2301      	movs	r3, #1
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	e005      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800852e:	2303      	movs	r3, #3
 8008530:	73fb      	strb	r3, [r7, #15]
    break;
 8008532:	e002      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	bf00      	nop
  }
  return usb_status;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <_vsiprintf_r>:
 8008548:	b500      	push	{lr}
 800854a:	b09b      	sub	sp, #108	; 0x6c
 800854c:	9100      	str	r1, [sp, #0]
 800854e:	9104      	str	r1, [sp, #16]
 8008550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008554:	9105      	str	r1, [sp, #20]
 8008556:	9102      	str	r1, [sp, #8]
 8008558:	4905      	ldr	r1, [pc, #20]	; (8008570 <_vsiprintf_r+0x28>)
 800855a:	9103      	str	r1, [sp, #12]
 800855c:	4669      	mov	r1, sp
 800855e:	f000 f999 	bl	8008894 <_svfiprintf_r>
 8008562:	9b00      	ldr	r3, [sp, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	b01b      	add	sp, #108	; 0x6c
 800856a:	f85d fb04 	ldr.w	pc, [sp], #4
 800856e:	bf00      	nop
 8008570:	ffff0208 	.word	0xffff0208

08008574 <vsiprintf>:
 8008574:	4613      	mov	r3, r2
 8008576:	460a      	mov	r2, r1
 8008578:	4601      	mov	r1, r0
 800857a:	4802      	ldr	r0, [pc, #8]	; (8008584 <vsiprintf+0x10>)
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	f7ff bfe3 	b.w	8008548 <_vsiprintf_r>
 8008582:	bf00      	nop
 8008584:	20000148 	.word	0x20000148

08008588 <memset>:
 8008588:	4402      	add	r2, r0
 800858a:	4603      	mov	r3, r0
 800858c:	4293      	cmp	r3, r2
 800858e:	d100      	bne.n	8008592 <memset+0xa>
 8008590:	4770      	bx	lr
 8008592:	f803 1b01 	strb.w	r1, [r3], #1
 8008596:	e7f9      	b.n	800858c <memset+0x4>

08008598 <__errno>:
 8008598:	4b01      	ldr	r3, [pc, #4]	; (80085a0 <__errno+0x8>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	20000148 	.word	0x20000148

080085a4 <__libc_init_array>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4d0d      	ldr	r5, [pc, #52]	; (80085dc <__libc_init_array+0x38>)
 80085a8:	4c0d      	ldr	r4, [pc, #52]	; (80085e0 <__libc_init_array+0x3c>)
 80085aa:	1b64      	subs	r4, r4, r5
 80085ac:	10a4      	asrs	r4, r4, #2
 80085ae:	2600      	movs	r6, #0
 80085b0:	42a6      	cmp	r6, r4
 80085b2:	d109      	bne.n	80085c8 <__libc_init_array+0x24>
 80085b4:	4d0b      	ldr	r5, [pc, #44]	; (80085e4 <__libc_init_array+0x40>)
 80085b6:	4c0c      	ldr	r4, [pc, #48]	; (80085e8 <__libc_init_array+0x44>)
 80085b8:	f000 fc6a 	bl	8008e90 <_init>
 80085bc:	1b64      	subs	r4, r4, r5
 80085be:	10a4      	asrs	r4, r4, #2
 80085c0:	2600      	movs	r6, #0
 80085c2:	42a6      	cmp	r6, r4
 80085c4:	d105      	bne.n	80085d2 <__libc_init_array+0x2e>
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085cc:	4798      	blx	r3
 80085ce:	3601      	adds	r6, #1
 80085d0:	e7ee      	b.n	80085b0 <__libc_init_array+0xc>
 80085d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d6:	4798      	blx	r3
 80085d8:	3601      	adds	r6, #1
 80085da:	e7f2      	b.n	80085c2 <__libc_init_array+0x1e>
 80085dc:	08008f50 	.word	0x08008f50
 80085e0:	08008f50 	.word	0x08008f50
 80085e4:	08008f50 	.word	0x08008f50
 80085e8:	08008f54 	.word	0x08008f54

080085ec <__retarget_lock_acquire_recursive>:
 80085ec:	4770      	bx	lr

080085ee <__retarget_lock_release_recursive>:
 80085ee:	4770      	bx	lr

080085f0 <_free_r>:
 80085f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d044      	beq.n	8008680 <_free_r+0x90>
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	9001      	str	r0, [sp, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008602:	bfb8      	it	lt
 8008604:	18e4      	addlt	r4, r4, r3
 8008606:	f000 f8df 	bl	80087c8 <__malloc_lock>
 800860a:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <_free_r+0x94>)
 800860c:	9801      	ldr	r0, [sp, #4]
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	b933      	cbnz	r3, 8008620 <_free_r+0x30>
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6014      	str	r4, [r2, #0]
 8008616:	b003      	add	sp, #12
 8008618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800861c:	f000 b8da 	b.w	80087d4 <__malloc_unlock>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d908      	bls.n	8008636 <_free_r+0x46>
 8008624:	6825      	ldr	r5, [r4, #0]
 8008626:	1961      	adds	r1, r4, r5
 8008628:	428b      	cmp	r3, r1
 800862a:	bf01      	itttt	eq
 800862c:	6819      	ldreq	r1, [r3, #0]
 800862e:	685b      	ldreq	r3, [r3, #4]
 8008630:	1949      	addeq	r1, r1, r5
 8008632:	6021      	streq	r1, [r4, #0]
 8008634:	e7ed      	b.n	8008612 <_free_r+0x22>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x50>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x46>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1855      	adds	r5, r2, r1
 8008644:	42a5      	cmp	r5, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x70>
 8008648:	6824      	ldr	r4, [r4, #0]
 800864a:	4421      	add	r1, r4
 800864c:	1854      	adds	r4, r2, r1
 800864e:	42a3      	cmp	r3, r4
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1e0      	bne.n	8008616 <_free_r+0x26>
 8008654:	681c      	ldr	r4, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	440c      	add	r4, r1
 800865c:	6014      	str	r4, [r2, #0]
 800865e:	e7da      	b.n	8008616 <_free_r+0x26>
 8008660:	d902      	bls.n	8008668 <_free_r+0x78>
 8008662:	230c      	movs	r3, #12
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	e7d6      	b.n	8008616 <_free_r+0x26>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf04      	itt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	bf04      	itt	eq
 8008678:	1949      	addeq	r1, r1, r5
 800867a:	6021      	streq	r1, [r4, #0]
 800867c:	6054      	str	r4, [r2, #4]
 800867e:	e7ca      	b.n	8008616 <_free_r+0x26>
 8008680:	b003      	add	sp, #12
 8008682:	bd30      	pop	{r4, r5, pc}
 8008684:	20001ff4 	.word	0x20001ff4

08008688 <sbrk_aligned>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4e0e      	ldr	r6, [pc, #56]	; (80086c4 <sbrk_aligned+0x3c>)
 800868c:	460c      	mov	r4, r1
 800868e:	6831      	ldr	r1, [r6, #0]
 8008690:	4605      	mov	r5, r0
 8008692:	b911      	cbnz	r1, 800869a <sbrk_aligned+0x12>
 8008694:	f000 fba6 	bl	8008de4 <_sbrk_r>
 8008698:	6030      	str	r0, [r6, #0]
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f000 fba1 	bl	8008de4 <_sbrk_r>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d00a      	beq.n	80086bc <sbrk_aligned+0x34>
 80086a6:	1cc4      	adds	r4, r0, #3
 80086a8:	f024 0403 	bic.w	r4, r4, #3
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d007      	beq.n	80086c0 <sbrk_aligned+0x38>
 80086b0:	1a21      	subs	r1, r4, r0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 fb96 	bl	8008de4 <_sbrk_r>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d101      	bne.n	80086c0 <sbrk_aligned+0x38>
 80086bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086c0:	4620      	mov	r0, r4
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	20001ff8 	.word	0x20001ff8

080086c8 <_malloc_r>:
 80086c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	1ccd      	adds	r5, r1, #3
 80086ce:	f025 0503 	bic.w	r5, r5, #3
 80086d2:	3508      	adds	r5, #8
 80086d4:	2d0c      	cmp	r5, #12
 80086d6:	bf38      	it	cc
 80086d8:	250c      	movcc	r5, #12
 80086da:	2d00      	cmp	r5, #0
 80086dc:	4607      	mov	r7, r0
 80086de:	db01      	blt.n	80086e4 <_malloc_r+0x1c>
 80086e0:	42a9      	cmp	r1, r5
 80086e2:	d905      	bls.n	80086f0 <_malloc_r+0x28>
 80086e4:	230c      	movs	r3, #12
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	2600      	movs	r6, #0
 80086ea:	4630      	mov	r0, r6
 80086ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087c4 <_malloc_r+0xfc>
 80086f4:	f000 f868 	bl	80087c8 <__malloc_lock>
 80086f8:	f8d8 3000 	ldr.w	r3, [r8]
 80086fc:	461c      	mov	r4, r3
 80086fe:	bb5c      	cbnz	r4, 8008758 <_malloc_r+0x90>
 8008700:	4629      	mov	r1, r5
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ffc0 	bl	8008688 <sbrk_aligned>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	4604      	mov	r4, r0
 800870c:	d155      	bne.n	80087ba <_malloc_r+0xf2>
 800870e:	f8d8 4000 	ldr.w	r4, [r8]
 8008712:	4626      	mov	r6, r4
 8008714:	2e00      	cmp	r6, #0
 8008716:	d145      	bne.n	80087a4 <_malloc_r+0xdc>
 8008718:	2c00      	cmp	r4, #0
 800871a:	d048      	beq.n	80087ae <_malloc_r+0xe6>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	4631      	mov	r1, r6
 8008720:	4638      	mov	r0, r7
 8008722:	eb04 0903 	add.w	r9, r4, r3
 8008726:	f000 fb5d 	bl	8008de4 <_sbrk_r>
 800872a:	4581      	cmp	r9, r0
 800872c:	d13f      	bne.n	80087ae <_malloc_r+0xe6>
 800872e:	6821      	ldr	r1, [r4, #0]
 8008730:	1a6d      	subs	r5, r5, r1
 8008732:	4629      	mov	r1, r5
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa7 	bl	8008688 <sbrk_aligned>
 800873a:	3001      	adds	r0, #1
 800873c:	d037      	beq.n	80087ae <_malloc_r+0xe6>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	442b      	add	r3, r5
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	f8d8 3000 	ldr.w	r3, [r8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d038      	beq.n	80087be <_malloc_r+0xf6>
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	42a2      	cmp	r2, r4
 8008750:	d12b      	bne.n	80087aa <_malloc_r+0xe2>
 8008752:	2200      	movs	r2, #0
 8008754:	605a      	str	r2, [r3, #4]
 8008756:	e00f      	b.n	8008778 <_malloc_r+0xb0>
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	1b52      	subs	r2, r2, r5
 800875c:	d41f      	bmi.n	800879e <_malloc_r+0xd6>
 800875e:	2a0b      	cmp	r2, #11
 8008760:	d917      	bls.n	8008792 <_malloc_r+0xca>
 8008762:	1961      	adds	r1, r4, r5
 8008764:	42a3      	cmp	r3, r4
 8008766:	6025      	str	r5, [r4, #0]
 8008768:	bf18      	it	ne
 800876a:	6059      	strne	r1, [r3, #4]
 800876c:	6863      	ldr	r3, [r4, #4]
 800876e:	bf08      	it	eq
 8008770:	f8c8 1000 	streq.w	r1, [r8]
 8008774:	5162      	str	r2, [r4, r5]
 8008776:	604b      	str	r3, [r1, #4]
 8008778:	4638      	mov	r0, r7
 800877a:	f104 060b 	add.w	r6, r4, #11
 800877e:	f000 f829 	bl	80087d4 <__malloc_unlock>
 8008782:	f026 0607 	bic.w	r6, r6, #7
 8008786:	1d23      	adds	r3, r4, #4
 8008788:	1af2      	subs	r2, r6, r3
 800878a:	d0ae      	beq.n	80086ea <_malloc_r+0x22>
 800878c:	1b9b      	subs	r3, r3, r6
 800878e:	50a3      	str	r3, [r4, r2]
 8008790:	e7ab      	b.n	80086ea <_malloc_r+0x22>
 8008792:	42a3      	cmp	r3, r4
 8008794:	6862      	ldr	r2, [r4, #4]
 8008796:	d1dd      	bne.n	8008754 <_malloc_r+0x8c>
 8008798:	f8c8 2000 	str.w	r2, [r8]
 800879c:	e7ec      	b.n	8008778 <_malloc_r+0xb0>
 800879e:	4623      	mov	r3, r4
 80087a0:	6864      	ldr	r4, [r4, #4]
 80087a2:	e7ac      	b.n	80086fe <_malloc_r+0x36>
 80087a4:	4634      	mov	r4, r6
 80087a6:	6876      	ldr	r6, [r6, #4]
 80087a8:	e7b4      	b.n	8008714 <_malloc_r+0x4c>
 80087aa:	4613      	mov	r3, r2
 80087ac:	e7cc      	b.n	8008748 <_malloc_r+0x80>
 80087ae:	230c      	movs	r3, #12
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	4638      	mov	r0, r7
 80087b4:	f000 f80e 	bl	80087d4 <__malloc_unlock>
 80087b8:	e797      	b.n	80086ea <_malloc_r+0x22>
 80087ba:	6025      	str	r5, [r4, #0]
 80087bc:	e7dc      	b.n	8008778 <_malloc_r+0xb0>
 80087be:	605b      	str	r3, [r3, #4]
 80087c0:	deff      	udf	#255	; 0xff
 80087c2:	bf00      	nop
 80087c4:	20001ff4 	.word	0x20001ff4

080087c8 <__malloc_lock>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__malloc_lock+0x8>)
 80087ca:	f7ff bf0f 	b.w	80085ec <__retarget_lock_acquire_recursive>
 80087ce:	bf00      	nop
 80087d0:	20001ff0 	.word	0x20001ff0

080087d4 <__malloc_unlock>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__malloc_unlock+0x8>)
 80087d6:	f7ff bf0a 	b.w	80085ee <__retarget_lock_release_recursive>
 80087da:	bf00      	nop
 80087dc:	20001ff0 	.word	0x20001ff0

080087e0 <__ssputs_r>:
 80087e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	688e      	ldr	r6, [r1, #8]
 80087e6:	461f      	mov	r7, r3
 80087e8:	42be      	cmp	r6, r7
 80087ea:	680b      	ldr	r3, [r1, #0]
 80087ec:	4682      	mov	sl, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	4690      	mov	r8, r2
 80087f2:	d82c      	bhi.n	800884e <__ssputs_r+0x6e>
 80087f4:	898a      	ldrh	r2, [r1, #12]
 80087f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087fa:	d026      	beq.n	800884a <__ssputs_r+0x6a>
 80087fc:	6965      	ldr	r5, [r4, #20]
 80087fe:	6909      	ldr	r1, [r1, #16]
 8008800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008804:	eba3 0901 	sub.w	r9, r3, r1
 8008808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800880c:	1c7b      	adds	r3, r7, #1
 800880e:	444b      	add	r3, r9
 8008810:	106d      	asrs	r5, r5, #1
 8008812:	429d      	cmp	r5, r3
 8008814:	bf38      	it	cc
 8008816:	461d      	movcc	r5, r3
 8008818:	0553      	lsls	r3, r2, #21
 800881a:	d527      	bpl.n	800886c <__ssputs_r+0x8c>
 800881c:	4629      	mov	r1, r5
 800881e:	f7ff ff53 	bl	80086c8 <_malloc_r>
 8008822:	4606      	mov	r6, r0
 8008824:	b360      	cbz	r0, 8008880 <__ssputs_r+0xa0>
 8008826:	6921      	ldr	r1, [r4, #16]
 8008828:	464a      	mov	r2, r9
 800882a:	f000 faeb 	bl	8008e04 <memcpy>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	6126      	str	r6, [r4, #16]
 800883c:	6165      	str	r5, [r4, #20]
 800883e:	444e      	add	r6, r9
 8008840:	eba5 0509 	sub.w	r5, r5, r9
 8008844:	6026      	str	r6, [r4, #0]
 8008846:	60a5      	str	r5, [r4, #8]
 8008848:	463e      	mov	r6, r7
 800884a:	42be      	cmp	r6, r7
 800884c:	d900      	bls.n	8008850 <__ssputs_r+0x70>
 800884e:	463e      	mov	r6, r7
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	4632      	mov	r2, r6
 8008854:	4641      	mov	r1, r8
 8008856:	f000 faab 	bl	8008db0 <memmove>
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	1b9b      	subs	r3, r3, r6
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	4433      	add	r3, r6
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	2000      	movs	r0, #0
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	462a      	mov	r2, r5
 800886e:	f000 fad7 	bl	8008e20 <_realloc_r>
 8008872:	4606      	mov	r6, r0
 8008874:	2800      	cmp	r0, #0
 8008876:	d1e0      	bne.n	800883a <__ssputs_r+0x5a>
 8008878:	6921      	ldr	r1, [r4, #16]
 800887a:	4650      	mov	r0, sl
 800887c:	f7ff feb8 	bl	80085f0 <_free_r>
 8008880:	230c      	movs	r3, #12
 8008882:	f8ca 3000 	str.w	r3, [sl]
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008892:	e7e9      	b.n	8008868 <__ssputs_r+0x88>

08008894 <_svfiprintf_r>:
 8008894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	4698      	mov	r8, r3
 800889a:	898b      	ldrh	r3, [r1, #12]
 800889c:	061b      	lsls	r3, r3, #24
 800889e:	b09d      	sub	sp, #116	; 0x74
 80088a0:	4607      	mov	r7, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	4614      	mov	r4, r2
 80088a6:	d50e      	bpl.n	80088c6 <_svfiprintf_r+0x32>
 80088a8:	690b      	ldr	r3, [r1, #16]
 80088aa:	b963      	cbnz	r3, 80088c6 <_svfiprintf_r+0x32>
 80088ac:	2140      	movs	r1, #64	; 0x40
 80088ae:	f7ff ff0b 	bl	80086c8 <_malloc_r>
 80088b2:	6028      	str	r0, [r5, #0]
 80088b4:	6128      	str	r0, [r5, #16]
 80088b6:	b920      	cbnz	r0, 80088c2 <_svfiprintf_r+0x2e>
 80088b8:	230c      	movs	r3, #12
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c0:	e0d0      	b.n	8008a64 <_svfiprintf_r+0x1d0>
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	616b      	str	r3, [r5, #20]
 80088c6:	2300      	movs	r3, #0
 80088c8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ca:	2320      	movs	r3, #32
 80088cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088d4:	2330      	movs	r3, #48	; 0x30
 80088d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a7c <_svfiprintf_r+0x1e8>
 80088da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088de:	f04f 0901 	mov.w	r9, #1
 80088e2:	4623      	mov	r3, r4
 80088e4:	469a      	mov	sl, r3
 80088e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ea:	b10a      	cbz	r2, 80088f0 <_svfiprintf_r+0x5c>
 80088ec:	2a25      	cmp	r2, #37	; 0x25
 80088ee:	d1f9      	bne.n	80088e4 <_svfiprintf_r+0x50>
 80088f0:	ebba 0b04 	subs.w	fp, sl, r4
 80088f4:	d00b      	beq.n	800890e <_svfiprintf_r+0x7a>
 80088f6:	465b      	mov	r3, fp
 80088f8:	4622      	mov	r2, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	4638      	mov	r0, r7
 80088fe:	f7ff ff6f 	bl	80087e0 <__ssputs_r>
 8008902:	3001      	adds	r0, #1
 8008904:	f000 80a9 	beq.w	8008a5a <_svfiprintf_r+0x1c6>
 8008908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890a:	445a      	add	r2, fp
 800890c:	9209      	str	r2, [sp, #36]	; 0x24
 800890e:	f89a 3000 	ldrb.w	r3, [sl]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 80a1 	beq.w	8008a5a <_svfiprintf_r+0x1c6>
 8008918:	2300      	movs	r3, #0
 800891a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800891e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008922:	f10a 0a01 	add.w	sl, sl, #1
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800892e:	931a      	str	r3, [sp, #104]	; 0x68
 8008930:	4654      	mov	r4, sl
 8008932:	2205      	movs	r2, #5
 8008934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008938:	4850      	ldr	r0, [pc, #320]	; (8008a7c <_svfiprintf_r+0x1e8>)
 800893a:	f7f7 fc51 	bl	80001e0 <memchr>
 800893e:	9a04      	ldr	r2, [sp, #16]
 8008940:	b9d8      	cbnz	r0, 800897a <_svfiprintf_r+0xe6>
 8008942:	06d0      	lsls	r0, r2, #27
 8008944:	bf44      	itt	mi
 8008946:	2320      	movmi	r3, #32
 8008948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800894c:	0711      	lsls	r1, r2, #28
 800894e:	bf44      	itt	mi
 8008950:	232b      	movmi	r3, #43	; 0x2b
 8008952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008956:	f89a 3000 	ldrb.w	r3, [sl]
 800895a:	2b2a      	cmp	r3, #42	; 0x2a
 800895c:	d015      	beq.n	800898a <_svfiprintf_r+0xf6>
 800895e:	9a07      	ldr	r2, [sp, #28]
 8008960:	4654      	mov	r4, sl
 8008962:	2000      	movs	r0, #0
 8008964:	f04f 0c0a 	mov.w	ip, #10
 8008968:	4621      	mov	r1, r4
 800896a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800896e:	3b30      	subs	r3, #48	; 0x30
 8008970:	2b09      	cmp	r3, #9
 8008972:	d94d      	bls.n	8008a10 <_svfiprintf_r+0x17c>
 8008974:	b1b0      	cbz	r0, 80089a4 <_svfiprintf_r+0x110>
 8008976:	9207      	str	r2, [sp, #28]
 8008978:	e014      	b.n	80089a4 <_svfiprintf_r+0x110>
 800897a:	eba0 0308 	sub.w	r3, r0, r8
 800897e:	fa09 f303 	lsl.w	r3, r9, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	46a2      	mov	sl, r4
 8008988:	e7d2      	b.n	8008930 <_svfiprintf_r+0x9c>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	1d19      	adds	r1, r3, #4
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	9103      	str	r1, [sp, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfbb      	ittet	lt
 8008996:	425b      	neglt	r3, r3
 8008998:	f042 0202 	orrlt.w	r2, r2, #2
 800899c:	9307      	strge	r3, [sp, #28]
 800899e:	9307      	strlt	r3, [sp, #28]
 80089a0:	bfb8      	it	lt
 80089a2:	9204      	strlt	r2, [sp, #16]
 80089a4:	7823      	ldrb	r3, [r4, #0]
 80089a6:	2b2e      	cmp	r3, #46	; 0x2e
 80089a8:	d10c      	bne.n	80089c4 <_svfiprintf_r+0x130>
 80089aa:	7863      	ldrb	r3, [r4, #1]
 80089ac:	2b2a      	cmp	r3, #42	; 0x2a
 80089ae:	d134      	bne.n	8008a1a <_svfiprintf_r+0x186>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	1d1a      	adds	r2, r3, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	9203      	str	r2, [sp, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bfb8      	it	lt
 80089bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089c0:	3402      	adds	r4, #2
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a8c <_svfiprintf_r+0x1f8>
 80089c8:	7821      	ldrb	r1, [r4, #0]
 80089ca:	2203      	movs	r2, #3
 80089cc:	4650      	mov	r0, sl
 80089ce:	f7f7 fc07 	bl	80001e0 <memchr>
 80089d2:	b138      	cbz	r0, 80089e4 <_svfiprintf_r+0x150>
 80089d4:	9b04      	ldr	r3, [sp, #16]
 80089d6:	eba0 000a 	sub.w	r0, r0, sl
 80089da:	2240      	movs	r2, #64	; 0x40
 80089dc:	4082      	lsls	r2, r0
 80089de:	4313      	orrs	r3, r2
 80089e0:	3401      	adds	r4, #1
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e8:	4825      	ldr	r0, [pc, #148]	; (8008a80 <_svfiprintf_r+0x1ec>)
 80089ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ee:	2206      	movs	r2, #6
 80089f0:	f7f7 fbf6 	bl	80001e0 <memchr>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d038      	beq.n	8008a6a <_svfiprintf_r+0x1d6>
 80089f8:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <_svfiprintf_r+0x1f0>)
 80089fa:	bb1b      	cbnz	r3, 8008a44 <_svfiprintf_r+0x1b0>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	3307      	adds	r3, #7
 8008a00:	f023 0307 	bic.w	r3, r3, #7
 8008a04:	3308      	adds	r3, #8
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0a:	4433      	add	r3, r6
 8008a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0e:	e768      	b.n	80088e2 <_svfiprintf_r+0x4e>
 8008a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a14:	460c      	mov	r4, r1
 8008a16:	2001      	movs	r0, #1
 8008a18:	e7a6      	b.n	8008968 <_svfiprintf_r+0xd4>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	3401      	adds	r4, #1
 8008a1e:	9305      	str	r3, [sp, #20]
 8008a20:	4619      	mov	r1, r3
 8008a22:	f04f 0c0a 	mov.w	ip, #10
 8008a26:	4620      	mov	r0, r4
 8008a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2c:	3a30      	subs	r2, #48	; 0x30
 8008a2e:	2a09      	cmp	r2, #9
 8008a30:	d903      	bls.n	8008a3a <_svfiprintf_r+0x1a6>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0c6      	beq.n	80089c4 <_svfiprintf_r+0x130>
 8008a36:	9105      	str	r1, [sp, #20]
 8008a38:	e7c4      	b.n	80089c4 <_svfiprintf_r+0x130>
 8008a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a3e:	4604      	mov	r4, r0
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7f0      	b.n	8008a26 <_svfiprintf_r+0x192>
 8008a44:	ab03      	add	r3, sp, #12
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <_svfiprintf_r+0x1f4>)
 8008a4c:	a904      	add	r1, sp, #16
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f3af 8000 	nop.w
 8008a54:	1c42      	adds	r2, r0, #1
 8008a56:	4606      	mov	r6, r0
 8008a58:	d1d6      	bne.n	8008a08 <_svfiprintf_r+0x174>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	065b      	lsls	r3, r3, #25
 8008a5e:	f53f af2d 	bmi.w	80088bc <_svfiprintf_r+0x28>
 8008a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a64:	b01d      	add	sp, #116	; 0x74
 8008a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <_svfiprintf_r+0x1f4>)
 8008a72:	a904      	add	r1, sp, #16
 8008a74:	4638      	mov	r0, r7
 8008a76:	f000 f879 	bl	8008b6c <_printf_i>
 8008a7a:	e7eb      	b.n	8008a54 <_svfiprintf_r+0x1c0>
 8008a7c:	08008f14 	.word	0x08008f14
 8008a80:	08008f1e 	.word	0x08008f1e
 8008a84:	00000000 	.word	0x00000000
 8008a88:	080087e1 	.word	0x080087e1
 8008a8c:	08008f1a 	.word	0x08008f1a

08008a90 <_printf_common>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	4616      	mov	r6, r2
 8008a96:	4699      	mov	r9, r3
 8008a98:	688a      	ldr	r2, [r1, #8]
 8008a9a:	690b      	ldr	r3, [r1, #16]
 8008a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	bfb8      	it	lt
 8008aa4:	4613      	movlt	r3, r2
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aac:	4607      	mov	r7, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	b10a      	cbz	r2, 8008ab6 <_printf_common+0x26>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	0699      	lsls	r1, r3, #26
 8008aba:	bf42      	ittt	mi
 8008abc:	6833      	ldrmi	r3, [r6, #0]
 8008abe:	3302      	addmi	r3, #2
 8008ac0:	6033      	strmi	r3, [r6, #0]
 8008ac2:	6825      	ldr	r5, [r4, #0]
 8008ac4:	f015 0506 	ands.w	r5, r5, #6
 8008ac8:	d106      	bne.n	8008ad8 <_printf_common+0x48>
 8008aca:	f104 0a19 	add.w	sl, r4, #25
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	6832      	ldr	r2, [r6, #0]
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	42ab      	cmp	r3, r5
 8008ad6:	dc26      	bgt.n	8008b26 <_printf_common+0x96>
 8008ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008adc:	1e13      	subs	r3, r2, #0
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	bf18      	it	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	0692      	lsls	r2, r2, #26
 8008ae6:	d42b      	bmi.n	8008b40 <_printf_common+0xb0>
 8008ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aec:	4649      	mov	r1, r9
 8008aee:	4638      	mov	r0, r7
 8008af0:	47c0      	blx	r8
 8008af2:	3001      	adds	r0, #1
 8008af4:	d01e      	beq.n	8008b34 <_printf_common+0xa4>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	f003 0306 	and.w	r3, r3, #6
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	bf02      	ittt	eq
 8008b02:	68e5      	ldreq	r5, [r4, #12]
 8008b04:	6833      	ldreq	r3, [r6, #0]
 8008b06:	1aed      	subeq	r5, r5, r3
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	bf0c      	ite	eq
 8008b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b10:	2500      	movne	r5, #0
 8008b12:	4293      	cmp	r3, r2
 8008b14:	bfc4      	itt	gt
 8008b16:	1a9b      	subgt	r3, r3, r2
 8008b18:	18ed      	addgt	r5, r5, r3
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	341a      	adds	r4, #26
 8008b1e:	42b5      	cmp	r5, r6
 8008b20:	d11a      	bne.n	8008b58 <_printf_common+0xc8>
 8008b22:	2000      	movs	r0, #0
 8008b24:	e008      	b.n	8008b38 <_printf_common+0xa8>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	47c0      	blx	r8
 8008b30:	3001      	adds	r0, #1
 8008b32:	d103      	bne.n	8008b3c <_printf_common+0xac>
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	e7c6      	b.n	8008ace <_printf_common+0x3e>
 8008b40:	18e1      	adds	r1, r4, r3
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	2030      	movs	r0, #48	; 0x30
 8008b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b4a:	4422      	add	r2, r4
 8008b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b54:	3302      	adds	r3, #2
 8008b56:	e7c7      	b.n	8008ae8 <_printf_common+0x58>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	4638      	mov	r0, r7
 8008b60:	47c0      	blx	r8
 8008b62:	3001      	adds	r0, #1
 8008b64:	d0e6      	beq.n	8008b34 <_printf_common+0xa4>
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7d9      	b.n	8008b1e <_printf_common+0x8e>
	...

08008b6c <_printf_i>:
 8008b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	7e0f      	ldrb	r7, [r1, #24]
 8008b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b74:	2f78      	cmp	r7, #120	; 0x78
 8008b76:	4691      	mov	r9, r2
 8008b78:	4680      	mov	r8, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	469a      	mov	sl, r3
 8008b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b82:	d807      	bhi.n	8008b94 <_printf_i+0x28>
 8008b84:	2f62      	cmp	r7, #98	; 0x62
 8008b86:	d80a      	bhi.n	8008b9e <_printf_i+0x32>
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	f000 80d4 	beq.w	8008d36 <_printf_i+0x1ca>
 8008b8e:	2f58      	cmp	r7, #88	; 0x58
 8008b90:	f000 80c0 	beq.w	8008d14 <_printf_i+0x1a8>
 8008b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b9c:	e03a      	b.n	8008c14 <_printf_i+0xa8>
 8008b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ba2:	2b15      	cmp	r3, #21
 8008ba4:	d8f6      	bhi.n	8008b94 <_printf_i+0x28>
 8008ba6:	a101      	add	r1, pc, #4	; (adr r1, 8008bac <_printf_i+0x40>)
 8008ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c19 	.word	0x08008c19
 8008bb4:	08008b95 	.word	0x08008b95
 8008bb8:	08008b95 	.word	0x08008b95
 8008bbc:	08008b95 	.word	0x08008b95
 8008bc0:	08008b95 	.word	0x08008b95
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008b95 	.word	0x08008b95
 8008bcc:	08008b95 	.word	0x08008b95
 8008bd0:	08008b95 	.word	0x08008b95
 8008bd4:	08008b95 	.word	0x08008b95
 8008bd8:	08008d1d 	.word	0x08008d1d
 8008bdc:	08008c45 	.word	0x08008c45
 8008be0:	08008cd7 	.word	0x08008cd7
 8008be4:	08008b95 	.word	0x08008b95
 8008be8:	08008b95 	.word	0x08008b95
 8008bec:	08008d3f 	.word	0x08008d3f
 8008bf0:	08008b95 	.word	0x08008b95
 8008bf4:	08008c45 	.word	0x08008c45
 8008bf8:	08008b95 	.word	0x08008b95
 8008bfc:	08008b95 	.word	0x08008b95
 8008c00:	08008cdf 	.word	0x08008cdf
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	602a      	str	r2, [r5, #0]
 8008c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c14:	2301      	movs	r3, #1
 8008c16:	e09f      	b.n	8008d58 <_printf_i+0x1ec>
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	0607      	lsls	r7, r0, #24
 8008c1e:	f103 0104 	add.w	r1, r3, #4
 8008c22:	6029      	str	r1, [r5, #0]
 8008c24:	d501      	bpl.n	8008c2a <_printf_i+0xbe>
 8008c26:	681e      	ldr	r6, [r3, #0]
 8008c28:	e003      	b.n	8008c32 <_printf_i+0xc6>
 8008c2a:	0646      	lsls	r6, r0, #25
 8008c2c:	d5fb      	bpl.n	8008c26 <_printf_i+0xba>
 8008c2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	da03      	bge.n	8008c3e <_printf_i+0xd2>
 8008c36:	232d      	movs	r3, #45	; 0x2d
 8008c38:	4276      	negs	r6, r6
 8008c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c3e:	485a      	ldr	r0, [pc, #360]	; (8008da8 <_printf_i+0x23c>)
 8008c40:	230a      	movs	r3, #10
 8008c42:	e012      	b.n	8008c6a <_printf_i+0xfe>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	1d19      	adds	r1, r3, #4
 8008c4a:	6029      	str	r1, [r5, #0]
 8008c4c:	0605      	lsls	r5, r0, #24
 8008c4e:	d501      	bpl.n	8008c54 <_printf_i+0xe8>
 8008c50:	681e      	ldr	r6, [r3, #0]
 8008c52:	e002      	b.n	8008c5a <_printf_i+0xee>
 8008c54:	0641      	lsls	r1, r0, #25
 8008c56:	d5fb      	bpl.n	8008c50 <_printf_i+0xe4>
 8008c58:	881e      	ldrh	r6, [r3, #0]
 8008c5a:	4853      	ldr	r0, [pc, #332]	; (8008da8 <_printf_i+0x23c>)
 8008c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c5e:	bf0c      	ite	eq
 8008c60:	2308      	moveq	r3, #8
 8008c62:	230a      	movne	r3, #10
 8008c64:	2100      	movs	r1, #0
 8008c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c6a:	6865      	ldr	r5, [r4, #4]
 8008c6c:	60a5      	str	r5, [r4, #8]
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	bfa2      	ittt	ge
 8008c72:	6821      	ldrge	r1, [r4, #0]
 8008c74:	f021 0104 	bicge.w	r1, r1, #4
 8008c78:	6021      	strge	r1, [r4, #0]
 8008c7a:	b90e      	cbnz	r6, 8008c80 <_printf_i+0x114>
 8008c7c:	2d00      	cmp	r5, #0
 8008c7e:	d04b      	beq.n	8008d18 <_printf_i+0x1ac>
 8008c80:	4615      	mov	r5, r2
 8008c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c86:	fb03 6711 	mls	r7, r3, r1, r6
 8008c8a:	5dc7      	ldrb	r7, [r0, r7]
 8008c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c90:	4637      	mov	r7, r6
 8008c92:	42bb      	cmp	r3, r7
 8008c94:	460e      	mov	r6, r1
 8008c96:	d9f4      	bls.n	8008c82 <_printf_i+0x116>
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d10b      	bne.n	8008cb4 <_printf_i+0x148>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	07de      	lsls	r6, r3, #31
 8008ca0:	d508      	bpl.n	8008cb4 <_printf_i+0x148>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	bfde      	ittt	le
 8008caa:	2330      	movle	r3, #48	; 0x30
 8008cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008cb4:	1b52      	subs	r2, r2, r5
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	f8cd a000 	str.w	sl, [sp]
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	aa03      	add	r2, sp, #12
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f7ff fee4 	bl	8008a90 <_printf_common>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d14a      	bne.n	8008d62 <_printf_i+0x1f6>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cd0:	b004      	add	sp, #16
 8008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f043 0320 	orr.w	r3, r3, #32
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	4833      	ldr	r0, [pc, #204]	; (8008dac <_printf_i+0x240>)
 8008ce0:	2778      	movs	r7, #120	; 0x78
 8008ce2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	6829      	ldr	r1, [r5, #0]
 8008cea:	061f      	lsls	r7, r3, #24
 8008cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cf0:	d402      	bmi.n	8008cf8 <_printf_i+0x18c>
 8008cf2:	065f      	lsls	r7, r3, #25
 8008cf4:	bf48      	it	mi
 8008cf6:	b2b6      	uxthmi	r6, r6
 8008cf8:	07df      	lsls	r7, r3, #31
 8008cfa:	bf48      	it	mi
 8008cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8008d00:	6029      	str	r1, [r5, #0]
 8008d02:	bf48      	it	mi
 8008d04:	6023      	strmi	r3, [r4, #0]
 8008d06:	b91e      	cbnz	r6, 8008d10 <_printf_i+0x1a4>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	f023 0320 	bic.w	r3, r3, #32
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	2310      	movs	r3, #16
 8008d12:	e7a7      	b.n	8008c64 <_printf_i+0xf8>
 8008d14:	4824      	ldr	r0, [pc, #144]	; (8008da8 <_printf_i+0x23c>)
 8008d16:	e7e4      	b.n	8008ce2 <_printf_i+0x176>
 8008d18:	4615      	mov	r5, r2
 8008d1a:	e7bd      	b.n	8008c98 <_printf_i+0x12c>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	6826      	ldr	r6, [r4, #0]
 8008d20:	6961      	ldr	r1, [r4, #20]
 8008d22:	1d18      	adds	r0, r3, #4
 8008d24:	6028      	str	r0, [r5, #0]
 8008d26:	0635      	lsls	r5, r6, #24
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	d501      	bpl.n	8008d30 <_printf_i+0x1c4>
 8008d2c:	6019      	str	r1, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <_printf_i+0x1ca>
 8008d30:	0670      	lsls	r0, r6, #25
 8008d32:	d5fb      	bpl.n	8008d2c <_printf_i+0x1c0>
 8008d34:	8019      	strh	r1, [r3, #0]
 8008d36:	2300      	movs	r3, #0
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	4615      	mov	r5, r2
 8008d3c:	e7bc      	b.n	8008cb8 <_printf_i+0x14c>
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	1d1a      	adds	r2, r3, #4
 8008d42:	602a      	str	r2, [r5, #0]
 8008d44:	681d      	ldr	r5, [r3, #0]
 8008d46:	6862      	ldr	r2, [r4, #4]
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f7f7 fa48 	bl	80001e0 <memchr>
 8008d50:	b108      	cbz	r0, 8008d56 <_printf_i+0x1ea>
 8008d52:	1b40      	subs	r0, r0, r5
 8008d54:	6060      	str	r0, [r4, #4]
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d60:	e7aa      	b.n	8008cb8 <_printf_i+0x14c>
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	462a      	mov	r2, r5
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d0ad      	beq.n	8008ccc <_printf_i+0x160>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	079b      	lsls	r3, r3, #30
 8008d74:	d413      	bmi.n	8008d9e <_printf_i+0x232>
 8008d76:	68e0      	ldr	r0, [r4, #12]
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	4298      	cmp	r0, r3
 8008d7c:	bfb8      	it	lt
 8008d7e:	4618      	movlt	r0, r3
 8008d80:	e7a6      	b.n	8008cd0 <_printf_i+0x164>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4632      	mov	r2, r6
 8008d86:	4649      	mov	r1, r9
 8008d88:	4640      	mov	r0, r8
 8008d8a:	47d0      	blx	sl
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d09d      	beq.n	8008ccc <_printf_i+0x160>
 8008d90:	3501      	adds	r5, #1
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	9903      	ldr	r1, [sp, #12]
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	dcf2      	bgt.n	8008d82 <_printf_i+0x216>
 8008d9c:	e7eb      	b.n	8008d76 <_printf_i+0x20a>
 8008d9e:	2500      	movs	r5, #0
 8008da0:	f104 0619 	add.w	r6, r4, #25
 8008da4:	e7f5      	b.n	8008d92 <_printf_i+0x226>
 8008da6:	bf00      	nop
 8008da8:	08008f25 	.word	0x08008f25
 8008dac:	08008f36 	.word	0x08008f36

08008db0 <memmove>:
 8008db0:	4288      	cmp	r0, r1
 8008db2:	b510      	push	{r4, lr}
 8008db4:	eb01 0402 	add.w	r4, r1, r2
 8008db8:	d902      	bls.n	8008dc0 <memmove+0x10>
 8008dba:	4284      	cmp	r4, r0
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	d807      	bhi.n	8008dd0 <memmove+0x20>
 8008dc0:	1e43      	subs	r3, r0, #1
 8008dc2:	42a1      	cmp	r1, r4
 8008dc4:	d008      	beq.n	8008dd8 <memmove+0x28>
 8008dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dce:	e7f8      	b.n	8008dc2 <memmove+0x12>
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	428a      	cmp	r2, r1
 8008dd6:	d100      	bne.n	8008dda <memmove+0x2a>
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008de2:	e7f7      	b.n	8008dd4 <memmove+0x24>

08008de4 <_sbrk_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_sbrk_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f7 ff20 	bl	8000c34 <_sbrk>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_sbrk_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_sbrk_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20001fec 	.word	0x20001fec

08008e04 <memcpy>:
 8008e04:	440a      	add	r2, r1
 8008e06:	4291      	cmp	r1, r2
 8008e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e0c:	d100      	bne.n	8008e10 <memcpy+0xc>
 8008e0e:	4770      	bx	lr
 8008e10:	b510      	push	{r4, lr}
 8008e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e1a:	4291      	cmp	r1, r2
 8008e1c:	d1f9      	bne.n	8008e12 <memcpy+0xe>
 8008e1e:	bd10      	pop	{r4, pc}

08008e20 <_realloc_r>:
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	4680      	mov	r8, r0
 8008e26:	4614      	mov	r4, r2
 8008e28:	460e      	mov	r6, r1
 8008e2a:	b921      	cbnz	r1, 8008e36 <_realloc_r+0x16>
 8008e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e30:	4611      	mov	r1, r2
 8008e32:	f7ff bc49 	b.w	80086c8 <_malloc_r>
 8008e36:	b92a      	cbnz	r2, 8008e44 <_realloc_r+0x24>
 8008e38:	f7ff fbda 	bl	80085f0 <_free_r>
 8008e3c:	4625      	mov	r5, r4
 8008e3e:	4628      	mov	r0, r5
 8008e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e44:	f000 f81b 	bl	8008e7e <_malloc_usable_size_r>
 8008e48:	4284      	cmp	r4, r0
 8008e4a:	4607      	mov	r7, r0
 8008e4c:	d802      	bhi.n	8008e54 <_realloc_r+0x34>
 8008e4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e52:	d812      	bhi.n	8008e7a <_realloc_r+0x5a>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7ff fc36 	bl	80086c8 <_malloc_r>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0ed      	beq.n	8008e3e <_realloc_r+0x1e>
 8008e62:	42bc      	cmp	r4, r7
 8008e64:	4622      	mov	r2, r4
 8008e66:	4631      	mov	r1, r6
 8008e68:	bf28      	it	cs
 8008e6a:	463a      	movcs	r2, r7
 8008e6c:	f7ff ffca 	bl	8008e04 <memcpy>
 8008e70:	4631      	mov	r1, r6
 8008e72:	4640      	mov	r0, r8
 8008e74:	f7ff fbbc 	bl	80085f0 <_free_r>
 8008e78:	e7e1      	b.n	8008e3e <_realloc_r+0x1e>
 8008e7a:	4635      	mov	r5, r6
 8008e7c:	e7df      	b.n	8008e3e <_realloc_r+0x1e>

08008e7e <_malloc_usable_size_r>:
 8008e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e82:	1f18      	subs	r0, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfbc      	itt	lt
 8008e88:	580b      	ldrlt	r3, [r1, r0]
 8008e8a:	18c0      	addlt	r0, r0, r3
 8008e8c:	4770      	bx	lr
	...

08008e90 <_init>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	bf00      	nop
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr

08008e9c <_fini>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr
