
STM32_SHIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c98  08009c98  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca0  08009ca0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca0  08009ca0  00019ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e9c  200000fc  08009da4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f98  08009da4  00021f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b2b  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e7  00000000  00000000  00035c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f29  00000000  00000000  0003a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191bb  00000000  00000000  0003b679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ba3  00000000  00000000  00054834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091993  00000000  00000000  0006b3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005328  00000000  00000000  000fcd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00102094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009be8 	.word	0x08009be8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08009be8 	.word	0x08009be8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <xprintf>:
#include <stdint.h>
#include <stdarg.h>
#include <stdio.h>

int xprintf(const char* fmt, ...) {
 80004d4:	b40f      	push	{r0, r1, r2, r3}
 80004d6:	b480      	push	{r7}
 80004d8:	b0a3      	sub	sp, #140	; 0x8c
 80004da:	af00      	add	r7, sp, #0
	return -1; // NO BLOCK RETURN
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (USBD_FAIL == rc) {
        return 0;
    }

    return len;
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	378c      	adds	r7, #140	; 0x8c
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	b004      	add	sp, #16
 80004ec:	4770      	bx	lr

080004ee <constrain>:


#define PID_OUTPUT_MAX 65535
#define ERROR_INTEGRAL_MAX 10000

float constrain(float x, float min, float max) {
 80004ee:	b480      	push	{r7}
 80004f0:	b085      	sub	sp, #20
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	ed87 0a03 	vstr	s0, [r7, #12]
 80004f8:	edc7 0a02 	vstr	s1, [r7, #8]
 80004fc:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x < min) {
 8000500:	ed97 7a03 	vldr	s14, [r7, #12]
 8000504:	edd7 7a02 	vldr	s15, [r7, #8]
 8000508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800050c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000510:	d501      	bpl.n	8000516 <constrain+0x28>
		return min;
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	e00b      	b.n	800052e <constrain+0x40>
	} else if (x > max) {
 8000516:	ed97 7a03 	vldr	s14, [r7, #12]
 800051a:	edd7 7a01 	vldr	s15, [r7, #4]
 800051e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000526:	dd01      	ble.n	800052c <constrain+0x3e>
		return max;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	e000      	b.n	800052e <constrain+0x40>
	} else {
		return x;
 800052c:	68fb      	ldr	r3, [r7, #12]
	}
}
 800052e:	ee07 3a90 	vmov	s15, r3
 8000532:	eeb0 0a67 	vmov.f32	s0, s15
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <GetMicros>:

float lerpf(float a, float b, float t) {
    return (b - a) * t;
}

static inline float GetMicros() {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    uint32_t ms;
    uint32_t st;

    do {
        ms = HAL_GetTick();
 8000546:	f001 f877 	bl	8001638 <HAL_GetTick>
 800054a:	6078      	str	r0, [r7, #4]
        st = SysTick->VAL;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <GetMicros+0x54>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	603b      	str	r3, [r7, #0]
        asm volatile("nop");
 8000552:	bf00      	nop
        asm volatile("nop");
 8000554:	bf00      	nop
    } while (ms != HAL_GetTick());
 8000556:	f001 f86f 	bl	8001638 <HAL_GetTick>
 800055a:	4602      	mov	r2, r0
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4293      	cmp	r3, r2
 8000560:	d1f1      	bne.n	8000546 <GetMicros+0x6>

    return (float) (ms * 1000 - st / ((SysTick->LOAD + 1) / 1000));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000568:	fb03 f202 	mul.w	r2, r3, r2
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <GetMicros+0x54>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	4909      	ldr	r1, [pc, #36]	; (8000598 <GetMicros+0x58>)
 8000574:	fba1 1303 	umull	r1, r3, r1, r3
 8000578:	099b      	lsrs	r3, r3, #6
 800057a:	6839      	ldr	r1, [r7, #0]
 800057c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800058a:	eeb0 0a67 	vmov.f32	s0, s15
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	e000e010 	.word	0xe000e010
 8000598:	10624dd3 	.word	0x10624dd3

0800059c <getMotorDeltaLeft>:

    return output;
}


int32_t getMotorDeltaLeft() {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;
	static int32_t delta_left = 0;

	int32_t current_pulse = TIM1->CNT;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <getMotorDeltaLeft+0x5c>)
 80005a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a6:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 80005a8:	f001 f846 	bl	8001638 <HAL_GetTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <getMotorDeltaLeft+0x60>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <getMotorDeltaLeft+0x64>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	603b      	str	r3, [r7, #0]

	if (delta_tick > 5) {
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b05      	cmp	r3, #5
 80005c8:	dd0f      	ble.n	80005ea <getMotorDeltaLeft+0x4e>
		delta_left = delta_pulse * 1000 / delta_tick;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d0:	fb03 f202 	mul.w	r2, r3, r2
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <getMotorDeltaLeft+0x68>)
 80005dc:	6013      	str	r3, [r2, #0]
		last_tick = current_tick;
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <getMotorDeltaLeft+0x64>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	6013      	str	r3, [r2, #0]
		last_pulse = current_pulse;
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <getMotorDeltaLeft+0x60>)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	6013      	str	r3, [r2, #0]
	}

	return delta_left;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <getMotorDeltaLeft+0x68>)
 80005ec:	681b      	ldr	r3, [r3, #0]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40010000 	.word	0x40010000
 80005fc:	20000398 	.word	0x20000398
 8000600:	2000039c 	.word	0x2000039c
 8000604:	200003a0 	.word	0x200003a0

08000608 <getMotorDeltaRight>:

int32_t getMotorDeltaRight() {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;
	static int32_t delta_right = 0;

	int32_t current_pulse = TIM5->CNT;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <getMotorDeltaRight+0x5c>)
 8000610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000612:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 8000614:	f001 f810 	bl	8001638 <HAL_GetTick>
 8000618:	4603      	mov	r3, r0
 800061a:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <getMotorDeltaRight+0x60>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <getMotorDeltaRight+0x64>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	603b      	str	r3, [r7, #0]

	if (delta_tick > 5) {
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2b05      	cmp	r3, #5
 8000634:	dd0f      	ble.n	8000656 <getMotorDeltaRight+0x4e>
		delta_right = delta_pulse * 1000 / delta_tick;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063c:	fb03 f202 	mul.w	r2, r3, r2
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	fb92 f3f3 	sdiv	r3, r2, r3
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <getMotorDeltaRight+0x68>)
 8000648:	6013      	str	r3, [r2, #0]
		last_tick = current_tick;
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <getMotorDeltaRight+0x64>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	6013      	str	r3, [r2, #0]
		last_pulse = current_pulse;
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <getMotorDeltaRight+0x60>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	6013      	str	r3, [r2, #0]
	}

	return delta_right;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <getMotorDeltaRight+0x68>)
 8000658:	681b      	ldr	r3, [r3, #0]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40000c00 	.word	0x40000c00
 8000668:	200003a4 	.word	0x200003a4
 800066c:	200003a8 	.word	0x200003a8
 8000670:	200003ac 	.word	0x200003ac

08000674 <setMotorDeltaLeft>:

void setMotorDeltaLeft(int32_t target) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	static uint32_t last_tick = 0;
	uint32_t tick = GetMicros();
 800067c:	f7ff ff60 	bl	8000540 <GetMicros>
 8000680:	eef0 7a40 	vmov.f32	s15, s0
 8000684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000688:	ee17 3a90 	vmov	r3, s15
 800068c:	60fb      	str	r3, [r7, #12]

	float pid = constrain(target, -PID_OUTPUT_MAX, PID_OUTPUT_MAX);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	ee07 3a90 	vmov	s15, r3
 8000694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000698:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8000718 <setMotorDeltaLeft+0xa4>
 800069c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800071c <setMotorDeltaLeft+0xa8>
 80006a0:	eeb0 0a67 	vmov.f32	s0, s15
 80006a4:	f7ff ff23 	bl	80004ee <constrain>
 80006a8:	ed87 0a02 	vstr	s0, [r7, #8]

	if (target < 0) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da17      	bge.n	80006e2 <setMotorDeltaLeft+0x6e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 80006b2:	2200      	movs	r2, #0
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <setMotorDeltaLeft+0xac>)
 80006b8:	f001 fd90 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <setMotorDeltaLeft+0xb0>)
 80006c4:	f001 fd8a 	bl	80021dc <HAL_GPIO_WritePin>
		TIM4->CCR3 = abs(pid);
 80006c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d0:	ee17 3a90 	vmov	r3, s15
 80006d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <setMotorDeltaLeft+0xb4>)
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // 5, 6, 7, 15
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
		TIM4->CCR3 = abs(pid);
	}
}
 80006e0:	e016      	b.n	8000710 <setMotorDeltaLeft+0x9c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // 5, 6, 7, 15
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <setMotorDeltaLeft+0xac>)
 80006e8:	f001 fd78 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <setMotorDeltaLeft+0xb0>)
 80006f4:	f001 fd72 	bl	80021dc <HAL_GPIO_WritePin>
		TIM4->CCR3 = abs(pid);
 80006f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000700:	ee17 3a90 	vmov	r3, s15
 8000704:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000708:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <setMotorDeltaLeft+0xb4>)
 800070e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	477fff00 	.word	0x477fff00
 800071c:	c77fff00 	.word	0xc77fff00
 8000720:	40020400 	.word	0x40020400
 8000724:	40020000 	.word	0x40020000
 8000728:	40000800 	.word	0x40000800

0800072c <setMotorDeltaRight>:


void setMotorDeltaRight(int32_t target) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	static uint32_t last_tick = 0;
	uint32_t tick = GetMicros();
 8000734:	f7ff ff04 	bl	8000540 <GetMicros>
 8000738:	eef0 7a40 	vmov.f32	s15, s0
 800073c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000740:	ee17 3a90 	vmov	r3, s15
 8000744:	60fb      	str	r3, [r7, #12]

	float pid = constrain(target, -PID_OUTPUT_MAX, PID_OUTPUT_MAX);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000750:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80007cc <setMotorDeltaRight+0xa0>
 8000754:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80007d0 <setMotorDeltaRight+0xa4>
 8000758:	eeb0 0a67 	vmov.f32	s0, s15
 800075c:	f7ff fec7 	bl	80004ee <constrain>
 8000760:	ed87 0a02 	vstr	s0, [r7, #8]

	if (target > 0) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	dd16      	ble.n	8000798 <setMotorDeltaRight+0x6c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <setMotorDeltaRight+0xa8>)
 8000770:	f001 fd34 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	4816      	ldr	r0, [pc, #88]	; (80007d4 <setMotorDeltaRight+0xa8>)
 800077a:	f001 fd2f 	bl	80021dc <HAL_GPIO_WritePin>
		TIM4->CCR4 = abs(pid);
 800077e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000786:	ee17 3a90 	vmov	r3, s15
 800078a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800078e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <setMotorDeltaRight+0xac>)
 8000794:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		TIM4->CCR4 = abs(pid);
	}
}
 8000796:	e015      	b.n	80007c4 <setMotorDeltaRight+0x98>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2120      	movs	r1, #32
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <setMotorDeltaRight+0xa8>)
 800079e:	f001 fd1d 	bl	80021dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <setMotorDeltaRight+0xa8>)
 80007a8:	f001 fd18 	bl	80021dc <HAL_GPIO_WritePin>
		TIM4->CCR4 = abs(pid);
 80007ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80007b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007b4:	ee17 3a90 	vmov	r3, s15
 80007b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <setMotorDeltaRight+0xac>)
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	477fff00 	.word	0x477fff00
 80007d0:	c77fff00 	.word	0xc77fff00
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40000800 	.word	0x40000800

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fec3 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f895 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 fb7d 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ee:	f000 fb53 	bl	8000e98 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80007f2:	f008 fce3 	bl	80091bc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80007f6:	f000 f9cf 	bl	8000b98 <MX_TIM2_Init>
  MX_SPI1_Init();
 80007fa:	f000 f8f3 	bl	80009e4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80007fe:	f000 fa17 	bl	8000c30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000802:	f000 fa63 	bl	8000ccc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000806:	f000 faf3 	bl	8000df0 <MX_TIM5_Init>
  MX_TIM1_Init();
 800080a:	f000 f91d 	bl	8000a48 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4838      	ldr	r0, [pc, #224]	; (80008f4 <main+0x118>)
 8000812:	f004 fc59 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8000816:	2104      	movs	r1, #4
 8000818:	4836      	ldr	r0, [pc, #216]	; (80008f4 <main+0x118>)
 800081a:	f004 fc55 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	4835      	ldr	r0, [pc, #212]	; (80008f8 <main+0x11c>)
 8000822:	f004 fc51 	bl	80050c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000826:	2104      	movs	r1, #4
 8000828:	4833      	ldr	r0, [pc, #204]	; (80008f8 <main+0x11c>)
 800082a:	f004 fc4d 	bl	80050c8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT
 800082e:	2108      	movs	r1, #8
 8000830:	4832      	ldr	r0, [pc, #200]	; (80008fc <main+0x120>)
 8000832:	f004 faf3 	bl	8004e1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT
 8000836:	210c      	movs	r1, #12
 8000838:	4830      	ldr	r0, [pc, #192]	; (80008fc <main+0x120>)
 800083a:	f004 faef 	bl	8004e1c <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 0;
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <main+0x124>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
  TIM5->CCR1 = 0;
 8000844:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <main+0x128>)
 8000846:	2200      	movs	r2, #0
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
		  uint8_t bytes[8];
		  int32_t words[2];
	  };

	  union packet rxdata;
	  rxdata.words[0] = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
	  rxdata.words[1] = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]

	  union packet txdata;
	  txdata.words[0] = getMotorDeltaLeft();
 8000852:	f7ff fea3 	bl	800059c <getMotorDeltaLeft>
 8000856:	4603      	mov	r3, r0
 8000858:	603b      	str	r3, [r7, #0]
	  txdata.words[1] = getMotorDeltaRight();
 800085a:	f7ff fed5 	bl	8000608 <getMotorDeltaRight>
 800085e:	4603      	mov	r3, r0
 8000860:	607b      	str	r3, [r7, #4]

	  HAL_SPI_Receive(&hspi1, rxdata.bytes, 1, 2);
 8000862:	f107 0108 	add.w	r1, r7, #8
 8000866:	2302      	movs	r3, #2
 8000868:	2201      	movs	r2, #1
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <main+0x12c>)
 800086c:	f003 fd1c 	bl	80042a8 <HAL_SPI_Receive>

	  switch (rxdata.bytes[0]) {
 8000870:	7a3b      	ldrb	r3, [r7, #8]
 8000872:	2bab      	cmp	r3, #171	; 0xab
 8000874:	d002      	beq.n	800087c <main+0xa0>
 8000876:	2bde      	cmp	r3, #222	; 0xde
 8000878:	d017      	beq.n	80008aa <main+0xce>
			  setMotorDeltaLeft(rxdata.words[0]);
			  setMotorDeltaRight(rxdata.words[1]);
		  }
		  break;
	  default:
		  break;
 800087a:	e039      	b.n	80008f0 <main+0x114>
		  HAL_SPI_Receive(&hspi1, rxdata.bytes, 1, 2);
 800087c:	f107 0108 	add.w	r1, r7, #8
 8000880:	2302      	movs	r3, #2
 8000882:	2201      	movs	r2, #1
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <main+0x12c>)
 8000886:	f003 fd0f 	bl	80042a8 <HAL_SPI_Receive>
		  if (rxdata.bytes[0] == 0xCD) {
 800088a:	7a3b      	ldrb	r3, [r7, #8]
 800088c:	2bcd      	cmp	r3, #205	; 0xcd
 800088e:	d12c      	bne.n	80008ea <main+0x10e>
			  HAL_SPI_Transmit(&hspi1, (void*)txdata.bytes, sizeof(txdata.bytes), sizeof(txdata.bytes) * 10);
 8000890:	4639      	mov	r1, r7
 8000892:	2350      	movs	r3, #80	; 0x50
 8000894:	2208      	movs	r2, #8
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0x12c>)
 8000898:	f003 fbc3 	bl	8004022 <HAL_SPI_Transmit>
			  xprintf("\nGET Left: %d, Right: %d\n", txdata.words[0], txdata.words[1]);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4619      	mov	r1, r3
 80008a2:	481a      	ldr	r0, [pc, #104]	; (800090c <main+0x130>)
 80008a4:	f7ff fe16 	bl	80004d4 <xprintf>
		  break;
 80008a8:	e01f      	b.n	80008ea <main+0x10e>
		  HAL_SPI_Receive(&hspi1, rxdata.bytes, 1, 2);
 80008aa:	f107 0108 	add.w	r1, r7, #8
 80008ae:	2302      	movs	r3, #2
 80008b0:	2201      	movs	r2, #1
 80008b2:	4815      	ldr	r0, [pc, #84]	; (8000908 <main+0x12c>)
 80008b4:	f003 fcf8 	bl	80042a8 <HAL_SPI_Receive>
		  if (rxdata.bytes[0] == 0xAD) {
 80008b8:	7a3b      	ldrb	r3, [r7, #8]
 80008ba:	2bad      	cmp	r3, #173	; 0xad
 80008bc:	d117      	bne.n	80008ee <main+0x112>
			  HAL_SPI_Receive(&hspi1, (void*)rxdata.bytes, sizeof(rxdata.bytes), sizeof(rxdata.bytes) * 10);
 80008be:	f107 0108 	add.w	r1, r7, #8
 80008c2:	2350      	movs	r3, #80	; 0x50
 80008c4:	2208      	movs	r2, #8
 80008c6:	4810      	ldr	r0, [pc, #64]	; (8000908 <main+0x12c>)
 80008c8:	f003 fcee 	bl	80042a8 <HAL_SPI_Receive>
			  xprintf("\nSET Left: %d, Right: %d\n", rxdata.words[0], rxdata.words[1]);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	; (8000910 <main+0x134>)
 80008d4:	f7ff fdfe 	bl	80004d4 <xprintf>
			  setMotorDeltaLeft(rxdata.words[0]);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff feca 	bl	8000674 <setMotorDeltaLeft>
			  setMotorDeltaRight(rxdata.words[1]);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff22 	bl	800072c <setMotorDeltaRight>
		  break;
 80008e8:	e001      	b.n	80008ee <main+0x112>
		  break;
 80008ea:	bf00      	nop
 80008ec:	e7ad      	b.n	800084a <main+0x6e>
		  break;
 80008ee:	bf00      	nop
  {
 80008f0:	e7ab      	b.n	800084a <main+0x6e>
 80008f2:	bf00      	nop
 80008f4:	20000230 	.word	0x20000230
 80008f8:	20000350 	.word	0x20000350
 80008fc:	20000308 	.word	0x20000308
 8000900:	40010000 	.word	0x40010000
 8000904:	40000c00 	.word	0x40000c00
 8000908:	20000118 	.word	0x20000118
 800090c:	08009c00 	.word	0x08009c00
 8000910:	08009c1c 	.word	0x08009c1c

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f009 f934 	bl	8009b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <SystemClock_Config+0xc8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a26      	ldr	r2, [pc, #152]	; (80009dc <SystemClock_Config+0xc8>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <SystemClock_Config+0xc8>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <SystemClock_Config+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <SystemClock_Config+0xcc>)
 800095e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <SystemClock_Config+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000984:	2319      	movs	r3, #25
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000990:	2303      	movs	r3, #3
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fe89 	bl	80036b0 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a4:	f000 fb16 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 f8eb 	bl	8003ba0 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009d0:	f000 fb00 	bl	8000fd4 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	; 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_SPI1_Init+0x5c>)
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <MX_SPI1_Init+0x60>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_SPI1_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_SPI1_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_SPI1_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a26:	220a      	movs	r2, #10
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_SPI1_Init+0x5c>)
 8000a2c:	f003 fa70 	bl	8003f10 <HAL_SPI_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000a36:	f000 facd 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000118 	.word	0x20000118
 8000a44:	40013000 	.word	0x40013000

08000a48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09a      	sub	sp, #104	; 0x68
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a52:	2224      	movs	r2, #36	; 0x24
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f009 f89a 	bl	8009b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 f885 	bl	8009b90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000a88:	4a42      	ldr	r2, [pc, #264]	; (8000b94 <MX_TIM1_Init+0x14c>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aac:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab2:	4837      	ldr	r0, [pc, #220]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000ab4:	f004 f963 	bl	8004d7e <HAL_TIM_PWM_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000abe:	f000 fa89 	bl	8000fd4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aca:	2301      	movs	r3, #1
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ada:	2301      	movs	r3, #1
 8000adc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000ae6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aea:	4619      	mov	r1, r3
 8000aec:	4828      	ldr	r0, [pc, #160]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000aee:	f004 fa45 	bl	8004f7c <HAL_TIM_Encoder_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000af8:	f000 fa6c 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4821      	ldr	r0, [pc, #132]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000b0c:	f004 ffcc 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000b16:	f000 fa5d 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1a:	2360      	movs	r3, #96	; 0x60
 8000b1c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4814      	ldr	r0, [pc, #80]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000b40:	f004 fb50 	bl	80051e4 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000b4a:	f000 fa43 	bl	8000fd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000b72:	f005 f807 	bl	8005b84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000b7c:	f000 fa2a 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM1_Init+0x148>)
 8000b82:	f000 fc05 	bl	8001390 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3768      	adds	r7, #104	; 0x68
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000230 	.word	0x20000230
 8000b94:	40010000 	.word	0x40010000

08000b98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bde:	f004 f87f 	bl	8004ce0 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000be8:	f000 f9f4 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000bfa:	f004 fbb5 	bl	8005368 <HAL_TIM_ConfigClockSource>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c04:	f000 f9e6 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_TIM2_Init+0x94>)
 8000c16:	f004 ff47 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c20:	f000 f9d8 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000278 	.word	0x20000278

08000c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c74:	f004 f834 	bl	8004ce0 <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f9a9 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c90:	f004 fb6a 	bl	8005368 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 f99b 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000cac:	f004 fefc 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cb6:	f000 f98d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200002c0 	.word	0x200002c0
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cfc:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000cfe:	4a3b      	ldr	r2, [pc, #236]	; (8000dec <MX_TIM4_Init+0x120>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d22:	4831      	ldr	r0, [pc, #196]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d24:	f003 ffdc 	bl	8004ce0 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d2e:	f000 f951 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	482a      	ldr	r0, [pc, #168]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d40:	f004 fb12 	bl	8005368 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d4a:	f000 f943 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d4e:	4826      	ldr	r0, [pc, #152]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d50:	f004 f815 	bl	8004d7e <HAL_TIM_PWM_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d5a:	f000 f93b 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481e      	ldr	r0, [pc, #120]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d6e:	f004 fe9b 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d78:	f000 f92c 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2208      	movs	r2, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	4815      	ldr	r0, [pc, #84]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000d94:	f004 fa26 	bl	80051e4 <HAL_TIM_PWM_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d9e:	f000 f919 	bl	8000fd4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_3);
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0208 	bic.w	r2, r2, #8
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	220c      	movs	r2, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000dba:	f004 fa13 	bl	80051e4 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8000dc4:	f000 f906 	bl	8000fd4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	69da      	ldr	r2, [r3, #28]
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dd6:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM4_Init+0x11c>)
 8000dda:	f000 fad9 	bl	8001390 <HAL_TIM_MspPostInit>

}
 8000dde:	bf00      	nop
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000308 	.word	0x20000308
 8000dec:	40000800 	.word	0x40000800

08000df0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2224      	movs	r2, #36	; 0x24
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 fec6 	bl	8009b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e0c:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e0e:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <MX_TIM5_Init+0xa4>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e5e:	f004 f88d 	bl	8004f7c <HAL_TIM_Encoder_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000e68:	f000 f8b4 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_TIM5_Init+0xa0>)
 8000e7a:	f004 fe15 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000e84:	f000 f8a6 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000350 	.word	0x20000350
 8000e94:	40000c00 	.word	0x40000c00

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_DMA_Init+0x4c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <MX_DMA_Init+0x4c>)
 8000ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_DMA_Init+0x4c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2038      	movs	r0, #56	; 0x38
 8000ec0:	f000 fcc5 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ec4:	2038      	movs	r0, #56	; 0x38
 8000ec6:	f000 fcde 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	203a      	movs	r0, #58	; 0x3a
 8000ed0:	f000 fcbd 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ed4:	203a      	movs	r0, #58	; 0x3a
 8000ed6:	f000 fcd6 	bl	8001886 <HAL_NVIC_EnableIRQ>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	4815      	ldr	r0, [pc, #84]	; (8000fcc <MX_GPIO_Init+0xe4>)
 8000f76:	f001 f931 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	21e0      	movs	r1, #224	; 0xe0
 8000f7e:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_GPIO_Init+0xe8>)
 8000f80:	f001 f92c 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <MX_GPIO_Init+0xe4>)
 8000f9e:	f000 ff99 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fa2:	23e0      	movs	r3, #224	; 0xe0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0xe8>)
 8000fba:	f000 ff8b 	bl	8001ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_MspInit+0x4c>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x4c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a5a      	ldr	r2, [pc, #360]	; (80011b8 <HAL_SPI_MspInit+0x188>)
 800104e:	4293      	cmp	r3, r2
 8001050:	f040 80ae 	bne.w	80011b0 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	4b58      	ldr	r3, [pc, #352]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 800105e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001062:	6453      	str	r3, [r2, #68]	; 0x44
 8001064:	4b55      	ldr	r3, [pc, #340]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a50      	ldr	r2, [pc, #320]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
 800109c:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_SPI_MspInit+0x18c>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80010a8:	2390      	movs	r3, #144	; 0x90
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b8:	2305      	movs	r3, #5
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	483f      	ldr	r0, [pc, #252]	; (80011c0 <HAL_SPI_MspInit+0x190>)
 80010c4:	f000 ff06 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80010c8:	2318      	movs	r3, #24
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d8:	2305      	movs	r3, #5
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4838      	ldr	r0, [pc, #224]	; (80011c4 <HAL_SPI_MspInit+0x194>)
 80010e4:	f000 fef6 	bl	8001ed4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 80010ea:	4a38      	ldr	r2, [pc, #224]	; (80011cc <HAL_SPI_MspInit+0x19c>)
 80010ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 80010f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 8001104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001108:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001128:	4827      	ldr	r0, [pc, #156]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 800112a:	f000 fbc7 	bl	80018bc <HAL_DMA_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001134:	f7ff ff4e 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 800113c:	64da      	str	r2, [r3, #76]	; 0x4c
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <HAL_SPI_MspInit+0x198>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <HAL_SPI_MspInit+0x1a4>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 800114c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001150:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001154:	2240      	movs	r2, #64	; 0x40
 8001156:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001184:	4812      	ldr	r0, [pc, #72]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001186:	f000 fb99 	bl	80018bc <HAL_DMA_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001190:	f7ff ff20 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 8001198:	649a      	str	r2, [r3, #72]	; 0x48
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_SPI_MspInit+0x1a0>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2023      	movs	r0, #35	; 0x23
 80011a6:	f000 fb52 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011aa:	2023      	movs	r0, #35	; 0x23
 80011ac:	f000 fb6b 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013000 	.word	0x40013000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020400 	.word	0x40020400
 80011c8:	20000170 	.word	0x20000170
 80011cc:	40026410 	.word	0x40026410
 80011d0:	200001d0 	.word	0x200001d0
 80011d4:	40026440 	.word	0x40026440

080011d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_TIM_PWM_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12c      	bne.n	8001254 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001244:	2301      	movs	r3, #1
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_TIM_PWM_MspInit+0x8c>)
 8001250:	f000 fe40 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010000 	.word	0x40010000
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d10e      	bne.n	8001298 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001296:	e026      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_TIM_Base_MspInit+0x90>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10e      	bne.n	80012c0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
}
 80012be:	e012      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_TIM_Base_MspInit+0x94>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40000400 	.word	0x40000400
 80012fc:	40000800 	.word	0x40000800

08001300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_TIM_Encoder_MspInit+0x84>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12b      	bne.n	800137a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_TIM_Encoder_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_TIM_Encoder_MspInit+0x88>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_TIM_Encoder_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_TIM_Encoder_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_TIM_Encoder_MspInit+0x88>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_TIM_Encoder_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800135a:	2303      	movs	r3, #3
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800136a:	2302      	movs	r3, #2
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001376:	f000 fdad 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40000c00 	.word	0x40000c00
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <HAL_TIM_MspPostInit+0xb0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11e      	bne.n	80013f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_TIM_MspPostInit+0xb4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <HAL_TIM_MspPostInit+0xb4>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_TIM_MspPostInit+0xb4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <HAL_TIM_MspPostInit+0xb8>)
 80013ea:	f000 fd73 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013ee:	e023      	b.n	8001438 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_TIM_MspPostInit+0xbc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11e      	bne.n	8001438 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_TIM_MspPostInit+0xb4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_TIM_MspPostInit+0xb4>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_TIM_MspPostInit+0xb4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001428:	2302      	movs	r3, #2
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_TIM_MspPostInit+0xb8>)
 8001434:	f000 fd4e 	bl	8001ed4 <HAL_GPIO_Init>
}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40010000 	.word	0x40010000
 8001444:	40023800 	.word	0x40023800
 8001448:	40020400 	.word	0x40020400
 800144c:	40000800 	.word	0x40000800

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 f8b8 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <SPI1_IRQHandler+0x10>)
 80014aa:	f003 f9c5 	bl	8004838 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000118 	.word	0x20000118

080014b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <DMA2_Stream0_IRQHandler+0x10>)
 80014be:	f000 facd 	bl	8001a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000170 	.word	0x20000170

080014cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <DMA2_Stream2_IRQHandler+0x10>)
 80014d2:	f000 fac3 	bl	8001a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200001d0 	.word	0x200001d0

080014e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <OTG_FS_IRQHandler+0x10>)
 80014e6:	f000 ffd6 	bl	8002496 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001894 	.word	0x20001894

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151c:	f7ff ffea 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f008 fb2b 	bl	8009ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff f947 	bl	80007dc <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800155c:	08009ca8 	.word	0x08009ca8
  ldr r2, =_sbss
 8001560:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001564:	20001f98 	.word	0x20001f98

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f94f 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	200f      	movs	r0, #15
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fd1e 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f967 	bl	80018a2 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f000 f92f 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008
 8001634:	200003b0 	.word	0x200003b0

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200003b0 	.word	0x200003b0

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff feb6 	bl	8001638 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e099      	b.n	8001a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f8:	e00f      	b.n	800191a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fa:	f7ff fe9d 	bl	8001638 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	d908      	bls.n	800191a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e078      	b.n	8001a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e8      	bne.n	80018fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_DMA_Init+0x158>)
 8001934:	4013      	ands	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2b04      	cmp	r3, #4
 8001972:	d107      	bne.n	8001984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4313      	orrs	r3, r2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f023 0307 	bic.w	r3, r3, #7
 800199a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d117      	bne.n	80019de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fa0b 	bl	8001ddc <DMA_CheckFifoParam>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019da:	2301      	movs	r3, #1
 80019dc:	e016      	b.n	8001a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f9c2 	bl	8001d70 <DMA_CalcBaseAndBitshift>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	223f      	movs	r2, #63	; 0x3f
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	f010803f 	.word	0xf010803f

08001a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d004      	beq.n	8001a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00c      	b.n	8001a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a68:	4b8e      	ldr	r3, [pc, #568]	; (8001ca4 <HAL_DMA_IRQHandler+0x248>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a8e      	ldr	r2, [pc, #568]	; (8001ca8 <HAL_DMA_IRQHandler+0x24c>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0a9b      	lsrs	r3, r3, #10
 8001a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	2208      	movs	r2, #8
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0204 	bic.w	r2, r2, #4
 8001aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	2201      	movs	r2, #1
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d012      	beq.n	8001afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	2201      	movs	r2, #1
 8001aec:	409a      	lsls	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f043 0202 	orr.w	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2204      	movs	r2, #4
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	2204      	movs	r2, #4
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f043 0204 	orr.w	r2, r3, #4
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2210      	movs	r2, #16
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d043      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d03c      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	2210      	movs	r2, #16
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d018      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d024      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
 8001b8a:	e01f      	b.n	8001bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01b      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0208 	bic.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 808f 	beq.w	8001cfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8087 	beq.w	8001cfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d136      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0216 	bic.w	r2, r2, #22
 8001c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d103      	bne.n	8001c36 <HAL_DMA_IRQHandler+0x1da>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	223f      	movs	r2, #63	; 0x3f
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d07e      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
        }
        return;
 8001c72:	e079      	b.n	8001d68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01d      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10d      	bne.n	8001cac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d031      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	e02c      	b.n	8001cfc <HAL_DMA_IRQHandler+0x2a0>
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d023      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
 8001cbc:	e01e      	b.n	8001cfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0210 	bic.w	r2, r2, #16
 8001cda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d032      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d022      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2205      	movs	r2, #5
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d307      	bcc.n	8001d44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f2      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x2cc>
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
 8001d66:	e000      	b.n	8001d6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d68:	bf00      	nop
    }
  }
}
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3b10      	subs	r3, #16
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d909      	bls.n	8001db2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58
 8001db0:	e007      	b.n	8001dc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	aaaaaaab 	.word	0xaaaaaaab
 8001dd8:	08009c90 	.word	0x08009c90

08001ddc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11f      	bne.n	8001e36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d856      	bhi.n	8001eaa <DMA_CheckFifoParam+0xce>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <DMA_CheckFifoParam+0x28>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e27 	.word	0x08001e27
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001eab 	.word	0x08001eab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d046      	beq.n	8001eae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e24:	e043      	b.n	8001eae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2e:	d140      	bne.n	8001eb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e34:	e03d      	b.n	8001eb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3e:	d121      	bne.n	8001e84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d837      	bhi.n	8001eb6 <DMA_CheckFifoParam+0xda>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <DMA_CheckFifoParam+0x70>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e63 	.word	0x08001e63
 8001e54:	08001e5d 	.word	0x08001e5d
 8001e58:	08001e75 	.word	0x08001e75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e030      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d025      	beq.n	8001eba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e72:	e022      	b.n	8001eba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7c:	d11f      	bne.n	8001ebe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e82:	e01c      	b.n	8001ebe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d903      	bls.n	8001e92 <DMA_CheckFifoParam+0xb6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e90:	e018      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      break;
 8001e96:	e015      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea8:	e00b      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e00a      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e008      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e006      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e004      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
 8001ebc:	e002      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e159      	b.n	80021a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8148 	bne.w	800219e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a2 	beq.w	800219e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_GPIO_Init+0x2e8>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_GPIO_Init+0x2e8>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b54      	ldr	r3, [pc, #336]	; (80021bc <HAL_GPIO_Init+0x2e8>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_GPIO_Init+0x2ec>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a49      	ldr	r2, [pc, #292]	; (80021c4 <HAL_GPIO_Init+0x2f0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x202>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a48      	ldr	r2, [pc, #288]	; (80021c8 <HAL_GPIO_Init+0x2f4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x1fe>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a47      	ldr	r2, [pc, #284]	; (80021cc <HAL_GPIO_Init+0x2f8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x1fa>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a46      	ldr	r2, [pc, #280]	; (80021d0 <HAL_GPIO_Init+0x2fc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x1f6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <HAL_GPIO_Init+0x300>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x1f2>
 80020c2:	2304      	movs	r3, #4
 80020c4:	e008      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x204>
 80020d6:	2300      	movs	r3, #0
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	4935      	ldr	r1, [pc, #212]	; (80021c0 <HAL_GPIO_Init+0x2ec>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <HAL_GPIO_Init+0x304>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a2f      	ldr	r2, [pc, #188]	; (80021d8 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_GPIO_Init+0x304>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_GPIO_Init+0x304>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_GPIO_Init+0x304>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_GPIO_Init+0x304>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002198:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_GPIO_Init+0x304>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	f67f aea2 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f8:	e003      	b.n	8002202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fa:	887b      	ldrh	r3, [r7, #2]
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af02      	add	r7, sp, #8
 8002214:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e101      	b.n	8002424 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f007 f99e 	bl	800957c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2203      	movs	r2, #3
 8002244:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fdfb 	bl	8005e56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7c1a      	ldrb	r2, [r3, #16]
 8002268:	f88d 2000 	strb.w	r2, [sp]
 800226c:	3304      	adds	r3, #4
 800226e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002270:	f003 fcda 	bl	8005c28 <USB_CoreInit>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0ce      	b.n	8002424 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fdf3 	bl	8005e78 <USB_SetCurrentMode>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0bf      	b.n	8002424 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e04a      	b.n	8002340 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3315      	adds	r3, #21
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3314      	adds	r3, #20
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	b298      	uxth	r0, r3
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	332e      	adds	r3, #46	; 0x2e
 80022e6:	4602      	mov	r2, r0
 80022e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3318      	adds	r3, #24
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	331c      	adds	r3, #28
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3320      	adds	r3, #32
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3324      	adds	r3, #36	; 0x24
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	3301      	adds	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	791b      	ldrb	r3, [r3, #4]
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	429a      	cmp	r2, r3
 8002348:	d3af      	bcc.n	80022aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e044      	b.n	80023da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	3301      	adds	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d3b5      	bcc.n	8002350 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7c1a      	ldrb	r2, [r3, #16]
 80023ec:	f88d 2000 	strb.w	r2, [sp]
 80023f0:	3304      	adds	r3, #4
 80023f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f4:	f003 fd8c 	bl	8005f10 <USB_DevInit>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2202      	movs	r2, #2
 8002402:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00c      	b.n	8002424 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f004 fdd0 	bl	8006fc2 <USB_DevDisconnect>

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_PCD_Start+0x1c>
 8002444:	2302      	movs	r3, #2
 8002446:	e022      	b.n	800248e <HAL_PCD_Start+0x62>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fcdd 	bl	8005e34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fd7e 	bl	8006f80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002496:	b590      	push	{r4, r7, lr}
 8002498:	b08d      	sub	sp, #52	; 0x34
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fe3c 	bl	800712a <USB_GetMode>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 848c 	bne.w	8002dd2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 fda0 	bl	8007004 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8482 	beq.w	8002dd0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fd8d 	bl	8007004 <USB_ReadInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d107      	bne.n	8002504 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f002 0202 	and.w	r2, r2, #2
 8002502:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fd7b 	bl	8007004 <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d161      	bne.n	80025dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	2b02      	cmp	r3, #2
 8002552:	d124      	bne.n	800259e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d035      	beq.n	80025cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6a38      	ldr	r0, [r7, #32]
 8002574:	f004 fbb2 	bl	8006cdc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002584:	441a      	add	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	441a      	add	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	615a      	str	r2, [r3, #20]
 800259c:	e016      	b.n	80025cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	0c5b      	lsrs	r3, r3, #17
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d110      	bne.n	80025cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80025b0:	2208      	movs	r2, #8
 80025b2:	4619      	mov	r1, r3
 80025b4:	6a38      	ldr	r0, [r7, #32]
 80025b6:	f004 fb91 	bl	8006cdc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c6:	441a      	add	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0210 	orr.w	r2, r2, #16
 80025da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fd0f 	bl	8007004 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025f0:	f040 80a7 	bne.w	8002742 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 fd14 	bl	800702a <USB_ReadDevAllOutEpInterrupt>
 8002602:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002604:	e099      	b.n	800273a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 808e 	beq.w	800272e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f004 fd38 	bl	8007092 <USB_ReadDevOutEPInterrupt>
 8002622:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	461a      	mov	r2, r3
 800263c:	2301      	movs	r3, #1
 800263e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fea2 	bl	800338c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265e:	461a      	mov	r2, r3
 8002660:	2308      	movs	r3, #8
 8002662:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 ff78 	bl	800355c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002682:	461a      	mov	r2, r3
 8002684:	2310      	movs	r3, #16
 8002686:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d030      	beq.n	80026f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d109      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	3304      	adds	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	78db      	ldrb	r3, [r3, #3]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d108      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2200      	movs	r2, #0
 80026d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f007 f849 	bl	8009774 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ee:	461a      	mov	r2, r3
 80026f0:	2302      	movs	r3, #2
 80026f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	461a      	mov	r2, r3
 800270c:	2320      	movs	r3, #32
 800270e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002726:	461a      	mov	r2, r3
 8002728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	3301      	adds	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f47f af62 	bne.w	8002606 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fc5c 	bl	8007004 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002756:	f040 80db 	bne.w	8002910 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fc7d 	bl	800705e <USB_ReadDevAllInEpInterrupt>
 8002764:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800276a:	e0cd      	b.n	8002908 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80c2 	beq.w	80028fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f004 fca3 	bl	80070ce <USB_ReadDevInEPInterrupt>
 8002788:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d057      	beq.n	8002844 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	2201      	movs	r2, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69f9      	ldr	r1, [r7, #28]
 80027b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027b4:	4013      	ands	r3, r2
 80027b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c4:	461a      	mov	r2, r3
 80027c6:	2301      	movs	r3, #1
 80027c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	799b      	ldrb	r3, [r3, #6]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d132      	bne.n	8002838 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3320      	adds	r3, #32
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4403      	add	r3, r0
 80027f2:	331c      	adds	r3, #28
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4419      	add	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4403      	add	r3, r0
 8002806:	3320      	adds	r3, #32
 8002808:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d113      	bne.n	8002838 <HAL_PCD_IRQHandler+0x3a2>
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3324      	adds	r3, #36	; 0x24
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002830:	461a      	mov	r2, r3
 8002832:	2101      	movs	r1, #1
 8002834:	f004 fcaa 	bl	800718c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f006 ff1d 	bl	800967e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285a:	461a      	mov	r2, r3
 800285c:	2308      	movs	r3, #8
 800285e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002876:	461a      	mov	r2, r3
 8002878:	2310      	movs	r3, #16
 800287a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002892:	461a      	mov	r2, r3
 8002894:	2340      	movs	r3, #64	; 0x40
 8002896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d023      	beq.n	80028ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a4:	6a38      	ldr	r0, [r7, #32]
 80028a6:	f003 fc97 	bl	80061d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	3310      	adds	r3, #16
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	78db      	ldrb	r3, [r3, #3]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f006 ff60 	bl	8009798 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e4:	461a      	mov	r2, r3
 80028e6:	2302      	movs	r3, #2
 80028e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fcbb 	bl	8003272 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3301      	adds	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	f47f af2e 	bne.w	800276c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fb75 	bl	8007004 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002924:	d122      	bne.n	800296c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002940:	2b01      	cmp	r3, #1
 8002942:	d108      	bne.n	8002956 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800294c:	2100      	movs	r1, #0
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fea2 	bl	8003698 <HAL_PCDEx_LPM_Callback>
 8002954:	e002      	b.n	800295c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f006 fefe 	bl	8009758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800296a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f004 fb47 	bl	8007004 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	d112      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f006 feba 	bl	800970c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029a6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 fb29 	bl	8007004 <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	f040 80b7 	bne.w	8002b2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2110      	movs	r1, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fbfc 	bl	80061d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e4:	e046      	b.n	8002a74 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f2:	461a      	mov	r2, r3
 80029f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a0a:	0151      	lsls	r1, r2, #5
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	440a      	add	r2, r1
 8002a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	461a      	mov	r2, r3
 8002a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3e:	0151      	lsls	r1, r2, #5
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	440a      	add	r2, r1
 8002a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5e:	0151      	lsls	r1, r2, #5
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	440a      	add	r2, r1
 8002a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	3301      	adds	r3, #1
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	791b      	ldrb	r3, [r3, #4]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d3b2      	bcc.n	80029e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7bdb      	ldrb	r3, [r3, #15]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aac:	f043 030b 	orr.w	r3, r3, #11
 8002ab0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac2:	f043 030b 	orr.w	r3, r3, #11
 8002ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac8:	e015      	b.n	8002af6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002adc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ae0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af0:	f043 030b 	orr.w	r3, r3, #11
 8002af4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f004 fb37 	bl	800718c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fa66 	bl	8007004 <USB_ReadInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b42:	d123      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f004 fafc 	bl	8007146 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fbb9 	bl	80062ca <USB_GetDevSpeed>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681c      	ldr	r4, [r3, #0]
 8002b64:	f001 f9c8 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8002b68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4620      	mov	r0, r4
 8002b72:	f003 f8bd 	bl	8005cf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f006 fda9 	bl	80096ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fa37 	bl	8007004 <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f006 fd86 	bl	80096b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 0208 	and.w	r2, r2, #8
 8002bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f004 fa22 	bl	8007004 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d123      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	e014      	b.n	8002c06 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fb08 	bl	8003210 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	3301      	adds	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	791b      	ldrb	r3, [r3, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d3e4      	bcc.n	8002bdc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 f9f4 	bl	8007004 <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c26:	d13c      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c28:	2301      	movs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	e02b      	b.n	8002c86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d115      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da12      	bge.n	8002c80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3317      	adds	r3, #23
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fac8 	bl	8003210 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	3301      	adds	r3, #1
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	791b      	ldrb	r3, [r3, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d3cd      	bcc.n	8002c2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 f9ac 	bl	8007004 <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cb6:	d156      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbc:	e045      	b.n	8002d4a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d12e      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ce6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da2b      	bge.n	8002d44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002cf8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d40:	6053      	str	r3, [r2, #4]
            break;
 8002d42:	e008      	b.n	8002d56 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	791b      	ldrb	r3, [r3, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d3b3      	bcc.n	8002cbe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 f94a 	bl	8007004 <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d10a      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f006 fd1d 	bl	80097bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 f934 	bl	8007004 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d115      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f006 fd0d 	bl	80097d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	e000      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002dd0:	bf00      	nop
    }
  }
}
 8002dd2:	3734      	adds	r7, #52	; 0x34
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}

08002dd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_PCD_SetAddress+0x1a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e012      	b.n	8002e18 <HAL_PCD_SetAddress+0x40>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 f893 	bl	8006f34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	70fb      	strb	r3, [r7, #3]
 8002e32:	460b      	mov	r3, r1
 8002e34:	803b      	strh	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	da0f      	bge.n	8002e66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	3310      	adds	r3, #16
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	705a      	strb	r2, [r3, #1]
 8002e64:	e00f      	b.n	8002e86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e92:	883a      	ldrh	r2, [r7, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	78ba      	ldrb	r2, [r7, #2]
 8002e9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eb0:	78bb      	ldrb	r3, [r7, #2]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d102      	bne.n	8002ebc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_PCD_EP_Open+0xaa>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e00e      	b.n	8002ee8 <HAL_PCD_EP_Open+0xc8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fa1b 	bl	8006314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	da0f      	bge.n	8002f24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 020f 	and.w	r2, r3, #15
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	3310      	adds	r3, #16
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	705a      	strb	r2, [r3, #1]
 8002f22:	e00f      	b.n	8002f44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	f003 020f 	and.w	r2, r3, #15
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_EP_Close+0x6e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e00e      	b.n	8002f7c <HAL_PCD_EP_Close+0x8c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fa59 	bl	8006424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	460b      	mov	r3, r1
 8002f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	799b      	ldrb	r3, [r3, #6]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	799b      	ldrb	r3, [r3, #6]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6979      	ldr	r1, [r7, #20]
 8002fec:	f003 faf6 	bl	80065dc <USB_EPStartXfer>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800301c:	681b      	ldr	r3, [r3, #0]
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	460b      	mov	r3, r1
 8003038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3310      	adds	r3, #16
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2201      	movs	r2, #1
 8003068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306a:	7afb      	ldrb	r3, [r7, #11]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	b2da      	uxtb	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	799b      	ldrb	r3, [r3, #6]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d102      	bne.n	8003084 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	799b      	ldrb	r3, [r3, #6]
 800308c:	461a      	mov	r2, r3
 800308e:	6979      	ldr	r1, [r7, #20]
 8003090:	f003 faa4 	bl	80065dc <USB_EPStartXfer>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	7912      	ldrb	r2, [r2, #4]
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e04f      	b.n	800315c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da0f      	bge.n	80030e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 020f 	and.w	r2, r3, #15
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	3310      	adds	r3, #16
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	705a      	strb	r2, [r3, #1]
 80030e2:	e00d      	b.n	8003100 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_PCD_EP_SetStall+0x82>
 800311c:	2302      	movs	r3, #2
 800311e:	e01d      	b.n	800315c <HAL_PCD_EP_SetStall+0xbe>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fe2c 	bl	8006d8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7999      	ldrb	r1, [r3, #6]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800314c:	461a      	mov	r2, r3
 800314e:	f004 f81d 	bl	800718c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	7912      	ldrb	r2, [r2, #4]
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e042      	b.n	8003208 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0f      	bge.n	80031aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 020f 	and.w	r2, r3, #15
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	3310      	adds	r3, #16
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	705a      	strb	r2, [r3, #1]
 80031a8:	e00f      	b.n	80031ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	3304      	adds	r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_PCD_EP_ClrStall+0x86>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e00e      	b.n	8003208 <HAL_PCD_EP_ClrStall+0xa4>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 fe35 	bl	8006e68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800321c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003220:	2b00      	cmp	r3, #0
 8003222:	da0c      	bge.n	800323e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	3310      	adds	r3, #16
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e00c      	b.n	8003258 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fc54 	bl	8006b0c <USB_EPStopXfer>
 8003264:	4603      	mov	r3, r0
 8003266:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003268:	7afb      	ldrb	r3, [r7, #11]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af02      	add	r7, sp, #8
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3310      	adds	r3, #16
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d901      	bls.n	80032aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06b      	b.n	8003382 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d902      	bls.n	80032c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3303      	adds	r3, #3
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ce:	e02a      	b.n	8003326 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d902      	bls.n	80032ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3303      	adds	r3, #3
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	4603      	mov	r3, r0
 8003308:	6978      	ldr	r0, [r7, #20]
 800330a:	f003 fca9 	bl	8006c60 <USB_WritePacket>

    ep->xfer_buff  += len;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	441a      	add	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	429a      	cmp	r2, r3
 800333a:	d809      	bhi.n	8003350 <PCD_WriteEmptyTxFifo+0xde>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003344:	429a      	cmp	r2, r3
 8003346:	d203      	bcs.n	8003350 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1bf      	bne.n	80032d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	d811      	bhi.n	8003380 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	2201      	movs	r2, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	43db      	mvns	r3, r3
 8003376:	6939      	ldr	r1, [r7, #16]
 8003378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337c:	4013      	ands	r3, r2
 800337e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	333c      	adds	r3, #60	; 0x3c
 80033a4:	3304      	adds	r3, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	799b      	ldrb	r3, [r3, #6]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d17b      	bne.n	80034ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4a61      	ldr	r2, [pc, #388]	; (8003554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	f240 80b9 	bls.w	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80b3 	beq.w	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ee:	461a      	mov	r2, r3
 80033f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f4:	6093      	str	r3, [r2, #8]
 80033f6:	e0a7      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	461a      	mov	r2, r3
 8003410:	2320      	movs	r3, #32
 8003412:	6093      	str	r3, [r2, #8]
 8003414:	e098      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 8093 	bne.w	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d90f      	bls.n	800344a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003446:	6093      	str	r3, [r2, #8]
 8003448:	e07e      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	0159      	lsls	r1, r3, #5
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	440b      	add	r3, r1
 800346c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	1ad2      	subs	r2, r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d114      	bne.n	80034ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003494:	461a      	mov	r2, r3
 8003496:	2101      	movs	r1, #1
 8003498:	f003 fe78 	bl	800718c <USB_EP0_OutStart>
 800349c:	e006      	b.n	80034ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f006 f8c8 	bl	8009648 <HAL_PCD_DataOutStageCallback>
 80034b8:	e046      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d124      	bne.n	800350c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	6093      	str	r3, [r2, #8]
 80034e0:	e032      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	2320      	movs	r3, #32
 80034fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f006 f89f 	bl	8009648 <HAL_PCD_DataOutStageCallback>
 800350a:	e01d      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d114      	bne.n	800353c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003534:	461a      	mov	r2, r3
 8003536:	2100      	movs	r1, #0
 8003538:	f003 fe28 	bl	800718c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f006 f880 	bl	8009648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	4f54300a 	.word	0x4f54300a
 8003558:	4f54310a 	.word	0x4f54310a

0800355c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	333c      	adds	r3, #60	; 0x3c
 8003574:	3304      	adds	r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d90e      	bls.n	80035b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f006 f837 	bl	8009624 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d90c      	bls.n	80035d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	799b      	ldrb	r3, [r3, #6]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d108      	bne.n	80035d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80035d0:	461a      	mov	r2, r3
 80035d2:	2101      	movs	r1, #1
 80035d4:	f003 fdda 	bl	800718c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	4f54300a 	.word	0x4f54300a

080035e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
 80035f4:	4613      	mov	r3, r2
 80035f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003606:	883b      	ldrh	r3, [r7, #0]
 8003608:	0419      	lsls	r1, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	430a      	orrs	r2, r1
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
 8003614:	e028      	b.n	8003668 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4413      	add	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	e00d      	b.n	8003646 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	3340      	adds	r3, #64	; 0x40
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4413      	add	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	3301      	adds	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	3b01      	subs	r3, #1
 800364c:	429a      	cmp	r2, r3
 800364e:	d3ec      	bcc.n	800362a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003650:	883b      	ldrh	r3, [r7, #0]
 8003652:	0418      	lsls	r0, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	3b01      	subs	r3, #1
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	4302      	orrs	r2, r0
 8003660:	3340      	adds	r3, #64	; 0x40
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e267      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d075      	beq.n	80037ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d00c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d112      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e6:	4b82      	ldr	r3, [pc, #520]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f2:	d10b      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x108>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d157      	bne.n	80037b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e242      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x74>
 8003716:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a75      	ldr	r2, [pc, #468]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e01d      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x98>
 800372e:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6f      	ldr	r2, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6c      	ldr	r2, [pc, #432]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003748:	4b69      	ldr	r3, [pc, #420]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a68      	ldr	r2, [pc, #416]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a65      	ldr	r2, [pc, #404]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd ff66 	bl	8001638 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003770:	f7fd ff62 	bl	8001638 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e207      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0xc0>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fd ff52 	bl	8001638 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003798:	f7fd ff4e 	bl	8001638 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1f3      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0xe8>
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1c7      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4937      	ldr	r1, [pc, #220]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <HAL_RCC_OscConfig+0x244>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd ff07 	bl	8001638 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382e:	f7fd ff03 	bl	8001638 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1a8      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x244>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fee6 	bl	8001638 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003870:	f7fd fee2 	bl	8001638 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e187      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d036      	beq.n	8003908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x248>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fec6 	bl	8001638 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fd fec2 	bl	8001638 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e167      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_OscConfig+0x240>)
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x200>
 80038ce:	e01b      	b.n	8003908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_OscConfig+0x248>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fd feaf 	bl	8001638 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	e00e      	b.n	80038fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038de:	f7fd feab 	bl	8001638 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d907      	bls.n	80038fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e150      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470000 	.word	0x42470000
 80038f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ea      	bne.n	80038de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8097 	beq.w	8003a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391a:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4b7d      	ldr	r3, [pc, #500]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a7c      	ldr	r2, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b7a      	ldr	r3, [pc, #488]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b77      	ldr	r3, [pc, #476]	; (8003b24 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b74      	ldr	r3, [pc, #464]	; (8003b24 <HAL_RCC_OscConfig+0x474>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a73      	ldr	r2, [pc, #460]	; (8003b24 <HAL_RCC_OscConfig+0x474>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fd fe6b 	bl	8001638 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fd fe67 	bl	8001638 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e10c      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b6a      	ldr	r3, [pc, #424]	; (8003b24 <HAL_RCC_OscConfig+0x474>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x2ea>
 800398c:	4b64      	ldr	r3, [pc, #400]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a63      	ldr	r2, [pc, #396]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x324>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x30c>
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a5e      	ldr	r2, [pc, #376]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a5b      	ldr	r2, [pc, #364]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0x324>
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a57      	ldr	r2, [pc, #348]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	4b55      	ldr	r3, [pc, #340]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a54      	ldr	r2, [pc, #336]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd fe2c 	bl	8001638 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fd fe28 	bl	8001638 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0cb      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RCC_OscConfig+0x334>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a08:	f7fd fe16 	bl	8001638 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fe12 	bl	8001638 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0b5      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a26:	4b3e      	ldr	r3, [pc, #248]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ee      	bne.n	8003a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a1 	beq.w	8003b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4e:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d05c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d141      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCC_OscConfig+0x478>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fde6 	bl	8001638 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fde2 	bl	8001638 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e087      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	491b      	ldr	r1, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x478>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fd fdbb 	bl	8001638 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fd fdb7 	bl	8001638 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e05c      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x416>
 8003ae4:	e054      	b.n	8003b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCC_OscConfig+0x478>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fda4 	bl	8001638 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fda0 	bl	8001638 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e045      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x444>
 8003b12:	e03d      	b.n	8003b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e038      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x4ec>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d028      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d121      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d11a      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d111      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	3b01      	subs	r3, #1
 8003b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0cc      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d90c      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d044      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d119      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e067      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b37      	ldr	r3, [pc, #220]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4934      	ldr	r1, [pc, #208]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c90:	f7fd fcd2 	bl	8001638 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fd fcce 	bl	8001638 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e04f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d20c      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fc32 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40023c00 	.word	0x40023c00
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08009c80 	.word	0x08009c80
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d70:	b090      	sub	sp, #64	; 0x40
 8003d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
 8003d78:	2300      	movs	r3, #0
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d00d      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x40>
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	f200 80a1 	bhi.w	8003ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x34>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d9e:	e09b      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003da4:	e09b      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da6:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003daa:	e098      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dac:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db6:	4b4d      	ldr	r3, [pc, #308]	; (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d028      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc2:	4b4a      	ldr	r3, [pc, #296]	; (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	2200      	movs	r2, #0
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	627a      	str	r2, [r7, #36]	; 0x24
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd8:	fb03 f201 	mul.w	r2, r3, r1
 8003ddc:	2300      	movs	r3, #0
 8003dde:	fb00 f303 	mul.w	r3, r0, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	4a43      	ldr	r2, [pc, #268]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de6:	fba0 1202 	umull	r1, r2, r0, r2
 8003dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dec:	460a      	mov	r2, r1
 8003dee:	62ba      	str	r2, [r7, #40]	; 0x28
 8003df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df2:	4413      	add	r3, r2
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	61fa      	str	r2, [r7, #28]
 8003dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e06:	f7fc f9e7 	bl	80001d8 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4613      	mov	r3, r2
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e12:	e053      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e14:	4b35      	ldr	r3, [pc, #212]	; (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	617a      	str	r2, [r7, #20]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e26:	f04f 0b00 	mov.w	fp, #0
 8003e2a:	4652      	mov	r2, sl
 8003e2c:	465b      	mov	r3, fp
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3c:	0150      	lsls	r0, r2, #5
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	ebb2 080a 	subs.w	r8, r2, sl
 8003e46:	eb63 090b 	sbc.w	r9, r3, fp
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e62:	eb63 0509 	sbc.w	r5, r3, r9
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	00eb      	lsls	r3, r5, #3
 8003e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e74:	00e2      	lsls	r2, r4, #3
 8003e76:	4614      	mov	r4, r2
 8003e78:	461d      	mov	r5, r3
 8003e7a:	eb14 030a 	adds.w	r3, r4, sl
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	eb45 030b 	adc.w	r3, r5, fp
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e92:	4629      	mov	r1, r5
 8003e94:	028b      	lsls	r3, r1, #10
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	028a      	lsls	r2, r1, #10
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb0:	f7fc f992 	bl	80001d8 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3740      	adds	r7, #64	; 0x40
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	017d7840 	.word	0x017d7840

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000

08003f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e07b      	b.n	800401a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f32:	d009      	beq.n	8003f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	61da      	str	r2, [r3, #28]
 8003f3a:	e005      	b.n	8003f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd f864 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	ea42 0103 	orr.w	r1, r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	f003 0104 	and.w	r1, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	f003 0210 	and.w	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b088      	sub	sp, #32
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_SPI_Transmit+0x22>
 8004040:	2302      	movs	r3, #2
 8004042:	e12d      	b.n	80042a0 <HAL_SPI_Transmit+0x27e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800404c:	f7fd faf4 	bl	8001638 <HAL_GetTick>
 8004050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004066:	e116      	b.n	8004296 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_SPI_Transmit+0x52>
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004078:	e10d      	b.n	8004296 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2203      	movs	r2, #3
 800407e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	d10f      	bne.n	80040e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d007      	beq.n	8004100 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004108:	d14f      	bne.n	80041aa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_SPI_Transmit+0xf6>
 8004112:	8afb      	ldrh	r3, [r7, #22]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d142      	bne.n	800419e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800413c:	e02f      	b.n	800419e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d112      	bne.n	8004172 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004170:	e015      	b.n	800419e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004172:	f7fd fa61 	bl	8001638 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d803      	bhi.n	800418a <HAL_SPI_Transmit+0x168>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004188:	d102      	bne.n	8004190 <HAL_SPI_Transmit+0x16e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800419c:	e07b      	b.n	8004296 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ca      	bne.n	800413e <HAL_SPI_Transmit+0x11c>
 80041a8:	e050      	b.n	800424c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_SPI_Transmit+0x196>
 80041b2:	8afb      	ldrh	r3, [r7, #22]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d144      	bne.n	8004242 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041de:	e030      	b.n	8004242 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d113      	bne.n	8004216 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	86da      	strh	r2, [r3, #54]	; 0x36
 8004214:	e015      	b.n	8004242 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004216:	f7fd fa0f 	bl	8001638 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d803      	bhi.n	800422e <HAL_SPI_Transmit+0x20c>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422c:	d102      	bne.n	8004234 <HAL_SPI_Transmit+0x212>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004240:	e029      	b.n	8004296 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1c9      	bne.n	80041e0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	6839      	ldr	r1, [r7, #0]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fcf1 	bl	8004c38 <SPI_EndRxTxTransaction>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e003      	b.n	8004296 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800429e:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d002      	beq.n	80042ce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042cc:	e0fb      	b.n	80044c6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d6:	d112      	bne.n	80042fe <HAL_SPI_Receive+0x56>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10e      	bne.n	80042fe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2204      	movs	r2, #4
 80042e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f8ef 	bl	80044d8 <HAL_SPI_TransmitReceive>
 80042fa:	4603      	mov	r3, r0
 80042fc:	e0e8      	b.n	80044d0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_SPI_Receive+0x64>
 8004308:	2302      	movs	r3, #2
 800430a:	e0e1      	b.n	80044d0 <HAL_SPI_Receive+0x228>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004314:	f7fd f990 	bl	8001638 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_SPI_Receive+0x7e>
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    goto error;
 800432a:	e0cc      	b.n	80044c6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2204      	movs	r2, #4
 8004330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004372:	d10f      	bne.n	8004394 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004382:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d007      	beq.n	80043b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d16a      	bne.n	8004490 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043ba:	e032      	b.n	8004422 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d115      	bne.n	80043f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f103 020c 	add.w	r2, r3, #12
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	7812      	ldrb	r2, [r2, #0]
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043f4:	e015      	b.n	8004422 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f6:	f7fd f91f 	bl	8001638 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d803      	bhi.n	800440e <HAL_SPI_Receive+0x166>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d102      	bne.n	8004414 <HAL_SPI_Receive+0x16c>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004420:	e051      	b.n	80044c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1c7      	bne.n	80043bc <HAL_SPI_Receive+0x114>
 800442c:	e035      	b.n	800449a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d113      	bne.n	8004464 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	b292      	uxth	r2, r2
 8004448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004462:	e015      	b.n	8004490 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004464:	f7fd f8e8 	bl	8001638 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d803      	bhi.n	800447c <HAL_SPI_Receive+0x1d4>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447a:	d102      	bne.n	8004482 <HAL_SPI_Receive+0x1da>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800448e:	e01a      	b.n	80044c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1c9      	bne.n	800442e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fb64 	bl	8004b6c <SPI_EndRxTransaction>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e003      	b.n	80044c6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x26>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e198      	b.n	8004830 <HAL_SPI_TransmitReceive+0x358>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004506:	f7fd f897 	bl	8001638 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004524:	2b01      	cmp	r3, #1
 8004526:	d00f      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x70>
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452e:	d107      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x68>
 8004538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004546:	e16d      	b.n	8004824 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_SPI_TransmitReceive+0x82>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x82>
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004560:	e160      	b.n	8004824 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2205      	movs	r2, #5
 8004572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d007      	beq.n	80045ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d17c      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0x10a>
 80045dc:	8b7b      	ldrh	r3, [r7, #26]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d16a      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004606:	e057      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d11b      	bne.n	800464e <HAL_SPI_TransmitReceive+0x176>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <HAL_SPI_TransmitReceive+0x176>
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d113      	bne.n	800464e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d119      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x1b8>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d014      	beq.n	8004690 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	b292      	uxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800468c:	2301      	movs	r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004690:	f7fc ffd2 	bl	8001638 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469c:	429a      	cmp	r2, r3
 800469e:	d80b      	bhi.n	80046b8 <HAL_SPI_TransmitReceive+0x1e0>
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80046b6:	e0b5      	b.n	8004824 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1a2      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x130>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d19d      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x130>
 80046cc:	e080      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_TransmitReceive+0x204>
 80046d6:	8b7b      	ldrh	r3, [r7, #26]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d16f      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004702:	e05b      	b.n	80047bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d11c      	bne.n	800474c <HAL_SPI_TransmitReceive+0x274>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d017      	beq.n	800474c <HAL_SPI_TransmitReceive+0x274>
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d114      	bne.n	800474c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d119      	bne.n	800478e <HAL_SPI_TransmitReceive+0x2b6>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d014      	beq.n	800478e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478a:	2301      	movs	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800478e:	f7fc ff53 	bl	8001638 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800479a:	429a      	cmp	r2, r3
 800479c:	d803      	bhi.n	80047a6 <HAL_SPI_TransmitReceive+0x2ce>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a4:	d102      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x2d4>
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d107      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80047ba:	e033      	b.n	8004824 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d19e      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x22c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d199      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fa2f 	bl	8004c38 <SPI_EndRxTxTransaction>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047ec:	e01a      	b.n	8004824 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481a:	e003      	b.n	8004824 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800482c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004830:	4618      	mov	r0, r3
 8004832:	3730      	adds	r7, #48	; 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
    return;
 8004876:	e0ce      	b.n	8004a16 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_SPI_IRQHandler+0x5e>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
    return;
 8004894:	e0bf      	b.n	8004a16 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_SPI_IRQHandler+0x7e>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80b0 	beq.w	8004a16 <HAL_SPI_IRQHandler+0x1de>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80aa 	beq.w	8004a16 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d023      	beq.n	8004914 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d011      	beq.n	80048fc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	e00b      	b.n	8004914 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
        return;
 8004912:	e080      	b.n	8004a16 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d014      	beq.n	8004948 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f043 0208 	orr.w	r2, r3, #8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d04f      	beq.n	8004a14 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004982:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_SPI_IRQHandler+0x168>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d034      	beq.n	8004a0a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0203 	bic.w	r2, r2, #3
 80049ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <HAL_SPI_IRQHandler+0x1e4>)
 80049be:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fd f827 	bl	8001a18 <HAL_DMA_Abort_IT>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d016      	beq.n	8004a12 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <HAL_SPI_IRQHandler+0x1e4>)
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fd f811 	bl	8001a18 <HAL_DMA_Abort_IT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a08:	e003      	b.n	8004a12 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f808 	bl	8004a20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a10:	e000      	b.n	8004a14 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004a12:	bf00      	nop
    return;
 8004a14:	bf00      	nop
  }
}
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08004a35 	.word	0x08004a35

08004a20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff ffe6 	bl	8004a20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a6c:	f7fc fde4 	bl	8001638 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a7c:	f7fc fddc 	bl	8001638 <HAL_GetTick>
 8004a80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a82:	4b39      	ldr	r3, [pc, #228]	; (8004b68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	015b      	lsls	r3, r3, #5
 8004a88:	0d1b      	lsrs	r3, r3, #20
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a92:	e054      	b.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9a:	d050      	beq.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a9c:	f7fc fdcc 	bl	8001638 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d902      	bls.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d13d      	bne.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ac0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d111      	bne.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad4:	d004      	beq.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ade:	d107      	bne.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d10f      	bne.n	8004b1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e017      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d19b      	bne.n	8004a94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000000 	.word	0x20000000

08004b6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b80:	d111      	bne.n	8004ba6 <SPI_EndRxTransaction+0x3a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8a:	d004      	beq.n	8004b96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b94:	d107      	bne.n	8004ba6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d12a      	bne.n	8004c06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d012      	beq.n	8004be0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2180      	movs	r1, #128	; 0x80
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ff49 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02d      	beq.n	8004c2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	f043 0220 	orr.w	r2, r3, #32
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e026      	b.n	8004c2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2101      	movs	r1, #1
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff36 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01a      	beq.n	8004c2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e013      	b.n	8004c2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2101      	movs	r1, #1
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff ff23 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e000      	b.n	8004c2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff ff04 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e032      	b.n	8004cd0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <SPI_EndRxTxTransaction+0xa0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <SPI_EndRxTxTransaction+0xa4>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	0d5b      	lsrs	r3, r3, #21
 8004c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c88:	d112      	bne.n	8004cb0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff fee1 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d016      	beq.n	8004cce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e00f      	b.n	8004cd0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d0f2      	beq.n	8004cb0 <SPI_EndRxTxTransaction+0x78>
 8004cca:	e000      	b.n	8004cce <SPI_EndRxTxTransaction+0x96>
        break;
 8004ccc:	bf00      	nop
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	165e9f81 	.word	0x165e9f81

08004ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e041      	b.n	8004d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc faae 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 fbea 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e041      	b.n	8004e14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fa17 	bl	80011d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f000 fb9b 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_TIM_PWM_Start+0x24>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e022      	b.n	8004e86 <HAL_TIM_PWM_Start+0x6a>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d109      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x3e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	bf14      	ite	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	2300      	moveq	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	e015      	b.n	8004e86 <HAL_TIM_PWM_Start+0x6a>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d109      	bne.n	8004e74 <HAL_TIM_PWM_Start+0x58>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e008      	b.n	8004e86 <HAL_TIM_PWM_Start+0x6a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e068      	b.n	8004f60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x82>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	e013      	b.n	8004ec6 <HAL_TIM_PWM_Start+0xaa>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_PWM_Start+0x92>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eac:	e00b      	b.n	8004ec6 <HAL_TIM_PWM_Start+0xaa>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_PWM_Start+0xa2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebc:	e003      	b.n	8004ec6 <HAL_TIM_PWM_Start+0xaa>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fdc4 	bl	8005a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <HAL_TIM_PWM_Start+0x14c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <HAL_TIM_PWM_Start+0x14c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x10e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d013      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x10e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <HAL_TIM_PWM_Start+0x150>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x10e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <HAL_TIM_PWM_Start+0x154>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x10e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <HAL_TIM_PWM_Start+0x158>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x10e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <HAL_TIM_PWM_Start+0x15c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d111      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d010      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	e007      	b.n	8004f5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40014000 	.word	0x40014000

08004f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e097      	b.n	80050c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fc f9ab 	bl	8001300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 fa91 	bl	80054f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	4313      	orrs	r3, r2
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800501c:	f023 030c 	bic.w	r3, r3, #12
 8005020:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	4313      	orrs	r3, r2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	031b      	lsls	r3, r3, #12
 800504c:	4313      	orrs	r3, r2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	4313      	orrs	r3, r2
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d110      	bne.n	800511a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050fe:	7b7b      	ldrb	r3, [r7, #13]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e069      	b.n	80051dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005118:	e031      	b.n	800517e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d110      	bne.n	8005142 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005126:	7b3b      	ldrb	r3, [r7, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e055      	b.n	80051dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005140:	e01d      	b.n	800517e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005148:	7bbb      	ldrb	r3, [r7, #14]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800514e:	7b7b      	ldrb	r3, [r7, #13]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d102      	bne.n	800515a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005154:	7b3b      	ldrb	r3, [r7, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e03e      	b.n	80051dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_TIM_Encoder_Start+0xc4>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d008      	beq.n	800519c <HAL_TIM_Encoder_Start+0xd4>
 800518a:	e00f      	b.n	80051ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2201      	movs	r2, #1
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fc61 	bl	8005a5c <TIM_CCxChannelCmd>
      break;
 800519a:	e016      	b.n	80051ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	2104      	movs	r1, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc59 	bl	8005a5c <TIM_CCxChannelCmd>
      break;
 80051aa:	e00e      	b.n	80051ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fc51 	bl	8005a5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	2104      	movs	r1, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fc4a 	bl	8005a5c <TIM_CCxChannelCmd>
      break;
 80051c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051fe:	2302      	movs	r3, #2
 8005200:	e0ae      	b.n	8005360 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	f200 809f 	bhi.w	8005350 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800524d 	.word	0x0800524d
 800521c:	08005351 	.word	0x08005351
 8005220:	08005351 	.word	0x08005351
 8005224:	08005351 	.word	0x08005351
 8005228:	0800528d 	.word	0x0800528d
 800522c:	08005351 	.word	0x08005351
 8005230:	08005351 	.word	0x08005351
 8005234:	08005351 	.word	0x08005351
 8005238:	080052cf 	.word	0x080052cf
 800523c:	08005351 	.word	0x08005351
 8005240:	08005351 	.word	0x08005351
 8005244:	08005351 	.word	0x08005351
 8005248:	0800530f 	.word	0x0800530f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f9dc 	bl	8005610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0208 	orr.w	r2, r2, #8
 8005266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0204 	bic.w	r2, r2, #4
 8005276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	619a      	str	r2, [r3, #24]
      break;
 800528a:	e064      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fa22 	bl	80056dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	021a      	lsls	r2, r3, #8
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
      break;
 80052cc:	e043      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fa6d 	bl	80057b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0208 	orr.w	r2, r2, #8
 80052e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0204 	bic.w	r2, r2, #4
 80052f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	61da      	str	r2, [r3, #28]
      break;
 800530c:	e023      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fab7 	bl	8005888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69d9      	ldr	r1, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	021a      	lsls	r2, r3, #8
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	61da      	str	r2, [r3, #28]
      break;
 800534e:	e002      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
      break;
 8005354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIM_ConfigClockSource+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e0b4      	b.n	80054ee <HAL_TIM_ConfigClockSource+0x186>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d03e      	beq.n	800543c <HAL_TIM_ConfigClockSource+0xd4>
 80053be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c2:	f200 8087 	bhi.w	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	f000 8086 	beq.w	80054da <HAL_TIM_ConfigClockSource+0x172>
 80053ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d2:	d87f      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b70      	cmp	r3, #112	; 0x70
 80053d6:	d01a      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xa6>
 80053d8:	2b70      	cmp	r3, #112	; 0x70
 80053da:	d87b      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b60      	cmp	r3, #96	; 0x60
 80053de:	d050      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x11a>
 80053e0:	2b60      	cmp	r3, #96	; 0x60
 80053e2:	d877      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b50      	cmp	r3, #80	; 0x50
 80053e6:	d03c      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xfa>
 80053e8:	2b50      	cmp	r3, #80	; 0x50
 80053ea:	d873      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d058      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x13a>
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d86f      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b30      	cmp	r3, #48	; 0x30
 80053f6:	d064      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	2b30      	cmp	r3, #48	; 0x30
 80053fa:	d86b      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d060      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005400:	2b20      	cmp	r3, #32
 8005402:	d867      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d05c      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005408:	2b10      	cmp	r3, #16
 800540a:	d05a      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x15a>
 800540c:	e062      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800541e:	f000 fafd 	bl	8005a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	609a      	str	r2, [r3, #8]
      break;
 800543a:	e04f      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800544c:	f000 fae6 	bl	8005a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545e:	609a      	str	r2, [r3, #8]
      break;
 8005460:	e03c      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	461a      	mov	r2, r3
 8005470:	f000 fa5a 	bl	8005928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2150      	movs	r1, #80	; 0x50
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fab3 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8005480:	e02c      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800548e:	461a      	mov	r2, r3
 8005490:	f000 fa79 	bl	8005986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2160      	movs	r1, #96	; 0x60
 800549a:	4618      	mov	r0, r3
 800549c:	f000 faa3 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80054a0:	e01c      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ae:	461a      	mov	r2, r3
 80054b0:	f000 fa3a 	bl	8005928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2140      	movs	r1, #64	; 0x40
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fa93 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80054c0:	e00c      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f000 fa8a 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 80054d2:	e003      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
      break;
 80054d8:	e000      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3a      	ldr	r2, [pc, #232]	; (80055f4 <TIM_Base_SetConfig+0xfc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00f      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d00b      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a37      	ldr	r2, [pc, #220]	; (80055f8 <TIM_Base_SetConfig+0x100>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a36      	ldr	r2, [pc, #216]	; (80055fc <TIM_Base_SetConfig+0x104>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0x38>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a35      	ldr	r2, [pc, #212]	; (8005600 <TIM_Base_SetConfig+0x108>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d108      	bne.n	8005542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2b      	ldr	r2, [pc, #172]	; (80055f4 <TIM_Base_SetConfig+0xfc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01b      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d017      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <TIM_Base_SetConfig+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a27      	ldr	r2, [pc, #156]	; (80055fc <TIM_Base_SetConfig+0x104>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00f      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <TIM_Base_SetConfig+0x108>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a25      	ldr	r2, [pc, #148]	; (8005604 <TIM_Base_SetConfig+0x10c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a24      	ldr	r2, [pc, #144]	; (8005608 <TIM_Base_SetConfig+0x110>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_Base_SetConfig+0x8a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a23      	ldr	r2, [pc, #140]	; (800560c <TIM_Base_SetConfig+0x114>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <TIM_Base_SetConfig+0xfc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d105      	bne.n	80055e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]
  }
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800

08005610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f023 0201 	bic.w	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0303 	bic.w	r3, r3, #3
 8005646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f023 0302 	bic.w	r3, r3, #2
 8005658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <TIM_OC1_SetConfig+0xc8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10c      	bne.n	8005686 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0308 	bic.w	r3, r3, #8
 8005672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <TIM_OC1_SetConfig+0xc8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d111      	bne.n	80056b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800569c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40010000 	.word	0x40010000

080056dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0320 	bic.w	r3, r3, #32
 8005726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <TIM_OC2_SetConfig+0xd4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d10d      	bne.n	8005758 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <TIM_OC2_SetConfig+0xd4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d113      	bne.n	8005788 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000

080057b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <TIM_OC3_SetConfig+0xd0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10d      	bne.n	800582e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a14      	ldr	r2, [pc, #80]	; (8005884 <TIM_OC3_SetConfig+0xd0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d113      	bne.n	800585e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40010000 	.word	0x40010000

08005888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a10      	ldr	r2, [pc, #64]	; (8005924 <TIM_OC4_SetConfig+0x9c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d109      	bne.n	80058fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	019b      	lsls	r3, r3, #6
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000

08005928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 030a 	bic.w	r3, r3, #10
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f023 0210 	bic.w	r2, r3, #16
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f043 0307 	orr.w	r3, r3, #7
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2201      	movs	r2, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	431a      	orrs	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e050      	b.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d013      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10c      	bne.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40014000 	.word	0x40014000

08005b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e03d      	b.n	8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c28:	b084      	sub	sp, #16
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	f107 001c 	add.w	r0, r7, #28
 8005c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d123      	bne.n	8005c8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d105      	bne.n	8005c7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 fae2 	bl	8007248 <USB_CoreReset>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e01b      	b.n	8005cc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fad6 	bl	8007248 <USB_CoreReset>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ca0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb4:	e005      	b.n	8005cc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005cc2:	7fbb      	ldrb	r3, [r7, #30]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10b      	bne.n	8005ce0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f043 0206 	orr.w	r2, r3, #6
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cec:	b004      	add	sp, #16
 8005cee:	4770      	bx	lr

08005cf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d165      	bne.n	8005dd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4a41      	ldr	r2, [pc, #260]	; (8005e0c <USB_SetTurnaroundTime+0x11c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d906      	bls.n	8005d1a <USB_SetTurnaroundTime+0x2a>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4a40      	ldr	r2, [pc, #256]	; (8005e10 <USB_SetTurnaroundTime+0x120>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d202      	bcs.n	8005d1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d14:	230f      	movs	r3, #15
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e062      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4a3c      	ldr	r2, [pc, #240]	; (8005e10 <USB_SetTurnaroundTime+0x120>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d306      	bcc.n	8005d30 <USB_SetTurnaroundTime+0x40>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4a3b      	ldr	r2, [pc, #236]	; (8005e14 <USB_SetTurnaroundTime+0x124>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d202      	bcs.n	8005d30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d2a:	230e      	movs	r3, #14
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	e057      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4a38      	ldr	r2, [pc, #224]	; (8005e14 <USB_SetTurnaroundTime+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d306      	bcc.n	8005d46 <USB_SetTurnaroundTime+0x56>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4a37      	ldr	r2, [pc, #220]	; (8005e18 <USB_SetTurnaroundTime+0x128>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d202      	bcs.n	8005d46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d40:	230d      	movs	r3, #13
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e04c      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4a33      	ldr	r2, [pc, #204]	; (8005e18 <USB_SetTurnaroundTime+0x128>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d306      	bcc.n	8005d5c <USB_SetTurnaroundTime+0x6c>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4a32      	ldr	r2, [pc, #200]	; (8005e1c <USB_SetTurnaroundTime+0x12c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d802      	bhi.n	8005d5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d56:	230c      	movs	r3, #12
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e041      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4a2f      	ldr	r2, [pc, #188]	; (8005e1c <USB_SetTurnaroundTime+0x12c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d906      	bls.n	8005d72 <USB_SetTurnaroundTime+0x82>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4a2e      	ldr	r2, [pc, #184]	; (8005e20 <USB_SetTurnaroundTime+0x130>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d802      	bhi.n	8005d72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d6c:	230b      	movs	r3, #11
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e036      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <USB_SetTurnaroundTime+0x130>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d906      	bls.n	8005d88 <USB_SetTurnaroundTime+0x98>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <USB_SetTurnaroundTime+0x134>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d802      	bhi.n	8005d88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d82:	230a      	movs	r3, #10
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e02b      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4a26      	ldr	r2, [pc, #152]	; (8005e24 <USB_SetTurnaroundTime+0x134>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d906      	bls.n	8005d9e <USB_SetTurnaroundTime+0xae>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <USB_SetTurnaroundTime+0x138>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d202      	bcs.n	8005d9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d98:	2309      	movs	r3, #9
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e020      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4a21      	ldr	r2, [pc, #132]	; (8005e28 <USB_SetTurnaroundTime+0x138>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d306      	bcc.n	8005db4 <USB_SetTurnaroundTime+0xc4>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4a20      	ldr	r2, [pc, #128]	; (8005e2c <USB_SetTurnaroundTime+0x13c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d802      	bhi.n	8005db4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005dae:	2308      	movs	r3, #8
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e015      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <USB_SetTurnaroundTime+0x13c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d906      	bls.n	8005dca <USB_SetTurnaroundTime+0xda>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a1c      	ldr	r2, [pc, #112]	; (8005e30 <USB_SetTurnaroundTime+0x140>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d202      	bcs.n	8005dca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005dc4:	2307      	movs	r3, #7
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e00a      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005dca:	2306      	movs	r3, #6
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e007      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005dd6:	2309      	movs	r3, #9
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e001      	b.n	8005de0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ddc:	2309      	movs	r3, #9
 8005dde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	029b      	lsls	r3, r3, #10
 8005df4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	00d8acbf 	.word	0x00d8acbf
 8005e10:	00e4e1c0 	.word	0x00e4e1c0
 8005e14:	00f42400 	.word	0x00f42400
 8005e18:	01067380 	.word	0x01067380
 8005e1c:	011a499f 	.word	0x011a499f
 8005e20:	01312cff 	.word	0x01312cff
 8005e24:	014ca43f 	.word	0x014ca43f
 8005e28:	016e3600 	.word	0x016e3600
 8005e2c:	01a6ab1f 	.word	0x01a6ab1f
 8005e30:	01e84800 	.word	0x01e84800

08005e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f023 0201 	bic.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d115      	bne.n	8005ec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ea6:	200a      	movs	r0, #10
 8005ea8:	f7fb fbd2 	bl	8001650 <HAL_Delay>
      ms += 10U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	330a      	adds	r3, #10
 8005eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f939 	bl	800712a <USB_GetMode>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d01e      	beq.n	8005efc <USB_SetCurrentMode+0x84>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2bc7      	cmp	r3, #199	; 0xc7
 8005ec2:	d9f0      	bls.n	8005ea6 <USB_SetCurrentMode+0x2e>
 8005ec4:	e01a      	b.n	8005efc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d115      	bne.n	8005ef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ed8:	200a      	movs	r0, #10
 8005eda:	f7fb fbb9 	bl	8001650 <HAL_Delay>
      ms += 10U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	330a      	adds	r3, #10
 8005ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f920 	bl	800712a <USB_GetMode>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <USB_SetCurrentMode+0x84>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2bc7      	cmp	r3, #199	; 0xc7
 8005ef4:	d9f0      	bls.n	8005ed8 <USB_SetCurrentMode+0x60>
 8005ef6:	e001      	b.n	8005efc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e005      	b.n	8005f08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2bc8      	cmp	r3, #200	; 0xc8
 8005f00:	d101      	bne.n	8005f06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f10:	b084      	sub	sp, #16
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	e009      	b.n	8005f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3340      	adds	r3, #64	; 0x40
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	3301      	adds	r3, #1
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b0e      	cmp	r3, #14
 8005f48:	d9f2      	bls.n	8005f30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11c      	bne.n	8005f8c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8a:	e00b      	b.n	8005fa4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005faa:	461a      	mov	r2, r3
 8005fac:	2300      	movs	r3, #0
 8005fae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fb0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d10d      	bne.n	8005fd4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f968 	bl	8006298 <USB_SetDevSpeed>
 8005fc8:	e008      	b.n	8005fdc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fca:	2101      	movs	r1, #1
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f963 	bl	8006298 <USB_SetDevSpeed>
 8005fd2:	e003      	b.n	8005fdc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fd4:	2103      	movs	r1, #3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f95e 	bl	8006298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fdc:	2110      	movs	r1, #16
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8fa 	bl	80061d8 <USB_FlushTxFifo>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f924 	bl	800623c <USB_FlushRxFifo>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	461a      	mov	r2, r3
 8006006:	2300      	movs	r3, #0
 8006008:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	461a      	mov	r2, r3
 8006012:	2300      	movs	r3, #0
 8006014:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	461a      	mov	r2, r3
 800601e:	2300      	movs	r3, #0
 8006020:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	e043      	b.n	80060b0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603e:	d118      	bne.n	8006072 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	461a      	mov	r2, r3
 8006054:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e013      	b.n	8006084 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	461a      	mov	r2, r3
 800606a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	e008      	b.n	8006084 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	461a      	mov	r2, r3
 8006080:	2300      	movs	r3, #0
 8006082:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	461a      	mov	r2, r3
 8006092:	2300      	movs	r3, #0
 8006094:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	461a      	mov	r2, r3
 80060a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80060b4:	461a      	mov	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d3b5      	bcc.n	8006028 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e043      	b.n	800614a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d8:	d118      	bne.n	800610c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	461a      	mov	r2, r3
 80060ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e013      	b.n	800611e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	461a      	mov	r2, r3
 8006104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	e008      	b.n	800611e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	461a      	mov	r2, r3
 800611a:	2300      	movs	r3, #0
 800611c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	461a      	mov	r2, r3
 800612c:	2300      	movs	r3, #0
 800612e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	461a      	mov	r2, r3
 800613e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	3301      	adds	r3, #1
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800614e:	461a      	mov	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4293      	cmp	r3, r2
 8006154:	d3b5      	bcc.n	80060c2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006168:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006176:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f043 0210 	orr.w	r2, r3, #16
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699a      	ldr	r2, [r3, #24]
 8006190:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <USB_DevInit+0x2c4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006198:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f043 0208 	orr.w	r2, r3, #8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d107      	bne.n	80061c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061bc:	f043 0304 	orr.w	r3, r3, #4
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr
 80061d4:	803c3800 	.word	0x803c3800

080061d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80061f2:	d901      	bls.n	80061f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e01b      	b.n	8006230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	daf2      	bge.n	80061e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	019b      	lsls	r3, r3, #6
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800621c:	d901      	bls.n	8006222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b20      	cmp	r3, #32
 800622c:	d0f0      	beq.n	8006210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006254:	d901      	bls.n	800625a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e018      	b.n	800628c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	daf2      	bge.n	8006248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2210      	movs	r2, #16
 800626a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006278:	d901      	bls.n	800627e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e006      	b.n	800628c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b10      	cmp	r3, #16
 8006288:	d0f0      	beq.n	800626c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b8:	4313      	orrs	r3, r2
 80062ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0306 	and.w	r3, r3, #6
 80062e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062ea:	2300      	movs	r3, #0
 80062ec:	75fb      	strb	r3, [r7, #23]
 80062ee:	e00a      	b.n	8006306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d002      	beq.n	80062fc <USB_GetDevSpeed+0x32>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	d102      	bne.n	8006302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062fc:	2302      	movs	r3, #2
 80062fe:	75fb      	strb	r3, [r7, #23]
 8006300:	e001      	b.n	8006306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006302:	230f      	movs	r3, #15
 8006304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d13a      	bne.n	80063a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	2101      	movs	r1, #1
 8006342:	fa01 f303 	lsl.w	r3, r1, r3
 8006346:	b29b      	uxth	r3, r3
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800634e:	4313      	orrs	r3, r2
 8006350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d155      	bne.n	8006414 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	059b      	lsls	r3, r3, #22
 800638a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800638c:	4313      	orrs	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	e036      	b.n	8006414 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	2101      	movs	r1, #1
 80063b8:	fa01 f303 	lsl.w	r3, r1, r3
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c4:	4313      	orrs	r3, r2
 80063c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d11a      	bne.n	8006414 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	791b      	ldrb	r3, [r3, #4]
 80063f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063fa:	430b      	orrs	r3, r1
 80063fc:	4313      	orrs	r3, r2
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006412:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d161      	bne.n	8006504 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006456:	d11f      	bne.n	8006498 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006476:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	2101      	movs	r1, #1
 80064aa:	fa01 f303 	lsl.w	r3, r1, r3
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b8:	4013      	ands	r3, r2
 80064ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	43db      	mvns	r3, r3
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064dc:	4013      	ands	r3, r2
 80064de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	0159      	lsls	r1, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	4619      	mov	r1, r3
 80064fc:	4b35      	ldr	r3, [pc, #212]	; (80065d4 <USB_DeactivateEndpoint+0x1b0>)
 80064fe:	4013      	ands	r3, r2
 8006500:	600b      	str	r3, [r1, #0]
 8006502:	e060      	b.n	80065c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800651a:	d11f      	bne.n	800655c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800653a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	2101      	movs	r1, #1
 800656e:	fa01 f303 	lsl.w	r3, r1, r3
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	43db      	mvns	r3, r3
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800657c:	4013      	ands	r3, r2
 800657e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	43db      	mvns	r3, r3
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a0:	4013      	ands	r3, r2
 80065a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	0159      	lsls	r1, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	440b      	add	r3, r1
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	4619      	mov	r1, r3
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <USB_DeactivateEndpoint+0x1b4>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	ec337800 	.word	0xec337800
 80065d8:	eff37800 	.word	0xeff37800

080065dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f040 817a 	bne.w	80068f2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d132      	bne.n	800666c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006664:	0cdb      	lsrs	r3, r3, #19
 8006666:	04db      	lsls	r3, r3, #19
 8006668:	6113      	str	r3, [r2, #16]
 800666a:	e092      	b.n	8006792 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006686:	0cdb      	lsrs	r3, r3, #19
 8006688:	04db      	lsls	r3, r3, #19
 800668a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11a      	bne.n	80066ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d903      	bls.n	80066ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066e8:	6113      	str	r3, [r2, #16]
 80066ea:	e01b      	b.n	8006724 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6919      	ldr	r1, [r3, #16]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	440b      	add	r3, r1
 8006704:	1e59      	subs	r1, r3, #1
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	fbb1 f3f3 	udiv	r3, r1, r3
 800670e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006710:	4ba2      	ldr	r3, [pc, #648]	; (800699c <USB_EPStartXfer+0x3c0>)
 8006712:	400b      	ands	r3, r1
 8006714:	69b9      	ldr	r1, [r7, #24]
 8006716:	0148      	lsls	r0, r1, #5
 8006718:	69f9      	ldr	r1, [r7, #28]
 800671a:	4401      	add	r1, r0
 800671c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006720:	4313      	orrs	r3, r2
 8006722:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	0148      	lsls	r0, r1, #5
 800673e:	69f9      	ldr	r1, [r7, #28]
 8006740:	4401      	add	r1, r0
 8006742:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006746:	4313      	orrs	r3, r2
 8006748:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	791b      	ldrb	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d11f      	bne.n	8006792 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006770:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006790:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d14b      	bne.n	8006830 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	791b      	ldrb	r3, [r3, #4]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d128      	bne.n	800680e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d110      	bne.n	80067ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e00f      	b.n	800680e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800680c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e165      	b.n	8006afc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800684e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	791b      	ldrb	r3, [r3, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d015      	beq.n	8006884 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 814d 	beq.w	8006afc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	2101      	movs	r1, #1
 8006874:	fa01 f303 	lsl.w	r3, r1, r3
 8006878:	69f9      	ldr	r1, [r7, #28]
 800687a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800687e:	4313      	orrs	r3, r2
 8006880:	634b      	str	r3, [r1, #52]	; 0x34
 8006882:	e13b      	b.n	8006afc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d110      	bne.n	80068b6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e00f      	b.n	80068d6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	68d9      	ldr	r1, [r3, #12]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	b298      	uxth	r0, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4603      	mov	r3, r0
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f9b8 	bl	8006c60 <USB_WritePacket>
 80068f0:	e104      	b.n	8006afc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	0cdb      	lsrs	r3, r3, #19
 800690e:	04db      	lsls	r3, r3, #19
 8006910:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006934:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d131      	bne.n	80069a0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800696a:	69b9      	ldr	r1, [r7, #24]
 800696c:	0148      	lsls	r0, r1, #5
 800696e:	69f9      	ldr	r1, [r7, #28]
 8006970:	4401      	add	r1, r0
 8006972:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006976:	4313      	orrs	r3, r2
 8006978:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006998:	6113      	str	r3, [r2, #16]
 800699a:	e061      	b.n	8006a60 <USB_EPStartXfer+0x484>
 800699c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d123      	bne.n	80069f0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	0148      	lsls	r0, r1, #5
 80069c2:	69f9      	ldr	r1, [r7, #28]
 80069c4:	4401      	add	r1, r0
 80069c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069ca:	4313      	orrs	r3, r2
 80069cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ec:	6113      	str	r3, [r2, #16]
 80069ee:	e037      	b.n	8006a60 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	1e5a      	subs	r2, r3, #1
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a04:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	8afa      	ldrh	r2, [r7, #22]
 8006a0c:	fb03 f202 	mul.w	r2, r3, r2
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	04d9      	lsls	r1, r3, #19
 8006a26:	4b38      	ldr	r3, [pc, #224]	; (8006b08 <USB_EPStartXfer+0x52c>)
 8006a28:	400b      	ands	r3, r1
 8006a2a:	69b9      	ldr	r1, [r7, #24]
 8006a2c:	0148      	lsls	r0, r1, #5
 8006a2e:	69f9      	ldr	r1, [r7, #28]
 8006a30:	4401      	add	r1, r0
 8006a32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a36:	4313      	orrs	r3, r2
 8006a38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	69f9      	ldr	r1, [r7, #28]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10d      	bne.n	8006a82 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	68d9      	ldr	r1, [r3, #12]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	460a      	mov	r2, r1
 8006a80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	791b      	ldrb	r3, [r3, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d128      	bne.n	8006adc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00f      	b.n	8006adc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	1ff80000 	.word	0x1ff80000

08006b0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d14a      	bne.n	8006bc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b42:	f040 8086 	bne.w	8006c52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	7812      	ldrb	r2, [r2, #0]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	0151      	lsls	r1, r2, #5
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	440a      	add	r2, r1
 8006b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d902      	bls.n	8006ba4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba2:	e056      	b.n	8006c52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bbc:	d0e7      	beq.n	8006b8e <USB_EPStopXfer+0x82>
 8006bbe:	e048      	b.n	8006c52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bd8:	d13b      	bne.n	8006c52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	7812      	ldrb	r2, [r2, #0]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bfc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d902      	bls.n	8006c38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
          break;
 8006c36:	e00c      	b.n	8006c52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c50:	d0e7      	beq.n	8006c22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	460b      	mov	r3, r1
 8006c70:	71fb      	strb	r3, [r7, #7]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d123      	bne.n	8006cce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c86:	88bb      	ldrh	r3, [r7, #4]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	089b      	lsrs	r3, r3, #2
 8006c8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e018      	b.n	8006cc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	031a      	lsls	r2, r3, #12
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d3e2      	bcc.n	8006c94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3724      	adds	r7, #36	; 0x24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b08b      	sub	sp, #44	; 0x2c
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	089b      	lsrs	r3, r3, #2
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cfa:	88fb      	ldrh	r3, [r7, #6]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	e014      	b.n	8006d32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	3301      	adds	r3, #1
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	3301      	adds	r3, #1
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	3301      	adds	r3, #1
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3e6      	bcc.n	8006d08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d3a:	8bfb      	ldrh	r3, [r7, #30]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01e      	beq.n	8006d7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	701a      	strb	r2, [r3, #0]
      i++;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	3301      	adds	r3, #1
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d78:	8bfb      	ldrh	r3, [r7, #30]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1ea      	bne.n	8006d54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	372c      	adds	r7, #44	; 0x2c
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d12c      	bne.n	8006e02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	db12      	blt.n	8006de0 <USB_EPSetStall+0x54>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00f      	beq.n	8006de0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e02b      	b.n	8006e5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	db12      	blt.n	8006e3a <USB_EPSetStall+0xae>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00f      	beq.n	8006e3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d128      	bne.n	8006ed6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ea2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	791b      	ldrb	r3, [r3, #4]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d003      	beq.n	8006eb4 <USB_EPClearStall+0x4c>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	791b      	ldrb	r3, [r3, #4]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d138      	bne.n	8006f26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e027      	b.n	8006f26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ef4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	791b      	ldrb	r3, [r3, #4]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d003      	beq.n	8006f06 <USB_EPClearStall+0x9e>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	791b      	ldrb	r3, [r3, #4]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d10f      	bne.n	8006f26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f68:	68f9      	ldr	r1, [r7, #12]
 8006f6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fae:	f023 0302 	bic.w	r3, r3, #2
 8006fb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fdc:	f023 0303 	bic.w	r3, r3, #3
 8006fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800701c:	68fb      	ldr	r3, [r7, #12]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	4013      	ands	r3, r2
 800704c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	0c1b      	lsrs	r3, r3, #16
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	b29b      	uxth	r3, r3
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4013      	ands	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070c0:	68bb      	ldr	r3, [r7, #8]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	fa22 f303 	lsr.w	r3, r2, r3
 80070fe:	01db      	lsls	r3, r3, #7
 8007100:	b2db      	uxtb	r3, r3
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	4013      	ands	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800711c:	68bb      	ldr	r3, [r7, #8]
}
 800711e:	4618      	mov	r0, r3
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0301 	and.w	r3, r3, #1
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007160:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007164:	f023 0307 	bic.w	r3, r3, #7
 8007168:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	460b      	mov	r3, r1
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	333c      	adds	r3, #60	; 0x3c
 80071a2:	3304      	adds	r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4a26      	ldr	r2, [pc, #152]	; (8007244 <USB_EP0_OutStart+0xb8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d90a      	bls.n	80071c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c0:	d101      	bne.n	80071c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e037      	b.n	8007236 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	461a      	mov	r2, r3
 80071ce:	2300      	movs	r3, #0
 80071d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f4:	f043 0318 	orr.w	r3, r3, #24
 80071f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007208:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800720c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d10f      	bne.n	8007234 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	4f54300a 	.word	0x4f54300a

08007248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007260:	d901      	bls.n	8007266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e01b      	b.n	800729e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	daf2      	bge.n	8007254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f043 0201 	orr.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800728a:	d901      	bls.n	8007290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e006      	b.n	800729e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b01      	cmp	r3, #1
 800729a:	d0f0      	beq.n	800727e <USB_CoreReset+0x36>

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072bc:	f002 fc24 	bl	8009b08 <USBD_static_malloc>
 80072c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32b0      	adds	r2, #176	; 0xb0
 80072d2:	2100      	movs	r1, #0
 80072d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80072d8:	2302      	movs	r3, #2
 80072da:	e0d4      	b.n	8007486 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80072dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80072e0:	2100      	movs	r1, #0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f002 fc54 	bl	8009b90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32b0      	adds	r2, #176	; 0xb0
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32b0      	adds	r2, #176	; 0xb0
 8007302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	7c1b      	ldrb	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d138      	bne.n	8007386 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007314:	4b5e      	ldr	r3, [pc, #376]	; (8007490 <USBD_CDC_Init+0x1e4>)
 8007316:	7819      	ldrb	r1, [r3, #0]
 8007318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800731c:	2202      	movs	r2, #2
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f002 facf 	bl	80098c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007324:	4b5a      	ldr	r3, [pc, #360]	; (8007490 <USBD_CDC_Init+0x1e4>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 020f 	and.w	r2, r3, #15
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3324      	adds	r3, #36	; 0x24
 800733a:	2201      	movs	r2, #1
 800733c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800733e:	4b55      	ldr	r3, [pc, #340]	; (8007494 <USBD_CDC_Init+0x1e8>)
 8007340:	7819      	ldrb	r1, [r3, #0]
 8007342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007346:	2202      	movs	r2, #2
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 faba 	bl	80098c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800734e:	4b51      	ldr	r3, [pc, #324]	; (8007494 <USBD_CDC_Init+0x1e8>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f003 020f 	and.w	r2, r3, #15
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007366:	2201      	movs	r2, #1
 8007368:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800736a:	4b4b      	ldr	r3, [pc, #300]	; (8007498 <USBD_CDC_Init+0x1ec>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 020f 	and.w	r2, r3, #15
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	3326      	adds	r3, #38	; 0x26
 8007380:	2210      	movs	r2, #16
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	e035      	b.n	80073f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007386:	4b42      	ldr	r3, [pc, #264]	; (8007490 <USBD_CDC_Init+0x1e4>)
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	2202      	movs	r2, #2
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f002 fa97 	bl	80098c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007394:	4b3e      	ldr	r3, [pc, #248]	; (8007490 <USBD_CDC_Init+0x1e4>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	3324      	adds	r3, #36	; 0x24
 80073aa:	2201      	movs	r2, #1
 80073ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073ae:	4b39      	ldr	r3, [pc, #228]	; (8007494 <USBD_CDC_Init+0x1e8>)
 80073b0:	7819      	ldrb	r1, [r3, #0]
 80073b2:	2340      	movs	r3, #64	; 0x40
 80073b4:	2202      	movs	r2, #2
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f002 fa83 	bl	80098c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073bc:	4b35      	ldr	r3, [pc, #212]	; (8007494 <USBD_CDC_Init+0x1e8>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 020f 	and.w	r2, r3, #15
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073d4:	2201      	movs	r2, #1
 80073d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80073d8:	4b2f      	ldr	r3, [pc, #188]	; (8007498 <USBD_CDC_Init+0x1ec>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	3326      	adds	r3, #38	; 0x26
 80073ee:	2210      	movs	r2, #16
 80073f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073f2:	4b29      	ldr	r3, [pc, #164]	; (8007498 <USBD_CDC_Init+0x1ec>)
 80073f4:	7819      	ldrb	r1, [r3, #0]
 80073f6:	2308      	movs	r3, #8
 80073f8:	2203      	movs	r2, #3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 fa61 	bl	80098c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007400:	4b25      	ldr	r3, [pc, #148]	; (8007498 <USBD_CDC_Init+0x1ec>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	3324      	adds	r3, #36	; 0x24
 8007416:	2201      	movs	r2, #1
 8007418:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	33b0      	adds	r3, #176	; 0xb0
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007450:	2302      	movs	r3, #2
 8007452:	e018      	b.n	8007486 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7c1b      	ldrb	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <USBD_CDC_Init+0x1e8>)
 800745e:	7819      	ldrb	r1, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f002 fb18 	bl	8009aa0 <USBD_LL_PrepareReceive>
 8007470:	e008      	b.n	8007484 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <USBD_CDC_Init+0x1e8>)
 8007474:	7819      	ldrb	r1, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f002 fb0e 	bl	8009aa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000093 	.word	0x20000093
 8007494:	20000094 	.word	0x20000094
 8007498:	20000095 	.word	0x20000095

0800749c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80074a8:	4b3a      	ldr	r3, [pc, #232]	; (8007594 <USBD_CDC_DeInit+0xf8>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f002 fa2d 	bl	800990e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80074b4:	4b37      	ldr	r3, [pc, #220]	; (8007594 <USBD_CDC_DeInit+0xf8>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 020f 	and.w	r2, r3, #15
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	3324      	adds	r3, #36	; 0x24
 80074ca:	2200      	movs	r2, #0
 80074cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80074ce:	4b32      	ldr	r3, [pc, #200]	; (8007598 <USBD_CDC_DeInit+0xfc>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f002 fa1a 	bl	800990e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80074da:	4b2f      	ldr	r3, [pc, #188]	; (8007598 <USBD_CDC_DeInit+0xfc>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	f003 020f 	and.w	r2, r3, #15
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074f2:	2200      	movs	r2, #0
 80074f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80074f6:	4b29      	ldr	r3, [pc, #164]	; (800759c <USBD_CDC_DeInit+0x100>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f002 fa06 	bl	800990e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007502:	4b26      	ldr	r3, [pc, #152]	; (800759c <USBD_CDC_DeInit+0x100>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f003 020f 	and.w	r2, r3, #15
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	3324      	adds	r3, #36	; 0x24
 8007518:	2200      	movs	r2, #0
 800751a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800751c:	4b1f      	ldr	r3, [pc, #124]	; (800759c <USBD_CDC_DeInit+0x100>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 020f 	and.w	r2, r3, #15
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3326      	adds	r3, #38	; 0x26
 8007532:	2200      	movs	r2, #0
 8007534:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32b0      	adds	r2, #176	; 0xb0
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01f      	beq.n	8007588 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	33b0      	adds	r3, #176	; 0xb0
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32b0      	adds	r2, #176	; 0xb0
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	4618      	mov	r0, r3
 800756c:	f002 fada 	bl	8009b24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32b0      	adds	r2, #176	; 0xb0
 800757a:	2100      	movs	r1, #0
 800757c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000093 	.word	0x20000093
 8007598:	20000094 	.word	0x20000094
 800759c:	20000095 	.word	0x20000095

080075a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	32b0      	adds	r2, #176	; 0xb0
 80075b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e0bf      	b.n	8007750 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d050      	beq.n	800767e <USBD_CDC_Setup+0xde>
 80075dc:	2b20      	cmp	r3, #32
 80075de:	f040 80af 	bne.w	8007740 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	88db      	ldrh	r3, [r3, #6]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d03a      	beq.n	8007660 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	b25b      	sxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da1b      	bge.n	800762c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	33b0      	adds	r3, #176	; 0xb0
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800760a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	88d2      	ldrh	r2, [r2, #6]
 8007610:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	88db      	ldrh	r3, [r3, #6]
 8007616:	2b07      	cmp	r3, #7
 8007618:	bf28      	it	cs
 800761a:	2307      	movcs	r3, #7
 800761c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	89fa      	ldrh	r2, [r7, #14]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fd49 	bl	80090bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800762a:	e090      	b.n	800774e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	785a      	ldrb	r2, [r3, #1]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	88db      	ldrh	r3, [r3, #6]
 800763a:	2b3f      	cmp	r3, #63	; 0x3f
 800763c:	d803      	bhi.n	8007646 <USBD_CDC_Setup+0xa6>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	88db      	ldrh	r3, [r3, #6]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	e000      	b.n	8007648 <USBD_CDC_Setup+0xa8>
 8007646:	2240      	movs	r2, #64	; 0x40
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800764e:	6939      	ldr	r1, [r7, #16]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007656:	461a      	mov	r2, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fd5b 	bl	8009114 <USBD_CtlPrepareRx>
      break;
 800765e:	e076      	b.n	800774e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	33b0      	adds	r3, #176	; 0xb0
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	7850      	ldrb	r0, [r2, #1]
 8007676:	2200      	movs	r2, #0
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	4798      	blx	r3
      break;
 800767c:	e067      	b.n	800774e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	2b0b      	cmp	r3, #11
 8007684:	d851      	bhi.n	800772a <USBD_CDC_Setup+0x18a>
 8007686:	a201      	add	r2, pc, #4	; (adr r2, 800768c <USBD_CDC_Setup+0xec>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	080076bd 	.word	0x080076bd
 8007690:	08007739 	.word	0x08007739
 8007694:	0800772b 	.word	0x0800772b
 8007698:	0800772b 	.word	0x0800772b
 800769c:	0800772b 	.word	0x0800772b
 80076a0:	0800772b 	.word	0x0800772b
 80076a4:	0800772b 	.word	0x0800772b
 80076a8:	0800772b 	.word	0x0800772b
 80076ac:	0800772b 	.word	0x0800772b
 80076b0:	0800772b 	.word	0x0800772b
 80076b4:	080076e7 	.word	0x080076e7
 80076b8:	08007711 	.word	0x08007711
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d107      	bne.n	80076d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076c8:	f107 030a 	add.w	r3, r7, #10
 80076cc:	2202      	movs	r2, #2
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fcf3 	bl	80090bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076d6:	e032      	b.n	800773e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fc7d 	bl	8008fda <USBD_CtlError>
            ret = USBD_FAIL;
 80076e0:	2303      	movs	r3, #3
 80076e2:	75fb      	strb	r3, [r7, #23]
          break;
 80076e4:	e02b      	b.n	800773e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d107      	bne.n	8007702 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076f2:	f107 030d 	add.w	r3, r7, #13
 80076f6:	2201      	movs	r2, #1
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fcde 	bl	80090bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007700:	e01d      	b.n	800773e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fc68 	bl	8008fda <USBD_CtlError>
            ret = USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	75fb      	strb	r3, [r7, #23]
          break;
 800770e:	e016      	b.n	800773e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b03      	cmp	r3, #3
 800771a:	d00f      	beq.n	800773c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fc5b 	bl	8008fda <USBD_CtlError>
            ret = USBD_FAIL;
 8007724:	2303      	movs	r3, #3
 8007726:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007728:	e008      	b.n	800773c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fc54 	bl	8008fda <USBD_CtlError>
          ret = USBD_FAIL;
 8007732:	2303      	movs	r3, #3
 8007734:	75fb      	strb	r3, [r7, #23]
          break;
 8007736:	e002      	b.n	800773e <USBD_CDC_Setup+0x19e>
          break;
 8007738:	bf00      	nop
 800773a:	e008      	b.n	800774e <USBD_CDC_Setup+0x1ae>
          break;
 800773c:	bf00      	nop
      }
      break;
 800773e:	e006      	b.n	800774e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 fc49 	bl	8008fda <USBD_CtlError>
      ret = USBD_FAIL;
 8007748:	2303      	movs	r3, #3
 800774a:	75fb      	strb	r3, [r7, #23]
      break;
 800774c:	bf00      	nop
  }

  return (uint8_t)ret;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800776a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32b0      	adds	r2, #176	; 0xb0
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800777e:	2303      	movs	r3, #3
 8007780:	e065      	b.n	800784e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	32b0      	adds	r2, #176	; 0xb0
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	3318      	adds	r3, #24
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d02f      	beq.n	800780c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3318      	adds	r3, #24
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	f003 010f 	and.w	r1, r3, #15
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	460b      	mov	r3, r1
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	440b      	add	r3, r1
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4403      	add	r3, r0
 80077d4:	331c      	adds	r3, #28
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80077dc:	fb01 f303 	mul.w	r3, r1, r3
 80077e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d112      	bne.n	800780c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	f003 020f 	and.w	r2, r3, #15
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	3318      	adds	r3, #24
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077fe:	78f9      	ldrb	r1, [r7, #3]
 8007800:	2300      	movs	r3, #0
 8007802:	2200      	movs	r2, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f002 f92a 	bl	8009a5e <USBD_LL_Transmit>
 800780a:	e01f      	b.n	800784c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	33b0      	adds	r3, #176	; 0xb0
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	33b0      	adds	r3, #176	; 0xb0
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	32b0      	adds	r2, #176	; 0xb0
 800786c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007870:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	32b0      	adds	r2, #176	; 0xb0
 800787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007884:	2303      	movs	r3, #3
 8007886:	e01a      	b.n	80078be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f002 f928 	bl	8009ae2 <USBD_LL_GetRxDataSize>
 8007892:	4602      	mov	r2, r0
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	33b0      	adds	r3, #176	; 0xb0
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078b8:	4611      	mov	r1, r2
 80078ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32b0      	adds	r2, #176	; 0xb0
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e025      	b.n	8007934 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	33b0      	adds	r3, #176	; 0xb0
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01a      	beq.n	8007932 <USBD_CDC_EP0_RxReady+0x6c>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007902:	2bff      	cmp	r3, #255	; 0xff
 8007904:	d015      	beq.n	8007932 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	33b0      	adds	r3, #176	; 0xb0
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800791e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007926:	b292      	uxth	r2, r2
 8007928:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	; 0xff
 800792e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007944:	2182      	movs	r1, #130	; 0x82
 8007946:	4818      	ldr	r0, [pc, #96]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007948:	f000 fd0f 	bl	800836a <USBD_GetEpDesc>
 800794c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800794e:	2101      	movs	r1, #1
 8007950:	4815      	ldr	r0, [pc, #84]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007952:	f000 fd0a 	bl	800836a <USBD_GetEpDesc>
 8007956:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007958:	2181      	movs	r1, #129	; 0x81
 800795a:	4813      	ldr	r0, [pc, #76]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800795c:	f000 fd05 	bl	800836a <USBD_GetEpDesc>
 8007960:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2210      	movs	r2, #16
 800796c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2200      	movs	r2, #0
 8007978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797c:	711a      	strb	r2, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d006      	beq.n	8007996 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007990:	711a      	strb	r2, [r3, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2243      	movs	r2, #67	; 0x43
 800799a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000050 	.word	0x20000050

080079ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079b4:	2182      	movs	r1, #130	; 0x82
 80079b6:	4818      	ldr	r0, [pc, #96]	; (8007a18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079b8:	f000 fcd7 	bl	800836a <USBD_GetEpDesc>
 80079bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079be:	2101      	movs	r1, #1
 80079c0:	4815      	ldr	r0, [pc, #84]	; (8007a18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079c2:	f000 fcd2 	bl	800836a <USBD_GetEpDesc>
 80079c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079c8:	2181      	movs	r1, #129	; 0x81
 80079ca:	4813      	ldr	r0, [pc, #76]	; (8007a18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079cc:	f000 fccd 	bl	800836a <USBD_GetEpDesc>
 80079d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2210      	movs	r2, #16
 80079dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d006      	beq.n	80079f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2200      	movs	r2, #0
 80079e8:	711a      	strb	r2, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f042 0202 	orr.w	r2, r2, #2
 80079f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d006      	beq.n	8007a06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	711a      	strb	r2, [r3, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f042 0202 	orr.w	r2, r2, #2
 8007a04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2243      	movs	r2, #67	; 0x43
 8007a0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a0c:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000050 	.word	0x20000050

08007a1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a24:	2182      	movs	r1, #130	; 0x82
 8007a26:	4818      	ldr	r0, [pc, #96]	; (8007a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a28:	f000 fc9f 	bl	800836a <USBD_GetEpDesc>
 8007a2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4815      	ldr	r0, [pc, #84]	; (8007a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a32:	f000 fc9a 	bl	800836a <USBD_GetEpDesc>
 8007a36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a38:	2181      	movs	r1, #129	; 0x81
 8007a3a:	4813      	ldr	r0, [pc, #76]	; (8007a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a3c:	f000 fc95 	bl	800836a <USBD_GetEpDesc>
 8007a40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d006      	beq.n	8007a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a5c:	711a      	strb	r2, [r3, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d006      	beq.n	8007a76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a70:	711a      	strb	r2, [r3, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2243      	movs	r2, #67	; 0x43
 8007a7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a7c:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000050 	.word	0x20000050

08007a8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	220a      	movs	r2, #10
 8007a98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	2000000c 	.word	0x2000000c

08007aac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e009      	b.n	8007ad4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	33b0      	adds	r3, #176	; 0xb0
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	32b0      	adds	r2, #176	; 0xb0
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e008      	b.n	8007b18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	32b0      	adds	r2, #176	; 0xb0
 8007b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e004      	b.n	8007b52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32b0      	adds	r2, #176	; 0xb0
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	32b0      	adds	r2, #176	; 0xb0
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e018      	b.n	8007bc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7c1b      	ldrb	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10a      	bne.n	8007bac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <USBD_CDC_ReceivePacket+0x68>)
 8007b98:	7819      	ldrb	r1, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 ff7b 	bl	8009aa0 <USBD_LL_PrepareReceive>
 8007baa:	e008      	b.n	8007bbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <USBD_CDC_ReceivePacket+0x68>)
 8007bae:	7819      	ldrb	r1, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 ff71 	bl	8009aa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000094 	.word	0x20000094

08007bcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e01f      	b.n	8007c24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	79fa      	ldrb	r2, [r7, #7]
 8007c16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f001 fdeb 	bl	80097f4 <USBD_LL_Init>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e025      	b.n	8007c90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	32ae      	adds	r2, #174	; 0xae
 8007c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00f      	beq.n	8007c80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	32ae      	adds	r2, #174	; 0xae
 8007c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	f107 020e 	add.w	r2, r7, #14
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	4602      	mov	r2, r0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fdf3 	bl	800988c <USBD_LL_Start>
 8007ca6:	4603      	mov	r3, r0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d009      	beq.n	8007cf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	4611      	mov	r1, r2
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f90e 	bl	8008f66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d66:	f003 031f 	and.w	r3, r3, #31
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d01a      	beq.n	8007da4 <USBD_LL_SetupStage+0x72>
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d822      	bhi.n	8007db8 <USBD_LL_SetupStage+0x86>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <USBD_LL_SetupStage+0x4a>
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d00a      	beq.n	8007d90 <USBD_LL_SetupStage+0x5e>
 8007d7a:	e01d      	b.n	8007db8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fb65 	bl	8008454 <USBD_StdDevReq>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d8e:	e020      	b.n	8007dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fbcd 	bl	8008538 <USBD_StdItfReq>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73fb      	strb	r3, [r7, #15]
      break;
 8007da2:	e016      	b.n	8007dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc2f 	bl	8008610 <USBD_StdEPReq>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
      break;
 8007db6:	e00c      	b.n	8007dd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fdc0 	bl	800994c <USBD_LL_StallEP>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd0:	bf00      	nop
  }

  return ret;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	460b      	mov	r3, r1
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d16e      	bne.n	8007ed2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	f040 8098 	bne.w	8007f38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d913      	bls.n	8007e3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	1ad2      	subs	r2, r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	bf28      	it	cs
 8007e2e:	4613      	movcs	r3, r2
 8007e30:	461a      	mov	r2, r3
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f001 f98a 	bl	800914e <USBD_CtlContinueRx>
 8007e3a:	e07d      	b.n	8007f38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d014      	beq.n	8007e74 <USBD_LL_DataOutStage+0x98>
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d81d      	bhi.n	8007e8a <USBD_LL_DataOutStage+0xae>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <USBD_LL_DataOutStage+0x7c>
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d003      	beq.n	8007e5e <USBD_LL_DataOutStage+0x82>
 8007e56:	e018      	b.n	8007e8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75bb      	strb	r3, [r7, #22]
            break;
 8007e5c:	e018      	b.n	8007e90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fa64 	bl	8008336 <USBD_CoreFindIF>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75bb      	strb	r3, [r7, #22]
            break;
 8007e72:	e00d      	b.n	8007e90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fa66 	bl	8008350 <USBD_CoreFindEP>
 8007e84:	4603      	mov	r3, r0
 8007e86:	75bb      	strb	r3, [r7, #22]
            break;
 8007e88:	e002      	b.n	8007e90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75bb      	strb	r3, [r7, #22]
            break;
 8007e8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e90:	7dbb      	ldrb	r3, [r7, #22]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d119      	bne.n	8007eca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d113      	bne.n	8007eca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ea2:	7dba      	ldrb	r2, [r7, #22]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	32ae      	adds	r2, #174	; 0xae
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007eb2:	7dba      	ldrb	r2, [r7, #22]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007eba:	7dba      	ldrb	r2, [r7, #22]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	32ae      	adds	r2, #174	; 0xae
 8007ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f001 f950 	bl	8009170 <USBD_CtlSendStatus>
 8007ed0:	e032      	b.n	8007f38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ed2:	7afb      	ldrb	r3, [r7, #11]
 8007ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	4619      	mov	r1, r3
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fa37 	bl	8008350 <USBD_CoreFindEP>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
 8007ee8:	2bff      	cmp	r3, #255	; 0xff
 8007eea:	d025      	beq.n	8007f38 <USBD_LL_DataOutStage+0x15c>
 8007eec:	7dbb      	ldrb	r3, [r7, #22]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d122      	bne.n	8007f38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d117      	bne.n	8007f2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007efe:	7dba      	ldrb	r2, [r7, #22]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	32ae      	adds	r2, #174	; 0xae
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00f      	beq.n	8007f2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f0e:	7dba      	ldrb	r2, [r7, #22]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f16:	7dba      	ldrb	r2, [r7, #22]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	32ae      	adds	r2, #174	; 0xae
 8007f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	7afa      	ldrb	r2, [r7, #11]
 8007f24:	4611      	mov	r1, r2
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	e000      	b.n	8007f3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d16f      	bne.n	8008036 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3314      	adds	r3, #20
 8007f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d15a      	bne.n	800801c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d914      	bls.n	8007f9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f001 f8b2 	bl	80090f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f001 fd83 	bl	8009aa0 <USBD_LL_PrepareReceive>
 8007f9a:	e03f      	b.n	800801c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d11c      	bne.n	8007fe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d316      	bcc.n	8007fe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d20f      	bcs.n	8007fe2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f001 f893 	bl	80090f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2100      	movs	r1, #0
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f001 fd60 	bl	8009aa0 <USBD_LL_PrepareReceive>
 8007fe0:	e01c      	b.n	800801c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d10f      	bne.n	800800e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f001 fc9b 	bl	800994c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f001 f8bd 	bl	8009196 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d03a      	beq.n	800809c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7ff fe42 	bl	8007cb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008034:	e032      	b.n	800809c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008036:	7afb      	ldrb	r3, [r7, #11]
 8008038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800803c:	b2db      	uxtb	r3, r3
 800803e:	4619      	mov	r1, r3
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f985 	bl	8008350 <USBD_CoreFindEP>
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	2bff      	cmp	r3, #255	; 0xff
 800804e:	d025      	beq.n	800809c <USBD_LL_DataInStage+0x15a>
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d122      	bne.n	800809c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b03      	cmp	r3, #3
 8008060:	d11c      	bne.n	800809c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008062:	7dfa      	ldrb	r2, [r7, #23]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	32ae      	adds	r2, #174	; 0xae
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d014      	beq.n	800809c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008072:	7dfa      	ldrb	r2, [r7, #23]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800807a:	7dfa      	ldrb	r2, [r7, #23]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	32ae      	adds	r2, #174	; 0xae
 8008080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	7afa      	ldrb	r2, [r7, #11]
 8008088:	4611      	mov	r1, r2
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	4798      	blx	r3
 800808e:	4603      	mov	r3, r0
 8008090:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008092:	7dbb      	ldrb	r3, [r7, #22]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008098:	7dbb      	ldrb	r3, [r7, #22]
 800809a:	e000      	b.n	800809e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d014      	beq.n	800810c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00e      	beq.n	800810c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6852      	ldr	r2, [r2, #4]
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	4611      	mov	r1, r2
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fbd5 	bl	80098c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2240      	movs	r2, #64	; 0x40
 8008124:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	2200      	movs	r2, #0
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fbc7 	bl	80098c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2240      	movs	r2, #64	; 0x40
 800813e:	621a      	str	r2, [r3, #32]

  return ret;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	78fa      	ldrb	r2, [r7, #3]
 800815a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b04      	cmp	r3, #4
 800817c:	d006      	beq.n	800818c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	b2da      	uxtb	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2204      	movs	r2, #4
 8008190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d106      	bne.n	80081c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d110      	bne.n	8008208 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	32ae      	adds	r2, #174	; 0xae
 8008228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	e01c      	b.n	800826e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b03      	cmp	r3, #3
 800823e:	d115      	bne.n	800826c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	32ae      	adds	r2, #174	; 0xae
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	32ae      	adds	r2, #174	; 0xae
 800825e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	4611      	mov	r1, r2
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32ae      	adds	r2, #174	; 0xae
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e01c      	b.n	80082d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d115      	bne.n	80082d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32ae      	adds	r2, #174	; 0xae
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	32ae      	adds	r2, #174	; 0xae
 80082c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	4611      	mov	r1, r2
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00e      	beq.n	800832c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6852      	ldr	r2, [r2, #4]
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	4611      	mov	r1, r2
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	4798      	blx	r3
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008342:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800835c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b086      	sub	sp, #24
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	b29a      	uxth	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	429a      	cmp	r2, r3
 8008390:	d920      	bls.n	80083d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800839a:	e013      	b.n	80083c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800839c:	f107 030a 	add.w	r3, r7, #10
 80083a0:	4619      	mov	r1, r3
 80083a2:	6978      	ldr	r0, [r7, #20]
 80083a4:	f000 f81b 	bl	80083de <USBD_GetNextDesc>
 80083a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d108      	bne.n	80083c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	789b      	ldrb	r3, [r3, #2]
 80083ba:	78fa      	ldrb	r2, [r7, #3]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d008      	beq.n	80083d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	885b      	ldrh	r3, [r3, #2]
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	897b      	ldrh	r3, [r7, #10]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d8e5      	bhi.n	800839c <USBD_GetEpDesc+0x32>
 80083d0:	e000      	b.n	80083d4 <USBD_GetEpDesc+0x6a>
          break;
 80083d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083d4:	693b      	ldr	r3, [r7, #16]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	881a      	ldrh	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4413      	add	r3, r2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4413      	add	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800840a:	68fb      	ldr	r3, [r7, #12]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	3301      	adds	r3, #1
 800842e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008436:	8a3b      	ldrh	r3, [r7, #16]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	b21a      	sxth	r2, r3
 800843c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008440:	4313      	orrs	r3, r2
 8008442:	b21b      	sxth	r3, r3
 8008444:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008446:	89fb      	ldrh	r3, [r7, #14]
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800846a:	2b40      	cmp	r3, #64	; 0x40
 800846c:	d005      	beq.n	800847a <USBD_StdDevReq+0x26>
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d857      	bhi.n	8008522 <USBD_StdDevReq+0xce>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00f      	beq.n	8008496 <USBD_StdDevReq+0x42>
 8008476:	2b20      	cmp	r3, #32
 8008478:	d153      	bne.n	8008522 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	32ae      	adds	r2, #174	; 0xae
 8008484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]
      break;
 8008494:	e04a      	b.n	800852c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2b09      	cmp	r3, #9
 800849c:	d83b      	bhi.n	8008516 <USBD_StdDevReq+0xc2>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <USBD_StdDevReq+0x50>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084f9 	.word	0x080084f9
 80084a8:	0800850d 	.word	0x0800850d
 80084ac:	08008517 	.word	0x08008517
 80084b0:	08008503 	.word	0x08008503
 80084b4:	08008517 	.word	0x08008517
 80084b8:	080084d7 	.word	0x080084d7
 80084bc:	080084cd 	.word	0x080084cd
 80084c0:	08008517 	.word	0x08008517
 80084c4:	080084ef 	.word	0x080084ef
 80084c8:	080084e1 	.word	0x080084e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fa3c 	bl	800894c <USBD_GetDescriptor>
          break;
 80084d4:	e024      	b.n	8008520 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fba1 	bl	8008c20 <USBD_SetAddress>
          break;
 80084de:	e01f      	b.n	8008520 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fbe0 	bl	8008ca8 <USBD_SetConfig>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
          break;
 80084ec:	e018      	b.n	8008520 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fc83 	bl	8008dfc <USBD_GetConfig>
          break;
 80084f6:	e013      	b.n	8008520 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fcb4 	bl	8008e68 <USBD_GetStatus>
          break;
 8008500:	e00e      	b.n	8008520 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fce3 	bl	8008ed0 <USBD_SetFeature>
          break;
 800850a:	e009      	b.n	8008520 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fd07 	bl	8008f22 <USBD_ClrFeature>
          break;
 8008514:	e004      	b.n	8008520 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fd5e 	bl	8008fda <USBD_CtlError>
          break;
 800851e:	bf00      	nop
      }
      break;
 8008520:	e004      	b.n	800852c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fd58 	bl	8008fda <USBD_CtlError>
      break;
 800852a:	bf00      	nop
  }

  return ret;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop

08008538 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	d005      	beq.n	800855e <USBD_StdItfReq+0x26>
 8008552:	2b40      	cmp	r3, #64	; 0x40
 8008554:	d852      	bhi.n	80085fc <USBD_StdItfReq+0xc4>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <USBD_StdItfReq+0x26>
 800855a:	2b20      	cmp	r3, #32
 800855c:	d14e      	bne.n	80085fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	2b02      	cmp	r3, #2
 800856a:	d840      	bhi.n	80085ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	889b      	ldrh	r3, [r3, #4]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b01      	cmp	r3, #1
 8008574:	d836      	bhi.n	80085e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	889b      	ldrh	r3, [r3, #4]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff fed9 	bl	8008336 <USBD_CoreFindIF>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2bff      	cmp	r3, #255	; 0xff
 800858c:	d01d      	beq.n	80085ca <USBD_StdItfReq+0x92>
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d11a      	bne.n	80085ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008594:	7bba      	ldrb	r2, [r7, #14]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	; 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00f      	beq.n	80085c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80085a4:	7bba      	ldrb	r2, [r7, #14]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085ac:	7bba      	ldrb	r2, [r7, #14]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32ae      	adds	r2, #174	; 0xae
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085c2:	e004      	b.n	80085ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085c8:	e001      	b.n	80085ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085ca:	2303      	movs	r3, #3
 80085cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88db      	ldrh	r3, [r3, #6]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d110      	bne.n	80085f8 <USBD_StdItfReq+0xc0>
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fdc7 	bl	8009170 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085e2:	e009      	b.n	80085f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fcf7 	bl	8008fda <USBD_CtlError>
          break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fcf2 	bl	8008fda <USBD_CtlError>
          break;
 80085f6:	e000      	b.n	80085fa <USBD_StdItfReq+0xc2>
          break;
 80085f8:	bf00      	nop
      }
      break;
 80085fa:	e004      	b.n	8008606 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fceb 	bl	8008fda <USBD_CtlError>
      break;
 8008604:	bf00      	nop
  }

  return ret;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	889b      	ldrh	r3, [r3, #4]
 8008622:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d007      	beq.n	8008640 <USBD_StdEPReq+0x30>
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	f200 817f 	bhi.w	8008934 <USBD_StdEPReq+0x324>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d02a      	beq.n	8008690 <USBD_StdEPReq+0x80>
 800863a:	2b20      	cmp	r3, #32
 800863c:	f040 817a 	bne.w	8008934 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fe83 	bl	8008350 <USBD_CoreFindEP>
 800864a:	4603      	mov	r3, r0
 800864c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800864e:	7b7b      	ldrb	r3, [r7, #13]
 8008650:	2bff      	cmp	r3, #255	; 0xff
 8008652:	f000 8174 	beq.w	800893e <USBD_StdEPReq+0x32e>
 8008656:	7b7b      	ldrb	r3, [r7, #13]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 8170 	bne.w	800893e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800865e:	7b7a      	ldrb	r2, [r7, #13]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008666:	7b7a      	ldrb	r2, [r7, #13]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	32ae      	adds	r2, #174	; 0xae
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8163 	beq.w	800893e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008678:	7b7a      	ldrb	r2, [r7, #13]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	32ae      	adds	r2, #174	; 0xae
 800867e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800868e:	e156      	b.n	800893e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d008      	beq.n	80086aa <USBD_StdEPReq+0x9a>
 8008698:	2b03      	cmp	r3, #3
 800869a:	f300 8145 	bgt.w	8008928 <USBD_StdEPReq+0x318>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 809b 	beq.w	80087da <USBD_StdEPReq+0x1ca>
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d03c      	beq.n	8008722 <USBD_StdEPReq+0x112>
 80086a8:	e13e      	b.n	8008928 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d002      	beq.n	80086bc <USBD_StdEPReq+0xac>
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d016      	beq.n	80086e8 <USBD_StdEPReq+0xd8>
 80086ba:	e02c      	b.n	8008716 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <USBD_StdEPReq+0xce>
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b80      	cmp	r3, #128	; 0x80
 80086c6:	d00a      	beq.n	80086de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 f93d 	bl	800994c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d2:	2180      	movs	r1, #128	; 0x80
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 f939 	bl	800994c <USBD_LL_StallEP>
 80086da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086dc:	e020      	b.n	8008720 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc7a 	bl	8008fda <USBD_CtlError>
              break;
 80086e6:	e01b      	b.n	8008720 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	885b      	ldrh	r3, [r3, #2]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10e      	bne.n	800870e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <USBD_StdEPReq+0xfe>
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b80      	cmp	r3, #128	; 0x80
 80086fa:	d008      	beq.n	800870e <USBD_StdEPReq+0xfe>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	88db      	ldrh	r3, [r3, #6]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f91f 	bl	800994c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fd2e 	bl	8009170 <USBD_CtlSendStatus>

              break;
 8008714:	e004      	b.n	8008720 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc5e 	bl	8008fda <USBD_CtlError>
              break;
 800871e:	bf00      	nop
          }
          break;
 8008720:	e107      	b.n	8008932 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d002      	beq.n	8008734 <USBD_StdEPReq+0x124>
 800872e:	2b03      	cmp	r3, #3
 8008730:	d016      	beq.n	8008760 <USBD_StdEPReq+0x150>
 8008732:	e04b      	b.n	80087cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00d      	beq.n	8008756 <USBD_StdEPReq+0x146>
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b80      	cmp	r3, #128	; 0x80
 800873e:	d00a      	beq.n	8008756 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 f901 	bl	800994c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f8fd 	bl	800994c <USBD_LL_StallEP>
 8008752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008754:	e040      	b.n	80087d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc3e 	bl	8008fda <USBD_CtlError>
              break;
 800875e:	e03b      	b.n	80087d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	885b      	ldrh	r3, [r3, #2]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d136      	bne.n	80087d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876e:	2b00      	cmp	r3, #0
 8008770:	d004      	beq.n	800877c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 f907 	bl	800998a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fcf7 	bl	8009170 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff fde2 	bl	8008350 <USBD_CoreFindEP>
 800878c:	4603      	mov	r3, r0
 800878e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008790:	7b7b      	ldrb	r3, [r7, #13]
 8008792:	2bff      	cmp	r3, #255	; 0xff
 8008794:	d01f      	beq.n	80087d6 <USBD_StdEPReq+0x1c6>
 8008796:	7b7b      	ldrb	r3, [r7, #13]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11c      	bne.n	80087d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800879c:	7b7a      	ldrb	r2, [r7, #13]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80087a4:	7b7a      	ldrb	r2, [r7, #13]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	32ae      	adds	r2, #174	; 0xae
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d010      	beq.n	80087d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087b4:	7b7a      	ldrb	r2, [r7, #13]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	32ae      	adds	r2, #174	; 0xae
 80087ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087ca:	e004      	b.n	80087d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fc03 	bl	8008fda <USBD_CtlError>
              break;
 80087d4:	e000      	b.n	80087d8 <USBD_StdEPReq+0x1c8>
              break;
 80087d6:	bf00      	nop
          }
          break;
 80087d8:	e0ab      	b.n	8008932 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d002      	beq.n	80087ec <USBD_StdEPReq+0x1dc>
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d032      	beq.n	8008850 <USBD_StdEPReq+0x240>
 80087ea:	e097      	b.n	800891c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <USBD_StdEPReq+0x1f2>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d004      	beq.n	8008802 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbed 	bl	8008fda <USBD_CtlError>
                break;
 8008800:	e091      	b.n	8008926 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da0b      	bge.n	8008822 <USBD_StdEPReq+0x212>
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	3310      	adds	r3, #16
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	4413      	add	r3, r2
 800881e:	3304      	adds	r3, #4
 8008820:	e00b      	b.n	800883a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	4413      	add	r3, r2
 8008838:	3304      	adds	r3, #4
 800883a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2202      	movs	r2, #2
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fc37 	bl	80090bc <USBD_CtlSendData>
              break;
 800884e:	e06a      	b.n	8008926 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	da11      	bge.n	800887c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	f003 020f 	and.w	r2, r3, #15
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	3324      	adds	r3, #36	; 0x24
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d117      	bne.n	80088a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fbb0 	bl	8008fda <USBD_CtlError>
                  break;
 800887a:	e054      	b.n	8008926 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	f003 020f 	and.w	r2, r3, #15
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fb9d 	bl	8008fda <USBD_CtlError>
                  break;
 80088a0:	e041      	b.n	8008926 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	da0b      	bge.n	80088c2 <USBD_StdEPReq+0x2b2>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	3310      	adds	r3, #16
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4413      	add	r3, r2
 80088be:	3304      	adds	r3, #4
 80088c0:	e00b      	b.n	80088da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	4413      	add	r3, r2
 80088d8:	3304      	adds	r3, #4
 80088da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <USBD_StdEPReq+0x2d8>
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b80      	cmp	r3, #128	; 0x80
 80088e6:	d103      	bne.n	80088f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e00e      	b.n	800890e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f867 	bl	80099c8 <USBD_LL_IsStallEP>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e002      	b.n	800890e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2202      	movs	r2, #2
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fbd1 	bl	80090bc <USBD_CtlSendData>
              break;
 800891a:	e004      	b.n	8008926 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fb5b 	bl	8008fda <USBD_CtlError>
              break;
 8008924:	bf00      	nop
          }
          break;
 8008926:	e004      	b.n	8008932 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fb55 	bl	8008fda <USBD_CtlError>
          break;
 8008930:	bf00      	nop
      }
      break;
 8008932:	e005      	b.n	8008940 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fb4f 	bl	8008fda <USBD_CtlError>
      break;
 800893c:	e000      	b.n	8008940 <USBD_StdEPReq+0x330>
      break;
 800893e:	bf00      	nop
  }

  return ret;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	885b      	ldrh	r3, [r3, #2]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b01      	subs	r3, #1
 800896c:	2b06      	cmp	r3, #6
 800896e:	f200 8128 	bhi.w	8008bc2 <USBD_GetDescriptor+0x276>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBD_GetDescriptor+0x2c>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008995 	.word	0x08008995
 800897c:	080089ad 	.word	0x080089ad
 8008980:	080089ed 	.word	0x080089ed
 8008984:	08008bc3 	.word	0x08008bc3
 8008988:	08008bc3 	.word	0x08008bc3
 800898c:	08008b63 	.word	0x08008b63
 8008990:	08008b8f 	.word	0x08008b8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	7c12      	ldrb	r2, [r2, #16]
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	60f8      	str	r0, [r7, #12]
      break;
 80089aa:	e112      	b.n	8008bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7c1b      	ldrb	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10d      	bne.n	80089d0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	f107 0208 	add.w	r2, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3301      	adds	r3, #1
 80089ca:	2202      	movs	r2, #2
 80089cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089ce:	e100      	b.n	8008bd2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	f107 0208 	add.w	r2, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3301      	adds	r3, #1
 80089e6:	2202      	movs	r2, #2
 80089e8:	701a      	strb	r2, [r3, #0]
      break;
 80089ea:	e0f2      	b.n	8008bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	885b      	ldrh	r3, [r3, #2]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	f200 80ac 	bhi.w	8008b50 <USBD_GetDescriptor+0x204>
 80089f8:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <USBD_GetDescriptor+0xb4>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a19 	.word	0x08008a19
 8008a04:	08008a4d 	.word	0x08008a4d
 8008a08:	08008a81 	.word	0x08008a81
 8008a0c:	08008ab5 	.word	0x08008ab5
 8008a10:	08008ae9 	.word	0x08008ae9
 8008a14:	08008b1d 	.word	0x08008b1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	7c12      	ldrb	r2, [r2, #16]
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
 8008a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3a:	e091      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 facb 	bl	8008fda <USBD_CtlError>
            err++;
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	3301      	adds	r3, #1
 8008a48:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4a:	e089      	b.n	8008b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e077      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fab1 	bl	8008fda <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e06f      	b.n	8008b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e05d      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa97 	bl	8008fda <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e055      	b.n	8008b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	7c12      	ldrb	r2, [r2, #16]
 8008acc:	f107 0108 	add.w	r1, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad6:	e043      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa7d 	bl	8008fda <USBD_CtlError>
            err++;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae6:	e03b      	b.n	8008b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0a:	e029      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa63 	bl	8008fda <USBD_CtlError>
            err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1a:	e021      	b.n	8008b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3e:	e00f      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa49 	bl	8008fda <USBD_CtlError>
            err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4e:	e007      	b.n	8008b60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa41 	bl	8008fda <USBD_CtlError>
          err++;
 8008b58:	7afb      	ldrb	r3, [r7, #11]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b5e:	bf00      	nop
      }
      break;
 8008b60:	e037      	b.n	8008bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	7c1b      	ldrb	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b72:	f107 0208 	add.w	r2, r7, #8
 8008b76:	4610      	mov	r0, r2
 8008b78:	4798      	blx	r3
 8008b7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b7c:	e029      	b.n	8008bd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa2a 	bl	8008fda <USBD_CtlError>
        err++;
 8008b86:	7afb      	ldrb	r3, [r7, #11]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b8c:	e021      	b.n	8008bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	7c1b      	ldrb	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10d      	bne.n	8008bb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9e:	f107 0208 	add.w	r2, r7, #8
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4798      	blx	r3
 8008ba6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	2207      	movs	r2, #7
 8008bae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb0:	e00f      	b.n	8008bd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa10 	bl	8008fda <USBD_CtlError>
        err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc0:	e007      	b.n	8008bd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa08 	bl	8008fda <USBD_CtlError>
      err++;
 8008bca:	7afb      	ldrb	r3, [r7, #11]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	72fb      	strb	r3, [r7, #11]
      break;
 8008bd0:	bf00      	nop
  }

  if (err != 0U)
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d11e      	bne.n	8008c16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	88db      	ldrh	r3, [r3, #6]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d016      	beq.n	8008c0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008be0:	893b      	ldrh	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00e      	beq.n	8008c04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88da      	ldrh	r2, [r3, #6]
 8008bea:	893b      	ldrh	r3, [r7, #8]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bf28      	it	cs
 8008bf0:	4613      	movcs	r3, r2
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bf6:	893b      	ldrh	r3, [r7, #8]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fa5d 	bl	80090bc <USBD_CtlSendData>
 8008c02:	e009      	b.n	8008c18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9e7 	bl	8008fda <USBD_CtlError>
 8008c0c:	e004      	b.n	8008c18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 faae 	bl	8009170 <USBD_CtlSendStatus>
 8008c14:	e000      	b.n	8008c18 <USBD_GetDescriptor+0x2cc>
    return;
 8008c16:	bf00      	nop
  }
}
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop

08008c20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	889b      	ldrh	r3, [r3, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d131      	bne.n	8008c96 <USBD_SetAddress+0x76>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	88db      	ldrh	r3, [r3, #6]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d12d      	bne.n	8008c96 <USBD_SetAddress+0x76>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c40:	d829      	bhi.n	8008c96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d104      	bne.n	8008c64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9bc 	bl	8008fda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c62:	e01d      	b.n	8008ca0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7bfa      	ldrb	r2, [r7, #15]
 8008c68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fed5 	bl	8009a20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa7a 	bl	8009170 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	e009      	b.n	8008ca0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	e004      	b.n	8008ca0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f99e 	bl	8008fda <USBD_CtlError>
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	885b      	ldrh	r3, [r3, #2]
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	4b4e      	ldr	r3, [pc, #312]	; (8008df8 <USBD_SetConfig+0x150>)
 8008cbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cc0:	4b4d      	ldr	r3, [pc, #308]	; (8008df8 <USBD_SetConfig+0x150>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d905      	bls.n	8008cd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f985 	bl	8008fda <USBD_CtlError>
    return USBD_FAIL;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e08c      	b.n	8008dee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d002      	beq.n	8008ce6 <USBD_SetConfig+0x3e>
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d029      	beq.n	8008d38 <USBD_SetConfig+0x90>
 8008ce4:	e075      	b.n	8008dd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ce6:	4b44      	ldr	r3, [pc, #272]	; (8008df8 <USBD_SetConfig+0x150>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d020      	beq.n	8008d30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cee:	4b42      	ldr	r3, [pc, #264]	; (8008df8 <USBD_SetConfig+0x150>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cf8:	4b3f      	ldr	r3, [pc, #252]	; (8008df8 <USBD_SetConfig+0x150>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7fe ffe1 	bl	8007cc6 <USBD_SetClassConfig>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f962 	bl	8008fda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d1e:	e065      	b.n	8008dec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fa25 	bl	8009170 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2203      	movs	r2, #3
 8008d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d2e:	e05d      	b.n	8008dec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fa1d 	bl	8009170 <USBD_CtlSendStatus>
      break;
 8008d36:	e059      	b.n	8008dec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d38:	4b2f      	ldr	r3, [pc, #188]	; (8008df8 <USBD_SetConfig+0x150>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d112      	bne.n	8008d66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d48:	4b2b      	ldr	r3, [pc, #172]	; (8008df8 <USBD_SetConfig+0x150>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d52:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <USBD_SetConfig+0x150>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fe ffd0 	bl	8007cfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa06 	bl	8009170 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d64:	e042      	b.n	8008dec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d66:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <USBD_SetConfig+0x150>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d02a      	beq.n	8008dca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7fe ffbe 	bl	8007cfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <USBD_SetConfig+0x150>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <USBD_SetConfig+0x150>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7fe ff97 	bl	8007cc6 <USBD_SetClassConfig>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00f      	beq.n	8008dc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f918 	bl	8008fda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fe ffa3 	bl	8007cfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dc0:	e014      	b.n	8008dec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f9d4 	bl	8009170 <USBD_CtlSendStatus>
      break;
 8008dc8:	e010      	b.n	8008dec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f9d0 	bl	8009170 <USBD_CtlSendStatus>
      break;
 8008dd0:	e00c      	b.n	8008dec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f900 	bl	8008fda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dda:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <USBD_SetConfig+0x150>)
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7fe ff8c 	bl	8007cfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dea:	bf00      	nop
  }

  return ret;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200003b4 	.word	0x200003b4

08008dfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d004      	beq.n	8008e18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8e2 	bl	8008fda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e16:	e023      	b.n	8008e60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	dc02      	bgt.n	8008e2a <USBD_GetConfig+0x2e>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dc03      	bgt.n	8008e30 <USBD_GetConfig+0x34>
 8008e28:	e015      	b.n	8008e56 <USBD_GetConfig+0x5a>
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d00b      	beq.n	8008e46 <USBD_GetConfig+0x4a>
 8008e2e:	e012      	b.n	8008e56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3308      	adds	r3, #8
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f93c 	bl	80090bc <USBD_CtlSendData>
        break;
 8008e44:	e00c      	b.n	8008e60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f934 	bl	80090bc <USBD_CtlSendData>
        break;
 8008e54:	e004      	b.n	8008e60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f8be 	bl	8008fda <USBD_CtlError>
        break;
 8008e5e:	bf00      	nop
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d81e      	bhi.n	8008ebe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	88db      	ldrh	r3, [r3, #6]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d004      	beq.n	8008e92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f8a5 	bl	8008fda <USBD_CtlError>
        break;
 8008e90:	e01a      	b.n	8008ec8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f043 0202 	orr.w	r2, r3, #2
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f900 	bl	80090bc <USBD_CtlSendData>
      break;
 8008ebc:	e004      	b.n	8008ec8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f88a 	bl	8008fda <USBD_CtlError>
      break;
 8008ec6:	bf00      	nop
  }
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d107      	bne.n	8008ef2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f940 	bl	8009170 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ef0:	e013      	b.n	8008f1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d10b      	bne.n	8008f12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	889b      	ldrh	r3, [r3, #4]
 8008efe:	0a1b      	lsrs	r3, r3, #8
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f930 	bl	8009170 <USBD_CtlSendStatus>
}
 8008f10:	e003      	b.n	8008f1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f860 	bl	8008fda <USBD_CtlError>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d80b      	bhi.n	8008f52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d10c      	bne.n	8008f5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f910 	bl	8009170 <USBD_CtlSendStatus>
      }
      break;
 8008f50:	e004      	b.n	8008f5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f840 	bl	8008fda <USBD_CtlError>
      break;
 8008f5a:	e000      	b.n	8008f5e <USBD_ClrFeature+0x3c>
      break;
 8008f5c:	bf00      	nop
  }
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fa41 	bl	8008418 <SWAPBYTE>
 8008f96:	4603      	mov	r3, r0
 8008f98:	461a      	mov	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fa34 	bl	8008418 <SWAPBYTE>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fa27 	bl	8008418 <SWAPBYTE>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	80da      	strh	r2, [r3, #6]
}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe4:	2180      	movs	r1, #128	; 0x80
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fcb0 	bl	800994c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fec:	2100      	movs	r1, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fcac 	bl	800994c <USBD_LL_StallEP>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d036      	beq.n	8009080 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009016:	6938      	ldr	r0, [r7, #16]
 8009018:	f000 f836 	bl	8009088 <USBD_GetLen>
 800901c:	4603      	mov	r3, r0
 800901e:	3301      	adds	r3, #1
 8009020:	b29b      	uxth	r3, r3
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	4413      	add	r3, r2
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
  idx++;
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	3301      	adds	r3, #1
 800903a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	4413      	add	r3, r2
 8009042:	2203      	movs	r2, #3
 8009044:	701a      	strb	r2, [r3, #0]
  idx++;
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	3301      	adds	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800904c:	e013      	b.n	8009076 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	4413      	add	r3, r2
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	3301      	adds	r3, #1
 800905e:	613b      	str	r3, [r7, #16]
    idx++;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	3301      	adds	r3, #1
 8009064:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4413      	add	r3, r2
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	3301      	adds	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e7      	bne.n	800904e <USBD_GetString+0x52>
 800907e:	e000      	b.n	8009082 <USBD_GetString+0x86>
    return;
 8009080:	bf00      	nop
  }
}
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009098:	e005      	b.n	80090a6 <USBD_GetLen+0x1e>
  {
    len++;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	3301      	adds	r3, #1
 800909e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	3301      	adds	r3, #1
 80090a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1f5      	bne.n	800909a <USBD_GetLen+0x12>
  }

  return len;
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	2100      	movs	r1, #0
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fcbb 	bl	8009a5e <USBD_LL_Transmit>

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	2100      	movs	r1, #0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 fcaa 	bl	8009a5e <USBD_LL_Transmit>

  return USBD_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2203      	movs	r2, #3
 8009124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	2100      	movs	r1, #0
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 fcae 	bl	8009aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	2100      	movs	r1, #0
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 fc9d 	bl	8009aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2204      	movs	r2, #4
 800917c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009180:	2300      	movs	r3, #0
 8009182:	2200      	movs	r2, #0
 8009184:	2100      	movs	r1, #0
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fc69 	bl	8009a5e <USBD_LL_Transmit>

  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2205      	movs	r2, #5
 80091a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a6:	2300      	movs	r3, #0
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fc77 	bl	8009aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091c0:	2200      	movs	r2, #0
 80091c2:	4912      	ldr	r1, [pc, #72]	; (800920c <MX_USB_DEVICE_Init+0x50>)
 80091c4:	4812      	ldr	r0, [pc, #72]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091c6:	f7fe fd01 	bl	8007bcc <USBD_Init>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091d0:	f7f7 ff00 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091d4:	490f      	ldr	r1, [pc, #60]	; (8009214 <MX_USB_DEVICE_Init+0x58>)
 80091d6:	480e      	ldr	r0, [pc, #56]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091d8:	f7fe fd28 	bl	8007c2c <USBD_RegisterClass>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091e2:	f7f7 fef7 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091e6:	490c      	ldr	r1, [pc, #48]	; (8009218 <MX_USB_DEVICE_Init+0x5c>)
 80091e8:	4809      	ldr	r0, [pc, #36]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091ea:	f7fe fc5f 	bl	8007aac <USBD_CDC_RegisterInterface>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091f4:	f7f7 feee 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091f8:	4805      	ldr	r0, [pc, #20]	; (8009210 <MX_USB_DEVICE_Init+0x54>)
 80091fa:	f7fe fd4d 	bl	8007c98 <USBD_Start>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009204:	f7f7 fee6 	bl	8000fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009208:	bf00      	nop
 800920a:	bd80      	pop	{r7, pc}
 800920c:	200000ac 	.word	0x200000ac
 8009210:	200003b8 	.word	0x200003b8
 8009214:	20000018 	.word	0x20000018
 8009218:	20000098 	.word	0x20000098

0800921c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009220:	2200      	movs	r2, #0
 8009222:	4905      	ldr	r1, [pc, #20]	; (8009238 <CDC_Init_FS+0x1c>)
 8009224:	4805      	ldr	r0, [pc, #20]	; (800923c <CDC_Init_FS+0x20>)
 8009226:	f7fe fc5b 	bl	8007ae0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800922a:	4905      	ldr	r1, [pc, #20]	; (8009240 <CDC_Init_FS+0x24>)
 800922c:	4803      	ldr	r0, [pc, #12]	; (800923c <CDC_Init_FS+0x20>)
 800922e:	f7fe fc79 	bl	8007b24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009234:	4618      	mov	r0, r3
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000e94 	.word	0x20000e94
 800923c:	200003b8 	.word	0x200003b8
 8009240:	20000694 	.word	0x20000694

08009244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800924a:	4618      	mov	r0, r3
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	6039      	str	r1, [r7, #0]
 800925e:	71fb      	strb	r3, [r7, #7]
 8009260:	4613      	mov	r3, r2
 8009262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b23      	cmp	r3, #35	; 0x23
 8009268:	d84a      	bhi.n	8009300 <CDC_Control_FS+0xac>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <CDC_Control_FS+0x1c>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009301 	.word	0x08009301
 8009274:	08009301 	.word	0x08009301
 8009278:	08009301 	.word	0x08009301
 800927c:	08009301 	.word	0x08009301
 8009280:	08009301 	.word	0x08009301
 8009284:	08009301 	.word	0x08009301
 8009288:	08009301 	.word	0x08009301
 800928c:	08009301 	.word	0x08009301
 8009290:	08009301 	.word	0x08009301
 8009294:	08009301 	.word	0x08009301
 8009298:	08009301 	.word	0x08009301
 800929c:	08009301 	.word	0x08009301
 80092a0:	08009301 	.word	0x08009301
 80092a4:	08009301 	.word	0x08009301
 80092a8:	08009301 	.word	0x08009301
 80092ac:	08009301 	.word	0x08009301
 80092b0:	08009301 	.word	0x08009301
 80092b4:	08009301 	.word	0x08009301
 80092b8:	08009301 	.word	0x08009301
 80092bc:	08009301 	.word	0x08009301
 80092c0:	08009301 	.word	0x08009301
 80092c4:	08009301 	.word	0x08009301
 80092c8:	08009301 	.word	0x08009301
 80092cc:	08009301 	.word	0x08009301
 80092d0:	08009301 	.word	0x08009301
 80092d4:	08009301 	.word	0x08009301
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009301 	.word	0x08009301
 80092e4:	08009301 	.word	0x08009301
 80092e8:	08009301 	.word	0x08009301
 80092ec:	08009301 	.word	0x08009301
 80092f0:	08009301 	.word	0x08009301
 80092f4:	08009301 	.word	0x08009301
 80092f8:	08009301 	.word	0x08009301
 80092fc:	08009301 	.word	0x08009301
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009300:	bf00      	nop
  }

  return (USBD_OK);
 8009302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4805      	ldr	r0, [pc, #20]	; (8009334 <CDC_Receive_FS+0x24>)
 800931e:	f7fe fc01 	bl	8007b24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009322:	4804      	ldr	r0, [pc, #16]	; (8009334 <CDC_Receive_FS+0x24>)
 8009324:	f7fe fc1c 	bl	8007b60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009328:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200003b8 	.word	0x200003b8

08009338 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800934a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2212      	movs	r2, #18
 800936c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800936e:	4b03      	ldr	r3, [pc, #12]	; (800937c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	200000c8 	.word	0x200000c8

08009380 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2204      	movs	r2, #4
 8009390:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009392:	4b03      	ldr	r3, [pc, #12]	; (80093a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	200000dc 	.word	0x200000dc

080093a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d105      	bne.n	80093c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4907      	ldr	r1, [pc, #28]	; (80093d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80093ba:	4808      	ldr	r0, [pc, #32]	; (80093dc <USBD_FS_ProductStrDescriptor+0x38>)
 80093bc:	f7ff fe1e 	bl	8008ffc <USBD_GetString>
 80093c0:	e004      	b.n	80093cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4904      	ldr	r1, [pc, #16]	; (80093d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80093c6:	4805      	ldr	r0, [pc, #20]	; (80093dc <USBD_FS_ProductStrDescriptor+0x38>)
 80093c8:	f7ff fe18 	bl	8008ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 80093cc:	4b02      	ldr	r3, [pc, #8]	; (80093d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20001694 	.word	0x20001694
 80093dc:	08009c38 	.word	0x08009c38

080093e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	4904      	ldr	r1, [pc, #16]	; (8009400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093f0:	4804      	ldr	r0, [pc, #16]	; (8009404 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093f2:	f7ff fe03 	bl	8008ffc <USBD_GetString>
  return USBD_StrDesc;
 80093f6:	4b02      	ldr	r3, [pc, #8]	; (8009400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20001694 	.word	0x20001694
 8009404:	08009c50 	.word	0x08009c50

08009408 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	221a      	movs	r2, #26
 8009418:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800941a:	f000 f843 	bl	80094a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800941e:	4b02      	ldr	r3, [pc, #8]	; (8009428 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	200000e0 	.word	0x200000e0

0800942c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d105      	bne.n	800944a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4907      	ldr	r1, [pc, #28]	; (8009460 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009442:	4808      	ldr	r0, [pc, #32]	; (8009464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009444:	f7ff fdda 	bl	8008ffc <USBD_GetString>
 8009448:	e004      	b.n	8009454 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4904      	ldr	r1, [pc, #16]	; (8009460 <USBD_FS_ConfigStrDescriptor+0x34>)
 800944e:	4805      	ldr	r0, [pc, #20]	; (8009464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009450:	f7ff fdd4 	bl	8008ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20001694 	.word	0x20001694
 8009464:	08009c64 	.word	0x08009c64

08009468 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4907      	ldr	r1, [pc, #28]	; (800949c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800947e:	4808      	ldr	r0, [pc, #32]	; (80094a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009480:	f7ff fdbc 	bl	8008ffc <USBD_GetString>
 8009484:	e004      	b.n	8009490 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	4904      	ldr	r1, [pc, #16]	; (800949c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800948a:	4805      	ldr	r0, [pc, #20]	; (80094a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800948c:	f7ff fdb6 	bl	8008ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20001694 	.word	0x20001694
 80094a0:	08009c70 	.word	0x08009c70

080094a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094aa:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <Get_SerialNum+0x44>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <Get_SerialNum+0x48>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094b6:	4b0e      	ldr	r3, [pc, #56]	; (80094f0 <Get_SerialNum+0x4c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d009      	beq.n	80094de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094ca:	2208      	movs	r2, #8
 80094cc:	4909      	ldr	r1, [pc, #36]	; (80094f4 <Get_SerialNum+0x50>)
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f814 	bl	80094fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094d4:	2204      	movs	r2, #4
 80094d6:	4908      	ldr	r1, [pc, #32]	; (80094f8 <Get_SerialNum+0x54>)
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f000 f80f 	bl	80094fc <IntToUnicode>
  }
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	1fff7a10 	.word	0x1fff7a10
 80094ec:	1fff7a14 	.word	0x1fff7a14
 80094f0:	1fff7a18 	.word	0x1fff7a18
 80094f4:	200000e2 	.word	0x200000e2
 80094f8:	200000f2 	.word	0x200000f2

080094fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
 8009512:	e027      	b.n	8009564 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0f1b      	lsrs	r3, r3, #28
 8009518:	2b09      	cmp	r3, #9
 800951a:	d80b      	bhi.n	8009534 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	0f1b      	lsrs	r3, r3, #28
 8009520:	b2da      	uxtb	r2, r3
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	4619      	mov	r1, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	440b      	add	r3, r1
 800952c:	3230      	adds	r2, #48	; 0x30
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]
 8009532:	e00a      	b.n	800954a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0f1b      	lsrs	r3, r3, #28
 8009538:	b2da      	uxtb	r2, r3
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	4619      	mov	r1, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	440b      	add	r3, r1
 8009544:	3237      	adds	r2, #55	; 0x37
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	3301      	adds	r3, #1
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	4413      	add	r3, r2
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	3301      	adds	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	7dfa      	ldrb	r2, [r7, #23]
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	429a      	cmp	r2, r3
 800956a:	d3d3      	bcc.n	8009514 <IntToUnicode+0x18>
  }
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	; 0x28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009584:	f107 0314 	add.w	r3, r7, #20
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	605a      	str	r2, [r3, #4]
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	60da      	str	r2, [r3, #12]
 8009592:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800959c:	d13a      	bne.n	8009614 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	4b1e      	ldr	r3, [pc, #120]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	4a1d      	ldr	r2, [pc, #116]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095a8:	f043 0301 	orr.w	r3, r3, #1
 80095ac:	6313      	str	r3, [r2, #48]	; 0x30
 80095ae:	4b1b      	ldr	r3, [pc, #108]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80095ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80095be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c0:	2302      	movs	r3, #2
 80095c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095c8:	2303      	movs	r3, #3
 80095ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80095cc:	230a      	movs	r3, #10
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095d0:	f107 0314 	add.w	r3, r7, #20
 80095d4:	4619      	mov	r1, r3
 80095d6:	4812      	ldr	r0, [pc, #72]	; (8009620 <HAL_PCD_MspInit+0xa4>)
 80095d8:	f7f8 fc7c 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80095dc:	4b0f      	ldr	r3, [pc, #60]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e0:	4a0e      	ldr	r2, [pc, #56]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e6:	6353      	str	r3, [r2, #52]	; 0x34
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f0:	4a0a      	ldr	r2, [pc, #40]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095f6:	6453      	str	r3, [r2, #68]	; 0x44
 80095f8:	4b08      	ldr	r3, [pc, #32]	; (800961c <HAL_PCD_MspInit+0xa0>)
 80095fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	2043      	movs	r0, #67	; 0x43
 800960a:	f7f8 f920 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800960e:	2043      	movs	r0, #67	; 0x43
 8009610:	f7f8 f939 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009614:	bf00      	nop
 8009616:	3728      	adds	r7, #40	; 0x28
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	40023800 	.word	0x40023800
 8009620:	40020000 	.word	0x40020000

08009624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f7fe fb79 	bl	8007d32 <USBD_LL_SetupStage>
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800965a:	78fa      	ldrb	r2, [r7, #3]
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	00db      	lsls	r3, r3, #3
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	4619      	mov	r1, r3
 8009672:	f7fe fbb3 	bl	8007ddc <USBD_LL_DataOutStage>
}
 8009676:	bf00      	nop
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	3320      	adds	r3, #32
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7fe fc4c 	bl	8007f42 <USBD_LL_DataInStage>
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fe fd86 	bl	80081d2 <USBD_LL_SOF>
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096d6:	2301      	movs	r3, #1
 80096d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	79db      	ldrb	r3, [r3, #7]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d001      	beq.n	80096e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096e2:	f7f7 fc77 	bl	8000fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096ec:	7bfa      	ldrb	r2, [r7, #15]
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fd2a 	bl	800814a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fcd2 	bl	80080a6 <USBD_LL_Reset>
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fd25 	bl	800816a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6812      	ldr	r2, [r2, #0]
 800972e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009732:	f043 0301 	orr.w	r3, r3, #1
 8009736:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7adb      	ldrb	r3, [r3, #11]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <HAL_PCD_SuspendCallback+0x48>)
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	4a03      	ldr	r2, [pc, #12]	; (8009754 <HAL_PCD_SuspendCallback+0x48>)
 8009746:	f043 0306 	orr.w	r3, r3, #6
 800974a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	e000ed00 	.word	0xe000ed00

08009758 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fd1b 	bl	80081a2 <USBD_LL_Resume>
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009786:	78fa      	ldrb	r2, [r7, #3]
 8009788:	4611      	mov	r1, r2
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fd73 	bl	8008276 <USBD_LL_IsoOUTIncomplete>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fd2f 	bl	8008212 <USBD_LL_IsoINIncomplete>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fd85 	bl	80082da <USBD_LL_DevConnected>
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fd82 	bl	80082f0 <USBD_LL_DevDisconnected>
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d13c      	bne.n	800987e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009804:	4a20      	ldr	r2, [pc, #128]	; (8009888 <USBD_LL_Init+0x94>)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a1e      	ldr	r2, [pc, #120]	; (8009888 <USBD_LL_Init+0x94>)
 8009810:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009814:	4b1c      	ldr	r3, [pc, #112]	; (8009888 <USBD_LL_Init+0x94>)
 8009816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800981a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800981c:	4b1a      	ldr	r3, [pc, #104]	; (8009888 <USBD_LL_Init+0x94>)
 800981e:	2204      	movs	r2, #4
 8009820:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009822:	4b19      	ldr	r3, [pc, #100]	; (8009888 <USBD_LL_Init+0x94>)
 8009824:	2202      	movs	r2, #2
 8009826:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009828:	4b17      	ldr	r3, [pc, #92]	; (8009888 <USBD_LL_Init+0x94>)
 800982a:	2200      	movs	r2, #0
 800982c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800982e:	4b16      	ldr	r3, [pc, #88]	; (8009888 <USBD_LL_Init+0x94>)
 8009830:	2202      	movs	r2, #2
 8009832:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009834:	4b14      	ldr	r3, [pc, #80]	; (8009888 <USBD_LL_Init+0x94>)
 8009836:	2201      	movs	r2, #1
 8009838:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800983a:	4b13      	ldr	r3, [pc, #76]	; (8009888 <USBD_LL_Init+0x94>)
 800983c:	2200      	movs	r2, #0
 800983e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009840:	4b11      	ldr	r3, [pc, #68]	; (8009888 <USBD_LL_Init+0x94>)
 8009842:	2200      	movs	r2, #0
 8009844:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009846:	4b10      	ldr	r3, [pc, #64]	; (8009888 <USBD_LL_Init+0x94>)
 8009848:	2200      	movs	r2, #0
 800984a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800984c:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <USBD_LL_Init+0x94>)
 800984e:	2200      	movs	r2, #0
 8009850:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009852:	480d      	ldr	r0, [pc, #52]	; (8009888 <USBD_LL_Init+0x94>)
 8009854:	f7f8 fcdb 	bl	800220e <HAL_PCD_Init>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800985e:	f7f7 fbb9 	bl	8000fd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009862:	2180      	movs	r1, #128	; 0x80
 8009864:	4808      	ldr	r0, [pc, #32]	; (8009888 <USBD_LL_Init+0x94>)
 8009866:	f7f9 ff06 	bl	8003676 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800986a:	2240      	movs	r2, #64	; 0x40
 800986c:	2100      	movs	r1, #0
 800986e:	4806      	ldr	r0, [pc, #24]	; (8009888 <USBD_LL_Init+0x94>)
 8009870:	f7f9 feba 	bl	80035e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009874:	2280      	movs	r2, #128	; 0x80
 8009876:	2101      	movs	r1, #1
 8009878:	4803      	ldr	r0, [pc, #12]	; (8009888 <USBD_LL_Init+0x94>)
 800987a:	f7f9 feb5 	bl	80035e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20001894 	.word	0x20001894

0800988c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f8 fdc2 	bl	800242c <HAL_PCD_Start>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f942 	bl	8009b38 <USBD_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	4608      	mov	r0, r1
 80098cc:	4611      	mov	r1, r2
 80098ce:	461a      	mov	r2, r3
 80098d0:	4603      	mov	r3, r0
 80098d2:	70fb      	strb	r3, [r7, #3]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70bb      	strb	r3, [r7, #2]
 80098d8:	4613      	mov	r3, r2
 80098da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098ea:	78bb      	ldrb	r3, [r7, #2]
 80098ec:	883a      	ldrh	r2, [r7, #0]
 80098ee:	78f9      	ldrb	r1, [r7, #3]
 80098f0:	f7f9 fa96 	bl	8002e20 <HAL_PCD_EP_Open>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f91c 	bl	8009b38 <USBD_Get_USB_Status>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009904:	7bbb      	ldrb	r3, [r7, #14]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f7f9 fadf 	bl	8002ef0 <HAL_PCD_EP_Close>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	4618      	mov	r0, r3
 800993a:	f000 f8fd 	bl	8009b38 <USBD_Get_USB_Status>
 800993e:	4603      	mov	r3, r0
 8009940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009942:	7bbb      	ldrb	r3, [r7, #14]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009966:	78fa      	ldrb	r2, [r7, #3]
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7f9 fb97 	bl	800309e <HAL_PCD_EP_SetStall>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f8de 	bl	8009b38 <USBD_Get_USB_Status>
 800997c:	4603      	mov	r3, r0
 800997e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009980:	7bbb      	ldrb	r3, [r7, #14]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f9 fbdb 	bl	8003164 <HAL_PCD_EP_ClrStall>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f8bf 	bl	8009b38 <USBD_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099be:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	da0b      	bge.n	80099fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099ea:	68f9      	ldr	r1, [r7, #12]
 80099ec:	4613      	mov	r3, r2
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	440b      	add	r3, r1
 80099f6:	3316      	adds	r3, #22
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	e00b      	b.n	8009a14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	4613      	mov	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	440b      	add	r3, r1
 8009a0e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009a12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a3a:	78fa      	ldrb	r2, [r7, #3]
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7f9 f9ca 	bl	8002dd8 <HAL_PCD_SetAddress>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f874 	bl	8009b38 <USBD_Get_USB_Status>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b086      	sub	sp, #24
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a7c:	7af9      	ldrb	r1, [r7, #11]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	f7f9 fad2 	bl	800302a <HAL_PCD_EP_Transmit>
 8009a86:	4603      	mov	r3, r0
 8009a88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f853 	bl	8009b38 <USBD_Get_USB_Status>
 8009a92:	4603      	mov	r3, r0
 8009a94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a96:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	607a      	str	r2, [r7, #4]
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	460b      	mov	r3, r1
 8009aae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009abe:	7af9      	ldrb	r1, [r7, #11]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	f7f9 fa5e 	bl	8002f84 <HAL_PCD_EP_Receive>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f832 	bl	8009b38 <USBD_Get_USB_Status>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ad8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f9 fa7e 	bl	8002ffa <HAL_PCD_EP_GetRxCount>
 8009afe:	4603      	mov	r3, r0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b10:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <USBD_static_malloc+0x18>)
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20001d78 	.word	0x20001d78

08009b24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]

}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d817      	bhi.n	8009b7c <USBD_Get_USB_Status+0x44>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <USBD_Get_USB_Status+0x1c>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b6b 	.word	0x08009b6b
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b77 	.word	0x08009b77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
    break;
 8009b68:	e00b      	b.n	8009b82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b6e:	e008      	b.n	8009b82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b70:	2301      	movs	r3, #1
 8009b72:	73fb      	strb	r3, [r7, #15]
    break;
 8009b74:	e005      	b.n	8009b82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b76:	2303      	movs	r3, #3
 8009b78:	73fb      	strb	r3, [r7, #15]
    break;
 8009b7a:	e002      	b.n	8009b82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b80:	bf00      	nop
  }
  return usb_status;
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <memset>:
 8009b90:	4402      	add	r2, r0
 8009b92:	4603      	mov	r3, r0
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d100      	bne.n	8009b9a <memset+0xa>
 8009b98:	4770      	bx	lr
 8009b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b9e:	e7f9      	b.n	8009b94 <memset+0x4>

08009ba0 <__libc_init_array>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	4d0d      	ldr	r5, [pc, #52]	; (8009bd8 <__libc_init_array+0x38>)
 8009ba4:	4c0d      	ldr	r4, [pc, #52]	; (8009bdc <__libc_init_array+0x3c>)
 8009ba6:	1b64      	subs	r4, r4, r5
 8009ba8:	10a4      	asrs	r4, r4, #2
 8009baa:	2600      	movs	r6, #0
 8009bac:	42a6      	cmp	r6, r4
 8009bae:	d109      	bne.n	8009bc4 <__libc_init_array+0x24>
 8009bb0:	4d0b      	ldr	r5, [pc, #44]	; (8009be0 <__libc_init_array+0x40>)
 8009bb2:	4c0c      	ldr	r4, [pc, #48]	; (8009be4 <__libc_init_array+0x44>)
 8009bb4:	f000 f818 	bl	8009be8 <_init>
 8009bb8:	1b64      	subs	r4, r4, r5
 8009bba:	10a4      	asrs	r4, r4, #2
 8009bbc:	2600      	movs	r6, #0
 8009bbe:	42a6      	cmp	r6, r4
 8009bc0:	d105      	bne.n	8009bce <__libc_init_array+0x2e>
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc8:	4798      	blx	r3
 8009bca:	3601      	adds	r6, #1
 8009bcc:	e7ee      	b.n	8009bac <__libc_init_array+0xc>
 8009bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd2:	4798      	blx	r3
 8009bd4:	3601      	adds	r6, #1
 8009bd6:	e7f2      	b.n	8009bbe <__libc_init_array+0x1e>
 8009bd8:	08009ca0 	.word	0x08009ca0
 8009bdc:	08009ca0 	.word	0x08009ca0
 8009be0:	08009ca0 	.word	0x08009ca0
 8009be4:	08009ca4 	.word	0x08009ca4

08009be8 <_init>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	bf00      	nop
 8009bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bee:	bc08      	pop	{r3}
 8009bf0:	469e      	mov	lr, r3
 8009bf2:	4770      	bx	lr

08009bf4 <_fini>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr
