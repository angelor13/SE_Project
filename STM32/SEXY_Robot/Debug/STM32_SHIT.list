
STM32_SHIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade4  0800ade4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade8  0800ade8  0001ade8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800adec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb4  2000014c  0800af38  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002100  0800af38  00022100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015898  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003741  00000000  00000000  00035a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f02  00000000  00000000  0003a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194e1  00000000  00000000  0003b43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e3b  00000000  00000000  0005491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091e3f  00000000  00000000  0006b756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000583c  00000000  00000000  000fd598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00102dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acf0 	.word	0x0800acf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800acf0 	.word	0x0800acf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <PID_Control>:
#include <stdint.h>
#include "stm32f4xx_hal.h"

float PID_Control(float Kp, float Ki, float Kd, float setpoint, float value) {
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8000dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8000dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8000dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8000dce:	ed87 2a01 	vstr	s4, [r7, #4]
    static float error_previous = 0.0;
    static float time_current = 0.0;
    static float time_previous = 0.0;

    // Calculate time difference
    time_current += HAL_GetTick() / 1000.0;
 8000dd2:	f001 f81f 	bl	8001e14 <HAL_GetTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb93 	bl	8000504 <__aeabi_ui2d>
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <PID_Control+0x150>)
 8000de4:	f7ff fd32 	bl	800084c <__aeabi_ddiv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4614      	mov	r4, r2
 8000dee:	461d      	mov	r5, r3
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <PID_Control+0x154>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fba7 	bl	8000548 <__aeabi_f2d>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4620      	mov	r0, r4
 8000e00:	4629      	mov	r1, r5
 8000e02:	f7ff fa43 	bl	800028c <__adddf3>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fe05 	bl	8000a1c <__aeabi_d2f>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a3d      	ldr	r2, [pc, #244]	; (8000f0c <PID_Control+0x154>)
 8000e16:	6013      	str	r3, [r2, #0]
    double dt = time_current - time_previous;
 8000e18:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <PID_Control+0x154>)
 8000e1a:	ed93 7a00 	vldr	s14, [r3]
 8000e1e:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <PID_Control+0x158>)
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e28:	ee17 0a90 	vmov	r0, s15
 8000e2c:	f7ff fb8c 	bl	8000548 <__aeabi_f2d>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    time_previous = time_current;
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <PID_Control+0x154>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <PID_Control+0x158>)
 8000e3e:	6013      	str	r3, [r2, #0]

    // Calculate error
    float error = setpoint - value;
 8000e40:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Proportional term
    float P = Kp * error;
 8000e50:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Integral term
    error_integral += error;
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <PID_Control+0x15c>)
 8000e62:	ed93 7a00 	vldr	s14, [r3]
 8000e66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <PID_Control+0x15c>)
 8000e70:	edc3 7a00 	vstr	s15, [r3]
    float I = Ki * error_integral * dt;
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <PID_Control+0x15c>)
 8000e76:	ed93 7a00 	vldr	s14, [r3]
 8000e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e82:	ee17 0a90 	vmov	r0, s15
 8000e86:	f7ff fb5f 	bl	8000548 <__aeabi_f2d>
 8000e8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e8e:	f7ff fbb3 	bl	80005f8 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fdbf 	bl	8000a1c <__aeabi_d2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24

    // Derivative term
    float D = Kd * (error - error_previous) / dt;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <PID_Control+0x160>)
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb8:	ee17 0a90 	vmov	r0, s15
 8000ebc:	f7ff fb44 	bl	8000548 <__aeabi_f2d>
 8000ec0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ec4:	f7ff fcc2 	bl	800084c <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fda4 	bl	8000a1c <__aeabi_d2f>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	623b      	str	r3, [r7, #32]
    error_previous = error;
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <PID_Control+0x160>)
 8000eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000edc:	6013      	str	r3, [r2, #0]

    // PID Output
    float output = P + I + D;
 8000ede:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000ee2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eea:	ed97 7a08 	vldr	s14, [r7, #32]
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	edc7 7a07 	vstr	s15, [r7, #28]

    return output;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	ee07 3a90 	vmov	s15, r3
}
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	3738      	adds	r7, #56	; 0x38
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bdb0      	pop	{r4, r5, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	408f4000 	.word	0x408f4000
 8000f0c:	200003a8 	.word	0x200003a8
 8000f10:	200003ac 	.word	0x200003ac
 8000f14:	200003b0 	.word	0x200003b0
 8000f18:	200003b4 	.word	0x200003b4

08000f1c <xprintf>:
extern TIM_HandleTypeDef htim5;

int32_t delta_left = 0;
int32_t delta_right = 0;

int xprintf(const char* fmt, ...) {
 8000f1c:	b40f      	push	{r0, r1, r2, r3}
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b0a4      	sub	sp, #144	; 0x90
 8000f22:	af00      	add	r7, sp, #0
    uint8_t rc = USBD_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    char tmp[128];
	va_list ptr;

	va_start(ptr, fmt);
 8000f2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2e:	607b      	str	r3, [r7, #4]
	int len = vsprintf(tmp, fmt, ptr);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f009 fa4a 	bl	800a3d4 <vsiprintf>
 8000f40:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    va_end(ptr);

    do {
        rc = CDC_Transmit_FS((uint8_t*)tmp, len);
 8000f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 fdd7 	bl	8009b04 <CDC_Transmit_FS>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    } while (USBD_BUSY == rc);
 8000f5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d0ef      	beq.n	8000f44 <xprintf+0x28>

    if (USBD_FAIL == rc) {
 8000f64:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d101      	bne.n	8000f70 <xprintf+0x54>
        return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e001      	b.n	8000f74 <xprintf+0x58>
    }

    return len;
 8000f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3790      	adds	r7, #144	; 0x90
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f7e:	b004      	add	sp, #16
 8000f80:	4770      	bx	lr
	...

08000f84 <getMotorDeltaLeft>:

int32_t getMotorDeltaLeft() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;

	int32_t current_pulse = htim5.Instance->CNT;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <getMotorDeltaLeft+0x58>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 8000f92:	f000 ff3f 	bl	8001e14 <HAL_GetTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <getMotorDeltaLeft+0x5c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <getMotorDeltaLeft+0x60>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	603b      	str	r3, [r7, #0]

	last_tick = current_tick;
 8000fae:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <getMotorDeltaLeft+0x60>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	6013      	str	r3, [r2, #0]
	last_pulse = current_pulse;
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <getMotorDeltaLeft+0x5c>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6013      	str	r3, [r2, #0]

//	xprintf("%d, %d\n\n", delta_pulse, delta_tick);

	delta_left = delta_pulse * 1000 / delta_tick;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc0:	fb03 f202 	mul.w	r2, r3, r2
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <getMotorDeltaLeft+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

	return delta_left;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <getMotorDeltaLeft+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000360 	.word	0x20000360
 8000fe0:	200003b8 	.word	0x200003b8
 8000fe4:	200003bc 	.word	0x200003bc
 8000fe8:	20000168 	.word	0x20000168

08000fec <getMotorDeltaRight>:

int32_t getMotorDeltaRight() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
	static int32_t last_pulse = 0;
	static int32_t last_tick = 0;

	int32_t current_pulse = htim5.Instance->CNT;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <getMotorDeltaRight+0x58>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	60fb      	str	r3, [r7, #12]
	int32_t current_tick = HAL_GetTick();
 8000ffa:	f000 ff0b 	bl	8001e14 <HAL_GetTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	60bb      	str	r3, [r7, #8]

	int32_t delta_pulse = current_pulse - last_pulse;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <getMotorDeltaRight+0x5c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	607b      	str	r3, [r7, #4]
	int32_t delta_tick = current_tick - last_tick;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <getMotorDeltaRight+0x60>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	603b      	str	r3, [r7, #0]

	last_tick = current_tick;
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <getMotorDeltaRight+0x60>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	6013      	str	r3, [r2, #0]
	last_pulse = current_pulse;
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <getMotorDeltaRight+0x5c>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6013      	str	r3, [r2, #0]

	delta_right = delta_pulse * 1000 / delta_tick;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001028:	fb03 f202 	mul.w	r2, r3, r2
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <getMotorDeltaRight+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

	return delta_right;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <getMotorDeltaRight+0x64>)
 8001038:	681b      	ldr	r3, [r3, #0]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000360 	.word	0x20000360
 8001048:	200003c0 	.word	0x200003c0
 800104c:	200003c4 	.word	0x200003c4
 8001050:	2000016c 	.word	0x2000016c

08001054 <setMotorDeltaLeft>:

void setMotorDeltaLeft(int32_t new_delta) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	int32_t pid = 65535 - (int32_t)(PID_Control(1.1, 0.02, 0.001, new_delta, delta_left));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <setMotorDeltaLeft+0xd8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	ee07 3a10 	vmov	s14, r3
 800106e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001072:	eeb0 2a47 	vmov.f32	s4, s14
 8001076:	eef0 1a67 	vmov.f32	s3, s15
 800107a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8001130 <setMotorDeltaLeft+0xdc>
 800107e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001134 <setMotorDeltaLeft+0xe0>
 8001082:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001138 <setMotorDeltaLeft+0xe4>
 8001086:	f7ff fe97 	bl	8000db8 <PID_Control>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	ee17 3a90 	vmov	r3, s15
 8001096:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800109a:	33ff      	adds	r3, #255	; 0xff
 800109c:	60fb      	str	r3, [r7, #12]

	if (pid > 65535) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a4:	db03      	blt.n	80010ae <setMotorDeltaLeft+0x5a>
		pid = 65535;
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e005      	b.n	80010ba <setMotorDeltaLeft+0x66>
	} else if (pid < -65535) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010b4:	dc01      	bgt.n	80010ba <setMotorDeltaLeft+0x66>
		pid = -65535;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <setMotorDeltaLeft+0xe8>)
 80010b8:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR1 = abs(pid);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34

	if (pid > 0) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dd0a      	ble.n	80010e6 <setMotorDeltaLeft+0x92>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // 5, 6, 7, 15
 80010d0:	2201      	movs	r2, #1
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	481a      	ldr	r0, [pc, #104]	; (8001140 <setMotorDeltaLeft+0xec>)
 80010d6:	f001 fc6f 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	4819      	ldr	r0, [pc, #100]	; (8001144 <setMotorDeltaLeft+0xf0>)
 80010e0:	f001 fc6a 	bl	80029b8 <HAL_GPIO_WritePin>
 80010e4:	e017      	b.n	8001116 <setMotorDeltaLeft+0xc2>
	} else if (pid < 0) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da0a      	bge.n	8001102 <setMotorDeltaLeft+0xae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 80010ec:	2200      	movs	r2, #0
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <setMotorDeltaLeft+0xec>)
 80010f2:	f001 fc61 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2120      	movs	r1, #32
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <setMotorDeltaLeft+0xf0>)
 80010fc:	f001 fc5c 	bl	80029b8 <HAL_GPIO_WritePin>
 8001100:	e009      	b.n	8001116 <setMotorDeltaLeft+0xc2>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // 5, 6, 7, 15
 8001102:	2200      	movs	r2, #0
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <setMotorDeltaLeft+0xec>)
 8001108:	f001 fc56 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <setMotorDeltaLeft+0xf0>)
 8001112:	f001 fc51 	bl	80029b8 <HAL_GPIO_WritePin>
	}

	xprintf("TM: %d\n", TIM2->CCR1);
 8001116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	4619      	mov	r1, r3
 800111e:	480a      	ldr	r0, [pc, #40]	; (8001148 <setMotorDeltaLeft+0xf4>)
 8001120:	f7ff fefc 	bl	8000f1c <xprintf>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000168 	.word	0x20000168
 8001130:	3a83126f 	.word	0x3a83126f
 8001134:	3ca3d70a 	.word	0x3ca3d70a
 8001138:	3f8ccccd 	.word	0x3f8ccccd
 800113c:	ffff0001 	.word	0xffff0001
 8001140:	40020400 	.word	0x40020400
 8001144:	40020000 	.word	0x40020000
 8001148:	0800ad08 	.word	0x0800ad08

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001152:	f000 fdf9 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001156:	f000 f887 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115a:	f000 fadd 	bl	8001718 <MX_GPIO_Init>
  MX_DMA_Init();
 800115e:	f000 fab3 	bl	80016c8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001162:	f008 fc11 	bl	8009988 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001166:	f000 f919 	bl	800139c <MX_TIM2_Init>
  MX_SPI1_Init();
 800116a:	f000 f8e5 	bl	8001338 <MX_SPI1_Init>
  MX_TIM3_Init();
 800116e:	f000 f98b 	bl	8001488 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001172:	f000 f9d7 	bl	8001524 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001176:	f000 fa53 	bl	8001620 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 800117a:	2100      	movs	r1, #0
 800117c:	4834      	ldr	r0, [pc, #208]	; (8001250 <main+0x104>)
 800117e:	f004 fb9b 	bl	80058b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8001182:	2104      	movs	r1, #4
 8001184:	4832      	ldr	r0, [pc, #200]	; (8001250 <main+0x104>)
 8001186:	f004 fb97 	bl	80058b8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800118a:	2100      	movs	r1, #0
 800118c:	4831      	ldr	r0, [pc, #196]	; (8001254 <main+0x108>)
 800118e:	f004 fa3d 	bl	800560c <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_ALL);

  TIM2->CCR1 = 0;
 8001192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001196:	2200      	movs	r2, #0
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

  int32_t speed_left = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t rxdata[8];
	  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 800119e:	f107 0110 	add.w	r1, r7, #16
 80011a2:	2302      	movs	r3, #2
 80011a4:	2201      	movs	r2, #1
 80011a6:	482c      	ldr	r0, [pc, #176]	; (8001258 <main+0x10c>)
 80011a8:	f003 fc6c 	bl	8004a84 <HAL_SPI_Receive>

	  switch (rxdata[0]) {
 80011ac:	7c3b      	ldrb	r3, [r7, #16]
 80011ae:	2bab      	cmp	r3, #171	; 0xab
 80011b0:	d002      	beq.n	80011b8 <main+0x6c>
 80011b2:	2bde      	cmp	r3, #222	; 0xde
 80011b4:	d020      	beq.n	80011f8 <main+0xac>

			  speed_left = rxspeed[0];
		  }
		  break;
	  default:
		  break;
 80011b6:	e03b      	b.n	8001230 <main+0xe4>
		  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 80011b8:	f107 0110 	add.w	r1, r7, #16
 80011bc:	2302      	movs	r3, #2
 80011be:	2201      	movs	r2, #1
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <main+0x10c>)
 80011c2:	f003 fc5f 	bl	8004a84 <HAL_SPI_Receive>
		  if (rxdata[0] == 0xCD) {
 80011c6:	7c3b      	ldrb	r3, [r7, #16]
 80011c8:	2bcd      	cmp	r3, #205	; 0xcd
 80011ca:	d12e      	bne.n	800122a <main+0xde>
			  int32_t txdata[2] = { getMotorDeltaLeft(), getMotorDeltaRight() };
 80011cc:	f7ff feda 	bl	8000f84 <getMotorDeltaLeft>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	f7ff ff0a 	bl	8000fec <getMotorDeltaRight>
 80011d8:	4603      	mov	r3, r0
 80011da:	60fb      	str	r3, [r7, #12]
			  xprintf("\nGET Left: %d, Right: %d\n", txdata[0], txdata[1]);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4619      	mov	r1, r3
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <main+0x110>)
 80011e4:	f7ff fe9a 	bl	8000f1c <xprintf>
			  HAL_SPI_Transmit(&hspi1, (void*)txdata, sizeof(txdata), sizeof(txdata) * 10);
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	2350      	movs	r3, #80	; 0x50
 80011ee:	2208      	movs	r2, #8
 80011f0:	4819      	ldr	r0, [pc, #100]	; (8001258 <main+0x10c>)
 80011f2:	f003 fb04 	bl	80047fe <HAL_SPI_Transmit>
		  break;
 80011f6:	e018      	b.n	800122a <main+0xde>
		  HAL_SPI_Receive(&hspi1, rxdata, 1, 2);
 80011f8:	f107 0110 	add.w	r1, r7, #16
 80011fc:	2302      	movs	r3, #2
 80011fe:	2201      	movs	r2, #1
 8001200:	4815      	ldr	r0, [pc, #84]	; (8001258 <main+0x10c>)
 8001202:	f003 fc3f 	bl	8004a84 <HAL_SPI_Receive>
		  if (rxdata[0] == 0xAD) {
 8001206:	7c3b      	ldrb	r3, [r7, #16]
 8001208:	2bad      	cmp	r3, #173	; 0xad
 800120a:	d110      	bne.n	800122e <main+0xe2>
			  HAL_SPI_Receive(&hspi1, (void*)rxspeed, sizeof(rxspeed), sizeof(rxspeed) * 10);
 800120c:	4639      	mov	r1, r7
 800120e:	2350      	movs	r3, #80	; 0x50
 8001210:	2208      	movs	r2, #8
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <main+0x10c>)
 8001214:	f003 fc36 	bl	8004a84 <HAL_SPI_Receive>
			  xprintf("\nSET Left: %d, Right: %d\n", rxspeed[0], rxspeed[1]);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4619      	mov	r1, r3
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <main+0x114>)
 8001220:	f7ff fe7c 	bl	8000f1c <xprintf>
			  speed_left = rxspeed[0];
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	61fb      	str	r3, [r7, #28]
		  break;
 8001228:	e001      	b.n	800122e <main+0xe2>
		  break;
 800122a:	bf00      	nop
 800122c:	e000      	b.n	8001230 <main+0xe4>
		  break;
 800122e:	bf00      	nop
	  }

	  uint32_t tick = HAL_GetTick();
 8001230:	f000 fdf0 	bl	8001e14 <HAL_GetTick>
 8001234:	61b8      	str	r0, [r7, #24]
	  static uint32_t last_tick = 0;
	  if (tick - last_tick > 100) {
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <main+0x118>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d9ad      	bls.n	800119e <main+0x52>
	  	  last_tick = tick;
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <main+0x118>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6013      	str	r3, [r2, #0]
	  	  setMotorDeltaLeft(speed_left);
 8001248:	69f8      	ldr	r0, [r7, #28]
 800124a:	f7ff ff03 	bl	8001054 <setMotorDeltaLeft>
  {
 800124e:	e7a6      	b.n	800119e <main+0x52>
 8001250:	20000360 	.word	0x20000360
 8001254:	20000288 	.word	0x20000288
 8001258:	20000170 	.word	0x20000170
 800125c:	0800ad10 	.word	0x0800ad10
 8001260:	0800ad2c 	.word	0x0800ad2c
 8001264:	200003c8 	.word	0x200003c8

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	; 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f009 f8b6 	bl	800a3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <SystemClock_Config+0xc8>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <SystemClock_Config+0xc8>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <SystemClock_Config+0xc8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <SystemClock_Config+0xcc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a20      	ldr	r2, [pc, #128]	; (8001334 <SystemClock_Config+0xcc>)
 80012b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <SystemClock_Config+0xcc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012d8:	2319      	movs	r3, #25
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012dc:	2390      	movs	r3, #144	; 0x90
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012e4:	2303      	movs	r3, #3
 80012e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fdcd 	bl	8003e8c <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f8:	f000 fa6c 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f82f 	bl	800437c <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001324:	f000 fa56 	bl	80017d4 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	; 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_SPI1_Init+0x5c>)
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <MX_SPI1_Init+0x60>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_SPI1_Init+0x5c>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_SPI1_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_SPI1_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_SPI1_Init+0x5c>)
 800137a:	220a      	movs	r2, #10
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_SPI1_Init+0x5c>)
 8001380:	f003 f9b4 	bl	80046ec <HAL_SPI_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800138a:	f000 fa23 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000170 	.word	0x20000170
 8001398:	40013000 	.word	0x40013000

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f4:	4823      	ldr	r0, [pc, #140]	; (8001484 <MX_TIM2_Init+0xe8>)
 80013f6:	f004 f861 	bl	80054bc <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001400:	f000 f9e8 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140e:	4619      	mov	r1, r3
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_TIM2_Init+0xe8>)
 8001412:	f004 fba1 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800141c:	f000 f9da 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_TIM2_Init+0xe8>)
 8001422:	f004 f89a 	bl	800555a <HAL_TIM_PWM_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800142c:	f000 f9d2 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4619      	mov	r1, r3
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_TIM2_Init+0xe8>)
 8001440:	f004 ff2a 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800144a:	f000 f9c3 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM2_Init+0xe8>)
 8001466:	f004 fab5 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001470:	f000 f9b0 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM2_Init+0xe8>)
 8001476:	f000 fb43 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	; 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000288 	.word	0x20000288

08001488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_TIM3_Init+0x94>)
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <MX_TIM3_Init+0x98>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_TIM3_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_TIM3_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_TIM3_Init+0x94>)
 80014b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_TIM3_Init+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_TIM3_Init+0x94>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_TIM3_Init+0x94>)
 80014cc:	f003 fff6 	bl	80054bc <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014d6:	f000 f97d 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM3_Init+0x94>)
 80014e8:	f004 fb36 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f96f 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_TIM3_Init+0x94>)
 8001504:	f004 fec8 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800150e:	f000 f961 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002d0 	.word	0x200002d0
 8001520:	40000400 	.word	0x40000400

08001524 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <MX_TIM4_Init+0xf4>)
 8001556:	4a31      	ldr	r2, [pc, #196]	; (800161c <MX_TIM4_Init+0xf8>)
 8001558:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60000-1;
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <MX_TIM4_Init+0xf4>)
 800155c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001560:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_TIM4_Init+0xf4>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MX_TIM4_Init+0xf4>)
 800156a:	22f9      	movs	r2, #249	; 0xf9
 800156c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <MX_TIM4_Init+0xf4>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <MX_TIM4_Init+0xf4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800157a:	4827      	ldr	r0, [pc, #156]	; (8001618 <MX_TIM4_Init+0xf4>)
 800157c:	f003 ff9e 	bl	80054bc <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001586:	f000 f925 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001594:	4619      	mov	r1, r3
 8001596:	4820      	ldr	r0, [pc, #128]	; (8001618 <MX_TIM4_Init+0xf4>)
 8001598:	f004 fade 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80015a2:	f000 f917 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_TIM4_Init+0xf4>)
 80015a8:	f003 ffd7 	bl	800555a <HAL_TIM_PWM_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015b2:	f000 f90f 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4619      	mov	r1, r3
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_TIM4_Init+0xf4>)
 80015c6:	f004 fe67 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015d0:	f000 f900 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	; 0x60
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	480b      	ldr	r0, [pc, #44]	; (8001618 <MX_TIM4_Init+0xf4>)
 80015ec:	f004 f9f2 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015f6:	f000 f8ed 	bl	80017d4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_TIM4_Init+0xf4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <MX_TIM4_Init+0xf4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM4_Init+0xf4>)
 800160c:	f000 fa78 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3738      	adds	r7, #56	; 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000318 	.word	0x20000318
 800161c:	40000800 	.word	0x40000800

08001620 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	2224      	movs	r2, #36	; 0x24
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f008 feda 	bl	800a3e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_TIM5_Init+0xa0>)
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <MX_TIM5_Init+0xa4>)
 8001640:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_TIM5_Init+0xa0>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_TIM5_Init+0xa0>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_TIM5_Init+0xa0>)
 8001650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001654:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_TIM5_Init+0xa0>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM5_Init+0xa0>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001662:	2301      	movs	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM5_Init+0xa0>)
 800168e:	f004 f86d 	bl	800576c <HAL_TIM_Encoder_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001698:	f000 f89c 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_TIM5_Init+0xa0>)
 80016aa:	f004 fdf5 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80016b4:	f000 f88e 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	; 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000360 	.word	0x20000360
 80016c4:	40000c00 	.word	0x40000c00

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_DMA_Init+0x4c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <MX_DMA_Init+0x4c>)
 80016d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <MX_DMA_Init+0x4c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2038      	movs	r0, #56	; 0x38
 80016f0:	f000 fc9b 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f4:	2038      	movs	r0, #56	; 0x38
 80016f6:	f000 fcb4 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	203a      	movs	r0, #58	; 0x3a
 8001700:	f000 fc93 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001704:	203a      	movs	r0, #58	; 0x3a
 8001706:	f000 fcac 	bl	8002062 <HAL_NVIC_EnableIRQ>

}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_GPIO_Init+0xb4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_GPIO_Init+0xb4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <MX_GPIO_Init+0xb4>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_GPIO_Init+0xb4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	21a0      	movs	r1, #160	; 0xa0
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <MX_GPIO_Init+0xb8>)
 80017a4:	f001 f908 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017a8:	23a0      	movs	r3, #160	; 0xa0
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_GPIO_Init+0xb8>)
 80017c0:	f000 ff76 	bl	80026b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_SPI_MspInit+0x188>)
 800184e:	4293      	cmp	r3, r2
 8001850:	f040 80ae 	bne.w	80019b0 <HAL_SPI_MspInit+0x180>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	4a57      	ldr	r2, [pc, #348]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 800185e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001862:	6453      	str	r3, [r2, #68]	; 0x44
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a50      	ldr	r2, [pc, #320]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_SPI_MspInit+0x18c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80018a8:	2390      	movs	r3, #144	; 0x90
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018b8:	2305      	movs	r3, #5
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	483f      	ldr	r0, [pc, #252]	; (80019c0 <HAL_SPI_MspInit+0x190>)
 80018c4:	f000 fef4 	bl	80026b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018c8:	2318      	movs	r3, #24
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d8:	2305      	movs	r3, #5
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4838      	ldr	r0, [pc, #224]	; (80019c4 <HAL_SPI_MspInit+0x194>)
 80018e4:	f000 fee4 	bl	80026b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_SPI_MspInit+0x19c>)
 80018ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 80018f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 8001904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001908:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001928:	4827      	ldr	r0, [pc, #156]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 800192a:	f000 fbb5 	bl	8002098 <HAL_DMA_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001934:	f7ff ff4e 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 800193c:	64da      	str	r2, [r3, #76]	; 0x4c
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_SPI_MspInit+0x198>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_SPI_MspInit+0x1a4>)
 8001948:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 800194c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001950:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001954:	2240      	movs	r2, #64	; 0x40
 8001956:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001964:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001986:	f000 fb87 	bl	8002098 <HAL_DMA_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001990:	f7ff ff20 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 8001998:	649a      	str	r2, [r3, #72]	; 0x48
 800199a:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_SPI_MspInit+0x1a0>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2023      	movs	r0, #35	; 0x23
 80019a6:	f000 fb40 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019aa:	2023      	movs	r0, #35	; 0x23
 80019ac:	f000 fb59 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40013000 	.word	0x40013000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	200001c8 	.word	0x200001c8
 80019cc:	40026410 	.word	0x40026410
 80019d0:	20000228 	.word	0x20000228
 80019d4:	40026440 	.word	0x40026440

080019d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a06:	e026      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10e      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
}
 8001a2e:	e012      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_TIM_Base_MspInit+0x94>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10d      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aca:	2303      	movs	r3, #3
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ada:	2302      	movs	r3, #2
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ae6:	f000 fde3 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40000c00 	.word	0x40000c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d11f      	bne.n	8001b62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b50:	2301      	movs	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <HAL_TIM_MspPostInit+0xb4>)
 8001b5c:	f000 fda8 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b60:	e022      	b.n	8001ba8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_TIM_MspPostInit+0xb8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_TIM_MspPostInit+0xb0>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_TIM_MspPostInit+0xbc>)
 8001ba4:	f000 fd84 	bl	80026b0 <HAL_GPIO_Init>
}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f8ee 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <SPI1_IRQHandler+0x10>)
 8001c1a:	f003 f9fb 	bl	8005014 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000170 	.word	0x20000170

08001c28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA2_Stream0_IRQHandler+0x10>)
 8001c2e:	f000 fb03 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200001c8 	.word	0x200001c8

08001c3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA2_Stream2_IRQHandler+0x10>)
 8001c42:	f000 faf9 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000228 	.word	0x20000228

08001c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <OTG_FS_IRQHandler+0x10>)
 8001c56:	f001 f80c 	bl	8002c72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200018b4 	.word	0x200018b4

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f008 fbb0 	bl	800a3f8 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	200003cc 	.word	0x200003cc
 8001ccc:	20002100 	.word	0x20002100

08001cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	; (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	; (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f008 fb6f 	bl	800a404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff fa11 	bl	800114c <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001d38:	0800adec 	.word	0x0800adec
  ldr r2, =_sbss
 8001d3c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001d40:	20002100 	.word	0x20002100

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f94f 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	200f      	movs	r0, #15
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fd30 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f967 	bl	800207e <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc8:	f000 f92f 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	200003d0 	.word	0x200003d0

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200003d0 	.word	0x200003d0

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff feb6 	bl	8001e14 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e099      	b.n	80021e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d4:	e00f      	b.n	80020f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d6:	f7ff fe9d 	bl	8001e14 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d908      	bls.n	80020f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e078      	b.n	80021e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e8      	bne.n	80020d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_DMA_Init+0x158>)
 8002110:	4013      	ands	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002122:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4313      	orrs	r3, r2
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 0307 	bic.w	r3, r3, #7
 8002176:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b04      	cmp	r3, #4
 8002188:	d117      	bne.n	80021ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00e      	beq.n	80021ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fa0b 	bl	80025b8 <DMA_CheckFifoParam>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021b6:	2301      	movs	r3, #1
 80021b8:	e016      	b.n	80021e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f9c2 	bl	800254c <DMA_CalcBaseAndBitshift>
 80021c8:	4603      	mov	r3, r0
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	223f      	movs	r2, #63	; 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	f010803f 	.word	0xf010803f

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_DMA_IRQHandler+0x248>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a8e      	ldr	r2, [pc, #568]	; (8002484 <HAL_DMA_IRQHandler+0x24c>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2208      	movs	r2, #8
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01a      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0204 	bic.w	r2, r2, #4
 800228a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2208      	movs	r2, #8
 8002292:	409a      	lsls	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d012      	beq.n	80022da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2204      	movs	r2, #4
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d012      	beq.n	8002310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2204      	movs	r2, #4
 80022fe:	409a      	lsls	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f043 0204 	orr.w	r2, r3, #4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2210      	movs	r2, #16
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d043      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d03c      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	2210      	movs	r2, #16
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d018      	beq.n	800237a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e01f      	b.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e016      	b.n	80023a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0208 	bic.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2220      	movs	r2, #32
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 808f 	beq.w	80024d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8087 	beq.w	80024d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2220      	movs	r2, #32
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d136      	bne.n	8002450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0216 	bic.w	r2, r2, #22
 80023f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_DMA_IRQHandler+0x1da>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0208 	bic.w	r2, r2, #8
 8002420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	223f      	movs	r2, #63	; 0x3f
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002442:	2b00      	cmp	r3, #0
 8002444:	d07e      	beq.n	8002544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
        }
        return;
 800244e:	e079      	b.n	8002544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01d      	beq.n	800249a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10d      	bne.n	8002488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	2b00      	cmp	r3, #0
 8002472:	d031      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e02c      	b.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
 800247e:	bf00      	nop
 8002480:	20000000 	.word	0x20000000
 8002484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d023      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e01e      	b.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0210 	bic.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d032      	beq.n	8002546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3301      	adds	r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	d307      	bcc.n	8002520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f2      	bne.n	8002504 <HAL_DMA_IRQHandler+0x2cc>
 800251e:	e000      	b.n	8002522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
 8002542:	e000      	b.n	8002546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002544:	bf00      	nop
    }
  }
}
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3b10      	subs	r3, #16
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <DMA_CalcBaseAndBitshift+0x64>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d909      	bls.n	800258e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	1d1a      	adds	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	659a      	str	r2, [r3, #88]	; 0x58
 800258c:	e007      	b.n	800259e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	aaaaaaab 	.word	0xaaaaaaab
 80025b4:	0800ada0 	.word	0x0800ada0

080025b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11f      	bne.n	8002612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d856      	bhi.n	8002686 <DMA_CheckFifoParam+0xce>
 80025d8:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <DMA_CheckFifoParam+0x28>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	08002603 	.word	0x08002603
 80025e8:	080025f1 	.word	0x080025f1
 80025ec:	08002687 	.word	0x08002687
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d046      	beq.n	800268a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002600:	e043      	b.n	800268a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800260a:	d140      	bne.n	800268e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002610:	e03d      	b.n	800268e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d121      	bne.n	8002660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d837      	bhi.n	8002692 <DMA_CheckFifoParam+0xda>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <DMA_CheckFifoParam+0x70>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	08002639 	.word	0x08002639
 800262c:	0800263f 	.word	0x0800263f
 8002630:	08002639 	.word	0x08002639
 8002634:	08002651 	.word	0x08002651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e030      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d025      	beq.n	8002696 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264e:	e022      	b.n	8002696 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002658:	d11f      	bne.n	800269a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800265e:	e01c      	b.n	800269a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d903      	bls.n	800266e <DMA_CheckFifoParam+0xb6>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d003      	beq.n	8002674 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800266c:	e018      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      break;
 8002672:	e015      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e00b      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;
 8002686:	bf00      	nop
 8002688:	e00a      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e008      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      break;
 800268e:	bf00      	nop
 8002690:	e006      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002692:	bf00      	nop
 8002694:	e004      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002696:	bf00      	nop
 8002698:	e002      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800269a:	bf00      	nop
 800269c:	e000      	b.n	80026a0 <DMA_CheckFifoParam+0xe8>
      break;
 800269e:	bf00      	nop
    }
  } 
  
  return status; 
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e159      	b.n	8002980 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8148 	bne.w	800297a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d005      	beq.n	8002702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d130      	bne.n	8002764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0201 	and.w	r2, r3, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b03      	cmp	r3, #3
 800276e:	d017      	beq.n	80027a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a2 	beq.w	800297a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b57      	ldr	r3, [pc, #348]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_GPIO_Init+0x2ec>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_GPIO_Init+0x2f0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x202>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_GPIO_Init+0x2f4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x1fe>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a47      	ldr	r2, [pc, #284]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x1fa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a46      	ldr	r2, [pc, #280]	; (80029ac <HAL_GPIO_Init+0x2fc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x1f6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a45      	ldr	r2, [pc, #276]	; (80029b0 <HAL_GPIO_Init+0x300>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x1f2>
 800289e:	2304      	movs	r3, #4
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x204>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_GPIO_Init+0x2ec>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <HAL_GPIO_Init+0x304>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <HAL_GPIO_Init+0x304>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_GPIO_Init+0x304>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_GPIO_Init+0x304>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f aea2 	bls.w	80026cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e101      	b.n	8002c00 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f007 f9bc 	bl	8009d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2a:	d102      	bne.n	8002a32 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fdb3 	bl	80065a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7c1a      	ldrb	r2, [r3, #16]
 8002a44:	f88d 2000 	strb.w	r2, [sp]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4c:	f003 fc92 	bl	8006374 <USB_CoreInit>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0ce      	b.n	8002c00 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fdab 	bl	80065c4 <USB_SetCurrentMode>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0bf      	b.n	8002c00 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e04a      	b.n	8002b1c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3315      	adds	r3, #21
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	b298      	uxth	r0, r3
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	332e      	adds	r3, #46	; 0x2e
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3318      	adds	r3, #24
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	331c      	adds	r3, #28
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3320      	adds	r3, #32
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3324      	adds	r3, #36	; 0x24
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	791b      	ldrb	r3, [r3, #4]
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3af      	bcc.n	8002a86 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	e044      	b.n	8002bb6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	791b      	ldrb	r3, [r3, #4]
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3b5      	bcc.n	8002b2c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7c1a      	ldrb	r2, [r3, #16]
 8002bc8:	f88d 2000 	strb.w	r2, [sp]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd0:	f003 fd44 	bl	800665c <USB_DevInit>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00c      	b.n	8002c00 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 fd88 	bl	800770e <USB_DevDisconnect>

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_Start+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e022      	b.n	8002c6a <HAL_PCD_Start+0x62>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fc95 	bl	8006580 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fd36 	bl	80076cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c72:	b590      	push	{r4, r7, lr}
 8002c74:	b08d      	sub	sp, #52	; 0x34
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 fdf4 	bl	8007876 <USB_GetMode>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f040 848c 	bne.w	80035ae <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fd58 	bl	8007750 <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8482 	beq.w	80035ac <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 fd45 	bl	8007750 <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f002 0202 	and.w	r2, r2, #2
 8002cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 fd33 	bl	8007750 <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d161      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	0c5b      	lsrs	r3, r3, #17
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d124      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d035      	beq.n	8002da8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6a38      	ldr	r0, [r7, #32]
 8002d50:	f004 fb6a 	bl	8007428 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d60:	441a      	add	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d72:	441a      	add	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	615a      	str	r2, [r3, #20]
 8002d78:	e016      	b.n	8002da8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	0c5b      	lsrs	r3, r3, #17
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d110      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6a38      	ldr	r0, [r7, #32]
 8002d92:	f004 fb49 	bl	8007428 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da2:	441a      	add	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0210 	orr.w	r2, r2, #16
 8002db6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fcc7 	bl	8007750 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dcc:	f040 80a7 	bne.w	8002f1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fccc 	bl	8007776 <USB_ReadDevAllOutEpInterrupt>
 8002dde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002de0:	e099      	b.n	8002f16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 808e 	beq.w	8002f0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 fcf0 	bl	80077de <USB_ReadDevOutEPInterrupt>
 8002dfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e16:	461a      	mov	r2, r3
 8002e18:	2301      	movs	r3, #1
 8002e1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fea2 	bl	8003b68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 ff78 	bl	8003d38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2310      	movs	r3, #16
 8002e62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d030      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d109      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	78db      	ldrb	r3, [r3, #3]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f007 f867 	bl	8009f8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2302      	movs	r3, #2
 8002ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2320      	movs	r3, #32
 8002eea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	461a      	mov	r2, r3
 8002f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f af62 	bne.w	8002de2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 fc14 	bl	8007750 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f32:	f040 80db 	bne.w	80030ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 fc35 	bl	80077aa <USB_ReadDevAllInEpInterrupt>
 8002f40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f46:	e0cd      	b.n	80030e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80c2 	beq.w	80030d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 fc5b 	bl	800781a <USB_ReadDevInEPInterrupt>
 8002f64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d057      	beq.n	8003020 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	2201      	movs	r2, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69f9      	ldr	r1, [r7, #28]
 8002f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f90:	4013      	ands	r3, r2
 8002f92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	799b      	ldrb	r3, [r3, #6]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d132      	bne.n	8003014 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4403      	add	r3, r0
 8002fce:	331c      	adds	r3, #28
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4419      	add	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4403      	add	r3, r0
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d113      	bne.n	8003014 <HAL_PCD_IRQHandler+0x3a2>
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3324      	adds	r3, #36	; 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800300c:	461a      	mov	r2, r3
 800300e:	2101      	movs	r1, #1
 8003010:	f004 fc62 	bl	80078d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f006 ff3b 	bl	8009e96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003036:	461a      	mov	r2, r3
 8003038:	2308      	movs	r3, #8
 800303a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	2310      	movs	r3, #16
 8003056:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306e:	461a      	mov	r2, r3
 8003070:	2340      	movs	r3, #64	; 0x40
 8003072:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d023      	beq.n	80030c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800307e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003080:	6a38      	ldr	r0, [r7, #32]
 8003082:	f003 fc4f 	bl	8006924 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3310      	adds	r3, #16
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f006 ff7e 	bl	8009fb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c0:	461a      	mov	r2, r3
 80030c2:	2302      	movs	r3, #2
 80030c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fcbb 	bl	8003a4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f47f af2e 	bne.w	8002f48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 fb2d 	bl	8007750 <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003100:	d122      	bne.n	8003148 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800311c:	2b01      	cmp	r3, #1
 800311e:	d108      	bne.n	8003132 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003128:	2100      	movs	r1, #0
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fea2 	bl	8003e74 <HAL_PCDEx_LPM_Callback>
 8003130:	e002      	b.n	8003138 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f006 ff1c 	bl	8009f70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f004 faff 	bl	8007750 <USB_ReadInterrupts>
 8003152:	4603      	mov	r3, r0
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	d112      	bne.n	8003184 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f006 fed8 	bl	8009f24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003182:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f004 fae1 	bl	8007750 <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003198:	f040 80b7 	bne.w	800330a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2110      	movs	r1, #16
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fbb4 	bl	8006924 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c0:	e046      	b.n	8003250 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	461a      	mov	r2, r3
 80031d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	0151      	lsls	r1, r2, #5
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	440a      	add	r2, r1
 80031ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	461a      	mov	r2, r3
 8003204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003208:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321a:	0151      	lsls	r1, r2, #5
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	440a      	add	r2, r1
 8003220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003228:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	440a      	add	r2, r1
 8003240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003244:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003248:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	3301      	adds	r3, #1
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	461a      	mov	r2, r3
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	4293      	cmp	r3, r2
 800325a:	d3b2      	bcc.n	80031c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800326e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7bdb      	ldrb	r3, [r3, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d016      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003288:	f043 030b 	orr.w	r3, r3, #11
 800328c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329e:	f043 030b 	orr.w	r3, r3, #11
 80032a2:	6453      	str	r3, [r2, #68]	; 0x44
 80032a4:	e015      	b.n	80032d2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032cc:	f043 030b 	orr.w	r3, r3, #11
 80032d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032f4:	461a      	mov	r2, r3
 80032f6:	f004 faef 	bl	80078d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fa1e 	bl	8007750 <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331e:	d123      	bne.n	8003368 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f004 fab4 	bl	8007892 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fb71 	bl	8006a16 <USB_GetDevSpeed>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681c      	ldr	r4, [r3, #0]
 8003340:	f001 f9c8 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 8003344:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800334a:	461a      	mov	r2, r3
 800334c:	4620      	mov	r0, r4
 800334e:	f003 f875 	bl	800643c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f006 fdc7 	bl	8009ee6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003366:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f004 f9ef 	bl	8007750 <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d10a      	bne.n	8003392 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f006 fda4 	bl	8009eca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 0208 	and.w	r2, r2, #8
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f004 f9da 	bl	8007750 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d123      	bne.n	80033ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033b2:	2301      	movs	r3, #1
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e014      	b.n	80033e2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fb08 	bl	80039ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	3301      	adds	r3, #1
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	791b      	ldrb	r3, [r3, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d3e4      	bcc.n	80033b8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 f9ac 	bl	8007750 <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003402:	d13c      	bne.n	800347e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003404:	2301      	movs	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	e02b      	b.n	8003462 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	3318      	adds	r3, #24
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d115      	bne.n	800345c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003430:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003432:	2b00      	cmp	r3, #0
 8003434:	da12      	bge.n	800345c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3317      	adds	r3, #23
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fac8 	bl	80039ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	3301      	adds	r3, #1
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	791b      	ldrb	r3, [r3, #4]
 8003466:	461a      	mov	r2, r3
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	4293      	cmp	r3, r2
 800346c:	d3cd      	bcc.n	800340a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 f964 	bl	8007750 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003492:	d156      	bne.n	8003542 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003494:	2301      	movs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e045      	b.n	8003526 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12e      	bne.n	8003520 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da2b      	bge.n	8003520 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80034d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034d8:	429a      	cmp	r2, r3
 80034da:	d121      	bne.n	8003520 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f203 2357 	addw	r3, r3, #599	; 0x257
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351c:	6053      	str	r3, [r2, #4]
            break;
 800351e:	e008      	b.n	8003532 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	3301      	adds	r3, #1
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	4293      	cmp	r3, r2
 8003530:	d3b3      	bcc.n	800349a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f004 f902 	bl	8007750 <USB_ReadInterrupts>
 800354c:	4603      	mov	r3, r0
 800354e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d10a      	bne.n	800356e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f006 fd3b 	bl	8009fd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800356c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f004 f8ec 	bl	8007750 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d115      	bne.n	80035ae <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f006 fd2b 	bl	8009ff0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e000      	b.n	80035ae <HAL_PCD_IRQHandler+0x93c>
      return;
 80035ac:	bf00      	nop
    }
  }
}
 80035ae:	3734      	adds	r7, #52	; 0x34
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_PCD_SetAddress+0x1a>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e012      	b.n	80035f4 <HAL_PCD_SetAddress+0x40>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 f84b 	bl	8007680 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	70fb      	strb	r3, [r7, #3]
 800360e:	460b      	mov	r3, r1
 8003610:	803b      	strh	r3, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800361a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800361e:	2b00      	cmp	r3, #0
 8003620:	da0f      	bge.n	8003642 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	f003 020f 	and.w	r2, r3, #15
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	3310      	adds	r3, #16
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	705a      	strb	r2, [r3, #1]
 8003640:	e00f      	b.n	8003662 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800366e:	883a      	ldrh	r2, [r7, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	78ba      	ldrb	r2, [r7, #2]
 8003678:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800368c:	78bb      	ldrb	r3, [r7, #2]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d102      	bne.n	8003698 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_PCD_EP_Open+0xaa>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e00e      	b.n	80036c4 <HAL_PCD_EP_Open+0xc8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f003 f9d3 	bl	8006a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80036c2:	7afb      	ldrb	r3, [r7, #11]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da0f      	bge.n	8003700 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	3310      	adds	r3, #16
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	705a      	strb	r2, [r3, #1]
 80036fe:	e00f      	b.n	8003720 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_PCD_EP_Close+0x6e>
 8003736:	2302      	movs	r3, #2
 8003738:	e00e      	b.n	8003758 <HAL_PCD_EP_Close+0x8c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fa11 	bl	8006b70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	460b      	mov	r3, r1
 800376e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003770:	7afb      	ldrb	r3, [r7, #11]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	799b      	ldrb	r3, [r3, #6]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	799b      	ldrb	r3, [r3, #6]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	f003 faae 	bl	8006d28 <USB_EPStartXfer>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80037f8:	681b      	ldr	r3, [r3, #0]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	460b      	mov	r3, r1
 8003814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3310      	adds	r3, #16
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2201      	movs	r2, #1
 8003844:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	b2da      	uxtb	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	799b      	ldrb	r3, [r3, #6]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	799b      	ldrb	r3, [r3, #6]
 8003868:	461a      	mov	r2, r3
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	f003 fa5c 	bl	8006d28 <USB_EPStartXfer>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	7912      	ldrb	r2, [r2, #4]
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e04f      	b.n	8003938 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	da0f      	bge.n	80038c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3310      	adds	r3, #16
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	705a      	strb	r2, [r3, #1]
 80038be:	e00d      	b.n	80038dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_PCD_EP_SetStall+0x82>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e01d      	b.n	8003938 <HAL_PCD_EP_SetStall+0xbe>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68f9      	ldr	r1, [r7, #12]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 fde4 	bl	80074d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7999      	ldrb	r1, [r3, #6]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003928:	461a      	mov	r2, r3
 800392a:	f003 ffd5 	bl	80078d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	7912      	ldrb	r2, [r2, #4]
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e042      	b.n	80039e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800395e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003962:	2b00      	cmp	r3, #0
 8003964:	da0f      	bge.n	8003986 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3310      	adds	r3, #16
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	705a      	strb	r2, [r3, #1]
 8003984:	e00f      	b.n	80039a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_PCD_EP_ClrStall+0x86>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e00e      	b.n	80039e4 <HAL_PCD_EP_ClrStall+0xa4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68f9      	ldr	r1, [r7, #12]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fded 	bl	80075b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80039f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da0c      	bge.n	8003a1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3310      	adds	r3, #16
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e00c      	b.n	8003a34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3304      	adds	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 fc0c 	bl	8007258 <USB_EPStopXfer>
 8003a40:	4603      	mov	r3, r0
 8003a42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b08a      	sub	sp, #40	; 0x28
 8003a52:	af02      	add	r7, sp, #8
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	3310      	adds	r3, #16
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d901      	bls.n	8003a86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06b      	b.n	8003b5e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d902      	bls.n	8003aa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3303      	adds	r3, #3
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aaa:	e02a      	b.n	8003b02 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d902      	bls.n	8003ac8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3303      	adds	r3, #3
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68d9      	ldr	r1, [r3, #12]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6978      	ldr	r0, [r7, #20]
 8003ae6:	f003 fc61 	bl	80073ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	441a      	add	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	441a      	add	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d809      	bhi.n	8003b2c <PCD_WriteEmptyTxFifo+0xde>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d203      	bcs.n	8003b2c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1bf      	bne.n	8003aac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d811      	bhi.n	8003b5c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	2201      	movs	r2, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	6939      	ldr	r1, [r7, #16]
 8003b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b58:	4013      	ands	r3, r2
 8003b5a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	333c      	adds	r3, #60	; 0x3c
 8003b80:	3304      	adds	r3, #4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	799b      	ldrb	r3, [r3, #6]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d17b      	bne.n	8003c96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4a61      	ldr	r2, [pc, #388]	; (8003d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	f240 80b9 	bls.w	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80b3 	beq.w	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd0:	6093      	str	r3, [r2, #8]
 8003bd2:	e0a7      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	461a      	mov	r2, r3
 8003bec:	2320      	movs	r3, #32
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e098      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 8093 	bne.w	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	; (8003d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d90f      	bls.n	8003c26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c22:	6093      	str	r3, [r2, #8]
 8003c24:	e07e      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	0159      	lsls	r1, r3, #5
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	440b      	add	r3, r1
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d114      	bne.n	8003c88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c70:	461a      	mov	r2, r3
 8003c72:	2101      	movs	r1, #1
 8003c74:	f003 fe30 	bl	80078d8 <USB_EP0_OutStart>
 8003c78:	e006      	b.n	8003c88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	441a      	add	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f006 f8e6 	bl	8009e60 <HAL_PCD_DataOutStageCallback>
 8003c94:	e046      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d124      	bne.n	8003ce8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	e032      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f006 f8bd 	bl	8009e60 <HAL_PCD_DataOutStageCallback>
 8003ce6:	e01d      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d114      	bne.n	8003d18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d10:	461a      	mov	r2, r3
 8003d12:	2100      	movs	r1, #0
 8003d14:	f003 fde0 	bl	80078d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f006 f89e 	bl	8009e60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	4f54300a 	.word	0x4f54300a
 8003d34:	4f54310a 	.word	0x4f54310a

08003d38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	333c      	adds	r3, #60	; 0x3c
 8003d50:	3304      	adds	r3, #4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d90e      	bls.n	8003d8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d84:	461a      	mov	r2, r3
 8003d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f006 f855 	bl	8009e3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d90c      	bls.n	8003db4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	799b      	ldrb	r3, [r3, #6]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d108      	bne.n	8003db4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003dac:	461a      	mov	r2, r3
 8003dae:	2101      	movs	r1, #1
 8003db0:	f003 fd92 	bl	80078d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	4f54300a 	.word	0x4f54300a

08003dc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003de2:	883b      	ldrh	r3, [r7, #0]
 8003de4:	0419      	lsls	r1, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
 8003df0:	e028      	b.n	8003e44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	e00d      	b.n	8003e22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3340      	adds	r3, #64	; 0x40
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d3ec      	bcc.n	8003e06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e2c:	883b      	ldrh	r3, [r7, #0]
 8003e2e:	0418      	lsls	r0, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4302      	orrs	r2, r0
 8003e3c:	3340      	adds	r3, #64	; 0x40
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e267      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d075      	beq.n	8003f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eaa:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d112      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec2:	4b82      	ldr	r3, [pc, #520]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ece:	d10b      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	4b7e      	ldr	r3, [pc, #504]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05b      	beq.n	8003f94 <HAL_RCC_OscConfig+0x108>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d157      	bne.n	8003f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e242      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x74>
 8003ef2:	4b76      	ldr	r3, [pc, #472]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e01d      	b.n	8003f3c <HAL_RCC_OscConfig+0xb0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x98>
 8003f0a:	4b70      	ldr	r3, [pc, #448]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6f      	ldr	r2, [pc, #444]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a6c      	ldr	r2, [pc, #432]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0xb0>
 8003f24:	4b69      	ldr	r3, [pc, #420]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a68      	ldr	r2, [pc, #416]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd ff66 	bl	8001e14 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd ff62 	bl	8001e14 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e207      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b5b      	ldr	r3, [pc, #364]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0xc0>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd ff52 	bl	8001e14 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fd ff4e 	bl	8001e14 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e1f3      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	4b51      	ldr	r3, [pc, #324]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0xe8>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d063      	beq.n	800406a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fae:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d11c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b44      	ldr	r3, [pc, #272]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d116      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	4b41      	ldr	r3, [pc, #260]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_RCC_OscConfig+0x152>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e1c7      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4937      	ldr	r1, [pc, #220]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	e03a      	b.n	800406a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ffc:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <HAL_RCC_OscConfig+0x244>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd ff07 	bl	8001e14 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400a:	f7fd ff03 	bl	8001e14 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e1a8      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4925      	ldr	r1, [pc, #148]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
 800403c:	e015      	b.n	800406a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403e:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x244>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fee6 	bl	8001e14 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404c:	f7fd fee2 	bl	8001e14 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e187      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d036      	beq.n	80040e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_RCC_OscConfig+0x248>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fd fec6 	bl	8001e14 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408c:	f7fd fec2 	bl	8001e14 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e167      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCC_OscConfig+0x240>)
 80040a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x200>
 80040aa:	e01b      	b.n	80040e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_OscConfig+0x248>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fd feaf 	bl	8001e14 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b8:	e00e      	b.n	80040d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fd feab 	bl	8001e14 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d907      	bls.n	80040d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e150      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
 80040cc:	40023800 	.word	0x40023800
 80040d0:	42470000 	.word	0x42470000
 80040d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b88      	ldr	r3, [pc, #544]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80040da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ea      	bne.n	80040ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8097 	beq.w	8004220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b81      	ldr	r3, [pc, #516]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	4b7d      	ldr	r3, [pc, #500]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a7c      	ldr	r2, [pc, #496]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b7a      	ldr	r3, [pc, #488]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b77      	ldr	r3, [pc, #476]	; (8004300 <HAL_RCC_OscConfig+0x474>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d118      	bne.n	8004160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412e:	4b74      	ldr	r3, [pc, #464]	; (8004300 <HAL_RCC_OscConfig+0x474>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a73      	ldr	r2, [pc, #460]	; (8004300 <HAL_RCC_OscConfig+0x474>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413a:	f7fd fe6b 	bl	8001e14 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004142:	f7fd fe67 	bl	8001e14 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e10c      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x474>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x2ea>
 8004168:	4b64      	ldr	r3, [pc, #400]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a63      	ldr	r2, [pc, #396]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	e01c      	b.n	80041b0 <HAL_RCC_OscConfig+0x324>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b05      	cmp	r3, #5
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x30c>
 800417e:	4b5f      	ldr	r3, [pc, #380]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a5e      	ldr	r2, [pc, #376]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	4b5c      	ldr	r3, [pc, #368]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a5b      	ldr	r2, [pc, #364]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0x324>
 8004198:	4b58      	ldr	r3, [pc, #352]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a57      	ldr	r2, [pc, #348]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
 80041a4:	4b55      	ldr	r3, [pc, #340]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a54      	ldr	r2, [pc, #336]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd fe2c 	bl	8001e14 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fd fe28 	bl	8001e14 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0cb      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	4b49      	ldr	r3, [pc, #292]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ee      	beq.n	80041c0 <HAL_RCC_OscConfig+0x334>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fd fe16 	bl	8001e14 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fe12 	bl	8001e14 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0b5      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ee      	bne.n	80041ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b39      	ldr	r3, [pc, #228]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	4a38      	ldr	r2, [pc, #224]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a1 	beq.w	800436c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800422a:	4b34      	ldr	r3, [pc, #208]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b08      	cmp	r3, #8
 8004234:	d05c      	beq.n	80042f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d141      	bne.n	80042c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCC_OscConfig+0x478>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fd fde6 	bl	8001e14 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7fd fde2 	bl	8001e14 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e087      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	019b      	lsls	r3, r3, #6
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	3b01      	subs	r3, #1
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	491b      	ldr	r1, [pc, #108]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x478>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd fdbb 	bl	8001e14 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fd fdb7 	bl	8001e14 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e05c      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x416>
 80042c0:	e054      	b.n	800436c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_RCC_OscConfig+0x478>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd fda4 	bl	8001e14 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fda0 	bl	8001e14 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e045      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_OscConfig+0x470>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x444>
 80042ee:	e03d      	b.n	800436c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e038      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
 80042fc:	40023800 	.word	0x40023800
 8004300:	40007000 	.word	0x40007000
 8004304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x4ec>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d028      	beq.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d121      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d11a      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004338:	4013      	ands	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004340:	4293      	cmp	r3, r2
 8004342:	d111      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0cc      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004390:	4b68      	ldr	r3, [pc, #416]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90c      	bls.n	80043b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0b8      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d0:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a58      	ldr	r2, [pc, #352]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e8:	4b53      	ldr	r3, [pc, #332]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a52      	ldr	r2, [pc, #328]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	494d      	ldr	r1, [pc, #308]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d044      	beq.n	800449c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d119      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e07f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d003      	beq.n	800443a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	2b03      	cmp	r3, #3
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e06f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e067      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445a:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f023 0203 	bic.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4934      	ldr	r1, [pc, #208]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800446c:	f7fd fcd2 	bl	8001e14 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	e00a      	b.n	800448a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004474:	f7fd fcce 	bl	8001e14 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e04f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 020c 	and.w	r2, r3, #12
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	429a      	cmp	r2, r3
 800449a:	d1eb      	bne.n	8004474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d20c      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b22      	ldr	r3, [pc, #136]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e032      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4916      	ldr	r1, [pc, #88]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	490e      	ldr	r1, [pc, #56]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004502:	f000 f821 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8004506:	4602      	mov	r2, r0
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	490a      	ldr	r1, [pc, #40]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	fa22 f303 	lsr.w	r3, r2, r3
 800451a:	4a09      	ldr	r2, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd fc32 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023c00 	.word	0x40023c00
 8004538:	40023800 	.word	0x40023800
 800453c:	0800ad90 	.word	0x0800ad90
 8004540:	20000000 	.word	0x20000000
 8004544:	20000004 	.word	0x20000004

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800454c:	b090      	sub	sp, #64	; 0x40
 800454e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
 8004554:	2300      	movs	r3, #0
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004558:	2300      	movs	r3, #0
 800455a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d00d      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x40>
 800456c:	2b08      	cmp	r3, #8
 800456e:	f200 80a1 	bhi.w	80046b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x34>
 8004576:	2b04      	cmp	r3, #4
 8004578:	d003      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x3a>
 800457a:	e09b      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_GetSysClockFreq+0x184>)
 800457e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004580:	e09b      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004582:	4b53      	ldr	r3, [pc, #332]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004584:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004586:	e098      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004592:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d028      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459e:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	099b      	lsrs	r3, r3, #6
 80045a4:	2200      	movs	r2, #0
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	627a      	str	r2, [r7, #36]	; 0x24
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045b0:	2100      	movs	r1, #0
 80045b2:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045b4:	fb03 f201 	mul.w	r2, r3, r1
 80045b8:	2300      	movs	r3, #0
 80045ba:	fb00 f303 	mul.w	r3, r0, r3
 80045be:	4413      	add	r3, r2
 80045c0:	4a43      	ldr	r2, [pc, #268]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045c2:	fba0 1202 	umull	r1, r2, r0, r2
 80045c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c8:	460a      	mov	r2, r1
 80045ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80045cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ce:	4413      	add	r3, r2
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	2200      	movs	r2, #0
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	61fa      	str	r2, [r7, #28]
 80045da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045e2:	f7fc fa6b 	bl	8000abc <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4613      	mov	r3, r2
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ee:	e053      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	2200      	movs	r2, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	617a      	str	r2, [r7, #20]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004602:	f04f 0b00 	mov.w	fp, #0
 8004606:	4652      	mov	r2, sl
 8004608:	465b      	mov	r3, fp
 800460a:	f04f 0000 	mov.w	r0, #0
 800460e:	f04f 0100 	mov.w	r1, #0
 8004612:	0159      	lsls	r1, r3, #5
 8004614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004618:	0150      	lsls	r0, r2, #5
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	ebb2 080a 	subs.w	r8, r2, sl
 8004622:	eb63 090b 	sbc.w	r9, r3, fp
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800463a:	ebb2 0408 	subs.w	r4, r2, r8
 800463e:	eb63 0509 	sbc.w	r5, r3, r9
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	00eb      	lsls	r3, r5, #3
 800464c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004650:	00e2      	lsls	r2, r4, #3
 8004652:	4614      	mov	r4, r2
 8004654:	461d      	mov	r5, r3
 8004656:	eb14 030a 	adds.w	r3, r4, sl
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	eb45 030b 	adc.w	r3, r5, fp
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466e:	4629      	mov	r1, r5
 8004670:	028b      	lsls	r3, r1, #10
 8004672:	4621      	mov	r1, r4
 8004674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004678:	4621      	mov	r1, r4
 800467a:	028a      	lsls	r2, r1, #10
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	2200      	movs	r2, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	60fa      	str	r2, [r7, #12]
 8004688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800468c:	f7fc fa16 	bl	8000abc <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046b2:	e002      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetSysClockFreq+0x184>)
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3740      	adds	r7, #64	; 0x40
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	017d7840 	.word	0x017d7840

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000000 	.word	0x20000000

080046ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07b      	b.n	80047f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d009      	beq.n	8004724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e005      	b.n	8004724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd f876 	bl	8001830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0104 	and.w	r1, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0210 	and.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b088      	sub	sp, #32
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_SPI_Transmit+0x22>
 800481c:	2302      	movs	r3, #2
 800481e:	e12d      	b.n	8004a7c <HAL_SPI_Transmit+0x27e>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004828:	f7fd faf4 	bl	8001e14 <HAL_GetTick>
 800482c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800483e:	2302      	movs	r3, #2
 8004840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004842:	e116      	b.n	8004a72 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x52>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004854:	e10d      	b.n	8004a72 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d10f      	bne.n	80048be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d007      	beq.n	80048dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	d14f      	bne.n	8004986 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0xf6>
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d142      	bne.n	800497a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004918:	e02f      	b.n	800497a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d112      	bne.n	800494e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	881a      	ldrh	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	1c9a      	adds	r2, r3, #2
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	86da      	strh	r2, [r3, #54]	; 0x36
 800494c:	e015      	b.n	800497a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494e:	f7fd fa61 	bl	8001e14 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d803      	bhi.n	8004966 <HAL_SPI_Transmit+0x168>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004964:	d102      	bne.n	800496c <HAL_SPI_Transmit+0x16e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004978:	e07b      	b.n	8004a72 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ca      	bne.n	800491a <HAL_SPI_Transmit+0x11c>
 8004984:	e050      	b.n	8004a28 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_Transmit+0x196>
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d144      	bne.n	8004a1e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ba:	e030      	b.n	8004a1e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d113      	bne.n	80049f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80049f0:	e015      	b.n	8004a1e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f2:	f7fd fa0f 	bl	8001e14 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d803      	bhi.n	8004a0a <HAL_SPI_Transmit+0x20c>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_Transmit+0x212>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a1c:	e029      	b.n	8004a72 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1c9      	bne.n	80049bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fcf1 	bl	8005414 <SPI_EndRxTxTransaction>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e003      	b.n	8004a72 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aa8:	e0fb      	b.n	8004ca2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d112      	bne.n	8004ada <HAL_SPI_Receive+0x56>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10e      	bne.n	8004ada <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f8ef 	bl	8004cb4 <HAL_SPI_TransmitReceive>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	e0e8      	b.n	8004cac <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_SPI_Receive+0x64>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0e1      	b.n	8004cac <HAL_SPI_Receive+0x228>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af0:	f7fd f990 	bl	8001e14 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_SPI_Receive+0x7e>
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b06:	e0cc      	b.n	8004ca2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4e:	d10f      	bne.n	8004b70 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d007      	beq.n	8004b8e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d16a      	bne.n	8004c6c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b96:	e032      	b.n	8004bfe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d115      	bne.n	8004bd2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f103 020c 	add.w	r2, r3, #12
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd0:	e015      	b.n	8004bfe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd2:	f7fd f91f 	bl	8001e14 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d803      	bhi.n	8004bea <HAL_SPI_Receive+0x166>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be8:	d102      	bne.n	8004bf0 <HAL_SPI_Receive+0x16c>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004bfc:	e051      	b.n	8004ca2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1c7      	bne.n	8004b98 <HAL_SPI_Receive+0x114>
 8004c08:	e035      	b.n	8004c76 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d113      	bne.n	8004c40 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	b292      	uxth	r2, r2
 8004c24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	1c9a      	adds	r2, r3, #2
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c3e:	e015      	b.n	8004c6c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c40:	f7fd f8e8 	bl	8001e14 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d803      	bhi.n	8004c58 <HAL_SPI_Receive+0x1d4>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Receive+0x1da>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c6a:	e01a      	b.n	8004ca2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1c9      	bne.n	8004c0a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	6839      	ldr	r1, [r7, #0]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fb64 	bl	8005348 <SPI_EndRxTransaction>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
 8004c98:	e003      	b.n	8004ca2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x26>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e198      	b.n	800500c <HAL_SPI_TransmitReceive+0x358>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce2:	f7fd f897 	bl	8001e14 <HAL_GetTick>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d00f      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x70>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0a:	d107      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x68>
 8004d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d003      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d22:	e16d      	b.n	8005000 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x82>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x82>
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d3c:	e160      	b.n	8005000 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d003      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2205      	movs	r2, #5
 8004d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	887a      	ldrh	r2, [r7, #2]
 8004d74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	887a      	ldrh	r2, [r7, #2]
 8004d7a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d007      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dae:	d17c      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x10a>
 8004db8:	8b7b      	ldrh	r3, [r7, #26]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d16a      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de2:	e057      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d11b      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x176>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d016      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x176>
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d113      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d119      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x1b8>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d014      	beq.n	8004e6c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e6c:	f7fc ffd2 	bl	8001e14 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d80b      	bhi.n	8004e94 <HAL_SPI_TransmitReceive+0x1e0>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e82:	d007      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e92:	e0b5      	b.n	8005000 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1a2      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x130>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d19d      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x130>
 8004ea8:	e080      	b.n	8004fac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x204>
 8004eb2:	8b7b      	ldrh	r3, [r7, #26]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d16f      	bne.n	8004f98 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	7812      	ldrb	r2, [r2, #0]
 8004ec4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ede:	e05b      	b.n	8004f98 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d11c      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x274>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x274>
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d114      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d119      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x2b6>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d014      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f66:	2301      	movs	r3, #1
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f6a:	f7fc ff53 	bl	8001e14 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d803      	bhi.n	8004f82 <HAL_SPI_TransmitReceive+0x2ce>
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2d4>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f96:	e033      	b.n	8005000 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d19e      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x22c>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d199      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fa2f 	bl	8005414 <SPI_EndRxTxTransaction>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fc8:	e01a      	b.n	8005000 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff6:	e003      	b.n	8005000 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10e      	bne.n	8005054 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4798      	blx	r3
    return;
 8005052:	e0ce      	b.n	80051f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <HAL_SPI_IRQHandler+0x5e>
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
    return;
 8005070:	e0bf      	b.n	80051f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <HAL_SPI_IRQHandler+0x7e>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d105      	bne.n	8005092 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80b0 	beq.w	80051f2 <HAL_SPI_IRQHandler+0x1de>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80aa 	beq.w	80051f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d023      	beq.n	80050f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d011      	beq.n	80050d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f043 0204 	orr.w	r2, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e00b      	b.n	80050f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
        return;
 80050ee:	e080      	b.n	80051f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f043 0201 	orr.w	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	f043 0208 	orr.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	2b00      	cmp	r3, #0
 800514e:	d04f      	beq.n	80051f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800515e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <HAL_SPI_IRQHandler+0x168>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d034      	beq.n	80051e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0203 	bic.w	r2, r2, #3
 800518a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d011      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005198:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_SPI_IRQHandler+0x1e4>)
 800519a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fd f827 	bl	80021f4 <HAL_DMA_Abort_IT>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d016      	beq.n	80051ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <HAL_SPI_IRQHandler+0x1e4>)
 80051c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fd f811 	bl	80021f4 <HAL_DMA_Abort_IT>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80051e4:	e003      	b.n	80051ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f808 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051ec:	e000      	b.n	80051f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80051ee:	bf00      	nop
    return;
 80051f0:	bf00      	nop
  }
}
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08005211 	.word	0x08005211

080051fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ffe6 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005248:	f7fc fde4 	bl	8001e14 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	4413      	add	r3, r2
 8005256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005258:	f7fc fddc 	bl	8001e14 <HAL_GetTick>
 800525c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800525e:	4b39      	ldr	r3, [pc, #228]	; (8005344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	015b      	lsls	r3, r3, #5
 8005264:	0d1b      	lsrs	r3, r3, #20
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526e:	e054      	b.n	800531a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005276:	d050      	beq.n	800531a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005278:	f7fc fdcc 	bl	8001e14 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	429a      	cmp	r2, r3
 8005286:	d902      	bls.n	800528e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d13d      	bne.n	800530a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800529c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a6:	d111      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	d004      	beq.n	80052bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ba:	d107      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d4:	d10f      	bne.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e017      	b.n	800533a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3b01      	subs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	429a      	cmp	r2, r3
 8005336:	d19b      	bne.n	8005270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000000 	.word	0x20000000

08005348 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535c:	d111      	bne.n	8005382 <SPI_EndRxTransaction+0x3a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005366:	d004      	beq.n	8005372 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d107      	bne.n	8005382 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538a:	d12a      	bne.n	80053e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005394:	d012      	beq.n	80053bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	2180      	movs	r1, #128	; 0x80
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff ff49 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02d      	beq.n	8005408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e026      	b.n	800540a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2101      	movs	r1, #1
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff ff36 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01a      	beq.n	8005408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e013      	b.n	800540a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2101      	movs	r1, #1
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ff23 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e000      	b.n	800540a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2201      	movs	r2, #1
 8005428:	2102      	movs	r1, #2
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ff04 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f043 0220 	orr.w	r2, r3, #32
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e032      	b.n	80054ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005446:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <SPI_EndRxTxTransaction+0xa0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <SPI_EndRxTxTransaction+0xa4>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	0d5b      	lsrs	r3, r3, #21
 8005452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005464:	d112      	bne.n	800548c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff fee1 	bl	8005238 <SPI_WaitFlagStateUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d016      	beq.n	80054aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e00f      	b.n	80054ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3b01      	subs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d0f2      	beq.n	800548c <SPI_EndRxTxTransaction+0x78>
 80054a6:	e000      	b.n	80054aa <SPI_EndRxTxTransaction+0x96>
        break;
 80054a8:	bf00      	nop
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000000 	.word	0x20000000
 80054b8:	165e9f81 	.word	0x165e9f81

080054bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e041      	b.n	8005552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc fa78 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f000 fbf4 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e041      	b.n	80055f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f839 	bl	80055f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 fba5 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <HAL_TIM_PWM_Start+0x24>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e022      	b.n	8005676 <HAL_TIM_PWM_Start+0x6a>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b04      	cmp	r3, #4
 8005634:	d109      	bne.n	800564a <HAL_TIM_PWM_Start+0x3e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	bf14      	ite	ne
 8005642:	2301      	movne	r3, #1
 8005644:	2300      	moveq	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	e015      	b.n	8005676 <HAL_TIM_PWM_Start+0x6a>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d109      	bne.n	8005664 <HAL_TIM_PWM_Start+0x58>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	e008      	b.n	8005676 <HAL_TIM_PWM_Start+0x6a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e068      	b.n	8005750 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0x82>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800568c:	e013      	b.n	80056b6 <HAL_TIM_PWM_Start+0xaa>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0x92>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	e00b      	b.n	80056b6 <HAL_TIM_PWM_Start+0xaa>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_PWM_Start+0xa2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ac:	e003      	b.n	80056b6 <HAL_TIM_PWM_Start+0xaa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2201      	movs	r2, #1
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fdc4 	bl	800624c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a23      	ldr	r2, [pc, #140]	; (8005758 <HAL_TIM_PWM_Start+0x14c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d107      	bne.n	80056de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <HAL_TIM_PWM_Start+0x14c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_TIM_PWM_Start+0x10e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d013      	beq.n	800571a <HAL_TIM_PWM_Start+0x10e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a19      	ldr	r2, [pc, #100]	; (800575c <HAL_TIM_PWM_Start+0x150>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIM_PWM_Start+0x10e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <HAL_TIM_PWM_Start+0x154>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIM_PWM_Start+0x10e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a16      	ldr	r2, [pc, #88]	; (8005764 <HAL_TIM_PWM_Start+0x158>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIM_PWM_Start+0x10e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <HAL_TIM_PWM_Start+0x15c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d111      	bne.n	800573e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d010      	beq.n	800574e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	e007      	b.n	800574e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40014000 	.word	0x40014000

0800576c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e097      	b.n	80058b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fc f96b 	bl	8001a70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 fa91 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	4313      	orrs	r3, r2
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800580c:	f023 030c 	bic.w	r3, r3, #12
 8005810:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	4313      	orrs	r3, r2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	011a      	lsls	r2, r3, #4
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	031b      	lsls	r3, r3, #12
 800583c:	4313      	orrs	r3, r2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	4313      	orrs	r3, r2
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d110      	bne.n	800590a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ee:	7b7b      	ldrb	r3, [r7, #13]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e069      	b.n	80059cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005908:	e031      	b.n	800596e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d110      	bne.n	8005932 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005916:	7b3b      	ldrb	r3, [r7, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e055      	b.n	80059cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005930:	e01d      	b.n	800596e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d108      	bne.n	800594a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	7b7b      	ldrb	r3, [r7, #13]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d102      	bne.n	800594a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005944:	7b3b      	ldrb	r3, [r7, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d001      	beq.n	800594e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e03e      	b.n	80059cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_TIM_Encoder_Start+0xc4>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d008      	beq.n	800598c <HAL_TIM_Encoder_Start+0xd4>
 800597a:	e00f      	b.n	800599c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fc61 	bl	800624c <TIM_CCxChannelCmd>
      break;
 800598a:	e016      	b.n	80059ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	2104      	movs	r1, #4
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fc59 	bl	800624c <TIM_CCxChannelCmd>
      break;
 800599a:	e00e      	b.n	80059ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fc51 	bl	800624c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2201      	movs	r2, #1
 80059b0:	2104      	movs	r1, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fc4a 	bl	800624c <TIM_CCxChannelCmd>
      break;
 80059b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e0ae      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	f200 809f 	bhi.w	8005b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005b41 	.word	0x08005b41
 8005a10:	08005b41 	.word	0x08005b41
 8005a14:	08005b41 	.word	0x08005b41
 8005a18:	08005a7d 	.word	0x08005a7d
 8005a1c:	08005b41 	.word	0x08005b41
 8005a20:	08005b41 	.word	0x08005b41
 8005a24:	08005b41 	.word	0x08005b41
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005b41 	.word	0x08005b41
 8005a30:	08005b41 	.word	0x08005b41
 8005a34:	08005b41 	.word	0x08005b41
 8005a38:	08005aff 	.word	0x08005aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f9dc 	bl	8005e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0208 	orr.w	r2, r2, #8
 8005a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0204 	bic.w	r2, r2, #4
 8005a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6999      	ldr	r1, [r3, #24]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	619a      	str	r2, [r3, #24]
      break;
 8005a7a:	e064      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fa22 	bl	8005ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6999      	ldr	r1, [r3, #24]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	021a      	lsls	r2, r3, #8
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	619a      	str	r2, [r3, #24]
      break;
 8005abc:	e043      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fa6d 	bl	8005fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0208 	orr.w	r2, r2, #8
 8005ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0204 	bic.w	r2, r2, #4
 8005ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69d9      	ldr	r1, [r3, #28]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	61da      	str	r2, [r3, #28]
      break;
 8005afc:	e023      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fab7 	bl	8006078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69d9      	ldr	r1, [r3, #28]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	021a      	lsls	r2, r3, #8
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	61da      	str	r2, [r3, #28]
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
      break;
 8005b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0b4      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x186>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bac:	d03e      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0xd4>
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	f200 8087 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	f000 8086 	beq.w	8005cca <HAL_TIM_ConfigClockSource+0x172>
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	d87f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d01a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0xa6>
 8005bc8:	2b70      	cmp	r3, #112	; 0x70
 8005bca:	d87b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d050      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x11a>
 8005bd0:	2b60      	cmp	r3, #96	; 0x60
 8005bd2:	d877      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b50      	cmp	r3, #80	; 0x50
 8005bd6:	d03c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0xfa>
 8005bd8:	2b50      	cmp	r3, #80	; 0x50
 8005bda:	d873      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d058      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x13a>
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d86f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d064      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	d86b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d060      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d867      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d05a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	e062      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c0e:	f000 fafd 	bl	800620c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	609a      	str	r2, [r3, #8]
      break;
 8005c2a:	e04f      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3c:	f000 fae6 	bl	800620c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4e:	609a      	str	r2, [r3, #8]
      break;
 8005c50:	e03c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f000 fa5a 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2150      	movs	r1, #80	; 0x50
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fab3 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005c70:	e02c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f000 fa79 	bl	8006176 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2160      	movs	r1, #96	; 0x60
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 faa3 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005c90:	e01c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f000 fa3a 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fa93 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005cb0:	e00c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f000 fa8a 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005cc2:	e003      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a3a      	ldr	r2, [pc, #232]	; (8005de4 <TIM_Base_SetConfig+0xfc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00f      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d00b      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a37      	ldr	r2, [pc, #220]	; (8005de8 <TIM_Base_SetConfig+0x100>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d007      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a36      	ldr	r2, [pc, #216]	; (8005dec <TIM_Base_SetConfig+0x104>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a35      	ldr	r2, [pc, #212]	; (8005df0 <TIM_Base_SetConfig+0x108>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d108      	bne.n	8005d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <TIM_Base_SetConfig+0xfc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01b      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d40:	d017      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a28      	ldr	r2, [pc, #160]	; (8005de8 <TIM_Base_SetConfig+0x100>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a27      	ldr	r2, [pc, #156]	; (8005dec <TIM_Base_SetConfig+0x104>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00f      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a26      	ldr	r2, [pc, #152]	; (8005df0 <TIM_Base_SetConfig+0x108>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00b      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <TIM_Base_SetConfig+0x10c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <TIM_Base_SetConfig+0x110>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d108      	bne.n	8005d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a0e      	ldr	r2, [pc, #56]	; (8005de4 <TIM_Base_SetConfig+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d103      	bne.n	8005db8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f023 0201 	bic.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0201 	bic.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 0302 	bic.w	r3, r3, #2
 8005e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <TIM_OC1_SetConfig+0xc8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10c      	bne.n	8005e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0308 	bic.w	r3, r3, #8
 8005e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0304 	bic.w	r3, r3, #4
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <TIM_OC1_SetConfig+0xc8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d111      	bne.n	8005ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000

08005ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 0210 	bic.w	r2, r3, #16
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <TIM_OC2_SetConfig+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d10d      	bne.n	8005f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC2_SetConfig+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d113      	bne.n	8005f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000

08005fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <TIM_OC3_SetConfig+0xd0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10d      	bne.n	800601e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a14      	ldr	r2, [pc, #80]	; (8006074 <TIM_OC3_SetConfig+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d113      	bne.n	800604e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800602c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40010000 	.word	0x40010000

08006078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	031b      	lsls	r3, r3, #12
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a10      	ldr	r2, [pc, #64]	; (8006114 <TIM_OC4_SetConfig+0x9c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d109      	bne.n	80060ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	019b      	lsls	r3, r3, #6
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000

08006118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 030a 	bic.w	r3, r3, #10
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f023 0210 	bic.w	r2, r3, #16
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	031b      	lsls	r3, r3, #12
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f043 0307 	orr.w	r3, r3, #7
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2201      	movs	r2, #1
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	431a      	orrs	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e050      	b.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d018      	beq.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d013      	beq.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00e      	beq.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d009      	beq.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a13      	ldr	r2, [pc, #76]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10c      	bne.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4313      	orrs	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40014000 	.word	0x40014000

08006374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006374:	b084      	sub	sp, #16
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	f107 001c 	add.w	r0, r7, #28
 8006382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006386:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800638a:	2b01      	cmp	r3, #1
 800638c:	d123      	bne.n	80063d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fae2 	bl	8007994 <USB_CoreReset>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e01b      	b.n	800640e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fad6 	bl	8007994 <USB_CoreReset>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006400:	e005      	b.n	800640e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800640e:	7fbb      	ldrb	r3, [r7, #30]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10b      	bne.n	800642c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f043 0206 	orr.w	r2, r3, #6
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f043 0220 	orr.w	r2, r3, #32
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006438:	b004      	add	sp, #16
 800643a:	4770      	bx	lr

0800643c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d165      	bne.n	800651c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4a41      	ldr	r2, [pc, #260]	; (8006558 <USB_SetTurnaroundTime+0x11c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d906      	bls.n	8006466 <USB_SetTurnaroundTime+0x2a>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a40      	ldr	r2, [pc, #256]	; (800655c <USB_SetTurnaroundTime+0x120>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d202      	bcs.n	8006466 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006460:	230f      	movs	r3, #15
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e062      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a3c      	ldr	r2, [pc, #240]	; (800655c <USB_SetTurnaroundTime+0x120>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d306      	bcc.n	800647c <USB_SetTurnaroundTime+0x40>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a3b      	ldr	r2, [pc, #236]	; (8006560 <USB_SetTurnaroundTime+0x124>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d202      	bcs.n	800647c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006476:	230e      	movs	r3, #14
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e057      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4a38      	ldr	r2, [pc, #224]	; (8006560 <USB_SetTurnaroundTime+0x124>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d306      	bcc.n	8006492 <USB_SetTurnaroundTime+0x56>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a37      	ldr	r2, [pc, #220]	; (8006564 <USB_SetTurnaroundTime+0x128>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d202      	bcs.n	8006492 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800648c:	230d      	movs	r3, #13
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e04c      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a33      	ldr	r2, [pc, #204]	; (8006564 <USB_SetTurnaroundTime+0x128>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d306      	bcc.n	80064a8 <USB_SetTurnaroundTime+0x6c>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a32      	ldr	r2, [pc, #200]	; (8006568 <USB_SetTurnaroundTime+0x12c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d802      	bhi.n	80064a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064a2:	230c      	movs	r3, #12
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e041      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a2f      	ldr	r2, [pc, #188]	; (8006568 <USB_SetTurnaroundTime+0x12c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d906      	bls.n	80064be <USB_SetTurnaroundTime+0x82>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a2e      	ldr	r2, [pc, #184]	; (800656c <USB_SetTurnaroundTime+0x130>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d802      	bhi.n	80064be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064b8:	230b      	movs	r3, #11
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e036      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	; (800656c <USB_SetTurnaroundTime+0x130>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d906      	bls.n	80064d4 <USB_SetTurnaroundTime+0x98>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4a29      	ldr	r2, [pc, #164]	; (8006570 <USB_SetTurnaroundTime+0x134>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d802      	bhi.n	80064d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064ce:	230a      	movs	r3, #10
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e02b      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a26      	ldr	r2, [pc, #152]	; (8006570 <USB_SetTurnaroundTime+0x134>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d906      	bls.n	80064ea <USB_SetTurnaroundTime+0xae>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a25      	ldr	r2, [pc, #148]	; (8006574 <USB_SetTurnaroundTime+0x138>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d202      	bcs.n	80064ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064e4:	2309      	movs	r3, #9
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e020      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <USB_SetTurnaroundTime+0x138>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d306      	bcc.n	8006500 <USB_SetTurnaroundTime+0xc4>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4a20      	ldr	r2, [pc, #128]	; (8006578 <USB_SetTurnaroundTime+0x13c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d802      	bhi.n	8006500 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064fa:	2308      	movs	r3, #8
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e015      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <USB_SetTurnaroundTime+0x13c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d906      	bls.n	8006516 <USB_SetTurnaroundTime+0xda>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <USB_SetTurnaroundTime+0x140>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d202      	bcs.n	8006516 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006510:	2307      	movs	r3, #7
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e00a      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006516:	2306      	movs	r3, #6
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e007      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006522:	2309      	movs	r3, #9
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e001      	b.n	800652c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006528:	2309      	movs	r3, #9
 800652a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	029b      	lsls	r3, r3, #10
 8006540:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	00d8acbf 	.word	0x00d8acbf
 800655c:	00e4e1c0 	.word	0x00e4e1c0
 8006560:	00f42400 	.word	0x00f42400
 8006564:	01067380 	.word	0x01067380
 8006568:	011a499f 	.word	0x011a499f
 800656c:	01312cff 	.word	0x01312cff
 8006570:	014ca43f 	.word	0x014ca43f
 8006574:	016e3600 	.word	0x016e3600
 8006578:	01a6ab1f 	.word	0x01a6ab1f
 800657c:	01e84800 	.word	0x01e84800

08006580 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f043 0201 	orr.w	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d115      	bne.n	8006612 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065f2:	200a      	movs	r0, #10
 80065f4:	f7fb fc1a 	bl	8001e2c <HAL_Delay>
      ms += 10U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	330a      	adds	r3, #10
 80065fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f939 	bl	8007876 <USB_GetMode>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d01e      	beq.n	8006648 <USB_SetCurrentMode+0x84>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2bc7      	cmp	r3, #199	; 0xc7
 800660e:	d9f0      	bls.n	80065f2 <USB_SetCurrentMode+0x2e>
 8006610:	e01a      	b.n	8006648 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d115      	bne.n	8006644 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006624:	200a      	movs	r0, #10
 8006626:	f7fb fc01 	bl	8001e2c <HAL_Delay>
      ms += 10U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	330a      	adds	r3, #10
 800662e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f920 	bl	8007876 <USB_GetMode>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <USB_SetCurrentMode+0x84>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2bc7      	cmp	r3, #199	; 0xc7
 8006640:	d9f0      	bls.n	8006624 <USB_SetCurrentMode+0x60>
 8006642:	e001      	b.n	8006648 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e005      	b.n	8006654 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2bc8      	cmp	r3, #200	; 0xc8
 800664c:	d101      	bne.n	8006652 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800665c:	b084      	sub	sp, #16
 800665e:	b580      	push	{r7, lr}
 8006660:	b086      	sub	sp, #24
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800666a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e009      	b.n	8006690 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3340      	adds	r3, #64	; 0x40
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	2200      	movs	r2, #0
 8006688:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3301      	adds	r3, #1
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b0e      	cmp	r3, #14
 8006694:	d9f2      	bls.n	800667c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006696:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800669a:	2b00      	cmp	r3, #0
 800669c:	d11c      	bne.n	80066d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ac:	f043 0302 	orr.w	r3, r3, #2
 80066b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
 80066d6:	e00b      	b.n	80066f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f6:	461a      	mov	r2, r3
 80066f8:	2300      	movs	r3, #0
 80066fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10d      	bne.n	8006720 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800670c:	2100      	movs	r1, #0
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f968 	bl	80069e4 <USB_SetDevSpeed>
 8006714:	e008      	b.n	8006728 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006716:	2101      	movs	r1, #1
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f963 	bl	80069e4 <USB_SetDevSpeed>
 800671e:	e003      	b.n	8006728 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006720:	2103      	movs	r1, #3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f95e 	bl	80069e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006728:	2110      	movs	r1, #16
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8fa 	bl	8006924 <USB_FlushTxFifo>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f924 	bl	8006988 <USB_FlushRxFifo>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	461a      	mov	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	e043      	b.n	80067fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678a:	d118      	bne.n	80067be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	461a      	mov	r2, r3
 80067a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	e013      	b.n	80067d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	461a      	mov	r2, r3
 80067b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	e008      	b.n	80067d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	461a      	mov	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	461a      	mov	r2, r3
 80067f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	3301      	adds	r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006800:	461a      	mov	r2, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4293      	cmp	r3, r2
 8006806:	d3b5      	bcc.n	8006774 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	e043      	b.n	8006896 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006824:	d118      	bne.n	8006858 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e013      	b.n	800686a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	461a      	mov	r2, r3
 8006850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e008      	b.n	800686a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006864:	461a      	mov	r2, r3
 8006866:	2300      	movs	r3, #0
 8006868:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	461a      	mov	r2, r3
 8006878:	2300      	movs	r3, #0
 800687a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	461a      	mov	r2, r3
 800688a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800688e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3301      	adds	r3, #1
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800689a:	461a      	mov	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4293      	cmp	r3, r2
 80068a0:	d3b5      	bcc.n	800680e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f043 0210 	orr.w	r2, r3, #16
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <USB_DevInit+0x2c4>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f043 0208 	orr.w	r2, r3, #8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d107      	bne.n	8006910 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006908:	f043 0304 	orr.w	r3, r3, #4
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800691c:	b004      	add	sp, #16
 800691e:	4770      	bx	lr
 8006920:	803c3800 	.word	0x803c3800

08006924 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800693e:	d901      	bls.n	8006944 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e01b      	b.n	800697c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	daf2      	bge.n	8006932 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	019b      	lsls	r3, r3, #6
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006968:	d901      	bls.n	800696e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e006      	b.n	800697c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b20      	cmp	r3, #32
 8006978:	d0f0      	beq.n	800695c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069a0:	d901      	bls.n	80069a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e018      	b.n	80069d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	daf2      	bge.n	8006994 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2210      	movs	r2, #16
 80069b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069c4:	d901      	bls.n	80069ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e006      	b.n	80069d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d0f0      	beq.n	80069b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a04:	4313      	orrs	r3, r2
 8006a06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b087      	sub	sp, #28
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0306 	and.w	r3, r3, #6
 8006a2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
 8006a3a:	e00a      	b.n	8006a52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d002      	beq.n	8006a48 <USB_GetDevSpeed+0x32>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b06      	cmp	r3, #6
 8006a46:	d102      	bne.n	8006a4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	75fb      	strb	r3, [r7, #23]
 8006a4c:	e001      	b.n	8006a52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a4e:	230f      	movs	r3, #15
 8006a50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d13a      	bne.n	8006af2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d155      	bne.n	8006b60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	791b      	ldrb	r3, [r3, #4]
 8006ace:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	059b      	lsls	r3, r3, #22
 8006ad6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	e036      	b.n	8006b60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	2101      	movs	r1, #1
 8006b04:	fa01 f303 	lsl.w	r3, r1, r3
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b10:	4313      	orrs	r3, r2
 8006b12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11a      	bne.n	8006b60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	791b      	ldrb	r3, [r3, #4]
 8006b44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b46:	430b      	orrs	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d161      	bne.n	8006c50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba2:	d11f      	bne.n	8006be4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4013      	ands	r3, r2
 8006c06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	2101      	movs	r1, #1
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	43db      	mvns	r3, r3
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c28:	4013      	ands	r3, r2
 8006c2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	0159      	lsls	r1, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	440b      	add	r3, r1
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	4619      	mov	r1, r3
 8006c48:	4b35      	ldr	r3, [pc, #212]	; (8006d20 <USB_DeactivateEndpoint+0x1b0>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]
 8006c4e:	e060      	b.n	8006d12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c66:	d11f      	bne.n	8006ca8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	2101      	movs	r1, #1
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc8:	4013      	ands	r3, r2
 8006cca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	2101      	movs	r1, #1
 8006cde:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	68f9      	ldr	r1, [r7, #12]
 8006ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cec:	4013      	ands	r3, r2
 8006cee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	0159      	lsls	r1, r3, #5
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	440b      	add	r3, r1
 8006d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <USB_DeactivateEndpoint+0x1b4>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	ec337800 	.word	0xec337800
 8006d24:	eff37800 	.word	0xeff37800

08006d28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 817a 	bne.w	800703e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d132      	bne.n	8006db8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	0cdb      	lsrs	r3, r3, #19
 8006db2:	04db      	lsls	r3, r3, #19
 8006db4:	6113      	str	r3, [r2, #16]
 8006db6:	e092      	b.n	8006ede <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	0cdb      	lsrs	r3, r3, #19
 8006dd4:	04db      	lsls	r3, r3, #19
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11a      	bne.n	8006e38 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d903      	bls.n	8006e16 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e34:	6113      	str	r3, [r2, #16]
 8006e36:	e01b      	b.n	8006e70 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6919      	ldr	r1, [r3, #16]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	440b      	add	r3, r1
 8006e50:	1e59      	subs	r1, r3, #1
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e5a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e5c:	4ba2      	ldr	r3, [pc, #648]	; (80070e8 <USB_EPStartXfer+0x3c0>)
 8006e5e:	400b      	ands	r3, r1
 8006e60:	69b9      	ldr	r1, [r7, #24]
 8006e62:	0148      	lsls	r0, r1, #5
 8006e64:	69f9      	ldr	r1, [r7, #28]
 8006e66:	4401      	add	r1, r0
 8006e68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e86:	69b9      	ldr	r1, [r7, #24]
 8006e88:	0148      	lsls	r0, r1, #5
 8006e8a:	69f9      	ldr	r1, [r7, #28]
 8006e8c:	4401      	add	r1, r0
 8006e8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e92:	4313      	orrs	r3, r2
 8006e94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	791b      	ldrb	r3, [r3, #4]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d11f      	bne.n	8006ede <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ebc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006edc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d14b      	bne.n	8006f7c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	791b      	ldrb	r3, [r3, #4]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d128      	bne.n	8006f5a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d110      	bne.n	8006f3a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	e00f      	b.n	8006f5a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e165      	b.n	8007248 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	791b      	ldrb	r3, [r3, #4]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d015      	beq.n	8006fd0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 814d 	beq.w	8007248 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc4:	69f9      	ldr	r1, [r7, #28]
 8006fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8006fce:	e13b      	b.n	8007248 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d110      	bne.n	8007002 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	e00f      	b.n	8007022 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007020:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	b298      	uxth	r0, r3
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4603      	mov	r3, r0
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f9b8 	bl	80073ac <USB_WritePacket>
 800703c:	e104      	b.n	8007248 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007058:	0cdb      	lsrs	r3, r3, #19
 800705a:	04db      	lsls	r3, r3, #19
 800705c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	440a      	add	r2, r1
 8007074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800707c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007080:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d131      	bne.n	80070ec <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b6:	69b9      	ldr	r1, [r7, #24]
 80070b8:	0148      	lsls	r0, r1, #5
 80070ba:	69f9      	ldr	r1, [r7, #28]
 80070bc:	4401      	add	r1, r0
 80070be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070c2:	4313      	orrs	r3, r2
 80070c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070e4:	6113      	str	r3, [r2, #16]
 80070e6:	e061      	b.n	80071ac <USB_EPStartXfer+0x484>
 80070e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d123      	bne.n	800713c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710a:	69b9      	ldr	r1, [r7, #24]
 800710c:	0148      	lsls	r0, r1, #5
 800710e:	69f9      	ldr	r1, [r7, #28]
 8007110:	4401      	add	r1, r0
 8007112:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007116:	4313      	orrs	r3, r2
 8007118:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	440a      	add	r2, r1
 8007130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007138:	6113      	str	r3, [r2, #16]
 800713a:	e037      	b.n	80071ac <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4413      	add	r3, r2
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	8afa      	ldrh	r2, [r7, #22]
 8007158:	fb03 f202 	mul.w	r2, r3, r2
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	8afb      	ldrh	r3, [r7, #22]
 8007170:	04d9      	lsls	r1, r3, #19
 8007172:	4b38      	ldr	r3, [pc, #224]	; (8007254 <USB_EPStartXfer+0x52c>)
 8007174:	400b      	ands	r3, r1
 8007176:	69b9      	ldr	r1, [r7, #24]
 8007178:	0148      	lsls	r0, r1, #5
 800717a:	69f9      	ldr	r1, [r7, #28]
 800717c:	4401      	add	r1, r0
 800717e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007182:	4313      	orrs	r3, r2
 8007184:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	0148      	lsls	r0, r1, #5
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	4401      	add	r1, r0
 80071a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071a8:	4313      	orrs	r3, r2
 80071aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10d      	bne.n	80071ce <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	68d9      	ldr	r1, [r3, #12]
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	460a      	mov	r2, r1
 80071cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d128      	bne.n	8007228 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d110      	bne.n	8007208 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e00f      	b.n	8007228 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	0151      	lsls	r1, r2, #5
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	440a      	add	r2, r1
 800721e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007226:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	1ff80000 	.word	0x1ff80000

08007258 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d14a      	bne.n	800730c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800728a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800728e:	f040 8086 	bne.w	800739e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d902      	bls.n	80072f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
          break;
 80072ee:	e056      	b.n	800739e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007308:	d0e7      	beq.n	80072da <USB_EPStopXfer+0x82>
 800730a:	e048      	b.n	800739e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007324:	d13b      	bne.n	800739e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007348:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f242 7210 	movw	r2, #10000	; 0x2710
 800737a:	4293      	cmp	r3, r2
 800737c:	d902      	bls.n	8007384 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]
          break;
 8007382:	e00c      	b.n	800739e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800739c:	d0e7      	beq.n	800736e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b089      	sub	sp, #36	; 0x24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4611      	mov	r1, r2
 80073b8:	461a      	mov	r2, r3
 80073ba:	460b      	mov	r3, r1
 80073bc:	71fb      	strb	r3, [r7, #7]
 80073be:	4613      	mov	r3, r2
 80073c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d123      	bne.n	800741a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073d2:	88bb      	ldrh	r3, [r7, #4]
 80073d4:	3303      	adds	r3, #3
 80073d6:	089b      	lsrs	r3, r3, #2
 80073d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073da:	2300      	movs	r3, #0
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	e018      	b.n	8007412 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	031a      	lsls	r2, r3, #12
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ec:	461a      	mov	r2, r3
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3301      	adds	r3, #1
 80073f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3301      	adds	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3301      	adds	r3, #1
 800740a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	3301      	adds	r3, #1
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	429a      	cmp	r2, r3
 8007418:	d3e2      	bcc.n	80073e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3724      	adds	r7, #36	; 0x24
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007428:	b480      	push	{r7}
 800742a:	b08b      	sub	sp, #44	; 0x2c
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	089b      	lsrs	r3, r3, #2
 8007442:	b29b      	uxth	r3, r3
 8007444:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800744e:	2300      	movs	r3, #0
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	e014      	b.n	800747e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	3301      	adds	r3, #1
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	3301      	adds	r3, #1
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	3301      	adds	r3, #1
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	3301      	adds	r3, #1
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	3301      	adds	r3, #1
 800747c:	623b      	str	r3, [r7, #32]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	429a      	cmp	r2, r3
 8007484:	d3e6      	bcc.n	8007454 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007486:	8bfb      	ldrh	r3, [r7, #30]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01e      	beq.n	80074ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007496:	461a      	mov	r2, r3
 8007498:	f107 0310 	add.w	r3, r7, #16
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	701a      	strb	r2, [r3, #0]
      i++;
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	3301      	adds	r3, #1
 80074b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	3301      	adds	r3, #1
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074be:	8bfb      	ldrh	r3, [r7, #30]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074c4:	8bfb      	ldrh	r3, [r7, #30]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1ea      	bne.n	80074a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	372c      	adds	r7, #44	; 0x2c
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d12c      	bne.n	800754e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	db12      	blt.n	800752c <USB_EPSetStall+0x54>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00f      	beq.n	800752c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	0151      	lsls	r1, r2, #5
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	440a      	add	r2, r1
 8007522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007526:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800752a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e02b      	b.n	80075a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	db12      	blt.n	8007586 <USB_EPSetStall+0xae>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007584:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d128      	bne.n	8007622 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	791b      	ldrb	r3, [r3, #4]
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d003      	beq.n	8007600 <USB_EPClearStall+0x4c>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d138      	bne.n	8007672 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e027      	b.n	8007672 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800763c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007640:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	791b      	ldrb	r3, [r3, #4]
 8007646:	2b03      	cmp	r3, #3
 8007648:	d003      	beq.n	8007652 <USB_EPClearStall+0x9e>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d10f      	bne.n	8007672 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	440a      	add	r2, r1
 8007668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007670:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800769e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076b4:	68f9      	ldr	r1, [r7, #12]
 80076b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076fa:	f023 0302 	bic.w	r3, r3, #2
 80076fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007728:	f023 0303 	bic.w	r3, r3, #3
 800772c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800773c:	f043 0302 	orr.w	r3, r3, #2
 8007740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4013      	ands	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007768:	68fb      	ldr	r3, [r7, #12]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	4013      	ands	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	0c1b      	lsrs	r3, r3, #16
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4013      	ands	r3, r2
 80077cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	b29b      	uxth	r3, r3
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	4013      	ands	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800780c:	68bb      	ldr	r3, [r7, #8]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	01db      	lsls	r3, r3, #7
 800784c:	b2db      	uxtb	r3, r3
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4013      	ands	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007868:	68bb      	ldr	r3, [r7, #8]
}
 800786a:	4618      	mov	r0, r3
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0301 	and.w	r3, r3, #1
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078b0:	f023 0307 	bic.w	r3, r3, #7
 80078b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	460b      	mov	r3, r1
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	333c      	adds	r3, #60	; 0x3c
 80078ee:	3304      	adds	r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4a26      	ldr	r2, [pc, #152]	; (8007990 <USB_EP0_OutStart+0xb8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d90a      	bls.n	8007912 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790c:	d101      	bne.n	8007912 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e037      	b.n	8007982 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007918:	461a      	mov	r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007940:	f043 0318 	orr.w	r3, r3, #24
 8007944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007954:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007958:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10f      	bne.n	8007980 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800797e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	4f54300a 	.word	0x4f54300a

08007994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079ac:	d901      	bls.n	80079b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e01b      	b.n	80079ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	daf2      	bge.n	80079a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f043 0201 	orr.w	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079d6:	d901      	bls.n	80079dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e006      	b.n	80079ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d0f0      	beq.n	80079ca <USB_CoreReset+0x36>

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
	...

080079f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a08:	f002 fc8a 	bl	800a320 <USBD_static_malloc>
 8007a0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	32b0      	adds	r2, #176	; 0xb0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a24:	2302      	movs	r3, #2
 8007a26:	e0d4      	b.n	8007bd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f002 fcda 	bl	800a3e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	32b0      	adds	r2, #176	; 0xb0
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32b0      	adds	r2, #176	; 0xb0
 8007a4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7c1b      	ldrb	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d138      	bne.n	8007ad2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a60:	4b5e      	ldr	r3, [pc, #376]	; (8007bdc <USBD_CDC_Init+0x1e4>)
 8007a62:	7819      	ldrb	r1, [r3, #0]
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a68:	2202      	movs	r2, #2
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f002 fb35 	bl	800a0da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a70:	4b5a      	ldr	r3, [pc, #360]	; (8007bdc <USBD_CDC_Init+0x1e4>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	f003 020f 	and.w	r2, r3, #15
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	2201      	movs	r2, #1
 8007a88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a8a:	4b55      	ldr	r3, [pc, #340]	; (8007be0 <USBD_CDC_Init+0x1e8>)
 8007a8c:	7819      	ldrb	r1, [r3, #0]
 8007a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a92:	2202      	movs	r2, #2
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f002 fb20 	bl	800a0da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a9a:	4b51      	ldr	r3, [pc, #324]	; (8007be0 <USBD_CDC_Init+0x1e8>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 020f 	and.w	r2, r3, #15
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	440b      	add	r3, r1
 8007aae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ab6:	4b4b      	ldr	r3, [pc, #300]	; (8007be4 <USBD_CDC_Init+0x1ec>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	3326      	adds	r3, #38	; 0x26
 8007acc:	2210      	movs	r2, #16
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e035      	b.n	8007b3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ad2:	4b42      	ldr	r3, [pc, #264]	; (8007bdc <USBD_CDC_Init+0x1e4>)
 8007ad4:	7819      	ldrb	r1, [r3, #0]
 8007ad6:	2340      	movs	r3, #64	; 0x40
 8007ad8:	2202      	movs	r2, #2
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f002 fafd 	bl	800a0da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ae0:	4b3e      	ldr	r3, [pc, #248]	; (8007bdc <USBD_CDC_Init+0x1e4>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 020f 	and.w	r2, r3, #15
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	3324      	adds	r3, #36	; 0x24
 8007af6:	2201      	movs	r2, #1
 8007af8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007afa:	4b39      	ldr	r3, [pc, #228]	; (8007be0 <USBD_CDC_Init+0x1e8>)
 8007afc:	7819      	ldrb	r1, [r3, #0]
 8007afe:	2340      	movs	r3, #64	; 0x40
 8007b00:	2202      	movs	r2, #2
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f002 fae9 	bl	800a0da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b08:	4b35      	ldr	r3, [pc, #212]	; (8007be0 <USBD_CDC_Init+0x1e8>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b20:	2201      	movs	r2, #1
 8007b22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b24:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <USBD_CDC_Init+0x1ec>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	f003 020f 	and.w	r2, r3, #15
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	3326      	adds	r3, #38	; 0x26
 8007b3a:	2210      	movs	r2, #16
 8007b3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b3e:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <USBD_CDC_Init+0x1ec>)
 8007b40:	7819      	ldrb	r1, [r3, #0]
 8007b42:	2308      	movs	r3, #8
 8007b44:	2203      	movs	r2, #3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f002 fac7 	bl	800a0da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b4c:	4b25      	ldr	r3, [pc, #148]	; (8007be4 <USBD_CDC_Init+0x1ec>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f003 020f 	and.w	r2, r3, #15
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	3324      	adds	r3, #36	; 0x24
 8007b62:	2201      	movs	r2, #1
 8007b64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	33b0      	adds	r3, #176	; 0xb0
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e018      	b.n	8007bd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7c1b      	ldrb	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <USBD_CDC_Init+0x1e8>)
 8007baa:	7819      	ldrb	r1, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f002 fb7e 	bl	800a2b8 <USBD_LL_PrepareReceive>
 8007bbc:	e008      	b.n	8007bd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bbe:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <USBD_CDC_Init+0x1e8>)
 8007bc0:	7819      	ldrb	r1, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f002 fb74 	bl	800a2b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000093 	.word	0x20000093
 8007be0:	20000094 	.word	0x20000094
 8007be4:	20000095 	.word	0x20000095

08007be8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007bf4:	4b3a      	ldr	r3, [pc, #232]	; (8007ce0 <USBD_CDC_DeInit+0xf8>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f002 fa93 	bl	800a126 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c00:	4b37      	ldr	r3, [pc, #220]	; (8007ce0 <USBD_CDC_DeInit+0xf8>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 020f 	and.w	r2, r3, #15
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	3324      	adds	r3, #36	; 0x24
 8007c16:	2200      	movs	r2, #0
 8007c18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c1a:	4b32      	ldr	r3, [pc, #200]	; (8007ce4 <USBD_CDC_DeInit+0xfc>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f002 fa80 	bl	800a126 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c26:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <USBD_CDC_DeInit+0xfc>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 020f 	and.w	r2, r3, #15
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c3e:	2200      	movs	r2, #0
 8007c40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c42:	4b29      	ldr	r3, [pc, #164]	; (8007ce8 <USBD_CDC_DeInit+0x100>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f002 fa6c 	bl	800a126 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c4e:	4b26      	ldr	r3, [pc, #152]	; (8007ce8 <USBD_CDC_DeInit+0x100>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f003 020f 	and.w	r2, r3, #15
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	2200      	movs	r2, #0
 8007c66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c68:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <USBD_CDC_DeInit+0x100>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3326      	adds	r3, #38	; 0x26
 8007c7e:	2200      	movs	r2, #0
 8007c80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	32b0      	adds	r2, #176	; 0xb0
 8007c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01f      	beq.n	8007cd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	33b0      	adds	r3, #176	; 0xb0
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32b0      	adds	r2, #176	; 0xb0
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f002 fb40 	bl	800a33c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32b0      	adds	r2, #176	; 0xb0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000093 	.word	0x20000093
 8007ce4:	20000094 	.word	0x20000094
 8007ce8:	20000095 	.word	0x20000095

08007cec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32b0      	adds	r2, #176	; 0xb0
 8007d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e0bf      	b.n	8007e9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d050      	beq.n	8007dca <USBD_CDC_Setup+0xde>
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	f040 80af 	bne.w	8007e8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d03a      	beq.n	8007dac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da1b      	bge.n	8007d78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	33b0      	adds	r3, #176	; 0xb0
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	88d2      	ldrh	r2, [r2, #6]
 8007d5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	2b07      	cmp	r3, #7
 8007d64:	bf28      	it	cs
 8007d66:	2307      	movcs	r3, #7
 8007d68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	89fa      	ldrh	r2, [r7, #14]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fd89 	bl	8009888 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d76:	e090      	b.n	8007e9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	785a      	ldrb	r2, [r3, #1]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	88db      	ldrh	r3, [r3, #6]
 8007d86:	2b3f      	cmp	r3, #63	; 0x3f
 8007d88:	d803      	bhi.n	8007d92 <USBD_CDC_Setup+0xa6>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	e000      	b.n	8007d94 <USBD_CDC_Setup+0xa8>
 8007d92:	2240      	movs	r2, #64	; 0x40
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d9a:	6939      	ldr	r1, [r7, #16]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007da2:	461a      	mov	r2, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fd9b 	bl	80098e0 <USBD_CtlPrepareRx>
      break;
 8007daa:	e076      	b.n	8007e9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	33b0      	adds	r3, #176	; 0xb0
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	7850      	ldrb	r0, [r2, #1]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	4798      	blx	r3
      break;
 8007dc8:	e067      	b.n	8007e9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b0b      	cmp	r3, #11
 8007dd0:	d851      	bhi.n	8007e76 <USBD_CDC_Setup+0x18a>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <USBD_CDC_Setup+0xec>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e09 	.word	0x08007e09
 8007ddc:	08007e85 	.word	0x08007e85
 8007de0:	08007e77 	.word	0x08007e77
 8007de4:	08007e77 	.word	0x08007e77
 8007de8:	08007e77 	.word	0x08007e77
 8007dec:	08007e77 	.word	0x08007e77
 8007df0:	08007e77 	.word	0x08007e77
 8007df4:	08007e77 	.word	0x08007e77
 8007df8:	08007e77 	.word	0x08007e77
 8007dfc:	08007e77 	.word	0x08007e77
 8007e00:	08007e33 	.word	0x08007e33
 8007e04:	08007e5d 	.word	0x08007e5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d107      	bne.n	8007e24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e14:	f107 030a 	add.w	r3, r7, #10
 8007e18:	2202      	movs	r2, #2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fd33 	bl	8009888 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e22:	e032      	b.n	8007e8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fcbd 	bl	80097a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e30:	e02b      	b.n	8007e8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d107      	bne.n	8007e4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e3e:	f107 030d 	add.w	r3, r7, #13
 8007e42:	2201      	movs	r2, #1
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fd1e 	bl	8009888 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e4c:	e01d      	b.n	8007e8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fca8 	bl	80097a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e56:	2303      	movs	r3, #3
 8007e58:	75fb      	strb	r3, [r7, #23]
          break;
 8007e5a:	e016      	b.n	8007e8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d00f      	beq.n	8007e88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 fc9b 	bl	80097a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e70:	2303      	movs	r3, #3
 8007e72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e74:	e008      	b.n	8007e88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fc94 	bl	80097a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	75fb      	strb	r3, [r7, #23]
          break;
 8007e82:	e002      	b.n	8007e8a <USBD_CDC_Setup+0x19e>
          break;
 8007e84:	bf00      	nop
 8007e86:	e008      	b.n	8007e9a <USBD_CDC_Setup+0x1ae>
          break;
 8007e88:	bf00      	nop
      }
      break;
 8007e8a:	e006      	b.n	8007e9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 fc89 	bl	80097a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32b0      	adds	r2, #176	; 0xb0
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e065      	b.n	8007f9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	32b0      	adds	r2, #176	; 0xb0
 8007ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007edc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	f003 020f 	and.w	r2, r3, #15
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02f      	beq.n	8007f58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	f003 020f 	and.w	r2, r3, #15
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	3318      	adds	r3, #24
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	f003 010f 	and.w	r1, r3, #15
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	460b      	mov	r3, r1
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	440b      	add	r3, r1
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4403      	add	r3, r0
 8007f20:	331c      	adds	r3, #28
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d112      	bne.n	8007f58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	3318      	adds	r3, #24
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f4a:	78f9      	ldrb	r1, [r7, #3]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f002 f990 	bl	800a276 <USBD_LL_Transmit>
 8007f56:	e01f      	b.n	8007f98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	33b0      	adds	r3, #176	; 0xb0
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d010      	beq.n	8007f98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	33b0      	adds	r3, #176	; 0xb0
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	32b0      	adds	r2, #176	; 0xb0
 8007fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	32b0      	adds	r2, #176	; 0xb0
 8007fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e01a      	b.n	800800a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f002 f98e 	bl	800a2fa <USBD_LL_GetRxDataSize>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	33b0      	adds	r3, #176	; 0xb0
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008004:	4611      	mov	r1, r2
 8008006:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	32b0      	adds	r2, #176	; 0xb0
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e025      	b.n	8008080 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	33b0      	adds	r3, #176	; 0xb0
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01a      	beq.n	800807e <USBD_CDC_EP0_RxReady+0x6c>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800804e:	2bff      	cmp	r3, #255	; 0xff
 8008050:	d015      	beq.n	800807e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	33b0      	adds	r3, #176	; 0xb0
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800806a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008072:	b292      	uxth	r2, r2
 8008074:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	22ff      	movs	r2, #255	; 0xff
 800807a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008090:	2182      	movs	r1, #130	; 0x82
 8008092:	4818      	ldr	r0, [pc, #96]	; (80080f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008094:	f000 fd4f 	bl	8008b36 <USBD_GetEpDesc>
 8008098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800809a:	2101      	movs	r1, #1
 800809c:	4815      	ldr	r0, [pc, #84]	; (80080f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800809e:	f000 fd4a 	bl	8008b36 <USBD_GetEpDesc>
 80080a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080a4:	2181      	movs	r1, #129	; 0x81
 80080a6:	4813      	ldr	r0, [pc, #76]	; (80080f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080a8:	f000 fd45 	bl	8008b36 <USBD_GetEpDesc>
 80080ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2210      	movs	r2, #16
 80080b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d006      	beq.n	80080ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c8:	711a      	strb	r2, [r3, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d006      	beq.n	80080e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080dc:	711a      	strb	r2, [r3, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2243      	movs	r2, #67	; 0x43
 80080e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080e8:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000050 	.word	0x20000050

080080f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008100:	2182      	movs	r1, #130	; 0x82
 8008102:	4818      	ldr	r0, [pc, #96]	; (8008164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008104:	f000 fd17 	bl	8008b36 <USBD_GetEpDesc>
 8008108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800810a:	2101      	movs	r1, #1
 800810c:	4815      	ldr	r0, [pc, #84]	; (8008164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800810e:	f000 fd12 	bl	8008b36 <USBD_GetEpDesc>
 8008112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008114:	2181      	movs	r1, #129	; 0x81
 8008116:	4813      	ldr	r0, [pc, #76]	; (8008164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008118:	f000 fd0d 	bl	8008b36 <USBD_GetEpDesc>
 800811c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2210      	movs	r2, #16
 8008128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d006      	beq.n	800813e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2200      	movs	r2, #0
 8008134:	711a      	strb	r2, [r3, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f042 0202 	orr.w	r2, r2, #2
 800813c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d006      	beq.n	8008152 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	711a      	strb	r2, [r3, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f042 0202 	orr.w	r2, r2, #2
 8008150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2243      	movs	r2, #67	; 0x43
 8008156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000050 	.word	0x20000050

08008168 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008170:	2182      	movs	r1, #130	; 0x82
 8008172:	4818      	ldr	r0, [pc, #96]	; (80081d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008174:	f000 fcdf 	bl	8008b36 <USBD_GetEpDesc>
 8008178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800817a:	2101      	movs	r1, #1
 800817c:	4815      	ldr	r0, [pc, #84]	; (80081d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800817e:	f000 fcda 	bl	8008b36 <USBD_GetEpDesc>
 8008182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008184:	2181      	movs	r1, #129	; 0x81
 8008186:	4813      	ldr	r0, [pc, #76]	; (80081d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008188:	f000 fcd5 	bl	8008b36 <USBD_GetEpDesc>
 800818c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2210      	movs	r2, #16
 8008198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d006      	beq.n	80081ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a8:	711a      	strb	r2, [r3, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d006      	beq.n	80081c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081bc:	711a      	strb	r2, [r3, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2243      	movs	r2, #67	; 0x43
 80081c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000050 	.word	0x20000050

080081d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	220a      	movs	r2, #10
 80081e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	2000000c 	.word	0x2000000c

080081f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	e009      	b.n	8008220 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	33b0      	adds	r3, #176	; 0xb0
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	32b0      	adds	r2, #176	; 0xb0
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800824e:	2303      	movs	r3, #3
 8008250:	e008      	b.n	8008264 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	32b0      	adds	r2, #176	; 0xb0
 8008284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008288:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008290:	2303      	movs	r3, #3
 8008292:	e004      	b.n	800829e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32b0      	adds	r2, #176	; 0xb0
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e025      	b.n	800831e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11f      	bne.n	800831c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80082e4:	4b10      	ldr	r3, [pc, #64]	; (8008328 <USBD_CDC_TransmitPacket+0x7c>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 020f 	and.w	r2, r3, #15
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4403      	add	r3, r0
 80082fe:	3318      	adds	r3, #24
 8008300:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <USBD_CDC_TransmitPacket+0x7c>)
 8008304:	7819      	ldrb	r1, [r3, #0]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 ffaf 	bl	800a276 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000093 	.word	0x20000093

0800832c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	32b0      	adds	r2, #176	; 0xb0
 800833e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008342:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	32b0      	adds	r2, #176	; 0xb0
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008356:	2303      	movs	r3, #3
 8008358:	e018      	b.n	800838c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7c1b      	ldrb	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <USBD_CDC_ReceivePacket+0x68>)
 8008364:	7819      	ldrb	r1, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800836c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 ffa1 	bl	800a2b8 <USBD_LL_PrepareReceive>
 8008376:	e008      	b.n	800838a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008378:	4b06      	ldr	r3, [pc, #24]	; (8008394 <USBD_CDC_ReceivePacket+0x68>)
 800837a:	7819      	ldrb	r1, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008382:	2340      	movs	r3, #64	; 0x40
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 ff97 	bl	800a2b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000094 	.word	0x20000094

08008398 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e01f      	b.n	80083f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	79fa      	ldrb	r2, [r7, #7]
 80083e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f001 fe11 	bl	800a00c <USBD_LL_Init>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	e025      	b.n	800845c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	32ae      	adds	r2, #174	; 0xae
 8008422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	; 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	f107 020e 	add.w	r2, r7, #14
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	4602      	mov	r2, r0
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fe19 	bl	800a0a4 <USBD_LL_Start>
 8008472:	4603      	mov	r3, r0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d009      	beq.n	80084c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	4611      	mov	r1, r2
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	4611      	mov	r1, r2
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f001 f90e 	bl	8009732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008524:	461a      	mov	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008532:	f003 031f 	and.w	r3, r3, #31
 8008536:	2b02      	cmp	r3, #2
 8008538:	d01a      	beq.n	8008570 <USBD_LL_SetupStage+0x72>
 800853a:	2b02      	cmp	r3, #2
 800853c:	d822      	bhi.n	8008584 <USBD_LL_SetupStage+0x86>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <USBD_LL_SetupStage+0x4a>
 8008542:	2b01      	cmp	r3, #1
 8008544:	d00a      	beq.n	800855c <USBD_LL_SetupStage+0x5e>
 8008546:	e01d      	b.n	8008584 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fb65 	bl	8008c20 <USBD_StdDevReq>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
      break;
 800855a:	e020      	b.n	800859e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fbcd 	bl	8008d04 <USBD_StdItfReq>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
      break;
 800856e:	e016      	b.n	800859e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc2f 	bl	8008ddc <USBD_StdEPReq>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e00c      	b.n	800859e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800858a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800858e:	b2db      	uxtb	r3, r3
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 fde6 	bl	800a164 <USBD_LL_StallEP>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
      break;
 800859c:	bf00      	nop
  }

  return ret;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	460b      	mov	r3, r1
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d16e      	bne.n	800869e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	f040 8098 	bne.w	8008704 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d913      	bls.n	8008608 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	1ad2      	subs	r2, r2, r3
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	4293      	cmp	r3, r2
 80085f8:	bf28      	it	cs
 80085fa:	4613      	movcs	r3, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f001 f98a 	bl	800991a <USBD_CtlContinueRx>
 8008606:	e07d      	b.n	8008704 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	2b02      	cmp	r3, #2
 8008614:	d014      	beq.n	8008640 <USBD_LL_DataOutStage+0x98>
 8008616:	2b02      	cmp	r3, #2
 8008618:	d81d      	bhi.n	8008656 <USBD_LL_DataOutStage+0xae>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <USBD_LL_DataOutStage+0x7c>
 800861e:	2b01      	cmp	r3, #1
 8008620:	d003      	beq.n	800862a <USBD_LL_DataOutStage+0x82>
 8008622:	e018      	b.n	8008656 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	75bb      	strb	r3, [r7, #22]
            break;
 8008628:	e018      	b.n	800865c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4619      	mov	r1, r3
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fa64 	bl	8008b02 <USBD_CoreFindIF>
 800863a:	4603      	mov	r3, r0
 800863c:	75bb      	strb	r3, [r7, #22]
            break;
 800863e:	e00d      	b.n	800865c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008646:	b2db      	uxtb	r3, r3
 8008648:	4619      	mov	r1, r3
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fa66 	bl	8008b1c <USBD_CoreFindEP>
 8008650:	4603      	mov	r3, r0
 8008652:	75bb      	strb	r3, [r7, #22]
            break;
 8008654:	e002      	b.n	800865c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	75bb      	strb	r3, [r7, #22]
            break;
 800865a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800865c:	7dbb      	ldrb	r3, [r7, #22]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d119      	bne.n	8008696 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d113      	bne.n	8008696 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800866e:	7dba      	ldrb	r2, [r7, #22]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	32ae      	adds	r2, #174	; 0xae
 8008674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00b      	beq.n	8008696 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800867e:	7dba      	ldrb	r2, [r7, #22]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008686:	7dba      	ldrb	r2, [r7, #22]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	32ae      	adds	r2, #174	; 0xae
 800868c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f001 f950 	bl	800993c <USBD_CtlSendStatus>
 800869c:	e032      	b.n	8008704 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800869e:	7afb      	ldrb	r3, [r7, #11]
 80086a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	4619      	mov	r1, r3
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 fa37 	bl	8008b1c <USBD_CoreFindEP>
 80086ae:	4603      	mov	r3, r0
 80086b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	2bff      	cmp	r3, #255	; 0xff
 80086b6:	d025      	beq.n	8008704 <USBD_LL_DataOutStage+0x15c>
 80086b8:	7dbb      	ldrb	r3, [r7, #22]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d122      	bne.n	8008704 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d117      	bne.n	80086fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086ca:	7dba      	ldrb	r2, [r7, #22]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	32ae      	adds	r2, #174	; 0xae
 80086d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00f      	beq.n	80086fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086da:	7dba      	ldrb	r2, [r7, #22]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086e2:	7dba      	ldrb	r2, [r7, #22]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	32ae      	adds	r2, #174	; 0xae
 80086e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	7afa      	ldrb	r2, [r7, #11]
 80086f0:	4611      	mov	r1, r2
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	4798      	blx	r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	e000      	b.n	8008706 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	460b      	mov	r3, r1
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d16f      	bne.n	8008802 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3314      	adds	r3, #20
 8008726:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800872e:	2b02      	cmp	r3, #2
 8008730:	d15a      	bne.n	80087e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	429a      	cmp	r2, r3
 800873c:	d914      	bls.n	8008768 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	461a      	mov	r2, r3
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f001 f8b2 	bl	80098be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800875a:	2300      	movs	r3, #0
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f001 fda9 	bl	800a2b8 <USBD_LL_PrepareReceive>
 8008766:	e03f      	b.n	80087e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d11c      	bne.n	80087ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800877c:	429a      	cmp	r2, r3
 800877e:	d316      	bcc.n	80087ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800878a:	429a      	cmp	r2, r3
 800878c:	d20f      	bcs.n	80087ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f001 f893 	bl	80098be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f001 fd86 	bl	800a2b8 <USBD_LL_PrepareReceive>
 80087ac:	e01c      	b.n	80087e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d10f      	bne.n	80087da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f001 fcc1 	bl	800a164 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f001 f8bd 	bl	8009962 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d03a      	beq.n	8008868 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff fe42 	bl	800847c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008800:	e032      	b.n	8008868 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008802:	7afb      	ldrb	r3, [r7, #11]
 8008804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008808:	b2db      	uxtb	r3, r3
 800880a:	4619      	mov	r1, r3
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f985 	bl	8008b1c <USBD_CoreFindEP>
 8008812:	4603      	mov	r3, r0
 8008814:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	2bff      	cmp	r3, #255	; 0xff
 800881a:	d025      	beq.n	8008868 <USBD_LL_DataInStage+0x15a>
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d122      	bne.n	8008868 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b03      	cmp	r3, #3
 800882c:	d11c      	bne.n	8008868 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800882e:	7dfa      	ldrb	r2, [r7, #23]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	32ae      	adds	r2, #174	; 0xae
 8008834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d014      	beq.n	8008868 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800883e:	7dfa      	ldrb	r2, [r7, #23]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008846:	7dfa      	ldrb	r2, [r7, #23]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	32ae      	adds	r2, #174	; 0xae
 800884c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	7afa      	ldrb	r2, [r7, #11]
 8008854:	4611      	mov	r1, r2
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	4798      	blx	r3
 800885a:	4603      	mov	r3, r0
 800885c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800885e:	7dbb      	ldrb	r3, [r7, #22]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008864:	7dbb      	ldrb	r3, [r7, #22]
 8008866:	e000      	b.n	800886a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3718      	adds	r7, #24
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d014      	beq.n	80088d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6852      	ldr	r2, [r2, #4]
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	4611      	mov	r1, r2
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088d4:	2303      	movs	r3, #3
 80088d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fbfb 	bl	800a0da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2240      	movs	r2, #64	; 0x40
 80088f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	2200      	movs	r2, #0
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fbed 	bl	800a0da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2240      	movs	r2, #64	; 0x40
 800890a:	621a      	str	r2, [r3, #32]

  return ret;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b04      	cmp	r3, #4
 8008948:	d006      	beq.n	8008958 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2204      	movs	r2, #4
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b04      	cmp	r3, #4
 8008980:	d106      	bne.n	8008990 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008988:	b2da      	uxtb	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d110      	bne.n	80089d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d005      	beq.n	80089d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	32ae      	adds	r2, #174	; 0xae
 80089f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e01c      	b.n	8008a3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d115      	bne.n	8008a38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	32ae      	adds	r2, #174	; 0xae
 8008a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	32ae      	adds	r2, #174	; 0xae
 8008a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	78fa      	ldrb	r2, [r7, #3]
 8008a32:	4611      	mov	r1, r2
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	32ae      	adds	r2, #174	; 0xae
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e01c      	b.n	8008a9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d115      	bne.n	8008a9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	32ae      	adds	r2, #174	; 0xae
 8008a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	32ae      	adds	r2, #174	; 0xae
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	4611      	mov	r1, r2
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6852      	ldr	r2, [r2, #4]
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	4611      	mov	r1, r2
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008af4:	2303      	movs	r3, #3
 8008af6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b086      	sub	sp, #24
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d920      	bls.n	8008ba0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b66:	e013      	b.n	8008b90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b68:	f107 030a 	add.w	r3, r7, #10
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6978      	ldr	r0, [r7, #20]
 8008b70:	f000 f81b 	bl	8008baa <USBD_GetNextDesc>
 8008b74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	d108      	bne.n	8008b90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	789b      	ldrb	r3, [r3, #2]
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d008      	beq.n	8008b9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	885b      	ldrh	r3, [r3, #2]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	897b      	ldrh	r3, [r7, #10]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d8e5      	bhi.n	8008b68 <USBD_GetEpDesc+0x32>
 8008b9c:	e000      	b.n	8008ba0 <USBD_GetEpDesc+0x6a>
          break;
 8008b9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ba0:	693b      	ldr	r3, [r7, #16]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	881a      	ldrh	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c02:	8a3b      	ldrh	r3, [r7, #16]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	b21a      	sxth	r2, r3
 8008c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	b21b      	sxth	r3, r3
 8008c10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c12:	89fb      	ldrh	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d005      	beq.n	8008c46 <USBD_StdDevReq+0x26>
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	d857      	bhi.n	8008cee <USBD_StdDevReq+0xce>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00f      	beq.n	8008c62 <USBD_StdDevReq+0x42>
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d153      	bne.n	8008cee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	32ae      	adds	r2, #174	; 0xae
 8008c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c60:	e04a      	b.n	8008cf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d83b      	bhi.n	8008ce2 <USBD_StdDevReq+0xc2>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <USBD_StdDevReq+0x50>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008cc5 	.word	0x08008cc5
 8008c74:	08008cd9 	.word	0x08008cd9
 8008c78:	08008ce3 	.word	0x08008ce3
 8008c7c:	08008ccf 	.word	0x08008ccf
 8008c80:	08008ce3 	.word	0x08008ce3
 8008c84:	08008ca3 	.word	0x08008ca3
 8008c88:	08008c99 	.word	0x08008c99
 8008c8c:	08008ce3 	.word	0x08008ce3
 8008c90:	08008cbb 	.word	0x08008cbb
 8008c94:	08008cad 	.word	0x08008cad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa3c 	bl	8009118 <USBD_GetDescriptor>
          break;
 8008ca0:	e024      	b.n	8008cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fba1 	bl	80093ec <USBD_SetAddress>
          break;
 8008caa:	e01f      	b.n	8008cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fbe0 	bl	8009474 <USBD_SetConfig>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
          break;
 8008cb8:	e018      	b.n	8008cec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fc83 	bl	80095c8 <USBD_GetConfig>
          break;
 8008cc2:	e013      	b.n	8008cec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fcb4 	bl	8009634 <USBD_GetStatus>
          break;
 8008ccc:	e00e      	b.n	8008cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fce3 	bl	800969c <USBD_SetFeature>
          break;
 8008cd6:	e009      	b.n	8008cec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fd07 	bl	80096ee <USBD_ClrFeature>
          break;
 8008ce0:	e004      	b.n	8008cec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fd5e 	bl	80097a6 <USBD_CtlError>
          break;
 8008cea:	bf00      	nop
      }
      break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fd58 	bl	80097a6 <USBD_CtlError>
      break;
 8008cf6:	bf00      	nop
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop

08008d04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d1a:	2b40      	cmp	r3, #64	; 0x40
 8008d1c:	d005      	beq.n	8008d2a <USBD_StdItfReq+0x26>
 8008d1e:	2b40      	cmp	r3, #64	; 0x40
 8008d20:	d852      	bhi.n	8008dc8 <USBD_StdItfReq+0xc4>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <USBD_StdItfReq+0x26>
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d14e      	bne.n	8008dc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	3b01      	subs	r3, #1
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d840      	bhi.n	8008dba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	889b      	ldrh	r3, [r3, #4]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d836      	bhi.n	8008db0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	889b      	ldrh	r3, [r3, #4]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fed9 	bl	8008b02 <USBD_CoreFindIF>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	2bff      	cmp	r3, #255	; 0xff
 8008d58:	d01d      	beq.n	8008d96 <USBD_StdItfReq+0x92>
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11a      	bne.n	8008d96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d60:	7bba      	ldrb	r2, [r7, #14]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	32ae      	adds	r2, #174	; 0xae
 8008d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00f      	beq.n	8008d90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d70:	7bba      	ldrb	r2, [r7, #14]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d78:	7bba      	ldrb	r2, [r7, #14]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	32ae      	adds	r2, #174	; 0xae
 8008d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4798      	blx	r3
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d8e:	e004      	b.n	8008d9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d94:	e001      	b.n	8008d9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d96:	2303      	movs	r3, #3
 8008d98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	88db      	ldrh	r3, [r3, #6]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d110      	bne.n	8008dc4 <USBD_StdItfReq+0xc0>
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10d      	bne.n	8008dc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fdc7 	bl	800993c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008dae:	e009      	b.n	8008dc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fcf7 	bl	80097a6 <USBD_CtlError>
          break;
 8008db8:	e004      	b.n	8008dc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fcf2 	bl	80097a6 <USBD_CtlError>
          break;
 8008dc2:	e000      	b.n	8008dc6 <USBD_StdItfReq+0xc2>
          break;
 8008dc4:	bf00      	nop
      }
      break;
 8008dc6:	e004      	b.n	8008dd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fceb 	bl	80097a6 <USBD_CtlError>
      break;
 8008dd0:	bf00      	nop
  }

  return ret;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	889b      	ldrh	r3, [r3, #4]
 8008dee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df8:	2b40      	cmp	r3, #64	; 0x40
 8008dfa:	d007      	beq.n	8008e0c <USBD_StdEPReq+0x30>
 8008dfc:	2b40      	cmp	r3, #64	; 0x40
 8008dfe:	f200 817f 	bhi.w	8009100 <USBD_StdEPReq+0x324>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d02a      	beq.n	8008e5c <USBD_StdEPReq+0x80>
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	f040 817a 	bne.w	8009100 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff fe83 	bl	8008b1c <USBD_CoreFindEP>
 8008e16:	4603      	mov	r3, r0
 8008e18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e1a:	7b7b      	ldrb	r3, [r7, #13]
 8008e1c:	2bff      	cmp	r3, #255	; 0xff
 8008e1e:	f000 8174 	beq.w	800910a <USBD_StdEPReq+0x32e>
 8008e22:	7b7b      	ldrb	r3, [r7, #13]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 8170 	bne.w	800910a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e2a:	7b7a      	ldrb	r2, [r7, #13]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e32:	7b7a      	ldrb	r2, [r7, #13]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	32ae      	adds	r2, #174	; 0xae
 8008e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 8163 	beq.w	800910a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e44:	7b7a      	ldrb	r2, [r7, #13]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32ae      	adds	r2, #174	; 0xae
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e5a:	e156      	b.n	800910a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d008      	beq.n	8008e76 <USBD_StdEPReq+0x9a>
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	f300 8145 	bgt.w	80090f4 <USBD_StdEPReq+0x318>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 809b 	beq.w	8008fa6 <USBD_StdEPReq+0x1ca>
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d03c      	beq.n	8008eee <USBD_StdEPReq+0x112>
 8008e74:	e13e      	b.n	80090f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d002      	beq.n	8008e88 <USBD_StdEPReq+0xac>
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d016      	beq.n	8008eb4 <USBD_StdEPReq+0xd8>
 8008e86:	e02c      	b.n	8008ee2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00d      	beq.n	8008eaa <USBD_StdEPReq+0xce>
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b80      	cmp	r3, #128	; 0x80
 8008e92:	d00a      	beq.n	8008eaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f963 	bl	800a164 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e9e:	2180      	movs	r1, #128	; 0x80
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f95f 	bl	800a164 <USBD_LL_StallEP>
 8008ea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ea8:	e020      	b.n	8008eec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fc7a 	bl	80097a6 <USBD_CtlError>
              break;
 8008eb2:	e01b      	b.n	8008eec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	885b      	ldrh	r3, [r3, #2]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10e      	bne.n	8008eda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <USBD_StdEPReq+0xfe>
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b80      	cmp	r3, #128	; 0x80
 8008ec6:	d008      	beq.n	8008eda <USBD_StdEPReq+0xfe>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	88db      	ldrh	r3, [r3, #6]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f945 	bl	800a164 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fd2e 	bl	800993c <USBD_CtlSendStatus>

              break;
 8008ee0:	e004      	b.n	8008eec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fc5e 	bl	80097a6 <USBD_CtlError>
              break;
 8008eea:	bf00      	nop
          }
          break;
 8008eec:	e107      	b.n	80090fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d002      	beq.n	8008f00 <USBD_StdEPReq+0x124>
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d016      	beq.n	8008f2c <USBD_StdEPReq+0x150>
 8008efe:	e04b      	b.n	8008f98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <USBD_StdEPReq+0x146>
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b80      	cmp	r3, #128	; 0x80
 8008f0a:	d00a      	beq.n	8008f22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f927 	bl	800a164 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f16:	2180      	movs	r1, #128	; 0x80
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f923 	bl	800a164 <USBD_LL_StallEP>
 8008f1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f20:	e040      	b.n	8008fa4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fc3e 	bl	80097a6 <USBD_CtlError>
              break;
 8008f2a:	e03b      	b.n	8008fa4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d136      	bne.n	8008fa2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f92d 	bl	800a1a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fcf7 	bl	800993c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fde2 	bl	8008b1c <USBD_CoreFindEP>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f5c:	7b7b      	ldrb	r3, [r7, #13]
 8008f5e:	2bff      	cmp	r3, #255	; 0xff
 8008f60:	d01f      	beq.n	8008fa2 <USBD_StdEPReq+0x1c6>
 8008f62:	7b7b      	ldrb	r3, [r7, #13]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d11c      	bne.n	8008fa2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f68:	7b7a      	ldrb	r2, [r7, #13]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f70:	7b7a      	ldrb	r2, [r7, #13]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	32ae      	adds	r2, #174	; 0xae
 8008f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f80:	7b7a      	ldrb	r2, [r7, #13]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	32ae      	adds	r2, #174	; 0xae
 8008f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	4798      	blx	r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f96:	e004      	b.n	8008fa2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc03 	bl	80097a6 <USBD_CtlError>
              break;
 8008fa0:	e000      	b.n	8008fa4 <USBD_StdEPReq+0x1c8>
              break;
 8008fa2:	bf00      	nop
          }
          break;
 8008fa4:	e0ab      	b.n	80090fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d002      	beq.n	8008fb8 <USBD_StdEPReq+0x1dc>
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d032      	beq.n	800901c <USBD_StdEPReq+0x240>
 8008fb6:	e097      	b.n	80090e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <USBD_StdEPReq+0x1f2>
 8008fbe:	7bbb      	ldrb	r3, [r7, #14]
 8008fc0:	2b80      	cmp	r3, #128	; 0x80
 8008fc2:	d004      	beq.n	8008fce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fbed 	bl	80097a6 <USBD_CtlError>
                break;
 8008fcc:	e091      	b.n	80090f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	da0b      	bge.n	8008fee <USBD_StdEPReq+0x212>
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	3310      	adds	r3, #16
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	4413      	add	r3, r2
 8008fea:	3304      	adds	r3, #4
 8008fec:	e00b      	b.n	8009006 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	4413      	add	r3, r2
 8009004:	3304      	adds	r3, #4
 8009006:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2202      	movs	r2, #2
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fc37 	bl	8009888 <USBD_CtlSendData>
              break;
 800901a:	e06a      	b.n	80090f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800901c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009020:	2b00      	cmp	r3, #0
 8009022:	da11      	bge.n	8009048 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	f003 020f 	and.w	r2, r3, #15
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	440b      	add	r3, r1
 8009036:	3324      	adds	r3, #36	; 0x24
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d117      	bne.n	800906e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fbb0 	bl	80097a6 <USBD_CtlError>
                  break;
 8009046:	e054      	b.n	80090f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	f003 020f 	and.w	r2, r3, #15
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d104      	bne.n	800906e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fb9d 	bl	80097a6 <USBD_CtlError>
                  break;
 800906c:	e041      	b.n	80090f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800906e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009072:	2b00      	cmp	r3, #0
 8009074:	da0b      	bge.n	800908e <USBD_StdEPReq+0x2b2>
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	3310      	adds	r3, #16
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	3304      	adds	r3, #4
 800908c:	e00b      	b.n	80090a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009094:	4613      	mov	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	3304      	adds	r3, #4
 80090a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <USBD_StdEPReq+0x2d8>
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b80      	cmp	r3, #128	; 0x80
 80090b2:	d103      	bne.n	80090bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2200      	movs	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	e00e      	b.n	80090da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f88d 	bl	800a1e0 <USBD_LL_IsStallEP>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e002      	b.n	80090da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2202      	movs	r2, #2
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fbd1 	bl	8009888 <USBD_CtlSendData>
              break;
 80090e6:	e004      	b.n	80090f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb5b 	bl	80097a6 <USBD_CtlError>
              break;
 80090f0:	bf00      	nop
          }
          break;
 80090f2:	e004      	b.n	80090fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fb55 	bl	80097a6 <USBD_CtlError>
          break;
 80090fc:	bf00      	nop
      }
      break;
 80090fe:	e005      	b.n	800910c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fb4f 	bl	80097a6 <USBD_CtlError>
      break;
 8009108:	e000      	b.n	800910c <USBD_StdEPReq+0x330>
      break;
 800910a:	bf00      	nop
  }

  return ret;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	885b      	ldrh	r3, [r3, #2]
 8009132:	0a1b      	lsrs	r3, r3, #8
 8009134:	b29b      	uxth	r3, r3
 8009136:	3b01      	subs	r3, #1
 8009138:	2b06      	cmp	r3, #6
 800913a:	f200 8128 	bhi.w	800938e <USBD_GetDescriptor+0x276>
 800913e:	a201      	add	r2, pc, #4	; (adr r2, 8009144 <USBD_GetDescriptor+0x2c>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	08009161 	.word	0x08009161
 8009148:	08009179 	.word	0x08009179
 800914c:	080091b9 	.word	0x080091b9
 8009150:	0800938f 	.word	0x0800938f
 8009154:	0800938f 	.word	0x0800938f
 8009158:	0800932f 	.word	0x0800932f
 800915c:	0800935b 	.word	0x0800935b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
      break;
 8009176:	e112      	b.n	800939e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	7c1b      	ldrb	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10d      	bne.n	800919c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009188:	f107 0208 	add.w	r2, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	2202      	movs	r2, #2
 8009198:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800919a:	e100      	b.n	800939e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	f107 0208 	add.w	r2, r7, #8
 80091a8:	4610      	mov	r0, r2
 80091aa:	4798      	blx	r3
 80091ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	2202      	movs	r2, #2
 80091b4:	701a      	strb	r2, [r3, #0]
      break;
 80091b6:	e0f2      	b.n	800939e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	885b      	ldrh	r3, [r3, #2]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b05      	cmp	r3, #5
 80091c0:	f200 80ac 	bhi.w	800931c <USBD_GetDescriptor+0x204>
 80091c4:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <USBD_GetDescriptor+0xb4>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	080091e5 	.word	0x080091e5
 80091d0:	08009219 	.word	0x08009219
 80091d4:	0800924d 	.word	0x0800924d
 80091d8:	08009281 	.word	0x08009281
 80091dc:	080092b5 	.word	0x080092b5
 80091e0:	080092e9 	.word	0x080092e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009206:	e091      	b.n	800932c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 facb 	bl	80097a6 <USBD_CtlError>
            err++;
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	3301      	adds	r3, #1
 8009214:	72fb      	strb	r3, [r7, #11]
          break;
 8009216:	e089      	b.n	800932c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	7c12      	ldrb	r2, [r2, #16]
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923a:	e077      	b.n	800932c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fab1 	bl	80097a6 <USBD_CtlError>
            err++;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	3301      	adds	r3, #1
 8009248:	72fb      	strb	r3, [r7, #11]
          break;
 800924a:	e06f      	b.n	800932c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	7c12      	ldrb	r2, [r2, #16]
 8009264:	f107 0108 	add.w	r1, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800926e:	e05d      	b.n	800932c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa97 	bl	80097a6 <USBD_CtlError>
            err++;
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	3301      	adds	r3, #1
 800927c:	72fb      	strb	r3, [r7, #11]
          break;
 800927e:	e055      	b.n	800932c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	7c12      	ldrb	r2, [r2, #16]
 8009298:	f107 0108 	add.w	r1, r7, #8
 800929c:	4610      	mov	r0, r2
 800929e:	4798      	blx	r3
 80092a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092a2:	e043      	b.n	800932c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fa7d 	bl	80097a6 <USBD_CtlError>
            err++;
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	3301      	adds	r3, #1
 80092b0:	72fb      	strb	r3, [r7, #11]
          break;
 80092b2:	e03b      	b.n	800932c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	7c12      	ldrb	r2, [r2, #16]
 80092cc:	f107 0108 	add.w	r1, r7, #8
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d6:	e029      	b.n	800932c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa63 	bl	80097a6 <USBD_CtlError>
            err++;
 80092e0:	7afb      	ldrb	r3, [r7, #11]
 80092e2:	3301      	adds	r3, #1
 80092e4:	72fb      	strb	r3, [r7, #11]
          break;
 80092e6:	e021      	b.n	800932c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7c12      	ldrb	r2, [r2, #16]
 8009300:	f107 0108 	add.w	r1, r7, #8
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800930a:	e00f      	b.n	800932c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa49 	bl	80097a6 <USBD_CtlError>
            err++;
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	3301      	adds	r3, #1
 8009318:	72fb      	strb	r3, [r7, #11]
          break;
 800931a:	e007      	b.n	800932c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa41 	bl	80097a6 <USBD_CtlError>
          err++;
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	3301      	adds	r3, #1
 8009328:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800932a:	bf00      	nop
      }
      break;
 800932c:	e037      	b.n	800939e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	7c1b      	ldrb	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	f107 0208 	add.w	r2, r7, #8
 8009342:	4610      	mov	r0, r2
 8009344:	4798      	blx	r3
 8009346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009348:	e029      	b.n	800939e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa2a 	bl	80097a6 <USBD_CtlError>
        err++;
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	3301      	adds	r3, #1
 8009356:	72fb      	strb	r3, [r7, #11]
      break;
 8009358:	e021      	b.n	800939e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7c1b      	ldrb	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10d      	bne.n	800937e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	f107 0208 	add.w	r2, r7, #8
 800936e:	4610      	mov	r0, r2
 8009370:	4798      	blx	r3
 8009372:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	2207      	movs	r2, #7
 800937a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800937c:	e00f      	b.n	800939e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fa10 	bl	80097a6 <USBD_CtlError>
        err++;
 8009386:	7afb      	ldrb	r3, [r7, #11]
 8009388:	3301      	adds	r3, #1
 800938a:	72fb      	strb	r3, [r7, #11]
      break;
 800938c:	e007      	b.n	800939e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fa08 	bl	80097a6 <USBD_CtlError>
      err++;
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	3301      	adds	r3, #1
 800939a:	72fb      	strb	r3, [r7, #11]
      break;
 800939c:	bf00      	nop
  }

  if (err != 0U)
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d11e      	bne.n	80093e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	88db      	ldrh	r3, [r3, #6]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d016      	beq.n	80093da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80093ac:	893b      	ldrh	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00e      	beq.n	80093d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88da      	ldrh	r2, [r3, #6]
 80093b6:	893b      	ldrh	r3, [r7, #8]
 80093b8:	4293      	cmp	r3, r2
 80093ba:	bf28      	it	cs
 80093bc:	4613      	movcs	r3, r2
 80093be:	b29b      	uxth	r3, r3
 80093c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093c2:	893b      	ldrh	r3, [r7, #8]
 80093c4:	461a      	mov	r2, r3
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa5d 	bl	8009888 <USBD_CtlSendData>
 80093ce:	e009      	b.n	80093e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9e7 	bl	80097a6 <USBD_CtlError>
 80093d8:	e004      	b.n	80093e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 faae 	bl	800993c <USBD_CtlSendStatus>
 80093e0:	e000      	b.n	80093e4 <USBD_GetDescriptor+0x2cc>
    return;
 80093e2:	bf00      	nop
  }
}
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop

080093ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	889b      	ldrh	r3, [r3, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d131      	bne.n	8009462 <USBD_SetAddress+0x76>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	88db      	ldrh	r3, [r3, #6]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d12d      	bne.n	8009462 <USBD_SetAddress+0x76>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	885b      	ldrh	r3, [r3, #2]
 800940a:	2b7f      	cmp	r3, #127	; 0x7f
 800940c:	d829      	bhi.n	8009462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b03      	cmp	r3, #3
 8009424:	d104      	bne.n	8009430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9bc 	bl	80097a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942e:	e01d      	b.n	800946c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	7bfa      	ldrb	r2, [r7, #15]
 8009434:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fefb 	bl	800a238 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa7a 	bl	800993c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	e009      	b.n	800946c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009460:	e004      	b.n	800946c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f99e 	bl	80097a6 <USBD_CtlError>
  }
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	885b      	ldrh	r3, [r3, #2]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	4b4e      	ldr	r3, [pc, #312]	; (80095c4 <USBD_SetConfig+0x150>)
 800948a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800948c:	4b4d      	ldr	r3, [pc, #308]	; (80095c4 <USBD_SetConfig+0x150>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d905      	bls.n	80094a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f985 	bl	80097a6 <USBD_CtlError>
    return USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	e08c      	b.n	80095ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d002      	beq.n	80094b2 <USBD_SetConfig+0x3e>
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d029      	beq.n	8009504 <USBD_SetConfig+0x90>
 80094b0:	e075      	b.n	800959e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094b2:	4b44      	ldr	r3, [pc, #272]	; (80095c4 <USBD_SetConfig+0x150>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d020      	beq.n	80094fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80094ba:	4b42      	ldr	r3, [pc, #264]	; (80095c4 <USBD_SetConfig+0x150>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094c4:	4b3f      	ldr	r3, [pc, #252]	; (80095c4 <USBD_SetConfig+0x150>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7fe ffe1 	bl	8008492 <USBD_SetClassConfig>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d008      	beq.n	80094ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f962 	bl	80097a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2202      	movs	r2, #2
 80094e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094ea:	e065      	b.n	80095b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fa25 	bl	800993c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2203      	movs	r2, #3
 80094f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094fa:	e05d      	b.n	80095b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa1d 	bl	800993c <USBD_CtlSendStatus>
      break;
 8009502:	e059      	b.n	80095b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009504:	4b2f      	ldr	r3, [pc, #188]	; (80095c4 <USBD_SetConfig+0x150>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d112      	bne.n	8009532 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009514:	4b2b      	ldr	r3, [pc, #172]	; (80095c4 <USBD_SetConfig+0x150>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800951e:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <USBD_SetConfig+0x150>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7fe ffd0 	bl	80084ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa06 	bl	800993c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009530:	e042      	b.n	80095b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009532:	4b24      	ldr	r3, [pc, #144]	; (80095c4 <USBD_SetConfig+0x150>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	429a      	cmp	r2, r3
 800953e:	d02a      	beq.n	8009596 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	b2db      	uxtb	r3, r3
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fe ffbe 	bl	80084ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800954e:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <USBD_SetConfig+0x150>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009558:	4b1a      	ldr	r3, [pc, #104]	; (80095c4 <USBD_SetConfig+0x150>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fe ff97 	bl	8008492 <USBD_SetClassConfig>
 8009564:	4603      	mov	r3, r0
 8009566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00f      	beq.n	800958e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f918 	bl	80097a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7fe ffa3 	bl	80084ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800958c:	e014      	b.n	80095b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f9d4 	bl	800993c <USBD_CtlSendStatus>
      break;
 8009594:	e010      	b.n	80095b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9d0 	bl	800993c <USBD_CtlSendStatus>
      break;
 800959c:	e00c      	b.n	80095b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f900 	bl	80097a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <USBD_SetConfig+0x150>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fe ff8c 	bl	80084ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095b2:	2303      	movs	r3, #3
 80095b4:	73fb      	strb	r3, [r7, #15]
      break;
 80095b6:	bf00      	nop
  }

  return ret;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200003d4 	.word	0x200003d4

080095c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	88db      	ldrh	r3, [r3, #6]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d004      	beq.n	80095e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f8e2 	bl	80097a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095e2:	e023      	b.n	800962c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	dc02      	bgt.n	80095f6 <USBD_GetConfig+0x2e>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dc03      	bgt.n	80095fc <USBD_GetConfig+0x34>
 80095f4:	e015      	b.n	8009622 <USBD_GetConfig+0x5a>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d00b      	beq.n	8009612 <USBD_GetConfig+0x4a>
 80095fa:	e012      	b.n	8009622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3308      	adds	r3, #8
 8009606:	2201      	movs	r2, #1
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f93c 	bl	8009888 <USBD_CtlSendData>
        break;
 8009610:	e00c      	b.n	800962c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3304      	adds	r3, #4
 8009616:	2201      	movs	r2, #1
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f934 	bl	8009888 <USBD_CtlSendData>
        break;
 8009620:	e004      	b.n	800962c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f8be 	bl	80097a6 <USBD_CtlError>
        break;
 800962a:	bf00      	nop
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	b2db      	uxtb	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	2b02      	cmp	r3, #2
 800964a:	d81e      	bhi.n	800968a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	88db      	ldrh	r3, [r3, #6]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d004      	beq.n	800965e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f8a5 	bl	80097a6 <USBD_CtlError>
        break;
 800965c:	e01a      	b.n	8009694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f043 0202 	orr.w	r2, r3, #2
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	330c      	adds	r3, #12
 800967e:	2202      	movs	r2, #2
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f900 	bl	8009888 <USBD_CtlSendData>
      break;
 8009688:	e004      	b.n	8009694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f88a 	bl	80097a6 <USBD_CtlError>
      break;
 8009692:	bf00      	nop
  }
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	885b      	ldrh	r3, [r3, #2]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d107      	bne.n	80096be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f940 	bl	800993c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80096bc:	e013      	b.n	80096e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	885b      	ldrh	r3, [r3, #2]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d10b      	bne.n	80096de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	889b      	ldrh	r3, [r3, #4]
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f930 	bl	800993c <USBD_CtlSendStatus>
}
 80096dc:	e003      	b.n	80096e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f860 	bl	80097a6 <USBD_CtlError>
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	3b01      	subs	r3, #1
 8009702:	2b02      	cmp	r3, #2
 8009704:	d80b      	bhi.n	800971e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d10c      	bne.n	8009728 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f910 	bl	800993c <USBD_CtlSendStatus>
      }
      break;
 800971c:	e004      	b.n	8009728 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f840 	bl	80097a6 <USBD_CtlError>
      break;
 8009726:	e000      	b.n	800972a <USBD_ClrFeature+0x3c>
      break;
 8009728:	bf00      	nop
  }
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3301      	adds	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff fa41 	bl	8008be4 <SWAPBYTE>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff fa34 	bl	8008be4 <SWAPBYTE>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3301      	adds	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fa27 	bl	8008be4 <SWAPBYTE>
 8009796:	4603      	mov	r3, r0
 8009798:	461a      	mov	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	80da      	strh	r2, [r3, #6]
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097b0:	2180      	movs	r1, #128	; 0x80
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fcd6 	bl	800a164 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80097b8:	2100      	movs	r1, #0
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fcd2 	bl	800a164 <USBD_LL_StallEP>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d036      	beq.n	800984c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80097e2:	6938      	ldr	r0, [r7, #16]
 80097e4:	f000 f836 	bl	8009854 <USBD_GetLen>
 80097e8:	4603      	mov	r3, r0
 80097ea:	3301      	adds	r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	4413      	add	r3, r2
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	7812      	ldrb	r2, [r2, #0]
 8009800:	701a      	strb	r2, [r3, #0]
  idx++;
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	3301      	adds	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4413      	add	r3, r2
 800980e:	2203      	movs	r2, #3
 8009810:	701a      	strb	r2, [r3, #0]
  idx++;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	3301      	adds	r3, #1
 8009816:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009818:	e013      	b.n	8009842 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	4413      	add	r3, r2
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	7812      	ldrb	r2, [r2, #0]
 8009824:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3301      	adds	r3, #1
 800982a:	613b      	str	r3, [r7, #16]
    idx++;
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	3301      	adds	r3, #1
 8009830:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	4413      	add	r3, r2
 8009838:	2200      	movs	r2, #0
 800983a:	701a      	strb	r2, [r3, #0]
    idx++;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	3301      	adds	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e7      	bne.n	800981a <USBD_GetString+0x52>
 800984a:	e000      	b.n	800984e <USBD_GetString+0x86>
    return;
 800984c:	bf00      	nop
  }
}
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009864:	e005      	b.n	8009872 <USBD_GetLen+0x1e>
  {
    len++;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	3301      	adds	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	3301      	adds	r3, #1
 8009870:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f5      	bne.n	8009866 <USBD_GetLen+0x12>
  }

  return len;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2202      	movs	r2, #2
 8009898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	2100      	movs	r1, #0
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fce1 	bl	800a276 <USBD_LL_Transmit>

  return USBD_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	2100      	movs	r1, #0
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 fcd0 	bl	800a276 <USBD_LL_Transmit>

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2203      	movs	r2, #3
 80098f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	2100      	movs	r1, #0
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 fcd4 	bl	800a2b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	2100      	movs	r1, #0
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 fcc3 	bl	800a2b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2204      	movs	r2, #4
 8009948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800994c:	2300      	movs	r3, #0
 800994e:	2200      	movs	r2, #0
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fc8f 	bl	800a276 <USBD_LL_Transmit>

  return USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2205      	movs	r2, #5
 800996e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009972:	2300      	movs	r3, #0
 8009974:	2200      	movs	r2, #0
 8009976:	2100      	movs	r1, #0
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fc9d 	bl	800a2b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800998c:	2200      	movs	r2, #0
 800998e:	4912      	ldr	r1, [pc, #72]	; (80099d8 <MX_USB_DEVICE_Init+0x50>)
 8009990:	4812      	ldr	r0, [pc, #72]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 8009992:	f7fe fd01 	bl	8008398 <USBD_Init>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800999c:	f7f7 ff1a 	bl	80017d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099a0:	490f      	ldr	r1, [pc, #60]	; (80099e0 <MX_USB_DEVICE_Init+0x58>)
 80099a2:	480e      	ldr	r0, [pc, #56]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 80099a4:	f7fe fd28 	bl	80083f8 <USBD_RegisterClass>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099ae:	f7f7 ff11 	bl	80017d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099b2:	490c      	ldr	r1, [pc, #48]	; (80099e4 <MX_USB_DEVICE_Init+0x5c>)
 80099b4:	4809      	ldr	r0, [pc, #36]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 80099b6:	f7fe fc1f 	bl	80081f8 <USBD_CDC_RegisterInterface>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099c0:	f7f7 ff08 	bl	80017d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099c4:	4805      	ldr	r0, [pc, #20]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 80099c6:	f7fe fd4d 	bl	8008464 <USBD_Start>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099d0:	f7f7 ff00 	bl	80017d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099d4:	bf00      	nop
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	200000ac 	.word	0x200000ac
 80099dc:	200003d8 	.word	0x200003d8
 80099e0:	20000018 	.word	0x20000018
 80099e4:	20000098 	.word	0x20000098

080099e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099ec:	2200      	movs	r2, #0
 80099ee:	4905      	ldr	r1, [pc, #20]	; (8009a04 <CDC_Init_FS+0x1c>)
 80099f0:	4805      	ldr	r0, [pc, #20]	; (8009a08 <CDC_Init_FS+0x20>)
 80099f2:	f7fe fc1b 	bl	800822c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099f6:	4905      	ldr	r1, [pc, #20]	; (8009a0c <CDC_Init_FS+0x24>)
 80099f8:	4803      	ldr	r0, [pc, #12]	; (8009a08 <CDC_Init_FS+0x20>)
 80099fa:	f7fe fc39 	bl	8008270 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000eb4 	.word	0x20000eb4
 8009a08:	200003d8 	.word	0x200003d8
 8009a0c:	200006b4 	.word	0x200006b4

08009a10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b23      	cmp	r3, #35	; 0x23
 8009a34:	d84a      	bhi.n	8009acc <CDC_Control_FS+0xac>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <CDC_Control_FS+0x1c>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009acd 	.word	0x08009acd
 8009a40:	08009acd 	.word	0x08009acd
 8009a44:	08009acd 	.word	0x08009acd
 8009a48:	08009acd 	.word	0x08009acd
 8009a4c:	08009acd 	.word	0x08009acd
 8009a50:	08009acd 	.word	0x08009acd
 8009a54:	08009acd 	.word	0x08009acd
 8009a58:	08009acd 	.word	0x08009acd
 8009a5c:	08009acd 	.word	0x08009acd
 8009a60:	08009acd 	.word	0x08009acd
 8009a64:	08009acd 	.word	0x08009acd
 8009a68:	08009acd 	.word	0x08009acd
 8009a6c:	08009acd 	.word	0x08009acd
 8009a70:	08009acd 	.word	0x08009acd
 8009a74:	08009acd 	.word	0x08009acd
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009acd 	.word	0x08009acd
 8009a80:	08009acd 	.word	0x08009acd
 8009a84:	08009acd 	.word	0x08009acd
 8009a88:	08009acd 	.word	0x08009acd
 8009a8c:	08009acd 	.word	0x08009acd
 8009a90:	08009acd 	.word	0x08009acd
 8009a94:	08009acd 	.word	0x08009acd
 8009a98:	08009acd 	.word	0x08009acd
 8009a9c:	08009acd 	.word	0x08009acd
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	08009acd 	.word	0x08009acd
 8009aa8:	08009acd 	.word	0x08009acd
 8009aac:	08009acd 	.word	0x08009acd
 8009ab0:	08009acd 	.word	0x08009acd
 8009ab4:	08009acd 	.word	0x08009acd
 8009ab8:	08009acd 	.word	0x08009acd
 8009abc:	08009acd 	.word	0x08009acd
 8009ac0:	08009acd 	.word	0x08009acd
 8009ac4:	08009acd 	.word	0x08009acd
 8009ac8:	08009acd 	.word	0x08009acd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009acc:	bf00      	nop
  }

  return (USBD_OK);
 8009ace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	4805      	ldr	r0, [pc, #20]	; (8009b00 <CDC_Receive_FS+0x24>)
 8009aea:	f7fe fbc1 	bl	8008270 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009aee:	4804      	ldr	r0, [pc, #16]	; (8009b00 <CDC_Receive_FS+0x24>)
 8009af0:	f7fe fc1c 	bl	800832c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009af4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	200003d8 	.word	0x200003d8

08009b04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b14:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <CDC_Transmit_FS+0x48>)
 8009b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e00b      	b.n	8009b42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b2a:	887b      	ldrh	r3, [r7, #2]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4806      	ldr	r0, [pc, #24]	; (8009b4c <CDC_Transmit_FS+0x48>)
 8009b32:	f7fe fb7b 	bl	800822c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b36:	4805      	ldr	r0, [pc, #20]	; (8009b4c <CDC_Transmit_FS+0x48>)
 8009b38:	f7fe fbb8 	bl	80082ac <USBD_CDC_TransmitPacket>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200003d8 	.word	0x200003d8

08009b50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
	...

08009b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2212      	movs	r2, #18
 8009b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b86:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	200000c8 	.word	0x200000c8

08009b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2204      	movs	r2, #4
 8009ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009baa:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	200000dc 	.word	0x200000dc

08009bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	6039      	str	r1, [r7, #0]
 8009bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bc8:	79fb      	ldrb	r3, [r7, #7]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d105      	bne.n	8009bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	4907      	ldr	r1, [pc, #28]	; (8009bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bd2:	4808      	ldr	r0, [pc, #32]	; (8009bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bd4:	f7ff fdf8 	bl	80097c8 <USBD_GetString>
 8009bd8:	e004      	b.n	8009be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	4904      	ldr	r1, [pc, #16]	; (8009bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bde:	4805      	ldr	r0, [pc, #20]	; (8009bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009be0:	f7ff fdf2 	bl	80097c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009be4:	4b02      	ldr	r3, [pc, #8]	; (8009bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200016b4 	.word	0x200016b4
 8009bf4:	0800ad48 	.word	0x0800ad48

08009bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	4904      	ldr	r1, [pc, #16]	; (8009c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c08:	4804      	ldr	r0, [pc, #16]	; (8009c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c0a:	f7ff fddd 	bl	80097c8 <USBD_GetString>
  return USBD_StrDesc;
 8009c0e:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	200016b4 	.word	0x200016b4
 8009c1c:	0800ad60 	.word	0x0800ad60

08009c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	6039      	str	r1, [r7, #0]
 8009c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	221a      	movs	r2, #26
 8009c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c32:	f000 f843 	bl	8009cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c36:	4b02      	ldr	r3, [pc, #8]	; (8009c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	200000e0 	.word	0x200000e0

08009c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	6039      	str	r1, [r7, #0]
 8009c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d105      	bne.n	8009c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	4907      	ldr	r1, [pc, #28]	; (8009c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c5a:	4808      	ldr	r0, [pc, #32]	; (8009c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c5c:	f7ff fdb4 	bl	80097c8 <USBD_GetString>
 8009c60:	e004      	b.n	8009c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	4904      	ldr	r1, [pc, #16]	; (8009c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c66:	4805      	ldr	r0, [pc, #20]	; (8009c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c68:	f7ff fdae 	bl	80097c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c6c:	4b02      	ldr	r3, [pc, #8]	; (8009c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	200016b4 	.word	0x200016b4
 8009c7c:	0800ad74 	.word	0x0800ad74

08009c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	6039      	str	r1, [r7, #0]
 8009c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d105      	bne.n	8009c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	4907      	ldr	r1, [pc, #28]	; (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c96:	4808      	ldr	r0, [pc, #32]	; (8009cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c98:	f7ff fd96 	bl	80097c8 <USBD_GetString>
 8009c9c:	e004      	b.n	8009ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	4904      	ldr	r1, [pc, #16]	; (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ca2:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ca4:	f7ff fd90 	bl	80097c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca8:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200016b4 	.word	0x200016b4
 8009cb8:	0800ad80 	.word	0x0800ad80

08009cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	; (8009d00 <Get_SerialNum+0x44>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <Get_SerialNum+0x48>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cce:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <Get_SerialNum+0x4c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4413      	add	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	4909      	ldr	r1, [pc, #36]	; (8009d0c <Get_SerialNum+0x50>)
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 f814 	bl	8009d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cec:	2204      	movs	r2, #4
 8009cee:	4908      	ldr	r1, [pc, #32]	; (8009d10 <Get_SerialNum+0x54>)
 8009cf0:	68b8      	ldr	r0, [r7, #8]
 8009cf2:	f000 f80f 	bl	8009d14 <IntToUnicode>
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	1fff7a10 	.word	0x1fff7a10
 8009d04:	1fff7a14 	.word	0x1fff7a14
 8009d08:	1fff7a18 	.word	0x1fff7a18
 8009d0c:	200000e2 	.word	0x200000e2
 8009d10:	200000f2 	.word	0x200000f2

08009d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
 8009d2a:	e027      	b.n	8009d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	0f1b      	lsrs	r3, r3, #28
 8009d30:	2b09      	cmp	r3, #9
 8009d32:	d80b      	bhi.n	8009d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	0f1b      	lsrs	r3, r3, #28
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	4619      	mov	r1, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	440b      	add	r3, r1
 8009d44:	3230      	adds	r2, #48	; 0x30
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e00a      	b.n	8009d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	0f1b      	lsrs	r3, r3, #28
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	4619      	mov	r1, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3237      	adds	r2, #55	; 0x37
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	75fb      	strb	r3, [r7, #23]
 8009d7c:	7dfa      	ldrb	r2, [r7, #23]
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d3d3      	bcc.n	8009d2c <IntToUnicode+0x18>
  }
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
	...

08009d94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d9c:	f107 0314 	add.w	r3, r7, #20
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	609a      	str	r2, [r3, #8]
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009db4:	d13a      	bne.n	8009e2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009db6:	2300      	movs	r3, #0
 8009db8:	613b      	str	r3, [r7, #16]
 8009dba:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8009dc6:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009de0:	2303      	movs	r3, #3
 8009de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009de4:	230a      	movs	r3, #10
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009de8:	f107 0314 	add.w	r3, r7, #20
 8009dec:	4619      	mov	r1, r3
 8009dee:	4812      	ldr	r0, [pc, #72]	; (8009e38 <HAL_PCD_MspInit+0xa4>)
 8009df0:	f7f8 fc5e 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df8:	4a0e      	ldr	r2, [pc, #56]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dfe:	6353      	str	r3, [r2, #52]	; 0x34
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e08:	4a0a      	ldr	r2, [pc, #40]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8009e10:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <HAL_PCD_MspInit+0xa0>)
 8009e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2100      	movs	r1, #0
 8009e20:	2043      	movs	r0, #67	; 0x43
 8009e22:	f7f8 f902 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e26:	2043      	movs	r0, #67	; 0x43
 8009e28:	f7f8 f91b 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	3728      	adds	r7, #40	; 0x28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40023800 	.word	0x40023800
 8009e38:	40020000 	.word	0x40020000

08009e3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7fe fb53 	bl	80084fe <USBD_LL_SetupStage>
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009e72:	78fa      	ldrb	r2, [r7, #3]
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	4613      	mov	r3, r2
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	440b      	add	r3, r1
 8009e80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f7fe fb8d 	bl	80085a8 <USBD_LL_DataOutStage>
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3320      	adds	r3, #32
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	78fb      	ldrb	r3, [r7, #3]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	f7fe fc26 	bl	800870e <USBD_LL_DataInStage>
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe fd60 	bl	800899e <USBD_LL_SOF>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	79db      	ldrb	r3, [r3, #7]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d001      	beq.n	8009efe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009efa:	f7f7 fc6b 	bl	80017d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f04:	7bfa      	ldrb	r2, [r7, #15]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fd04 	bl	8008916 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fcac 	bl	8008872 <USBD_LL_Reset>
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fcff 	bl	8008936 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6812      	ldr	r2, [r2, #0]
 8009f46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f4a:	f043 0301 	orr.w	r3, r3, #1
 8009f4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7adb      	ldrb	r3, [r3, #11]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d005      	beq.n	8009f64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <HAL_PCD_SuspendCallback+0x48>)
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	4a03      	ldr	r2, [pc, #12]	; (8009f6c <HAL_PCD_SuspendCallback+0x48>)
 8009f5e:	f043 0306 	orr.w	r3, r3, #6
 8009f62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	e000ed00 	.word	0xe000ed00

08009f70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fcf5 	bl	800896e <USBD_LL_Resume>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f9e:	78fa      	ldrb	r2, [r7, #3]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe fd4d 	bl	8008a42 <USBD_LL_IsoOUTIncomplete>
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe fd09 	bl	80089de <USBD_LL_IsoINIncomplete>
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe fd5f 	bl	8008aa6 <USBD_LL_DevConnected>
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fd5c 	bl	8008abc <USBD_LL_DevDisconnected>
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d13c      	bne.n	800a096 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a01c:	4a20      	ldr	r2, [pc, #128]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a028:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a02c:	4b1c      	ldr	r3, [pc, #112]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a02e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a032:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a036:	2204      	movs	r2, #4
 800a038:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a03a:	4b19      	ldr	r3, [pc, #100]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a03c:	2202      	movs	r2, #2
 800a03e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a040:	4b17      	ldr	r3, [pc, #92]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a042:	2200      	movs	r2, #0
 800a044:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a048:	2202      	movs	r2, #2
 800a04a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a04c:	4b14      	ldr	r3, [pc, #80]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a04e:	2201      	movs	r2, #1
 800a050:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a052:	4b13      	ldr	r3, [pc, #76]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a054:	2200      	movs	r2, #0
 800a056:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a058:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a05e:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a060:	2200      	movs	r2, #0
 800a062:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a066:	2200      	movs	r2, #0
 800a068:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a06a:	480d      	ldr	r0, [pc, #52]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a06c:	f7f8 fcbd 	bl	80029ea <HAL_PCD_Init>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a076:	f7f7 fbad 	bl	80017d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a07a:	2180      	movs	r1, #128	; 0x80
 800a07c:	4808      	ldr	r0, [pc, #32]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a07e:	f7f9 fee8 	bl	8003e52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a082:	2240      	movs	r2, #64	; 0x40
 800a084:	2100      	movs	r1, #0
 800a086:	4806      	ldr	r0, [pc, #24]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a088:	f7f9 fe9c 	bl	8003dc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a08c:	2280      	movs	r2, #128	; 0x80
 800a08e:	2101      	movs	r1, #1
 800a090:	4803      	ldr	r0, [pc, #12]	; (800a0a0 <USBD_LL_Init+0x94>)
 800a092:	f7f9 fe97 	bl	8003dc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	200018b4 	.word	0x200018b4

0800a0a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f8 fda4 	bl	8002c08 <HAL_PCD_Start>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 f942 	bl	800a350 <USBD_Get_USB_Status>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	70fb      	strb	r3, [r7, #3]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70bb      	strb	r3, [r7, #2]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a102:	78bb      	ldrb	r3, [r7, #2]
 800a104:	883a      	ldrh	r2, [r7, #0]
 800a106:	78f9      	ldrb	r1, [r7, #3]
 800a108:	f7f9 fa78 	bl	80035fc <HAL_PCD_EP_Open>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f91c 	bl	800a350 <USBD_Get_USB_Status>
 800a118:	4603      	mov	r3, r0
 800a11a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b084      	sub	sp, #16
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a140:	78fa      	ldrb	r2, [r7, #3]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7f9 fac1 	bl	80036cc <HAL_PCD_EP_Close>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f8fd 	bl	800a350 <USBD_Get_USB_Status>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f7f9 fb79 	bl	800387a <HAL_PCD_EP_SetStall>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f8de 	bl	800a350 <USBD_Get_USB_Status>
 800a194:	4603      	mov	r3, r0
 800a196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a198:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1bc:	78fa      	ldrb	r2, [r7, #3]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7f9 fbbd 	bl	8003940 <HAL_PCD_EP_ClrStall>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 f8bf 	bl	800a350 <USBD_Get_USB_Status>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	da0b      	bge.n	800a214 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1fc:	78fb      	ldrb	r3, [r7, #3]
 800a1fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	4613      	mov	r3, r2
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	440b      	add	r3, r1
 800a20e:	3316      	adds	r3, #22
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	e00b      	b.n	800a22c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a21a:	68f9      	ldr	r1, [r7, #12]
 800a21c:	4613      	mov	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a22a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f7f9 f9ac 	bl	80035b4 <HAL_PCD_SetAddress>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	4618      	mov	r0, r3
 800a264:	f000 f874 	bl	800a350 <USBD_Get_USB_Status>
 800a268:	4603      	mov	r3, r0
 800a26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b086      	sub	sp, #24
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	460b      	mov	r3, r1
 800a284:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a294:	7af9      	ldrb	r1, [r7, #11]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	f7f9 fab4 	bl	8003806 <HAL_PCD_EP_Transmit>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f853 	bl	800a350 <USBD_Get_USB_Status>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2d6:	7af9      	ldrb	r1, [r7, #11]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	f7f9 fa40 	bl	8003760 <HAL_PCD_EP_Receive>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f832 	bl	800a350 <USBD_Get_USB_Status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a30c:	78fa      	ldrb	r2, [r7, #3]
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f7f9 fa60 	bl	80037d6 <HAL_PCD_EP_GetRxCount>
 800a316:	4603      	mov	r3, r0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a328:	4b03      	ldr	r3, [pc, #12]	; (800a338 <USBD_static_malloc+0x18>)
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	20001d98 	.word	0x20001d98

0800a33c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]

}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	2b03      	cmp	r3, #3
 800a362:	d817      	bhi.n	800a394 <USBD_Get_USB_Status+0x44>
 800a364:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <USBD_Get_USB_Status+0x1c>)
 800a366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36a:	bf00      	nop
 800a36c:	0800a37d 	.word	0x0800a37d
 800a370:	0800a383 	.word	0x0800a383
 800a374:	0800a389 	.word	0x0800a389
 800a378:	0800a38f 	.word	0x0800a38f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73fb      	strb	r3, [r7, #15]
    break;
 800a380:	e00b      	b.n	800a39a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	73fb      	strb	r3, [r7, #15]
    break;
 800a386:	e008      	b.n	800a39a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a388:	2301      	movs	r3, #1
 800a38a:	73fb      	strb	r3, [r7, #15]
    break;
 800a38c:	e005      	b.n	800a39a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a38e:	2303      	movs	r3, #3
 800a390:	73fb      	strb	r3, [r7, #15]
    break;
 800a392:	e002      	b.n	800a39a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a394:	2303      	movs	r3, #3
 800a396:	73fb      	strb	r3, [r7, #15]
    break;
 800a398:	bf00      	nop
  }
  return usb_status;
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <_vsiprintf_r>:
 800a3a8:	b500      	push	{lr}
 800a3aa:	b09b      	sub	sp, #108	; 0x6c
 800a3ac:	9100      	str	r1, [sp, #0]
 800a3ae:	9104      	str	r1, [sp, #16]
 800a3b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3b4:	9105      	str	r1, [sp, #20]
 800a3b6:	9102      	str	r1, [sp, #8]
 800a3b8:	4905      	ldr	r1, [pc, #20]	; (800a3d0 <_vsiprintf_r+0x28>)
 800a3ba:	9103      	str	r1, [sp, #12]
 800a3bc:	4669      	mov	r1, sp
 800a3be:	f000 f999 	bl	800a6f4 <_svfiprintf_r>
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	b01b      	add	sp, #108	; 0x6c
 800a3ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3ce:	bf00      	nop
 800a3d0:	ffff0208 	.word	0xffff0208

0800a3d4 <vsiprintf>:
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	460a      	mov	r2, r1
 800a3d8:	4601      	mov	r1, r0
 800a3da:	4802      	ldr	r0, [pc, #8]	; (800a3e4 <vsiprintf+0x10>)
 800a3dc:	6800      	ldr	r0, [r0, #0]
 800a3de:	f7ff bfe3 	b.w	800a3a8 <_vsiprintf_r>
 800a3e2:	bf00      	nop
 800a3e4:	20000148 	.word	0x20000148

0800a3e8 <memset>:
 800a3e8:	4402      	add	r2, r0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d100      	bne.n	800a3f2 <memset+0xa>
 800a3f0:	4770      	bx	lr
 800a3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f6:	e7f9      	b.n	800a3ec <memset+0x4>

0800a3f8 <__errno>:
 800a3f8:	4b01      	ldr	r3, [pc, #4]	; (800a400 <__errno+0x8>)
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000148 	.word	0x20000148

0800a404 <__libc_init_array>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	4d0d      	ldr	r5, [pc, #52]	; (800a43c <__libc_init_array+0x38>)
 800a408:	4c0d      	ldr	r4, [pc, #52]	; (800a440 <__libc_init_array+0x3c>)
 800a40a:	1b64      	subs	r4, r4, r5
 800a40c:	10a4      	asrs	r4, r4, #2
 800a40e:	2600      	movs	r6, #0
 800a410:	42a6      	cmp	r6, r4
 800a412:	d109      	bne.n	800a428 <__libc_init_array+0x24>
 800a414:	4d0b      	ldr	r5, [pc, #44]	; (800a444 <__libc_init_array+0x40>)
 800a416:	4c0c      	ldr	r4, [pc, #48]	; (800a448 <__libc_init_array+0x44>)
 800a418:	f000 fc6a 	bl	800acf0 <_init>
 800a41c:	1b64      	subs	r4, r4, r5
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	2600      	movs	r6, #0
 800a422:	42a6      	cmp	r6, r4
 800a424:	d105      	bne.n	800a432 <__libc_init_array+0x2e>
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42c:	4798      	blx	r3
 800a42e:	3601      	adds	r6, #1
 800a430:	e7ee      	b.n	800a410 <__libc_init_array+0xc>
 800a432:	f855 3b04 	ldr.w	r3, [r5], #4
 800a436:	4798      	blx	r3
 800a438:	3601      	adds	r6, #1
 800a43a:	e7f2      	b.n	800a422 <__libc_init_array+0x1e>
 800a43c:	0800ade4 	.word	0x0800ade4
 800a440:	0800ade4 	.word	0x0800ade4
 800a444:	0800ade4 	.word	0x0800ade4
 800a448:	0800ade8 	.word	0x0800ade8

0800a44c <__retarget_lock_acquire_recursive>:
 800a44c:	4770      	bx	lr

0800a44e <__retarget_lock_release_recursive>:
 800a44e:	4770      	bx	lr

0800a450 <_free_r>:
 800a450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a452:	2900      	cmp	r1, #0
 800a454:	d044      	beq.n	800a4e0 <_free_r+0x90>
 800a456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a45a:	9001      	str	r0, [sp, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f1a1 0404 	sub.w	r4, r1, #4
 800a462:	bfb8      	it	lt
 800a464:	18e4      	addlt	r4, r4, r3
 800a466:	f000 f8df 	bl	800a628 <__malloc_lock>
 800a46a:	4a1e      	ldr	r2, [pc, #120]	; (800a4e4 <_free_r+0x94>)
 800a46c:	9801      	ldr	r0, [sp, #4]
 800a46e:	6813      	ldr	r3, [r2, #0]
 800a470:	b933      	cbnz	r3, 800a480 <_free_r+0x30>
 800a472:	6063      	str	r3, [r4, #4]
 800a474:	6014      	str	r4, [r2, #0]
 800a476:	b003      	add	sp, #12
 800a478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a47c:	f000 b8da 	b.w	800a634 <__malloc_unlock>
 800a480:	42a3      	cmp	r3, r4
 800a482:	d908      	bls.n	800a496 <_free_r+0x46>
 800a484:	6825      	ldr	r5, [r4, #0]
 800a486:	1961      	adds	r1, r4, r5
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf01      	itttt	eq
 800a48c:	6819      	ldreq	r1, [r3, #0]
 800a48e:	685b      	ldreq	r3, [r3, #4]
 800a490:	1949      	addeq	r1, r1, r5
 800a492:	6021      	streq	r1, [r4, #0]
 800a494:	e7ed      	b.n	800a472 <_free_r+0x22>
 800a496:	461a      	mov	r2, r3
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	b10b      	cbz	r3, 800a4a0 <_free_r+0x50>
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	d9fa      	bls.n	800a496 <_free_r+0x46>
 800a4a0:	6811      	ldr	r1, [r2, #0]
 800a4a2:	1855      	adds	r5, r2, r1
 800a4a4:	42a5      	cmp	r5, r4
 800a4a6:	d10b      	bne.n	800a4c0 <_free_r+0x70>
 800a4a8:	6824      	ldr	r4, [r4, #0]
 800a4aa:	4421      	add	r1, r4
 800a4ac:	1854      	adds	r4, r2, r1
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	6011      	str	r1, [r2, #0]
 800a4b2:	d1e0      	bne.n	800a476 <_free_r+0x26>
 800a4b4:	681c      	ldr	r4, [r3, #0]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	6053      	str	r3, [r2, #4]
 800a4ba:	440c      	add	r4, r1
 800a4bc:	6014      	str	r4, [r2, #0]
 800a4be:	e7da      	b.n	800a476 <_free_r+0x26>
 800a4c0:	d902      	bls.n	800a4c8 <_free_r+0x78>
 800a4c2:	230c      	movs	r3, #12
 800a4c4:	6003      	str	r3, [r0, #0]
 800a4c6:	e7d6      	b.n	800a476 <_free_r+0x26>
 800a4c8:	6825      	ldr	r5, [r4, #0]
 800a4ca:	1961      	adds	r1, r4, r5
 800a4cc:	428b      	cmp	r3, r1
 800a4ce:	bf04      	itt	eq
 800a4d0:	6819      	ldreq	r1, [r3, #0]
 800a4d2:	685b      	ldreq	r3, [r3, #4]
 800a4d4:	6063      	str	r3, [r4, #4]
 800a4d6:	bf04      	itt	eq
 800a4d8:	1949      	addeq	r1, r1, r5
 800a4da:	6021      	streq	r1, [r4, #0]
 800a4dc:	6054      	str	r4, [r2, #4]
 800a4de:	e7ca      	b.n	800a476 <_free_r+0x26>
 800a4e0:	b003      	add	sp, #12
 800a4e2:	bd30      	pop	{r4, r5, pc}
 800a4e4:	200020f8 	.word	0x200020f8

0800a4e8 <sbrk_aligned>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	4e0e      	ldr	r6, [pc, #56]	; (800a524 <sbrk_aligned+0x3c>)
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	6831      	ldr	r1, [r6, #0]
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	b911      	cbnz	r1, 800a4fa <sbrk_aligned+0x12>
 800a4f4:	f000 fba6 	bl	800ac44 <_sbrk_r>
 800a4f8:	6030      	str	r0, [r6, #0]
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 fba1 	bl	800ac44 <_sbrk_r>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	d00a      	beq.n	800a51c <sbrk_aligned+0x34>
 800a506:	1cc4      	adds	r4, r0, #3
 800a508:	f024 0403 	bic.w	r4, r4, #3
 800a50c:	42a0      	cmp	r0, r4
 800a50e:	d007      	beq.n	800a520 <sbrk_aligned+0x38>
 800a510:	1a21      	subs	r1, r4, r0
 800a512:	4628      	mov	r0, r5
 800a514:	f000 fb96 	bl	800ac44 <_sbrk_r>
 800a518:	3001      	adds	r0, #1
 800a51a:	d101      	bne.n	800a520 <sbrk_aligned+0x38>
 800a51c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a520:	4620      	mov	r0, r4
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	200020fc 	.word	0x200020fc

0800a528 <_malloc_r>:
 800a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a52c:	1ccd      	adds	r5, r1, #3
 800a52e:	f025 0503 	bic.w	r5, r5, #3
 800a532:	3508      	adds	r5, #8
 800a534:	2d0c      	cmp	r5, #12
 800a536:	bf38      	it	cc
 800a538:	250c      	movcc	r5, #12
 800a53a:	2d00      	cmp	r5, #0
 800a53c:	4607      	mov	r7, r0
 800a53e:	db01      	blt.n	800a544 <_malloc_r+0x1c>
 800a540:	42a9      	cmp	r1, r5
 800a542:	d905      	bls.n	800a550 <_malloc_r+0x28>
 800a544:	230c      	movs	r3, #12
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	2600      	movs	r6, #0
 800a54a:	4630      	mov	r0, r6
 800a54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a624 <_malloc_r+0xfc>
 800a554:	f000 f868 	bl	800a628 <__malloc_lock>
 800a558:	f8d8 3000 	ldr.w	r3, [r8]
 800a55c:	461c      	mov	r4, r3
 800a55e:	bb5c      	cbnz	r4, 800a5b8 <_malloc_r+0x90>
 800a560:	4629      	mov	r1, r5
 800a562:	4638      	mov	r0, r7
 800a564:	f7ff ffc0 	bl	800a4e8 <sbrk_aligned>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	4604      	mov	r4, r0
 800a56c:	d155      	bne.n	800a61a <_malloc_r+0xf2>
 800a56e:	f8d8 4000 	ldr.w	r4, [r8]
 800a572:	4626      	mov	r6, r4
 800a574:	2e00      	cmp	r6, #0
 800a576:	d145      	bne.n	800a604 <_malloc_r+0xdc>
 800a578:	2c00      	cmp	r4, #0
 800a57a:	d048      	beq.n	800a60e <_malloc_r+0xe6>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	4631      	mov	r1, r6
 800a580:	4638      	mov	r0, r7
 800a582:	eb04 0903 	add.w	r9, r4, r3
 800a586:	f000 fb5d 	bl	800ac44 <_sbrk_r>
 800a58a:	4581      	cmp	r9, r0
 800a58c:	d13f      	bne.n	800a60e <_malloc_r+0xe6>
 800a58e:	6821      	ldr	r1, [r4, #0]
 800a590:	1a6d      	subs	r5, r5, r1
 800a592:	4629      	mov	r1, r5
 800a594:	4638      	mov	r0, r7
 800a596:	f7ff ffa7 	bl	800a4e8 <sbrk_aligned>
 800a59a:	3001      	adds	r0, #1
 800a59c:	d037      	beq.n	800a60e <_malloc_r+0xe6>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	442b      	add	r3, r5
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d038      	beq.n	800a61e <_malloc_r+0xf6>
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	42a2      	cmp	r2, r4
 800a5b0:	d12b      	bne.n	800a60a <_malloc_r+0xe2>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	605a      	str	r2, [r3, #4]
 800a5b6:	e00f      	b.n	800a5d8 <_malloc_r+0xb0>
 800a5b8:	6822      	ldr	r2, [r4, #0]
 800a5ba:	1b52      	subs	r2, r2, r5
 800a5bc:	d41f      	bmi.n	800a5fe <_malloc_r+0xd6>
 800a5be:	2a0b      	cmp	r2, #11
 800a5c0:	d917      	bls.n	800a5f2 <_malloc_r+0xca>
 800a5c2:	1961      	adds	r1, r4, r5
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	6025      	str	r5, [r4, #0]
 800a5c8:	bf18      	it	ne
 800a5ca:	6059      	strne	r1, [r3, #4]
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	bf08      	it	eq
 800a5d0:	f8c8 1000 	streq.w	r1, [r8]
 800a5d4:	5162      	str	r2, [r4, r5]
 800a5d6:	604b      	str	r3, [r1, #4]
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f104 060b 	add.w	r6, r4, #11
 800a5de:	f000 f829 	bl	800a634 <__malloc_unlock>
 800a5e2:	f026 0607 	bic.w	r6, r6, #7
 800a5e6:	1d23      	adds	r3, r4, #4
 800a5e8:	1af2      	subs	r2, r6, r3
 800a5ea:	d0ae      	beq.n	800a54a <_malloc_r+0x22>
 800a5ec:	1b9b      	subs	r3, r3, r6
 800a5ee:	50a3      	str	r3, [r4, r2]
 800a5f0:	e7ab      	b.n	800a54a <_malloc_r+0x22>
 800a5f2:	42a3      	cmp	r3, r4
 800a5f4:	6862      	ldr	r2, [r4, #4]
 800a5f6:	d1dd      	bne.n	800a5b4 <_malloc_r+0x8c>
 800a5f8:	f8c8 2000 	str.w	r2, [r8]
 800a5fc:	e7ec      	b.n	800a5d8 <_malloc_r+0xb0>
 800a5fe:	4623      	mov	r3, r4
 800a600:	6864      	ldr	r4, [r4, #4]
 800a602:	e7ac      	b.n	800a55e <_malloc_r+0x36>
 800a604:	4634      	mov	r4, r6
 800a606:	6876      	ldr	r6, [r6, #4]
 800a608:	e7b4      	b.n	800a574 <_malloc_r+0x4c>
 800a60a:	4613      	mov	r3, r2
 800a60c:	e7cc      	b.n	800a5a8 <_malloc_r+0x80>
 800a60e:	230c      	movs	r3, #12
 800a610:	603b      	str	r3, [r7, #0]
 800a612:	4638      	mov	r0, r7
 800a614:	f000 f80e 	bl	800a634 <__malloc_unlock>
 800a618:	e797      	b.n	800a54a <_malloc_r+0x22>
 800a61a:	6025      	str	r5, [r4, #0]
 800a61c:	e7dc      	b.n	800a5d8 <_malloc_r+0xb0>
 800a61e:	605b      	str	r3, [r3, #4]
 800a620:	deff      	udf	#255	; 0xff
 800a622:	bf00      	nop
 800a624:	200020f8 	.word	0x200020f8

0800a628 <__malloc_lock>:
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <__malloc_lock+0x8>)
 800a62a:	f7ff bf0f 	b.w	800a44c <__retarget_lock_acquire_recursive>
 800a62e:	bf00      	nop
 800a630:	200020f4 	.word	0x200020f4

0800a634 <__malloc_unlock>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__malloc_unlock+0x8>)
 800a636:	f7ff bf0a 	b.w	800a44e <__retarget_lock_release_recursive>
 800a63a:	bf00      	nop
 800a63c:	200020f4 	.word	0x200020f4

0800a640 <__ssputs_r>:
 800a640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a644:	688e      	ldr	r6, [r1, #8]
 800a646:	461f      	mov	r7, r3
 800a648:	42be      	cmp	r6, r7
 800a64a:	680b      	ldr	r3, [r1, #0]
 800a64c:	4682      	mov	sl, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	4690      	mov	r8, r2
 800a652:	d82c      	bhi.n	800a6ae <__ssputs_r+0x6e>
 800a654:	898a      	ldrh	r2, [r1, #12]
 800a656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a65a:	d026      	beq.n	800a6aa <__ssputs_r+0x6a>
 800a65c:	6965      	ldr	r5, [r4, #20]
 800a65e:	6909      	ldr	r1, [r1, #16]
 800a660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a664:	eba3 0901 	sub.w	r9, r3, r1
 800a668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a66c:	1c7b      	adds	r3, r7, #1
 800a66e:	444b      	add	r3, r9
 800a670:	106d      	asrs	r5, r5, #1
 800a672:	429d      	cmp	r5, r3
 800a674:	bf38      	it	cc
 800a676:	461d      	movcc	r5, r3
 800a678:	0553      	lsls	r3, r2, #21
 800a67a:	d527      	bpl.n	800a6cc <__ssputs_r+0x8c>
 800a67c:	4629      	mov	r1, r5
 800a67e:	f7ff ff53 	bl	800a528 <_malloc_r>
 800a682:	4606      	mov	r6, r0
 800a684:	b360      	cbz	r0, 800a6e0 <__ssputs_r+0xa0>
 800a686:	6921      	ldr	r1, [r4, #16]
 800a688:	464a      	mov	r2, r9
 800a68a:	f000 faeb 	bl	800ac64 <memcpy>
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	6126      	str	r6, [r4, #16]
 800a69c:	6165      	str	r5, [r4, #20]
 800a69e:	444e      	add	r6, r9
 800a6a0:	eba5 0509 	sub.w	r5, r5, r9
 800a6a4:	6026      	str	r6, [r4, #0]
 800a6a6:	60a5      	str	r5, [r4, #8]
 800a6a8:	463e      	mov	r6, r7
 800a6aa:	42be      	cmp	r6, r7
 800a6ac:	d900      	bls.n	800a6b0 <__ssputs_r+0x70>
 800a6ae:	463e      	mov	r6, r7
 800a6b0:	6820      	ldr	r0, [r4, #0]
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	4641      	mov	r1, r8
 800a6b6:	f000 faab 	bl	800ac10 <memmove>
 800a6ba:	68a3      	ldr	r3, [r4, #8]
 800a6bc:	1b9b      	subs	r3, r3, r6
 800a6be:	60a3      	str	r3, [r4, #8]
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	4433      	add	r3, r6
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	462a      	mov	r2, r5
 800a6ce:	f000 fad7 	bl	800ac80 <_realloc_r>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d1e0      	bne.n	800a69a <__ssputs_r+0x5a>
 800a6d8:	6921      	ldr	r1, [r4, #16]
 800a6da:	4650      	mov	r0, sl
 800a6dc:	f7ff feb8 	bl	800a450 <_free_r>
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	f8ca 3000 	str.w	r3, [sl]
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6f2:	e7e9      	b.n	800a6c8 <__ssputs_r+0x88>

0800a6f4 <_svfiprintf_r>:
 800a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f8:	4698      	mov	r8, r3
 800a6fa:	898b      	ldrh	r3, [r1, #12]
 800a6fc:	061b      	lsls	r3, r3, #24
 800a6fe:	b09d      	sub	sp, #116	; 0x74
 800a700:	4607      	mov	r7, r0
 800a702:	460d      	mov	r5, r1
 800a704:	4614      	mov	r4, r2
 800a706:	d50e      	bpl.n	800a726 <_svfiprintf_r+0x32>
 800a708:	690b      	ldr	r3, [r1, #16]
 800a70a:	b963      	cbnz	r3, 800a726 <_svfiprintf_r+0x32>
 800a70c:	2140      	movs	r1, #64	; 0x40
 800a70e:	f7ff ff0b 	bl	800a528 <_malloc_r>
 800a712:	6028      	str	r0, [r5, #0]
 800a714:	6128      	str	r0, [r5, #16]
 800a716:	b920      	cbnz	r0, 800a722 <_svfiprintf_r+0x2e>
 800a718:	230c      	movs	r3, #12
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a720:	e0d0      	b.n	800a8c4 <_svfiprintf_r+0x1d0>
 800a722:	2340      	movs	r3, #64	; 0x40
 800a724:	616b      	str	r3, [r5, #20]
 800a726:	2300      	movs	r3, #0
 800a728:	9309      	str	r3, [sp, #36]	; 0x24
 800a72a:	2320      	movs	r3, #32
 800a72c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a730:	f8cd 800c 	str.w	r8, [sp, #12]
 800a734:	2330      	movs	r3, #48	; 0x30
 800a736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8dc <_svfiprintf_r+0x1e8>
 800a73a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a73e:	f04f 0901 	mov.w	r9, #1
 800a742:	4623      	mov	r3, r4
 800a744:	469a      	mov	sl, r3
 800a746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a74a:	b10a      	cbz	r2, 800a750 <_svfiprintf_r+0x5c>
 800a74c:	2a25      	cmp	r2, #37	; 0x25
 800a74e:	d1f9      	bne.n	800a744 <_svfiprintf_r+0x50>
 800a750:	ebba 0b04 	subs.w	fp, sl, r4
 800a754:	d00b      	beq.n	800a76e <_svfiprintf_r+0x7a>
 800a756:	465b      	mov	r3, fp
 800a758:	4622      	mov	r2, r4
 800a75a:	4629      	mov	r1, r5
 800a75c:	4638      	mov	r0, r7
 800a75e:	f7ff ff6f 	bl	800a640 <__ssputs_r>
 800a762:	3001      	adds	r0, #1
 800a764:	f000 80a9 	beq.w	800a8ba <_svfiprintf_r+0x1c6>
 800a768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a76a:	445a      	add	r2, fp
 800a76c:	9209      	str	r2, [sp, #36]	; 0x24
 800a76e:	f89a 3000 	ldrb.w	r3, [sl]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 80a1 	beq.w	800a8ba <_svfiprintf_r+0x1c6>
 800a778:	2300      	movs	r3, #0
 800a77a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a77e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a782:	f10a 0a01 	add.w	sl, sl, #1
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	9307      	str	r3, [sp, #28]
 800a78a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a78e:	931a      	str	r3, [sp, #104]	; 0x68
 800a790:	4654      	mov	r4, sl
 800a792:	2205      	movs	r2, #5
 800a794:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a798:	4850      	ldr	r0, [pc, #320]	; (800a8dc <_svfiprintf_r+0x1e8>)
 800a79a:	f7f5 fd21 	bl	80001e0 <memchr>
 800a79e:	9a04      	ldr	r2, [sp, #16]
 800a7a0:	b9d8      	cbnz	r0, 800a7da <_svfiprintf_r+0xe6>
 800a7a2:	06d0      	lsls	r0, r2, #27
 800a7a4:	bf44      	itt	mi
 800a7a6:	2320      	movmi	r3, #32
 800a7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ac:	0711      	lsls	r1, r2, #28
 800a7ae:	bf44      	itt	mi
 800a7b0:	232b      	movmi	r3, #43	; 0x2b
 800a7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a7bc:	d015      	beq.n	800a7ea <_svfiprintf_r+0xf6>
 800a7be:	9a07      	ldr	r2, [sp, #28]
 800a7c0:	4654      	mov	r4, sl
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f04f 0c0a 	mov.w	ip, #10
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ce:	3b30      	subs	r3, #48	; 0x30
 800a7d0:	2b09      	cmp	r3, #9
 800a7d2:	d94d      	bls.n	800a870 <_svfiprintf_r+0x17c>
 800a7d4:	b1b0      	cbz	r0, 800a804 <_svfiprintf_r+0x110>
 800a7d6:	9207      	str	r2, [sp, #28]
 800a7d8:	e014      	b.n	800a804 <_svfiprintf_r+0x110>
 800a7da:	eba0 0308 	sub.w	r3, r0, r8
 800a7de:	fa09 f303 	lsl.w	r3, r9, r3
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	46a2      	mov	sl, r4
 800a7e8:	e7d2      	b.n	800a790 <_svfiprintf_r+0x9c>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	1d19      	adds	r1, r3, #4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	9103      	str	r1, [sp, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bfbb      	ittet	lt
 800a7f6:	425b      	neglt	r3, r3
 800a7f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a7fc:	9307      	strge	r3, [sp, #28]
 800a7fe:	9307      	strlt	r3, [sp, #28]
 800a800:	bfb8      	it	lt
 800a802:	9204      	strlt	r2, [sp, #16]
 800a804:	7823      	ldrb	r3, [r4, #0]
 800a806:	2b2e      	cmp	r3, #46	; 0x2e
 800a808:	d10c      	bne.n	800a824 <_svfiprintf_r+0x130>
 800a80a:	7863      	ldrb	r3, [r4, #1]
 800a80c:	2b2a      	cmp	r3, #42	; 0x2a
 800a80e:	d134      	bne.n	800a87a <_svfiprintf_r+0x186>
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	1d1a      	adds	r2, r3, #4
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	9203      	str	r2, [sp, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfb8      	it	lt
 800a81c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a820:	3402      	adds	r4, #2
 800a822:	9305      	str	r3, [sp, #20]
 800a824:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a8ec <_svfiprintf_r+0x1f8>
 800a828:	7821      	ldrb	r1, [r4, #0]
 800a82a:	2203      	movs	r2, #3
 800a82c:	4650      	mov	r0, sl
 800a82e:	f7f5 fcd7 	bl	80001e0 <memchr>
 800a832:	b138      	cbz	r0, 800a844 <_svfiprintf_r+0x150>
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	eba0 000a 	sub.w	r0, r0, sl
 800a83a:	2240      	movs	r2, #64	; 0x40
 800a83c:	4082      	lsls	r2, r0
 800a83e:	4313      	orrs	r3, r2
 800a840:	3401      	adds	r4, #1
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a848:	4825      	ldr	r0, [pc, #148]	; (800a8e0 <_svfiprintf_r+0x1ec>)
 800a84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a84e:	2206      	movs	r2, #6
 800a850:	f7f5 fcc6 	bl	80001e0 <memchr>
 800a854:	2800      	cmp	r0, #0
 800a856:	d038      	beq.n	800a8ca <_svfiprintf_r+0x1d6>
 800a858:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <_svfiprintf_r+0x1f0>)
 800a85a:	bb1b      	cbnz	r3, 800a8a4 <_svfiprintf_r+0x1b0>
 800a85c:	9b03      	ldr	r3, [sp, #12]
 800a85e:	3307      	adds	r3, #7
 800a860:	f023 0307 	bic.w	r3, r3, #7
 800a864:	3308      	adds	r3, #8
 800a866:	9303      	str	r3, [sp, #12]
 800a868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86a:	4433      	add	r3, r6
 800a86c:	9309      	str	r3, [sp, #36]	; 0x24
 800a86e:	e768      	b.n	800a742 <_svfiprintf_r+0x4e>
 800a870:	fb0c 3202 	mla	r2, ip, r2, r3
 800a874:	460c      	mov	r4, r1
 800a876:	2001      	movs	r0, #1
 800a878:	e7a6      	b.n	800a7c8 <_svfiprintf_r+0xd4>
 800a87a:	2300      	movs	r3, #0
 800a87c:	3401      	adds	r4, #1
 800a87e:	9305      	str	r3, [sp, #20]
 800a880:	4619      	mov	r1, r3
 800a882:	f04f 0c0a 	mov.w	ip, #10
 800a886:	4620      	mov	r0, r4
 800a888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a88c:	3a30      	subs	r2, #48	; 0x30
 800a88e:	2a09      	cmp	r2, #9
 800a890:	d903      	bls.n	800a89a <_svfiprintf_r+0x1a6>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0c6      	beq.n	800a824 <_svfiprintf_r+0x130>
 800a896:	9105      	str	r1, [sp, #20]
 800a898:	e7c4      	b.n	800a824 <_svfiprintf_r+0x130>
 800a89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a89e:	4604      	mov	r4, r0
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e7f0      	b.n	800a886 <_svfiprintf_r+0x192>
 800a8a4:	ab03      	add	r3, sp, #12
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <_svfiprintf_r+0x1f4>)
 800a8ac:	a904      	add	r1, sp, #16
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f3af 8000 	nop.w
 800a8b4:	1c42      	adds	r2, r0, #1
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	d1d6      	bne.n	800a868 <_svfiprintf_r+0x174>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	065b      	lsls	r3, r3, #25
 800a8be:	f53f af2d 	bmi.w	800a71c <_svfiprintf_r+0x28>
 800a8c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c4:	b01d      	add	sp, #116	; 0x74
 800a8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ca:	ab03      	add	r3, sp, #12
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <_svfiprintf_r+0x1f4>)
 800a8d2:	a904      	add	r1, sp, #16
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f000 f879 	bl	800a9cc <_printf_i>
 800a8da:	e7eb      	b.n	800a8b4 <_svfiprintf_r+0x1c0>
 800a8dc:	0800ada8 	.word	0x0800ada8
 800a8e0:	0800adb2 	.word	0x0800adb2
 800a8e4:	00000000 	.word	0x00000000
 800a8e8:	0800a641 	.word	0x0800a641
 800a8ec:	0800adae 	.word	0x0800adae

0800a8f0 <_printf_common>:
 800a8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	4699      	mov	r9, r3
 800a8f8:	688a      	ldr	r2, [r1, #8]
 800a8fa:	690b      	ldr	r3, [r1, #16]
 800a8fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a900:	4293      	cmp	r3, r2
 800a902:	bfb8      	it	lt
 800a904:	4613      	movlt	r3, r2
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a90c:	4607      	mov	r7, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	b10a      	cbz	r2, 800a916 <_printf_common+0x26>
 800a912:	3301      	adds	r3, #1
 800a914:	6033      	str	r3, [r6, #0]
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	0699      	lsls	r1, r3, #26
 800a91a:	bf42      	ittt	mi
 800a91c:	6833      	ldrmi	r3, [r6, #0]
 800a91e:	3302      	addmi	r3, #2
 800a920:	6033      	strmi	r3, [r6, #0]
 800a922:	6825      	ldr	r5, [r4, #0]
 800a924:	f015 0506 	ands.w	r5, r5, #6
 800a928:	d106      	bne.n	800a938 <_printf_common+0x48>
 800a92a:	f104 0a19 	add.w	sl, r4, #25
 800a92e:	68e3      	ldr	r3, [r4, #12]
 800a930:	6832      	ldr	r2, [r6, #0]
 800a932:	1a9b      	subs	r3, r3, r2
 800a934:	42ab      	cmp	r3, r5
 800a936:	dc26      	bgt.n	800a986 <_printf_common+0x96>
 800a938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a93c:	1e13      	subs	r3, r2, #0
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	bf18      	it	ne
 800a942:	2301      	movne	r3, #1
 800a944:	0692      	lsls	r2, r2, #26
 800a946:	d42b      	bmi.n	800a9a0 <_printf_common+0xb0>
 800a948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a94c:	4649      	mov	r1, r9
 800a94e:	4638      	mov	r0, r7
 800a950:	47c0      	blx	r8
 800a952:	3001      	adds	r0, #1
 800a954:	d01e      	beq.n	800a994 <_printf_common+0xa4>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	6922      	ldr	r2, [r4, #16]
 800a95a:	f003 0306 	and.w	r3, r3, #6
 800a95e:	2b04      	cmp	r3, #4
 800a960:	bf02      	ittt	eq
 800a962:	68e5      	ldreq	r5, [r4, #12]
 800a964:	6833      	ldreq	r3, [r6, #0]
 800a966:	1aed      	subeq	r5, r5, r3
 800a968:	68a3      	ldr	r3, [r4, #8]
 800a96a:	bf0c      	ite	eq
 800a96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a970:	2500      	movne	r5, #0
 800a972:	4293      	cmp	r3, r2
 800a974:	bfc4      	itt	gt
 800a976:	1a9b      	subgt	r3, r3, r2
 800a978:	18ed      	addgt	r5, r5, r3
 800a97a:	2600      	movs	r6, #0
 800a97c:	341a      	adds	r4, #26
 800a97e:	42b5      	cmp	r5, r6
 800a980:	d11a      	bne.n	800a9b8 <_printf_common+0xc8>
 800a982:	2000      	movs	r0, #0
 800a984:	e008      	b.n	800a998 <_printf_common+0xa8>
 800a986:	2301      	movs	r3, #1
 800a988:	4652      	mov	r2, sl
 800a98a:	4649      	mov	r1, r9
 800a98c:	4638      	mov	r0, r7
 800a98e:	47c0      	blx	r8
 800a990:	3001      	adds	r0, #1
 800a992:	d103      	bne.n	800a99c <_printf_common+0xac>
 800a994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99c:	3501      	adds	r5, #1
 800a99e:	e7c6      	b.n	800a92e <_printf_common+0x3e>
 800a9a0:	18e1      	adds	r1, r4, r3
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	2030      	movs	r0, #48	; 0x30
 800a9a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9aa:	4422      	add	r2, r4
 800a9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	e7c7      	b.n	800a948 <_printf_common+0x58>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4649      	mov	r1, r9
 800a9be:	4638      	mov	r0, r7
 800a9c0:	47c0      	blx	r8
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	d0e6      	beq.n	800a994 <_printf_common+0xa4>
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	e7d9      	b.n	800a97e <_printf_common+0x8e>
	...

0800a9cc <_printf_i>:
 800a9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	7e0f      	ldrb	r7, [r1, #24]
 800a9d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9d4:	2f78      	cmp	r7, #120	; 0x78
 800a9d6:	4691      	mov	r9, r2
 800a9d8:	4680      	mov	r8, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	469a      	mov	sl, r3
 800a9de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9e2:	d807      	bhi.n	800a9f4 <_printf_i+0x28>
 800a9e4:	2f62      	cmp	r7, #98	; 0x62
 800a9e6:	d80a      	bhi.n	800a9fe <_printf_i+0x32>
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	f000 80d4 	beq.w	800ab96 <_printf_i+0x1ca>
 800a9ee:	2f58      	cmp	r7, #88	; 0x58
 800a9f0:	f000 80c0 	beq.w	800ab74 <_printf_i+0x1a8>
 800a9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9fc:	e03a      	b.n	800aa74 <_printf_i+0xa8>
 800a9fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa02:	2b15      	cmp	r3, #21
 800aa04:	d8f6      	bhi.n	800a9f4 <_printf_i+0x28>
 800aa06:	a101      	add	r1, pc, #4	; (adr r1, 800aa0c <_printf_i+0x40>)
 800aa08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800a9f5 	.word	0x0800a9f5
 800aa18:	0800a9f5 	.word	0x0800a9f5
 800aa1c:	0800a9f5 	.word	0x0800a9f5
 800aa20:	0800a9f5 	.word	0x0800a9f5
 800aa24:	0800aa79 	.word	0x0800aa79
 800aa28:	0800a9f5 	.word	0x0800a9f5
 800aa2c:	0800a9f5 	.word	0x0800a9f5
 800aa30:	0800a9f5 	.word	0x0800a9f5
 800aa34:	0800a9f5 	.word	0x0800a9f5
 800aa38:	0800ab7d 	.word	0x0800ab7d
 800aa3c:	0800aaa5 	.word	0x0800aaa5
 800aa40:	0800ab37 	.word	0x0800ab37
 800aa44:	0800a9f5 	.word	0x0800a9f5
 800aa48:	0800a9f5 	.word	0x0800a9f5
 800aa4c:	0800ab9f 	.word	0x0800ab9f
 800aa50:	0800a9f5 	.word	0x0800a9f5
 800aa54:	0800aaa5 	.word	0x0800aaa5
 800aa58:	0800a9f5 	.word	0x0800a9f5
 800aa5c:	0800a9f5 	.word	0x0800a9f5
 800aa60:	0800ab3f 	.word	0x0800ab3f
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	602a      	str	r2, [r5, #0]
 800aa6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa74:	2301      	movs	r3, #1
 800aa76:	e09f      	b.n	800abb8 <_printf_i+0x1ec>
 800aa78:	6820      	ldr	r0, [r4, #0]
 800aa7a:	682b      	ldr	r3, [r5, #0]
 800aa7c:	0607      	lsls	r7, r0, #24
 800aa7e:	f103 0104 	add.w	r1, r3, #4
 800aa82:	6029      	str	r1, [r5, #0]
 800aa84:	d501      	bpl.n	800aa8a <_printf_i+0xbe>
 800aa86:	681e      	ldr	r6, [r3, #0]
 800aa88:	e003      	b.n	800aa92 <_printf_i+0xc6>
 800aa8a:	0646      	lsls	r6, r0, #25
 800aa8c:	d5fb      	bpl.n	800aa86 <_printf_i+0xba>
 800aa8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	da03      	bge.n	800aa9e <_printf_i+0xd2>
 800aa96:	232d      	movs	r3, #45	; 0x2d
 800aa98:	4276      	negs	r6, r6
 800aa9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa9e:	485a      	ldr	r0, [pc, #360]	; (800ac08 <_printf_i+0x23c>)
 800aaa0:	230a      	movs	r3, #10
 800aaa2:	e012      	b.n	800aaca <_printf_i+0xfe>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	6820      	ldr	r0, [r4, #0]
 800aaa8:	1d19      	adds	r1, r3, #4
 800aaaa:	6029      	str	r1, [r5, #0]
 800aaac:	0605      	lsls	r5, r0, #24
 800aaae:	d501      	bpl.n	800aab4 <_printf_i+0xe8>
 800aab0:	681e      	ldr	r6, [r3, #0]
 800aab2:	e002      	b.n	800aaba <_printf_i+0xee>
 800aab4:	0641      	lsls	r1, r0, #25
 800aab6:	d5fb      	bpl.n	800aab0 <_printf_i+0xe4>
 800aab8:	881e      	ldrh	r6, [r3, #0]
 800aaba:	4853      	ldr	r0, [pc, #332]	; (800ac08 <_printf_i+0x23c>)
 800aabc:	2f6f      	cmp	r7, #111	; 0x6f
 800aabe:	bf0c      	ite	eq
 800aac0:	2308      	moveq	r3, #8
 800aac2:	230a      	movne	r3, #10
 800aac4:	2100      	movs	r1, #0
 800aac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaca:	6865      	ldr	r5, [r4, #4]
 800aacc:	60a5      	str	r5, [r4, #8]
 800aace:	2d00      	cmp	r5, #0
 800aad0:	bfa2      	ittt	ge
 800aad2:	6821      	ldrge	r1, [r4, #0]
 800aad4:	f021 0104 	bicge.w	r1, r1, #4
 800aad8:	6021      	strge	r1, [r4, #0]
 800aada:	b90e      	cbnz	r6, 800aae0 <_printf_i+0x114>
 800aadc:	2d00      	cmp	r5, #0
 800aade:	d04b      	beq.n	800ab78 <_printf_i+0x1ac>
 800aae0:	4615      	mov	r5, r2
 800aae2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aae6:	fb03 6711 	mls	r7, r3, r1, r6
 800aaea:	5dc7      	ldrb	r7, [r0, r7]
 800aaec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaf0:	4637      	mov	r7, r6
 800aaf2:	42bb      	cmp	r3, r7
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	d9f4      	bls.n	800aae2 <_printf_i+0x116>
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d10b      	bne.n	800ab14 <_printf_i+0x148>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	07de      	lsls	r6, r3, #31
 800ab00:	d508      	bpl.n	800ab14 <_printf_i+0x148>
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	6861      	ldr	r1, [r4, #4]
 800ab06:	4299      	cmp	r1, r3
 800ab08:	bfde      	ittt	le
 800ab0a:	2330      	movle	r3, #48	; 0x30
 800ab0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ab14:	1b52      	subs	r2, r2, r5
 800ab16:	6122      	str	r2, [r4, #16]
 800ab18:	f8cd a000 	str.w	sl, [sp]
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	aa03      	add	r2, sp, #12
 800ab20:	4621      	mov	r1, r4
 800ab22:	4640      	mov	r0, r8
 800ab24:	f7ff fee4 	bl	800a8f0 <_printf_common>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d14a      	bne.n	800abc2 <_printf_i+0x1f6>
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab30:	b004      	add	sp, #16
 800ab32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	f043 0320 	orr.w	r3, r3, #32
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	4833      	ldr	r0, [pc, #204]	; (800ac0c <_printf_i+0x240>)
 800ab40:	2778      	movs	r7, #120	; 0x78
 800ab42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	6829      	ldr	r1, [r5, #0]
 800ab4a:	061f      	lsls	r7, r3, #24
 800ab4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab50:	d402      	bmi.n	800ab58 <_printf_i+0x18c>
 800ab52:	065f      	lsls	r7, r3, #25
 800ab54:	bf48      	it	mi
 800ab56:	b2b6      	uxthmi	r6, r6
 800ab58:	07df      	lsls	r7, r3, #31
 800ab5a:	bf48      	it	mi
 800ab5c:	f043 0320 	orrmi.w	r3, r3, #32
 800ab60:	6029      	str	r1, [r5, #0]
 800ab62:	bf48      	it	mi
 800ab64:	6023      	strmi	r3, [r4, #0]
 800ab66:	b91e      	cbnz	r6, 800ab70 <_printf_i+0x1a4>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	f023 0320 	bic.w	r3, r3, #32
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	2310      	movs	r3, #16
 800ab72:	e7a7      	b.n	800aac4 <_printf_i+0xf8>
 800ab74:	4824      	ldr	r0, [pc, #144]	; (800ac08 <_printf_i+0x23c>)
 800ab76:	e7e4      	b.n	800ab42 <_printf_i+0x176>
 800ab78:	4615      	mov	r5, r2
 800ab7a:	e7bd      	b.n	800aaf8 <_printf_i+0x12c>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	6826      	ldr	r6, [r4, #0]
 800ab80:	6961      	ldr	r1, [r4, #20]
 800ab82:	1d18      	adds	r0, r3, #4
 800ab84:	6028      	str	r0, [r5, #0]
 800ab86:	0635      	lsls	r5, r6, #24
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	d501      	bpl.n	800ab90 <_printf_i+0x1c4>
 800ab8c:	6019      	str	r1, [r3, #0]
 800ab8e:	e002      	b.n	800ab96 <_printf_i+0x1ca>
 800ab90:	0670      	lsls	r0, r6, #25
 800ab92:	d5fb      	bpl.n	800ab8c <_printf_i+0x1c0>
 800ab94:	8019      	strh	r1, [r3, #0]
 800ab96:	2300      	movs	r3, #0
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	4615      	mov	r5, r2
 800ab9c:	e7bc      	b.n	800ab18 <_printf_i+0x14c>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	1d1a      	adds	r2, r3, #4
 800aba2:	602a      	str	r2, [r5, #0]
 800aba4:	681d      	ldr	r5, [r3, #0]
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4628      	mov	r0, r5
 800abac:	f7f5 fb18 	bl	80001e0 <memchr>
 800abb0:	b108      	cbz	r0, 800abb6 <_printf_i+0x1ea>
 800abb2:	1b40      	subs	r0, r0, r5
 800abb4:	6060      	str	r0, [r4, #4]
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	6123      	str	r3, [r4, #16]
 800abba:	2300      	movs	r3, #0
 800abbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc0:	e7aa      	b.n	800ab18 <_printf_i+0x14c>
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	462a      	mov	r2, r5
 800abc6:	4649      	mov	r1, r9
 800abc8:	4640      	mov	r0, r8
 800abca:	47d0      	blx	sl
 800abcc:	3001      	adds	r0, #1
 800abce:	d0ad      	beq.n	800ab2c <_printf_i+0x160>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	079b      	lsls	r3, r3, #30
 800abd4:	d413      	bmi.n	800abfe <_printf_i+0x232>
 800abd6:	68e0      	ldr	r0, [r4, #12]
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	4298      	cmp	r0, r3
 800abdc:	bfb8      	it	lt
 800abde:	4618      	movlt	r0, r3
 800abe0:	e7a6      	b.n	800ab30 <_printf_i+0x164>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4632      	mov	r2, r6
 800abe6:	4649      	mov	r1, r9
 800abe8:	4640      	mov	r0, r8
 800abea:	47d0      	blx	sl
 800abec:	3001      	adds	r0, #1
 800abee:	d09d      	beq.n	800ab2c <_printf_i+0x160>
 800abf0:	3501      	adds	r5, #1
 800abf2:	68e3      	ldr	r3, [r4, #12]
 800abf4:	9903      	ldr	r1, [sp, #12]
 800abf6:	1a5b      	subs	r3, r3, r1
 800abf8:	42ab      	cmp	r3, r5
 800abfa:	dcf2      	bgt.n	800abe2 <_printf_i+0x216>
 800abfc:	e7eb      	b.n	800abd6 <_printf_i+0x20a>
 800abfe:	2500      	movs	r5, #0
 800ac00:	f104 0619 	add.w	r6, r4, #25
 800ac04:	e7f5      	b.n	800abf2 <_printf_i+0x226>
 800ac06:	bf00      	nop
 800ac08:	0800adb9 	.word	0x0800adb9
 800ac0c:	0800adca 	.word	0x0800adca

0800ac10 <memmove>:
 800ac10:	4288      	cmp	r0, r1
 800ac12:	b510      	push	{r4, lr}
 800ac14:	eb01 0402 	add.w	r4, r1, r2
 800ac18:	d902      	bls.n	800ac20 <memmove+0x10>
 800ac1a:	4284      	cmp	r4, r0
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	d807      	bhi.n	800ac30 <memmove+0x20>
 800ac20:	1e43      	subs	r3, r0, #1
 800ac22:	42a1      	cmp	r1, r4
 800ac24:	d008      	beq.n	800ac38 <memmove+0x28>
 800ac26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac2e:	e7f8      	b.n	800ac22 <memmove+0x12>
 800ac30:	4402      	add	r2, r0
 800ac32:	4601      	mov	r1, r0
 800ac34:	428a      	cmp	r2, r1
 800ac36:	d100      	bne.n	800ac3a <memmove+0x2a>
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac42:	e7f7      	b.n	800ac34 <memmove+0x24>

0800ac44 <_sbrk_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d06      	ldr	r5, [pc, #24]	; (800ac60 <_sbrk_r+0x1c>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f7 f808 	bl	8001c64 <_sbrk>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_sbrk_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_sbrk_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	200020f0 	.word	0x200020f0

0800ac64 <memcpy>:
 800ac64:	440a      	add	r2, r1
 800ac66:	4291      	cmp	r1, r2
 800ac68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac6c:	d100      	bne.n	800ac70 <memcpy+0xc>
 800ac6e:	4770      	bx	lr
 800ac70:	b510      	push	{r4, lr}
 800ac72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac7a:	4291      	cmp	r1, r2
 800ac7c:	d1f9      	bne.n	800ac72 <memcpy+0xe>
 800ac7e:	bd10      	pop	{r4, pc}

0800ac80 <_realloc_r>:
 800ac80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac84:	4680      	mov	r8, r0
 800ac86:	4614      	mov	r4, r2
 800ac88:	460e      	mov	r6, r1
 800ac8a:	b921      	cbnz	r1, 800ac96 <_realloc_r+0x16>
 800ac8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac90:	4611      	mov	r1, r2
 800ac92:	f7ff bc49 	b.w	800a528 <_malloc_r>
 800ac96:	b92a      	cbnz	r2, 800aca4 <_realloc_r+0x24>
 800ac98:	f7ff fbda 	bl	800a450 <_free_r>
 800ac9c:	4625      	mov	r5, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	f000 f81b 	bl	800acde <_malloc_usable_size_r>
 800aca8:	4284      	cmp	r4, r0
 800acaa:	4607      	mov	r7, r0
 800acac:	d802      	bhi.n	800acb4 <_realloc_r+0x34>
 800acae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acb2:	d812      	bhi.n	800acda <_realloc_r+0x5a>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4640      	mov	r0, r8
 800acb8:	f7ff fc36 	bl	800a528 <_malloc_r>
 800acbc:	4605      	mov	r5, r0
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0ed      	beq.n	800ac9e <_realloc_r+0x1e>
 800acc2:	42bc      	cmp	r4, r7
 800acc4:	4622      	mov	r2, r4
 800acc6:	4631      	mov	r1, r6
 800acc8:	bf28      	it	cs
 800acca:	463a      	movcs	r2, r7
 800accc:	f7ff ffca 	bl	800ac64 <memcpy>
 800acd0:	4631      	mov	r1, r6
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7ff fbbc 	bl	800a450 <_free_r>
 800acd8:	e7e1      	b.n	800ac9e <_realloc_r+0x1e>
 800acda:	4635      	mov	r5, r6
 800acdc:	e7df      	b.n	800ac9e <_realloc_r+0x1e>

0800acde <_malloc_usable_size_r>:
 800acde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace2:	1f18      	subs	r0, r3, #4
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	bfbc      	itt	lt
 800ace8:	580b      	ldrlt	r3, [r1, r0]
 800acea:	18c0      	addlt	r0, r0, r3
 800acec:	4770      	bx	lr
	...

0800acf0 <_init>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr

0800acfc <_fini>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr
